
Pacemaker.elf:     file format elf32-littlenios2
Pacemaker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000e024 memsz 0x0000e024 flags r-x
    LOAD off    0x0000f044 vaddr 0x0080e044 paddr 0x0080fc9c align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x000118f4 vaddr 0x008118f4 paddr 0x008118f4 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d9e8  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000418  0080dc2c  0080dc2c  0000ec2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  0080e044  0080fc9c  0000f044  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  008118f4  008118f4  000118f4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00811a4c  00811a4c  00010c9c  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00010c9c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00010c9c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d80  00000000  00000000  00010cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001f27e  00000000  00000000  00011a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000083d1  00000000  00000000  00030cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a66d  00000000  00000000  0003908f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001df8  00000000  00000000  000436fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000386c  00000000  00000000  000454f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000974b  00000000  00000000  00048d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000524ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000f58  00000000  00000000  00052510  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000562f9  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000562fc  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000562ff  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00056300  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00056301  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0005630a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00056313  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0005631c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000020  00000000  00000000  00056328  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  00056348  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080dc2c l    d  .rodata	00000000 .rodata
0080e044 l    d  .rwdata	00000000 .rwdata
008118f4 l    d  .bss	00000000 .bss
00811a4c l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Git/Pacemaker/software/Pacemaker_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 chart.c
00000000 l    df *ABS*	00000000 main.c
008118f4 l     O .bss	00000001 input.3109
00000000 l    df *ABS*	00000000 state.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080683c l     F .text	00000008 __fp_unlock
00806850 l     F .text	0000019c __sinit.part.1
008069ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0080e044 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 refill.c
008083d0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00809ba0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00809cac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00809cd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00809dc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00809ea4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00809f90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080a164 l     F .text	0000003c alt_get_errno
0080a1a0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080a3b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080fc84 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080a7a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080a8dc l     F .text	00000034 alt_dev_reg
0080ea18 l     O .rwdata	00001060 jtag_uart
0080fa78 l     O .rwdata	00000120 lcd
0080fb98 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080ac04 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080ae10 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080fc90 l     O .rwdata	00000004 colstart
0080b448 l     F .text	000000b8 lcd_write_command
0080b500 l     F .text	000000d8 lcd_write_data
0080b5d8 l     F .text	000000d0 lcd_clear_screen
0080b6a8 l     F .text	000001ec lcd_repaint_screen
0080b894 l     F .text	000000cc lcd_scroll_up
0080b960 l     F .text	000002ac lcd_handle_escape
0080c0e4 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080c324 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080c5d4 l     F .text	0000009c altera_avalon_uart_irq
0080c670 l     F .text	000000e4 altera_avalon_uart_rxirq
0080c754 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080c8f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080cb08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080cd38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080d3e8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080dec3 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00811920 g     O .bss	00000004 alt_instruction_exception_handler
00808d6c g     F .text	00000054 _isatty_r
0080a0a0 g     F .text	0000007c alt_main
0081194c g     O .bss	00000100 alt_irq
00808dc0 g     F .text	00000060 _lseek_r
0080fc9c g       *ABS*	00000000 __flash_rwdata_start
00808804 g     F .text	000000ac __sflags
00811a4c g       *ABS*	00000000 __alt_heap_start
008086ec g     F .text	0000005c __sseek
00806b8c g     F .text	00000010 __sinit
008069f4 g     F .text	00000068 __sfmoreglue
0080a140 g     F .text	00000024 __malloc_unlock
0080904c g     F .text	0000015c memmove
00806b74 g     F .text	00000018 _cleanup
008051a0 g     F .text	000000dc .hidden __gtdf2
0080d558 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080759c g     F .text	0000005c _fstat_r
008118f8 g     O .bss	00000004 errno
00808668 g     F .text	00000008 __seofread
0081190c g     O .bss	00000004 alt_argv
00817c5c g       *ABS*	00000000 _gp
0080d528 g     F .text	00000030 usleep
00803fe4 g     F .text	00000100 reset
0080e898 g     O .rwdata	00000180 alt_fd_list
0080ced8 g     F .text	00000090 alt_find_dev
00808f04 g     F .text	00000148 memcpy
00806844 g     F .text	0000000c _cleanup_r
0080d4ac g     F .text	0000007c alt_io_redirect
0080527c g     F .text	000000f4 .hidden __ltdf2
0080dc2c g       *ABS*	00000000 __DTOR_END__
0080d764 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080b008 g     F .text	0000021c altera_avalon_jtag_uart_read
008099b8 g     F .text	00000064 .hidden __udivsi3
00809e00 g     F .text	000000a4 isatty
0080d6d4 g     F .text	00000090 alt_icache_flush
00811904 g     O .bss	00000004 __malloc_top_pad
008088b0 g     F .text	000004bc __sfvwrite_r
008085c0 g     F .text	00000054 _sbrk_r
008091a8 g     F .text	00000060 _read_r
0080fc7c g     O .rwdata	00000004 alt_max_fd
00806490 g     F .text	000000f0 _fclose_r
0080680c g     F .text	00000030 fflush
00811900 g     O .bss	00000004 __malloc_max_sbrked_mem
008048f4 g     F .text	000008ac .hidden __adddf3
00809fcc g     F .text	000000d4 lseek
0080fc5c g     O .rwdata	00000004 _global_impure_ptr
00809208 g     F .text	00000564 _realloc_r
00811a4c g       *ABS*	00000000 __bss_end
0080d2f8 g     F .text	000000f0 alt_iic_isr_register
0080a6a0 g     F .text	00000108 alt_tick
00806384 g     F .text	000000a8 .hidden __floatunsidf
0080c528 g     F .text	000000ac altera_avalon_uart_init
00806bac g     F .text	00000018 __fp_lock_all
0080d2ac g     F .text	0000004c alt_ic_irq_enabled
0080a604 g     F .text	0000009c alt_alarm_stop
0081191c g     O .bss	00000004 alt_irq_active
0080713c g     F .text	00000444 _fseeko_r
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080e870 g     O .rwdata	00000028 alt_dev_null
0080ccf0 g     F .text	00000048 alt_dcache_flush_all
0080fc9c g       *ABS*	00000000 __ram_rwdata_end
0080fc74 g     O .rwdata	00000008 alt_dev_list
0080a7e4 g     F .text	000000f8 write
0080e044 g       *ABS*	00000000 __ram_rodata_end
00809d14 g     F .text	000000b0 fstat
0080527c g     F .text	000000f4 .hidden __ledf2
00809a1c g     F .text	00000058 .hidden __umodsi3
00811a4c g       *ABS*	00000000 end
0080bc0c g     F .text	000004d8 altera_avalon_lcd_16207_write
00807580 g     F .text	0000001c fseeko
0080cb44 g     F .text	000001ac altera_avalon_uart_write
00807120 g     F .text	0000001c fseek
0080ab44 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0080dc2c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080c39c g     F .text	0000007c alt_avalon_timer_sc_init
0080c478 g     F .text	00000060 altera_avalon_uart_write_fd
0080642c g     F .text	00000064 .hidden __clzsi2
0080c4d8 g     F .text	00000050 altera_avalon_uart_close_fd
0080b224 g     F .text	00000224 altera_avalon_jtag_uart_write
00806b9c g     F .text	00000004 __sfp_lock_acquire
00808e20 g     F .text	000000e4 memchr
00806e0c g     F .text	00000310 _free_r
0080da78 g     F .text	00000180 __call_exitprocs
0080fc64 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00811914 g     O .bss	00000004 _alt_tick_rate
00804884 g     F .text	00000070 .hidden __floatundidf
00811918 g     O .bss	00000004 _alt_nticks
0080a3f4 g     F .text	000000fc read
0080a948 g     F .text	00000098 alt_sys_init
00808370 g     F .text	00000060 _open_r
0080d960 g     F .text	00000118 __register_exitproc
0080aeb0 g     F .text	00000068 altera_avalon_jtag_uart_close
0080e044 g       *ABS*	00000000 __ram_rwdata_start
0080dc2c g       *ABS*	00000000 __ram_rodata_start
00811924 g     O .bss	00000028 __malloc_current_mallinfo
0080a9e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080d070 g     F .text	000000a4 alt_get_fd
0080d57c g     F .text	00000158 alt_busy_sleep
008087b0 g     F .text	00000054 _close_r
0080d84c g     F .text	0000007c memcmp
0080aaa0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00811a4c g       *ABS*	00000000 __alt_stack_base
0080aaf0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00807780 g     F .text	000000cc _fwrite_r
0080976c g     F .text	00000154 __swsetup_r
008040e4 g     F .text	0000016c tick
00806a5c g     F .text	00000118 __sfp
0080e468 g     O .rwdata	00000408 __malloc_av_
00806ba8 g     F .text	00000004 __sinit_lock_release
00805370 g     F .text	00000718 .hidden __muldf3
00808614 g     F .text	00000054 __sread
0080cf68 g     F .text	00000108 alt_find_file
0080cd74 g     F .text	000000a4 alt_dev_llist_insert
0080a11c g     F .text	00000024 __malloc_lock
0080a554 g     F .text	000000b0 sbrk
008067b0 g     F .text	0000005c _fflush_r
00806cd0 g     F .text	00000018 fopen
008118f4 g       *ABS*	00000000 __bss_start
00808248 g     F .text	00000128 memset
00804290 g     F .text	000004dc main
00811910 g     O .bss	00000004 alt_envp
008118fc g     O .bss	00000004 __malloc_max_total_mem
0080aa40 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080c190 g     F .text	00000134 altera_avalon_lcd_16207_init
00808748 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00806580 g     F .text	00000014 fclose
00807a3c g     F .text	0000080c _malloc_r
0080fc80 g     O .rwdata	00000004 alt_errno
008075f8 g     F .text	000000c4 _fwalk
008098c0 g     F .text	00000084 .hidden __divsi3
00806ce8 g     F .text	00000124 _malloc_trim_r
0080dc2c g       *ABS*	00000000 __CTOR_END__
0080dc2c g       *ABS*	00000000 __flash_rodata_start
0080dc2c g       *ABS*	00000000 __DTOR_LIST__
0080a910 g     F .text	00000038 alt_irq_init
0080a4f0 g     F .text	00000064 alt_release_fd
0080dc79 g     O .rodata	00000100 .hidden __clz_tab
0080d800 g     F .text	00000014 atexit
00808750 g     F .text	00000060 _write_r
0080fc60 g     O .rwdata	00000004 _impure_ptr
00811908 g     O .bss	00000004 alt_argc
00806594 g     F .text	0000021c __sflush_r
0080ce78 g     F .text	00000060 _do_dtors
0080711c g     F .text	00000004 _fseek_r
008083ec g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00806bc4 g     F .text	00000018 __fp_unlock_all
0080c2c4 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0080fc6c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00804250 g     F .text	00000040 timerISR
0080d148 g     F .text	00000050 alt_ic_isr_register
0080784c g     F .text	00000034 fwrite
0080fc9c g       *ABS*	00000000 _edata
0080c418 g     F .text	00000060 altera_avalon_uart_read_fd
00811a4c g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080af18 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080d220 g     F .text	0000008c alt_ic_irq_disable
00808670 g     F .text	0000007c __swrite
0080fc68 g     O .rwdata	00000004 __malloc_trim_threshold
0080d814 g     F .text	00000038 exit
008076bc g     F .text	000000c4 _fwalk_reent
00809944 g     F .text	00000074 .hidden __modsi3
00800290 g     F .text	00003d54 logic
0080fc98 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00806ba0 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080ddc2 g     O .rodata	00000101 _ctype_
0080c89c g     F .text	00000054 altera_avalon_uart_close
00806bdc g     F .text	000000f4 _fopen_r
0080dbf8 g     F .text	00000034 _exit
00809a74 g     F .text	0000012c alt_alarm_start
00807880 g     F .text	000001bc __smakebuf_r
0080d8c8 g     F .text	00000098 strlen
0080a264 g     F .text	00000154 open
008051a0 g     F .text	000000dc .hidden __gedf2
0080d114 g     F .text	00000034 alt_icache_flush_all
0080fc94 g     O .rwdata	00000004 alt_priority_mask
0080d198 g     F .text	00000088 alt_ic_irq_enable
0080c92c g     F .text	000001dc altera_avalon_uart_read
00805a88 g     F .text	000008fc .hidden __subdf3
0080476c g     F .text	00000118 updateState
0080fc88 g     O .rwdata	00000008 alt_alarm_list
0080ce18 g     F .text	00000060 _do_ctors
00809bdc g     F .text	000000d0 close
00809f0c g     F .text	00000084 alt_load
00806ba4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10865304 	addi	r2,r2,6476
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10865304 	addi	r2,r2,6476
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a73117 	ldw	r2,-25404(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a73117 	ldw	r2,-25404(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d69f1714 	ori	gp,gp,31836
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10863d14 	ori	r2,r2,6388

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18c69314 	ori	r3,r3,6732

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	0809f0c0 	call	809f0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080a0a00 	call	80a0a0 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <logic>:
#include "../inc/timing.h"
#include "../inc/chart.h"



void logic(TickData* d) {
  800290:	defffb04 	addi	sp,sp,-20
  800294:	dfc00415 	stw	ra,16(sp)
  800298:	df000315 	stw	fp,12(sp)
  80029c:	dc400215 	stw	r17,8(sp)
  8002a0:	dc000115 	stw	r16,4(sp)
  8002a4:	df000304 	addi	fp,sp,12
  8002a8:	e13ffd15 	stw	r4,-12(fp)
  d->_g45 = d->_pg36;
  8002ac:	e0bffd17 	ldw	r2,-12(fp)
  8002b0:	10c02b43 	ldbu	r3,173(r2)
  8002b4:	e0bffd17 	ldw	r2,-12(fp)
  8002b8:	10c01145 	stb	r3,69(r2)
  if (d->_g45) {
  8002bc:	e0bffd17 	ldw	r2,-12(fp)
  8002c0:	10801143 	ldbu	r2,69(r2)
  8002c4:	10803fcc 	andi	r2,r2,255
  8002c8:	1080201c 	xori	r2,r2,128
  8002cc:	10bfe004 	addi	r2,r2,-128
  8002d0:	10001226 	beq	r2,zero,80031c <logic+0x8c>
    d->_region0_Atrium_VentricleTimer += d->deltaT;
  8002d4:	e13ffd17 	ldw	r4,-12(fp)
  8002d8:	20800017 	ldw	r2,0(r4)
  8002dc:	20c00117 	ldw	r3,4(r4)
  8002e0:	e1bffd17 	ldw	r6,-12(fp)
  8002e4:	31000417 	ldw	r4,16(r6)
  8002e8:	31400517 	ldw	r5,20(r6)
  8002ec:	200d883a 	mov	r6,r4
  8002f0:	280f883a 	mov	r7,r5
  8002f4:	1009883a 	mov	r4,r2
  8002f8:	180b883a 	mov	r5,r3
  8002fc:	08048f40 	call	8048f4 <__adddf3>
  800300:	1009883a 	mov	r4,r2
  800304:	180b883a 	mov	r5,r3
  800308:	2005883a 	mov	r2,r4
  80030c:	2807883a 	mov	r3,r5
  800310:	e13ffd17 	ldw	r4,-12(fp)
  800314:	20800015 	stw	r2,0(r4)
  800318:	20c00115 	stw	r3,4(r4)
  }
  d->_g46_e1 = !d->_g45;
  80031c:	e0bffd17 	ldw	r2,-12(fp)
  800320:	10801143 	ldbu	r2,69(r2)
  800324:	10803fcc 	andi	r2,r2,255
  800328:	1080201c 	xori	r2,r2,128
  80032c:	10bfe004 	addi	r2,r2,-128
  800330:	1005003a 	cmpeq	r2,r2,zero
  800334:	1007883a 	mov	r3,r2
  800338:	e0bffd17 	ldw	r2,-12(fp)
  80033c:	10c02945 	stb	r3,165(r2)
  d->_g97 = d->_pg59;
  800340:	e0bffd17 	ldw	r2,-12(fp)
  800344:	10c02b83 	ldbu	r3,174(r2)
  800348:	e0bffd17 	ldw	r2,-12(fp)
  80034c:	10c01785 	stb	r3,94(r2)
  d->_cg97 = d->_region0_Atrium_VentricleTimer >= VRP_VALUE && d->VS;
  800350:	e13ffd17 	ldw	r4,-12(fp)
  800354:	20800017 	ldw	r2,0(r4)
  800358:	20c00117 	ldw	r3,4(r4)
  80035c:	000d883a 	mov	r6,zero
  800360:	01d018f4 	movhi	r7,16483
  800364:	39f00004 	addi	r7,r7,-16384
  800368:	1009883a 	mov	r4,r2
  80036c:	180b883a 	mov	r5,r3
  800370:	08051a00 	call	8051a0 <__gedf2>
  800374:	10000816 	blt	r2,zero,800398 <logic+0x108>
  800378:	e0bffd17 	ldw	r2,-12(fp)
  80037c:	10800843 	ldbu	r2,33(r2)
  800380:	10803fcc 	andi	r2,r2,255
  800384:	1080201c 	xori	r2,r2,128
  800388:	10bfe004 	addi	r2,r2,-128
  80038c:	10000226 	beq	r2,zero,800398 <logic+0x108>
  800390:	00800044 	movi	r2,1
  800394:	00000106 	br	80039c <logic+0x10c>
  800398:	0005883a 	mov	r2,zero
  80039c:	1007883a 	mov	r3,r2
  8003a0:	e0bffd17 	ldw	r2,-12(fp)
  8003a4:	10c02705 	stb	r3,156(r2)
  d->_g98 = d->_g97 && d->_cg97;
  8003a8:	e0bffd17 	ldw	r2,-12(fp)
  8003ac:	10801783 	ldbu	r2,94(r2)
  8003b0:	10803fcc 	andi	r2,r2,255
  8003b4:	1080201c 	xori	r2,r2,128
  8003b8:	10bfe004 	addi	r2,r2,-128
  8003bc:	10000826 	beq	r2,zero,8003e0 <logic+0x150>
  8003c0:	e0bffd17 	ldw	r2,-12(fp)
  8003c4:	10802703 	ldbu	r2,156(r2)
  8003c8:	10803fcc 	andi	r2,r2,255
  8003cc:	1080201c 	xori	r2,r2,128
  8003d0:	10bfe004 	addi	r2,r2,-128
  8003d4:	10000226 	beq	r2,zero,8003e0 <logic+0x150>
  8003d8:	00800044 	movi	r2,1
  8003dc:	00000106 	br	8003e4 <logic+0x154>
  8003e0:	0005883a 	mov	r2,zero
  8003e4:	1007883a 	mov	r3,r2
  8003e8:	e0bffd17 	ldw	r2,-12(fp)
  8003ec:	10c017c5 	stb	r3,95(r2)
  if (d->_g98) {
  8003f0:	e0bffd17 	ldw	r2,-12(fp)
  8003f4:	108017c3 	ldbu	r2,95(r2)
  8003f8:	10803fcc 	andi	r2,r2,255
  8003fc:	1080201c 	xori	r2,r2,128
  800400:	10bfe004 	addi	r2,r2,-128
  800404:	10000326 	beq	r2,zero,800414 <logic+0x184>
    d->_Pacemaker_local__Atrig2 = 1;
  800408:	e0bffd17 	ldw	r2,-12(fp)
  80040c:	00c00044 	movi	r3,1
  800410:	10c00985 	stb	r3,38(r2)
  }
  d->_g82 = d->_pg45;
  800414:	e0bffd17 	ldw	r2,-12(fp)
  800418:	10c02bc3 	ldbu	r3,175(r2)
  80041c:	e0bffd17 	ldw	r2,-12(fp)
  800420:	10c01605 	stb	r3,88(r2)
  if (d->_g82) {
  800424:	e0bffd17 	ldw	r2,-12(fp)
  800428:	10801603 	ldbu	r2,88(r2)
  80042c:	10803fcc 	andi	r2,r2,255
  800430:	1080201c 	xori	r2,r2,128
  800434:	10bfe004 	addi	r2,r2,-128
  800438:	10001226 	beq	r2,zero,800484 <logic+0x1f4>
    d->_region0_Atrium_AtriumTimer += d->deltaT;
  80043c:	e13ffd17 	ldw	r4,-12(fp)
  800440:	20800217 	ldw	r2,8(r4)
  800444:	20c00317 	ldw	r3,12(r4)
  800448:	e1bffd17 	ldw	r6,-12(fp)
  80044c:	31000417 	ldw	r4,16(r6)
  800450:	31400517 	ldw	r5,20(r6)
  800454:	200d883a 	mov	r6,r4
  800458:	280f883a 	mov	r7,r5
  80045c:	1009883a 	mov	r4,r2
  800460:	180b883a 	mov	r5,r3
  800464:	08048f40 	call	8048f4 <__adddf3>
  800468:	1009883a 	mov	r4,r2
  80046c:	180b883a 	mov	r5,r3
  800470:	2005883a 	mov	r2,r4
  800474:	2807883a 	mov	r3,r5
  800478:	e13ffd17 	ldw	r4,-12(fp)
  80047c:	20800215 	stw	r2,8(r4)
  800480:	20c00315 	stw	r3,12(r4)
  }
  d->_g100 = d->_g97 && !d->_cg97;
  800484:	e0bffd17 	ldw	r2,-12(fp)
  800488:	10801783 	ldbu	r2,94(r2)
  80048c:	10803fcc 	andi	r2,r2,255
  800490:	1080201c 	xori	r2,r2,128
  800494:	10bfe004 	addi	r2,r2,-128
  800498:	10000826 	beq	r2,zero,8004bc <logic+0x22c>
  80049c:	e0bffd17 	ldw	r2,-12(fp)
  8004a0:	10802703 	ldbu	r2,156(r2)
  8004a4:	10803fcc 	andi	r2,r2,255
  8004a8:	1080201c 	xori	r2,r2,128
  8004ac:	10bfe004 	addi	r2,r2,-128
  8004b0:	1000021e 	bne	r2,zero,8004bc <logic+0x22c>
  8004b4:	00800044 	movi	r2,1
  8004b8:	00000106 	br	8004c0 <logic+0x230>
  8004bc:	0005883a 	mov	r2,zero
  8004c0:	1007883a 	mov	r3,r2
  8004c4:	e0bffd17 	ldw	r2,-12(fp)
  8004c8:	10c01845 	stb	r3,97(r2)
  d->_cg100 = d->_region0_Atrium_VentricleTimer >= URI_VALUE && d->_region0_Atrium_AtriumTimer >= AVI_VALUE;
  8004cc:	e13ffd17 	ldw	r4,-12(fp)
  8004d0:	20800017 	ldw	r2,0(r4)
  8004d4:	20c00117 	ldw	r3,4(r4)
  8004d8:	000d883a 	mov	r6,zero
  8004dc:	01d02334 	movhi	r7,16524
  8004e0:	39c80004 	addi	r7,r7,8192
  8004e4:	1009883a 	mov	r4,r2
  8004e8:	180b883a 	mov	r5,r3
  8004ec:	08051a00 	call	8051a0 <__gedf2>
  8004f0:	10000c16 	blt	r2,zero,800524 <logic+0x294>
  8004f4:	e13ffd17 	ldw	r4,-12(fp)
  8004f8:	20800217 	ldw	r2,8(r4)
  8004fc:	20c00317 	ldw	r3,12(r4)
  800500:	000d883a 	mov	r6,zero
  800504:	01d01cf4 	movhi	r7,16499
  800508:	39f00004 	addi	r7,r7,-16384
  80050c:	1009883a 	mov	r4,r2
  800510:	180b883a 	mov	r5,r3
  800514:	08051a00 	call	8051a0 <__gedf2>
  800518:	10000216 	blt	r2,zero,800524 <logic+0x294>
  80051c:	00800044 	movi	r2,1
  800520:	00000106 	br	800528 <logic+0x298>
  800524:	0005883a 	mov	r2,zero
  800528:	1007883a 	mov	r3,r2
  80052c:	e0bffd17 	ldw	r2,-12(fp)
  800530:	10c02745 	stb	r3,157(r2)
  d->_g101 = d->_g100 && d->_cg100;
  800534:	e0bffd17 	ldw	r2,-12(fp)
  800538:	10801843 	ldbu	r2,97(r2)
  80053c:	10803fcc 	andi	r2,r2,255
  800540:	1080201c 	xori	r2,r2,128
  800544:	10bfe004 	addi	r2,r2,-128
  800548:	10000826 	beq	r2,zero,80056c <logic+0x2dc>
  80054c:	e0bffd17 	ldw	r2,-12(fp)
  800550:	10802743 	ldbu	r2,157(r2)
  800554:	10803fcc 	andi	r2,r2,255
  800558:	1080201c 	xori	r2,r2,128
  80055c:	10bfe004 	addi	r2,r2,-128
  800560:	10000226 	beq	r2,zero,80056c <logic+0x2dc>
  800564:	00800044 	movi	r2,1
  800568:	00000106 	br	800570 <logic+0x2e0>
  80056c:	0005883a 	mov	r2,zero
  800570:	1007883a 	mov	r3,r2
  800574:	e0bffd17 	ldw	r2,-12(fp)
  800578:	10c01885 	stb	r3,98(r2)
  if (d->_g101) {
  80057c:	e0bffd17 	ldw	r2,-12(fp)
  800580:	10801883 	ldbu	r2,98(r2)
  800584:	10803fcc 	andi	r2,r2,255
  800588:	1080201c 	xori	r2,r2,128
  80058c:	10bfe004 	addi	r2,r2,-128
  800590:	10000326 	beq	r2,zero,8005a0 <logic+0x310>
    d->_Pacemaker_local__Atrig3 = 1;
  800594:	e0bffd17 	ldw	r2,-12(fp)
  800598:	00c00044 	movi	r3,1
  80059c:	10c009c5 	stb	r3,39(r2)
  }
  d->_g100 = d->_g100 && !d->_cg100;
  8005a0:	e0bffd17 	ldw	r2,-12(fp)
  8005a4:	10801843 	ldbu	r2,97(r2)
  8005a8:	10803fcc 	andi	r2,r2,255
  8005ac:	1080201c 	xori	r2,r2,128
  8005b0:	10bfe004 	addi	r2,r2,-128
  8005b4:	10000826 	beq	r2,zero,8005d8 <logic+0x348>
  8005b8:	e0bffd17 	ldw	r2,-12(fp)
  8005bc:	10802743 	ldbu	r2,157(r2)
  8005c0:	10803fcc 	andi	r2,r2,255
  8005c4:	1080201c 	xori	r2,r2,128
  8005c8:	10bfe004 	addi	r2,r2,-128
  8005cc:	1000021e 	bne	r2,zero,8005d8 <logic+0x348>
  8005d0:	00800044 	movi	r2,1
  8005d4:	00000106 	br	8005dc <logic+0x34c>
  8005d8:	0005883a 	mov	r2,zero
  8005dc:	1007883a 	mov	r3,r2
  8005e0:	e0bffd17 	ldw	r2,-12(fp)
  8005e4:	10c01845 	stb	r3,97(r2)
  d->_cg102 = d->_region0_Atrium_VentricleTimer >= LRI_VALUE;
  8005e8:	e13ffd17 	ldw	r4,-12(fp)
  8005ec:	20800017 	ldw	r2,0(r4)
  8005f0:	20c00117 	ldw	r3,4(r4)
  8005f4:	04000044 	movi	r16,1
  8005f8:	000d883a 	mov	r6,zero
  8005fc:	01d023b4 	movhi	r7,16526
  800600:	39ec0004 	addi	r7,r7,-20480
  800604:	1009883a 	mov	r4,r2
  800608:	180b883a 	mov	r5,r3
  80060c:	08051a00 	call	8051a0 <__gedf2>
  800610:	1000010e 	bge	r2,zero,800618 <logic+0x388>
  800614:	0021883a 	mov	r16,zero
  800618:	8007883a 	mov	r3,r16
  80061c:	e0bffd17 	ldw	r2,-12(fp)
  800620:	10c026c5 	stb	r3,155(r2)
  d->_g103 = d->_g100 && d->_cg102;
  800624:	e0bffd17 	ldw	r2,-12(fp)
  800628:	10801843 	ldbu	r2,97(r2)
  80062c:	10803fcc 	andi	r2,r2,255
  800630:	1080201c 	xori	r2,r2,128
  800634:	10bfe004 	addi	r2,r2,-128
  800638:	10000826 	beq	r2,zero,80065c <logic+0x3cc>
  80063c:	e0bffd17 	ldw	r2,-12(fp)
  800640:	108026c3 	ldbu	r2,155(r2)
  800644:	10803fcc 	andi	r2,r2,255
  800648:	1080201c 	xori	r2,r2,128
  80064c:	10bfe004 	addi	r2,r2,-128
  800650:	10000226 	beq	r2,zero,80065c <logic+0x3cc>
  800654:	00800044 	movi	r2,1
  800658:	00000106 	br	800660 <logic+0x3d0>
  80065c:	0005883a 	mov	r2,zero
  800660:	1007883a 	mov	r3,r2
  800664:	e0bffd17 	ldw	r2,-12(fp)
  800668:	10c018c5 	stb	r3,99(r2)
  if (d->_g103) {
  80066c:	e0bffd17 	ldw	r2,-12(fp)
  800670:	108018c3 	ldbu	r2,99(r2)
  800674:	10803fcc 	andi	r2,r2,255
  800678:	1080201c 	xori	r2,r2,128
  80067c:	10bfe004 	addi	r2,r2,-128
  800680:	10000326 	beq	r2,zero,800690 <logic+0x400>
    d->_Pacemaker_local__Atrig4 = 1;
  800684:	e0bffd17 	ldw	r2,-12(fp)
  800688:	00c00044 	movi	r3,1
  80068c:	10c00a05 	stb	r3,40(r2)
  }
  d->_cg45 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  800690:	e0bffd17 	ldw	r2,-12(fp)
  800694:	10800983 	ldbu	r2,38(r2)
  800698:	10803fcc 	andi	r2,r2,255
  80069c:	1080201c 	xori	r2,r2,128
  8006a0:	10bfe004 	addi	r2,r2,-128
  8006a4:	10000c1e 	bne	r2,zero,8006d8 <logic+0x448>
  8006a8:	e0bffd17 	ldw	r2,-12(fp)
  8006ac:	108009c3 	ldbu	r2,39(r2)
  8006b0:	10803fcc 	andi	r2,r2,255
  8006b4:	1080201c 	xori	r2,r2,128
  8006b8:	10bfe004 	addi	r2,r2,-128
  8006bc:	1000061e 	bne	r2,zero,8006d8 <logic+0x448>
  8006c0:	e0bffd17 	ldw	r2,-12(fp)
  8006c4:	10800a03 	ldbu	r2,40(r2)
  8006c8:	10803fcc 	andi	r2,r2,255
  8006cc:	1080201c 	xori	r2,r2,128
  8006d0:	10bfe004 	addi	r2,r2,-128
  8006d4:	10000226 	beq	r2,zero,8006e0 <logic+0x450>
  8006d8:	00800044 	movi	r2,1
  8006dc:	00000106 	br	8006e4 <logic+0x454>
  8006e0:	0005883a 	mov	r2,zero
  8006e4:	1007883a 	mov	r3,r2
  8006e8:	e0bffd17 	ldw	r2,-12(fp)
  8006ec:	10c02005 	stb	r3,128(r2)
  d->_g46 = d->_g45 && d->_cg45;
  8006f0:	e0bffd17 	ldw	r2,-12(fp)
  8006f4:	10801143 	ldbu	r2,69(r2)
  8006f8:	10803fcc 	andi	r2,r2,255
  8006fc:	1080201c 	xori	r2,r2,128
  800700:	10bfe004 	addi	r2,r2,-128
  800704:	10000826 	beq	r2,zero,800728 <logic+0x498>
  800708:	e0bffd17 	ldw	r2,-12(fp)
  80070c:	10802003 	ldbu	r2,128(r2)
  800710:	10803fcc 	andi	r2,r2,255
  800714:	1080201c 	xori	r2,r2,128
  800718:	10bfe004 	addi	r2,r2,-128
  80071c:	10000226 	beq	r2,zero,800728 <logic+0x498>
  800720:	00800044 	movi	r2,1
  800724:	00000106 	br	80072c <logic+0x49c>
  800728:	0005883a 	mov	r2,zero
  80072c:	1007883a 	mov	r3,r2
  800730:	e0bffd17 	ldw	r2,-12(fp)
  800734:	10c01185 	stb	r3,70(r2)
  d->_g56 = d->_pg14;
  800738:	e0bffd17 	ldw	r2,-12(fp)
  80073c:	10c02c03 	ldbu	r3,176(r2)
  800740:	e0bffd17 	ldw	r2,-12(fp)
  800744:	10c01345 	stb	r3,77(r2)
  d->_g50 = d->_pg33;
  800748:	e0bffd17 	ldw	r2,-12(fp)
  80074c:	10c02c43 	ldbu	r3,177(r2)
  800750:	e0bffd17 	ldw	r2,-12(fp)
  800754:	10c01205 	stb	r3,72(r2)
  d->_g53_e2 = !(d->_g56 || d->_g50);
  800758:	e0bffd17 	ldw	r2,-12(fp)
  80075c:	10801343 	ldbu	r2,77(r2)
  800760:	10803fcc 	andi	r2,r2,255
  800764:	1080201c 	xori	r2,r2,128
  800768:	10bfe004 	addi	r2,r2,-128
  80076c:	1000081e 	bne	r2,zero,800790 <logic+0x500>
  800770:	e0bffd17 	ldw	r2,-12(fp)
  800774:	10801203 	ldbu	r2,72(r2)
  800778:	10803fcc 	andi	r2,r2,255
  80077c:	1080201c 	xori	r2,r2,128
  800780:	10bfe004 	addi	r2,r2,-128
  800784:	1000021e 	bne	r2,zero,800790 <logic+0x500>
  800788:	00800044 	movi	r2,1
  80078c:	00000106 	br	800794 <logic+0x504>
  800790:	0005883a 	mov	r2,zero
  800794:	1007883a 	mov	r3,r2
  800798:	e0bffd17 	ldw	r2,-12(fp)
  80079c:	10c02985 	stb	r3,166(r2)
  d->sleepT = 1000.0;
  8007a0:	e0fffd17 	ldw	r3,-12(fp)
  8007a4:	18000615 	stw	zero,24(r3)
  8007a8:	009023f4 	movhi	r2,16527
  8007ac:	10900004 	addi	r2,r2,16384
  8007b0:	18800715 	stw	r2,28(r3)
  d->_g56 = d->_g50 || d->_g56;
  8007b4:	e0bffd17 	ldw	r2,-12(fp)
  8007b8:	10801203 	ldbu	r2,72(r2)
  8007bc:	10803fcc 	andi	r2,r2,255
  8007c0:	1080201c 	xori	r2,r2,128
  8007c4:	10bfe004 	addi	r2,r2,-128
  8007c8:	1000061e 	bne	r2,zero,8007e4 <logic+0x554>
  8007cc:	e0bffd17 	ldw	r2,-12(fp)
  8007d0:	10801343 	ldbu	r2,77(r2)
  8007d4:	10803fcc 	andi	r2,r2,255
  8007d8:	1080201c 	xori	r2,r2,128
  8007dc:	10bfe004 	addi	r2,r2,-128
  8007e0:	10000226 	beq	r2,zero,8007ec <logic+0x55c>
  8007e4:	00800044 	movi	r2,1
  8007e8:	00000106 	br	8007f0 <logic+0x560>
  8007ec:	0005883a 	mov	r2,zero
  8007f0:	1007883a 	mov	r3,r2
  8007f4:	e0bffd17 	ldw	r2,-12(fp)
  8007f8:	10c01345 	stb	r3,77(r2)
  d->_cg51 = d->_region0_Atrium_VentricleTimer < VRP_VALUE;
  8007fc:	e13ffd17 	ldw	r4,-12(fp)
  800800:	20800017 	ldw	r2,0(r4)
  800804:	20c00117 	ldw	r3,4(r4)
  800808:	04000044 	movi	r16,1
  80080c:	000d883a 	mov	r6,zero
  800810:	01d018f4 	movhi	r7,16483
  800814:	39f00004 	addi	r7,r7,-16384
  800818:	1009883a 	mov	r4,r2
  80081c:	180b883a 	mov	r5,r3
  800820:	080527c0 	call	80527c <__ledf2>
  800824:	10000116 	blt	r2,zero,80082c <logic+0x59c>
  800828:	0021883a 	mov	r16,zero
  80082c:	8007883a 	mov	r3,r16
  800830:	e0bffd17 	ldw	r2,-12(fp)
  800834:	10c02105 	stb	r3,132(r2)
  d->_g50 = d->_g56 && d->_cg51;
  800838:	e0bffd17 	ldw	r2,-12(fp)
  80083c:	10801343 	ldbu	r2,77(r2)
  800840:	10803fcc 	andi	r2,r2,255
  800844:	1080201c 	xori	r2,r2,128
  800848:	10bfe004 	addi	r2,r2,-128
  80084c:	10000826 	beq	r2,zero,800870 <logic+0x5e0>
  800850:	e0bffd17 	ldw	r2,-12(fp)
  800854:	10802103 	ldbu	r2,132(r2)
  800858:	10803fcc 	andi	r2,r2,255
  80085c:	1080201c 	xori	r2,r2,128
  800860:	10bfe004 	addi	r2,r2,-128
  800864:	10000226 	beq	r2,zero,800870 <logic+0x5e0>
  800868:	00800044 	movi	r2,1
  80086c:	00000106 	br	800874 <logic+0x5e4>
  800870:	0005883a 	mov	r2,zero
  800874:	1007883a 	mov	r3,r2
  800878:	e0bffd17 	ldw	r2,-12(fp)
  80087c:	10c01205 	stb	r3,72(r2)
  if (d->_g50) {
  800880:	e0bffd17 	ldw	r2,-12(fp)
  800884:	10801203 	ldbu	r2,72(r2)
  800888:	10803fcc 	andi	r2,r2,255
  80088c:	1080201c 	xori	r2,r2,128
  800890:	10bfe004 	addi	r2,r2,-128
  800894:	10002a26 	beq	r2,zero,800940 <logic+0x6b0>
    d->sleepT = (d->sleepT < (VRP_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (VRP_VALUE - d->_region0_Atrium_VentricleTimer);
  800898:	e0bffd17 	ldw	r2,-12(fp)
  80089c:	14000617 	ldw	r16,24(r2)
  8008a0:	14400717 	ldw	r17,28(r2)
  8008a4:	e13ffd17 	ldw	r4,-12(fp)
  8008a8:	20800017 	ldw	r2,0(r4)
  8008ac:	20c00117 	ldw	r3,4(r4)
  8008b0:	100d883a 	mov	r6,r2
  8008b4:	180f883a 	mov	r7,r3
  8008b8:	0009883a 	mov	r4,zero
  8008bc:	015018f4 	movhi	r5,16483
  8008c0:	29700004 	addi	r5,r5,-16384
  8008c4:	0805a880 	call	805a88 <__subdf3>
  8008c8:	1009883a 	mov	r4,r2
  8008cc:	180b883a 	mov	r5,r3
  8008d0:	2005883a 	mov	r2,r4
  8008d4:	2807883a 	mov	r3,r5
  8008d8:	100d883a 	mov	r6,r2
  8008dc:	180f883a 	mov	r7,r3
  8008e0:	8009883a 	mov	r4,r16
  8008e4:	880b883a 	mov	r5,r17
  8008e8:	080527c0 	call	80527c <__ledf2>
  8008ec:	1000040e 	bge	r2,zero,800900 <logic+0x670>
  8008f0:	e13ffd17 	ldw	r4,-12(fp)
  8008f4:	20800617 	ldw	r2,24(r4)
  8008f8:	20c00717 	ldw	r3,28(r4)
  8008fc:	00000d06 	br	800934 <logic+0x6a4>
  800900:	e13ffd17 	ldw	r4,-12(fp)
  800904:	20800017 	ldw	r2,0(r4)
  800908:	20c00117 	ldw	r3,4(r4)
  80090c:	100d883a 	mov	r6,r2
  800910:	180f883a 	mov	r7,r3
  800914:	0009883a 	mov	r4,zero
  800918:	015018f4 	movhi	r5,16483
  80091c:	29700004 	addi	r5,r5,-16384
  800920:	0805a880 	call	805a88 <__subdf3>
  800924:	1009883a 	mov	r4,r2
  800928:	180b883a 	mov	r5,r3
  80092c:	2005883a 	mov	r2,r4
  800930:	2807883a 	mov	r3,r5
  800934:	e13ffd17 	ldw	r4,-12(fp)
  800938:	20800615 	stw	r2,24(r4)
  80093c:	20c00715 	stw	r3,28(r4)
  }
  d->_cg52 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  800940:	e0bffd17 	ldw	r2,-12(fp)
  800944:	10800983 	ldbu	r2,38(r2)
  800948:	10803fcc 	andi	r2,r2,255
  80094c:	1080201c 	xori	r2,r2,128
  800950:	10bfe004 	addi	r2,r2,-128
  800954:	10000c1e 	bne	r2,zero,800988 <logic+0x6f8>
  800958:	e0bffd17 	ldw	r2,-12(fp)
  80095c:	108009c3 	ldbu	r2,39(r2)
  800960:	10803fcc 	andi	r2,r2,255
  800964:	1080201c 	xori	r2,r2,128
  800968:	10bfe004 	addi	r2,r2,-128
  80096c:	1000061e 	bne	r2,zero,800988 <logic+0x6f8>
  800970:	e0bffd17 	ldw	r2,-12(fp)
  800974:	10800a03 	ldbu	r2,40(r2)
  800978:	10803fcc 	andi	r2,r2,255
  80097c:	1080201c 	xori	r2,r2,128
  800980:	10bfe004 	addi	r2,r2,-128
  800984:	10000226 	beq	r2,zero,800990 <logic+0x700>
  800988:	00800044 	movi	r2,1
  80098c:	00000106 	br	800994 <logic+0x704>
  800990:	0005883a 	mov	r2,zero
  800994:	1007883a 	mov	r3,r2
  800998:	e0bffd17 	ldw	r2,-12(fp)
  80099c:	10c020c5 	stb	r3,131(r2)
  d->_g51 = d->_g56 && !d->_cg51;
  8009a0:	e0bffd17 	ldw	r2,-12(fp)
  8009a4:	10801343 	ldbu	r2,77(r2)
  8009a8:	10803fcc 	andi	r2,r2,255
  8009ac:	1080201c 	xori	r2,r2,128
  8009b0:	10bfe004 	addi	r2,r2,-128
  8009b4:	10000826 	beq	r2,zero,8009d8 <logic+0x748>
  8009b8:	e0bffd17 	ldw	r2,-12(fp)
  8009bc:	10802103 	ldbu	r2,132(r2)
  8009c0:	10803fcc 	andi	r2,r2,255
  8009c4:	1080201c 	xori	r2,r2,128
  8009c8:	10bfe004 	addi	r2,r2,-128
  8009cc:	1000021e 	bne	r2,zero,8009d8 <logic+0x748>
  8009d0:	00800044 	movi	r2,1
  8009d4:	00000106 	br	8009dc <logic+0x74c>
  8009d8:	0005883a 	mov	r2,zero
  8009dc:	1007883a 	mov	r3,r2
  8009e0:	e0bffd17 	ldw	r2,-12(fp)
  8009e4:	10c01245 	stb	r3,73(r2)
  d->_cg54 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  8009e8:	e0bffd17 	ldw	r2,-12(fp)
  8009ec:	10800983 	ldbu	r2,38(r2)
  8009f0:	10803fcc 	andi	r2,r2,255
  8009f4:	1080201c 	xori	r2,r2,128
  8009f8:	10bfe004 	addi	r2,r2,-128
  8009fc:	10000c1e 	bne	r2,zero,800a30 <logic+0x7a0>
  800a00:	e0bffd17 	ldw	r2,-12(fp)
  800a04:	108009c3 	ldbu	r2,39(r2)
  800a08:	10803fcc 	andi	r2,r2,255
  800a0c:	1080201c 	xori	r2,r2,128
  800a10:	10bfe004 	addi	r2,r2,-128
  800a14:	1000061e 	bne	r2,zero,800a30 <logic+0x7a0>
  800a18:	e0bffd17 	ldw	r2,-12(fp)
  800a1c:	10800a03 	ldbu	r2,40(r2)
  800a20:	10803fcc 	andi	r2,r2,255
  800a24:	1080201c 	xori	r2,r2,128
  800a28:	10bfe004 	addi	r2,r2,-128
  800a2c:	10000226 	beq	r2,zero,800a38 <logic+0x7a8>
  800a30:	00800044 	movi	r2,1
  800a34:	00000106 	br	800a3c <logic+0x7ac>
  800a38:	0005883a 	mov	r2,zero
  800a3c:	1007883a 	mov	r3,r2
  800a40:	e0bffd17 	ldw	r2,-12(fp)
  800a44:	10c02145 	stb	r3,133(r2)
  d->_g53 = d->_g50 && d->_cg52 || d->_g51 && d->_cg54;
  800a48:	e0bffd17 	ldw	r2,-12(fp)
  800a4c:	10801203 	ldbu	r2,72(r2)
  800a50:	10803fcc 	andi	r2,r2,255
  800a54:	1080201c 	xori	r2,r2,128
  800a58:	10bfe004 	addi	r2,r2,-128
  800a5c:	10000626 	beq	r2,zero,800a78 <logic+0x7e8>
  800a60:	e0bffd17 	ldw	r2,-12(fp)
  800a64:	108020c3 	ldbu	r2,131(r2)
  800a68:	10803fcc 	andi	r2,r2,255
  800a6c:	1080201c 	xori	r2,r2,128
  800a70:	10bfe004 	addi	r2,r2,-128
  800a74:	10000c1e 	bne	r2,zero,800aa8 <logic+0x818>
  800a78:	e0bffd17 	ldw	r2,-12(fp)
  800a7c:	10801243 	ldbu	r2,73(r2)
  800a80:	10803fcc 	andi	r2,r2,255
  800a84:	1080201c 	xori	r2,r2,128
  800a88:	10bfe004 	addi	r2,r2,-128
  800a8c:	10000826 	beq	r2,zero,800ab0 <logic+0x820>
  800a90:	e0bffd17 	ldw	r2,-12(fp)
  800a94:	10802143 	ldbu	r2,133(r2)
  800a98:	10803fcc 	andi	r2,r2,255
  800a9c:	1080201c 	xori	r2,r2,128
  800aa0:	10bfe004 	addi	r2,r2,-128
  800aa4:	10000226 	beq	r2,zero,800ab0 <logic+0x820>
  800aa8:	00800044 	movi	r2,1
  800aac:	00000106 	br	800ab4 <logic+0x824>
  800ab0:	0005883a 	mov	r2,zero
  800ab4:	1007883a 	mov	r3,r2
  800ab8:	e0bffd17 	ldw	r2,-12(fp)
  800abc:	10c012c5 	stb	r3,75(r2)
  d->_g67 = d->_pg38_e5;
  800ac0:	e0bffd17 	ldw	r2,-12(fp)
  800ac4:	10c02c83 	ldbu	r3,178(r2)
  800ac8:	e0bffd17 	ldw	r2,-12(fp)
  800acc:	10c014c5 	stb	r3,83(r2)
  d->_g61 = d->_pg7;
  800ad0:	e0bffd17 	ldw	r2,-12(fp)
  800ad4:	10c02cc3 	ldbu	r3,179(r2)
  800ad8:	e0bffd17 	ldw	r2,-12(fp)
  800adc:	10c01405 	stb	r3,80(r2)
  d->_g64_e3 = !(d->_g67 || d->_g61);
  800ae0:	e0bffd17 	ldw	r2,-12(fp)
  800ae4:	108014c3 	ldbu	r2,83(r2)
  800ae8:	10803fcc 	andi	r2,r2,255
  800aec:	1080201c 	xori	r2,r2,128
  800af0:	10bfe004 	addi	r2,r2,-128
  800af4:	1000081e 	bne	r2,zero,800b18 <logic+0x888>
  800af8:	e0bffd17 	ldw	r2,-12(fp)
  800afc:	10801403 	ldbu	r2,80(r2)
  800b00:	10803fcc 	andi	r2,r2,255
  800b04:	1080201c 	xori	r2,r2,128
  800b08:	10bfe004 	addi	r2,r2,-128
  800b0c:	1000021e 	bne	r2,zero,800b18 <logic+0x888>
  800b10:	00800044 	movi	r2,1
  800b14:	00000106 	br	800b1c <logic+0x88c>
  800b18:	0005883a 	mov	r2,zero
  800b1c:	1007883a 	mov	r3,r2
  800b20:	e0bffd17 	ldw	r2,-12(fp)
  800b24:	10c029c5 	stb	r3,167(r2)
  d->_g67 = d->_g61 || d->_g67;
  800b28:	e0bffd17 	ldw	r2,-12(fp)
  800b2c:	10801403 	ldbu	r2,80(r2)
  800b30:	10803fcc 	andi	r2,r2,255
  800b34:	1080201c 	xori	r2,r2,128
  800b38:	10bfe004 	addi	r2,r2,-128
  800b3c:	1000061e 	bne	r2,zero,800b58 <logic+0x8c8>
  800b40:	e0bffd17 	ldw	r2,-12(fp)
  800b44:	108014c3 	ldbu	r2,83(r2)
  800b48:	10803fcc 	andi	r2,r2,255
  800b4c:	1080201c 	xori	r2,r2,128
  800b50:	10bfe004 	addi	r2,r2,-128
  800b54:	10000226 	beq	r2,zero,800b60 <logic+0x8d0>
  800b58:	00800044 	movi	r2,1
  800b5c:	00000106 	br	800b64 <logic+0x8d4>
  800b60:	0005883a 	mov	r2,zero
  800b64:	1007883a 	mov	r3,r2
  800b68:	e0bffd17 	ldw	r2,-12(fp)
  800b6c:	10c014c5 	stb	r3,83(r2)
  d->_cg62 = d->_region0_Atrium_VentricleTimer < URI_VALUE;
  800b70:	e13ffd17 	ldw	r4,-12(fp)
  800b74:	20800017 	ldw	r2,0(r4)
  800b78:	20c00117 	ldw	r3,4(r4)
  800b7c:	04000044 	movi	r16,1
  800b80:	000d883a 	mov	r6,zero
  800b84:	01d02334 	movhi	r7,16524
  800b88:	39c80004 	addi	r7,r7,8192
  800b8c:	1009883a 	mov	r4,r2
  800b90:	180b883a 	mov	r5,r3
  800b94:	080527c0 	call	80527c <__ledf2>
  800b98:	10000116 	blt	r2,zero,800ba0 <logic+0x910>
  800b9c:	0021883a 	mov	r16,zero
  800ba0:	8007883a 	mov	r3,r16
  800ba4:	e0bffd17 	ldw	r2,-12(fp)
  800ba8:	10c02285 	stb	r3,138(r2)
  d->_g61 = d->_g67 && d->_cg62;
  800bac:	e0bffd17 	ldw	r2,-12(fp)
  800bb0:	108014c3 	ldbu	r2,83(r2)
  800bb4:	10803fcc 	andi	r2,r2,255
  800bb8:	1080201c 	xori	r2,r2,128
  800bbc:	10bfe004 	addi	r2,r2,-128
  800bc0:	10000826 	beq	r2,zero,800be4 <logic+0x954>
  800bc4:	e0bffd17 	ldw	r2,-12(fp)
  800bc8:	10802283 	ldbu	r2,138(r2)
  800bcc:	10803fcc 	andi	r2,r2,255
  800bd0:	1080201c 	xori	r2,r2,128
  800bd4:	10bfe004 	addi	r2,r2,-128
  800bd8:	10000226 	beq	r2,zero,800be4 <logic+0x954>
  800bdc:	00800044 	movi	r2,1
  800be0:	00000106 	br	800be8 <logic+0x958>
  800be4:	0005883a 	mov	r2,zero
  800be8:	1007883a 	mov	r3,r2
  800bec:	e0bffd17 	ldw	r2,-12(fp)
  800bf0:	10c01405 	stb	r3,80(r2)
  if (d->_g61) {
  800bf4:	e0bffd17 	ldw	r2,-12(fp)
  800bf8:	10801403 	ldbu	r2,80(r2)
  800bfc:	10803fcc 	andi	r2,r2,255
  800c00:	1080201c 	xori	r2,r2,128
  800c04:	10bfe004 	addi	r2,r2,-128
  800c08:	10002a26 	beq	r2,zero,800cb4 <logic+0xa24>
    d->sleepT = (d->sleepT < (URI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (URI_VALUE - d->_region0_Atrium_VentricleTimer);
  800c0c:	e0bffd17 	ldw	r2,-12(fp)
  800c10:	14000617 	ldw	r16,24(r2)
  800c14:	14400717 	ldw	r17,28(r2)
  800c18:	e13ffd17 	ldw	r4,-12(fp)
  800c1c:	20800017 	ldw	r2,0(r4)
  800c20:	20c00117 	ldw	r3,4(r4)
  800c24:	100d883a 	mov	r6,r2
  800c28:	180f883a 	mov	r7,r3
  800c2c:	0009883a 	mov	r4,zero
  800c30:	01502334 	movhi	r5,16524
  800c34:	29480004 	addi	r5,r5,8192
  800c38:	0805a880 	call	805a88 <__subdf3>
  800c3c:	1009883a 	mov	r4,r2
  800c40:	180b883a 	mov	r5,r3
  800c44:	2005883a 	mov	r2,r4
  800c48:	2807883a 	mov	r3,r5
  800c4c:	100d883a 	mov	r6,r2
  800c50:	180f883a 	mov	r7,r3
  800c54:	8009883a 	mov	r4,r16
  800c58:	880b883a 	mov	r5,r17
  800c5c:	080527c0 	call	80527c <__ledf2>
  800c60:	1000040e 	bge	r2,zero,800c74 <logic+0x9e4>
  800c64:	e13ffd17 	ldw	r4,-12(fp)
  800c68:	20800617 	ldw	r2,24(r4)
  800c6c:	20c00717 	ldw	r3,28(r4)
  800c70:	00000d06 	br	800ca8 <logic+0xa18>
  800c74:	e13ffd17 	ldw	r4,-12(fp)
  800c78:	20800017 	ldw	r2,0(r4)
  800c7c:	20c00117 	ldw	r3,4(r4)
  800c80:	100d883a 	mov	r6,r2
  800c84:	180f883a 	mov	r7,r3
  800c88:	0009883a 	mov	r4,zero
  800c8c:	01502334 	movhi	r5,16524
  800c90:	29480004 	addi	r5,r5,8192
  800c94:	0805a880 	call	805a88 <__subdf3>
  800c98:	1009883a 	mov	r4,r2
  800c9c:	180b883a 	mov	r5,r3
  800ca0:	2005883a 	mov	r2,r4
  800ca4:	2807883a 	mov	r3,r5
  800ca8:	e13ffd17 	ldw	r4,-12(fp)
  800cac:	20800615 	stw	r2,24(r4)
  800cb0:	20c00715 	stw	r3,28(r4)
  }
  d->_cg63 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  800cb4:	e0bffd17 	ldw	r2,-12(fp)
  800cb8:	10800983 	ldbu	r2,38(r2)
  800cbc:	10803fcc 	andi	r2,r2,255
  800cc0:	1080201c 	xori	r2,r2,128
  800cc4:	10bfe004 	addi	r2,r2,-128
  800cc8:	10000c1e 	bne	r2,zero,800cfc <logic+0xa6c>
  800ccc:	e0bffd17 	ldw	r2,-12(fp)
  800cd0:	108009c3 	ldbu	r2,39(r2)
  800cd4:	10803fcc 	andi	r2,r2,255
  800cd8:	1080201c 	xori	r2,r2,128
  800cdc:	10bfe004 	addi	r2,r2,-128
  800ce0:	1000061e 	bne	r2,zero,800cfc <logic+0xa6c>
  800ce4:	e0bffd17 	ldw	r2,-12(fp)
  800ce8:	10800a03 	ldbu	r2,40(r2)
  800cec:	10803fcc 	andi	r2,r2,255
  800cf0:	1080201c 	xori	r2,r2,128
  800cf4:	10bfe004 	addi	r2,r2,-128
  800cf8:	10000226 	beq	r2,zero,800d04 <logic+0xa74>
  800cfc:	00800044 	movi	r2,1
  800d00:	00000106 	br	800d08 <logic+0xa78>
  800d04:	0005883a 	mov	r2,zero
  800d08:	1007883a 	mov	r3,r2
  800d0c:	e0bffd17 	ldw	r2,-12(fp)
  800d10:	10c02245 	stb	r3,137(r2)
  d->_g62 = d->_g67 && !d->_cg62;
  800d14:	e0bffd17 	ldw	r2,-12(fp)
  800d18:	108014c3 	ldbu	r2,83(r2)
  800d1c:	10803fcc 	andi	r2,r2,255
  800d20:	1080201c 	xori	r2,r2,128
  800d24:	10bfe004 	addi	r2,r2,-128
  800d28:	10000826 	beq	r2,zero,800d4c <logic+0xabc>
  800d2c:	e0bffd17 	ldw	r2,-12(fp)
  800d30:	10802283 	ldbu	r2,138(r2)
  800d34:	10803fcc 	andi	r2,r2,255
  800d38:	1080201c 	xori	r2,r2,128
  800d3c:	10bfe004 	addi	r2,r2,-128
  800d40:	1000021e 	bne	r2,zero,800d4c <logic+0xabc>
  800d44:	00800044 	movi	r2,1
  800d48:	00000106 	br	800d50 <logic+0xac0>
  800d4c:	0005883a 	mov	r2,zero
  800d50:	1007883a 	mov	r3,r2
  800d54:	e0bffd17 	ldw	r2,-12(fp)
  800d58:	10c01445 	stb	r3,81(r2)
  d->_cg65 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  800d5c:	e0bffd17 	ldw	r2,-12(fp)
  800d60:	10800983 	ldbu	r2,38(r2)
  800d64:	10803fcc 	andi	r2,r2,255
  800d68:	1080201c 	xori	r2,r2,128
  800d6c:	10bfe004 	addi	r2,r2,-128
  800d70:	10000c1e 	bne	r2,zero,800da4 <logic+0xb14>
  800d74:	e0bffd17 	ldw	r2,-12(fp)
  800d78:	108009c3 	ldbu	r2,39(r2)
  800d7c:	10803fcc 	andi	r2,r2,255
  800d80:	1080201c 	xori	r2,r2,128
  800d84:	10bfe004 	addi	r2,r2,-128
  800d88:	1000061e 	bne	r2,zero,800da4 <logic+0xb14>
  800d8c:	e0bffd17 	ldw	r2,-12(fp)
  800d90:	10800a03 	ldbu	r2,40(r2)
  800d94:	10803fcc 	andi	r2,r2,255
  800d98:	1080201c 	xori	r2,r2,128
  800d9c:	10bfe004 	addi	r2,r2,-128
  800da0:	10000226 	beq	r2,zero,800dac <logic+0xb1c>
  800da4:	00800044 	movi	r2,1
  800da8:	00000106 	br	800db0 <logic+0xb20>
  800dac:	0005883a 	mov	r2,zero
  800db0:	1007883a 	mov	r3,r2
  800db4:	e0bffd17 	ldw	r2,-12(fp)
  800db8:	10c022c5 	stb	r3,139(r2)
  d->_g64 = d->_g61 && d->_cg63 || d->_g62 && d->_cg65;
  800dbc:	e0bffd17 	ldw	r2,-12(fp)
  800dc0:	10801403 	ldbu	r2,80(r2)
  800dc4:	10803fcc 	andi	r2,r2,255
  800dc8:	1080201c 	xori	r2,r2,128
  800dcc:	10bfe004 	addi	r2,r2,-128
  800dd0:	10000626 	beq	r2,zero,800dec <logic+0xb5c>
  800dd4:	e0bffd17 	ldw	r2,-12(fp)
  800dd8:	10802243 	ldbu	r2,137(r2)
  800ddc:	10803fcc 	andi	r2,r2,255
  800de0:	1080201c 	xori	r2,r2,128
  800de4:	10bfe004 	addi	r2,r2,-128
  800de8:	10000c1e 	bne	r2,zero,800e1c <logic+0xb8c>
  800dec:	e0bffd17 	ldw	r2,-12(fp)
  800df0:	10801443 	ldbu	r2,81(r2)
  800df4:	10803fcc 	andi	r2,r2,255
  800df8:	1080201c 	xori	r2,r2,128
  800dfc:	10bfe004 	addi	r2,r2,-128
  800e00:	10000826 	beq	r2,zero,800e24 <logic+0xb94>
  800e04:	e0bffd17 	ldw	r2,-12(fp)
  800e08:	108022c3 	ldbu	r2,139(r2)
  800e0c:	10803fcc 	andi	r2,r2,255
  800e10:	1080201c 	xori	r2,r2,128
  800e14:	10bfe004 	addi	r2,r2,-128
  800e18:	10000226 	beq	r2,zero,800e24 <logic+0xb94>
  800e1c:	00800044 	movi	r2,1
  800e20:	00000106 	br	800e28 <logic+0xb98>
  800e24:	0005883a 	mov	r2,zero
  800e28:	1007883a 	mov	r3,r2
  800e2c:	e0bffd17 	ldw	r2,-12(fp)
  800e30:	10c01485 	stb	r3,82(r2)
  d->_g78 = d->_pg41;
  800e34:	e0bffd17 	ldw	r2,-12(fp)
  800e38:	10c02d03 	ldbu	r3,180(r2)
  800e3c:	e0bffd17 	ldw	r2,-12(fp)
  800e40:	10c015c5 	stb	r3,87(r2)
  d->_g72 = d->_pg14_e2;
  800e44:	e0bffd17 	ldw	r2,-12(fp)
  800e48:	10c02d43 	ldbu	r3,181(r2)
  800e4c:	e0bffd17 	ldw	r2,-12(fp)
  800e50:	10c01505 	stb	r3,84(r2)
  d->_g75_e4 = !(d->_g78 || d->_g72);
  800e54:	e0bffd17 	ldw	r2,-12(fp)
  800e58:	108015c3 	ldbu	r2,87(r2)
  800e5c:	10803fcc 	andi	r2,r2,255
  800e60:	1080201c 	xori	r2,r2,128
  800e64:	10bfe004 	addi	r2,r2,-128
  800e68:	1000081e 	bne	r2,zero,800e8c <logic+0xbfc>
  800e6c:	e0bffd17 	ldw	r2,-12(fp)
  800e70:	10801503 	ldbu	r2,84(r2)
  800e74:	10803fcc 	andi	r2,r2,255
  800e78:	1080201c 	xori	r2,r2,128
  800e7c:	10bfe004 	addi	r2,r2,-128
  800e80:	1000021e 	bne	r2,zero,800e8c <logic+0xbfc>
  800e84:	00800044 	movi	r2,1
  800e88:	00000106 	br	800e90 <logic+0xc00>
  800e8c:	0005883a 	mov	r2,zero
  800e90:	1007883a 	mov	r3,r2
  800e94:	e0bffd17 	ldw	r2,-12(fp)
  800e98:	10c02a05 	stb	r3,168(r2)
  d->_g78 = d->_g72 || d->_g78;
  800e9c:	e0bffd17 	ldw	r2,-12(fp)
  800ea0:	10801503 	ldbu	r2,84(r2)
  800ea4:	10803fcc 	andi	r2,r2,255
  800ea8:	1080201c 	xori	r2,r2,128
  800eac:	10bfe004 	addi	r2,r2,-128
  800eb0:	1000061e 	bne	r2,zero,800ecc <logic+0xc3c>
  800eb4:	e0bffd17 	ldw	r2,-12(fp)
  800eb8:	108015c3 	ldbu	r2,87(r2)
  800ebc:	10803fcc 	andi	r2,r2,255
  800ec0:	1080201c 	xori	r2,r2,128
  800ec4:	10bfe004 	addi	r2,r2,-128
  800ec8:	10000226 	beq	r2,zero,800ed4 <logic+0xc44>
  800ecc:	00800044 	movi	r2,1
  800ed0:	00000106 	br	800ed8 <logic+0xc48>
  800ed4:	0005883a 	mov	r2,zero
  800ed8:	1007883a 	mov	r3,r2
  800edc:	e0bffd17 	ldw	r2,-12(fp)
  800ee0:	10c015c5 	stb	r3,87(r2)
  d->_cg73 = d->_region0_Atrium_VentricleTimer < LRI_VALUE;
  800ee4:	e13ffd17 	ldw	r4,-12(fp)
  800ee8:	20800017 	ldw	r2,0(r4)
  800eec:	20c00117 	ldw	r3,4(r4)
  800ef0:	04000044 	movi	r16,1
  800ef4:	000d883a 	mov	r6,zero
  800ef8:	01d023b4 	movhi	r7,16526
  800efc:	39ec0004 	addi	r7,r7,-20480
  800f00:	1009883a 	mov	r4,r2
  800f04:	180b883a 	mov	r5,r3
  800f08:	080527c0 	call	80527c <__ledf2>
  800f0c:	10000116 	blt	r2,zero,800f14 <logic+0xc84>
  800f10:	0021883a 	mov	r16,zero
  800f14:	8007883a 	mov	r3,r16
  800f18:	e0bffd17 	ldw	r2,-12(fp)
  800f1c:	10c02405 	stb	r3,144(r2)
  d->_g72 = d->_g78 && d->_cg73;
  800f20:	e0bffd17 	ldw	r2,-12(fp)
  800f24:	108015c3 	ldbu	r2,87(r2)
  800f28:	10803fcc 	andi	r2,r2,255
  800f2c:	1080201c 	xori	r2,r2,128
  800f30:	10bfe004 	addi	r2,r2,-128
  800f34:	10000826 	beq	r2,zero,800f58 <logic+0xcc8>
  800f38:	e0bffd17 	ldw	r2,-12(fp)
  800f3c:	10802403 	ldbu	r2,144(r2)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	1080201c 	xori	r2,r2,128
  800f48:	10bfe004 	addi	r2,r2,-128
  800f4c:	10000226 	beq	r2,zero,800f58 <logic+0xcc8>
  800f50:	00800044 	movi	r2,1
  800f54:	00000106 	br	800f5c <logic+0xccc>
  800f58:	0005883a 	mov	r2,zero
  800f5c:	1007883a 	mov	r3,r2
  800f60:	e0bffd17 	ldw	r2,-12(fp)
  800f64:	10c01505 	stb	r3,84(r2)
  if (d->_g72) {
  800f68:	e0bffd17 	ldw	r2,-12(fp)
  800f6c:	10801503 	ldbu	r2,84(r2)
  800f70:	10803fcc 	andi	r2,r2,255
  800f74:	1080201c 	xori	r2,r2,128
  800f78:	10bfe004 	addi	r2,r2,-128
  800f7c:	10002a26 	beq	r2,zero,801028 <logic+0xd98>
    d->sleepT = (d->sleepT < (LRI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (LRI_VALUE - d->_region0_Atrium_VentricleTimer);
  800f80:	e0bffd17 	ldw	r2,-12(fp)
  800f84:	14000617 	ldw	r16,24(r2)
  800f88:	14400717 	ldw	r17,28(r2)
  800f8c:	e13ffd17 	ldw	r4,-12(fp)
  800f90:	20800017 	ldw	r2,0(r4)
  800f94:	20c00117 	ldw	r3,4(r4)
  800f98:	100d883a 	mov	r6,r2
  800f9c:	180f883a 	mov	r7,r3
  800fa0:	0009883a 	mov	r4,zero
  800fa4:	015023b4 	movhi	r5,16526
  800fa8:	296c0004 	addi	r5,r5,-20480
  800fac:	0805a880 	call	805a88 <__subdf3>
  800fb0:	1009883a 	mov	r4,r2
  800fb4:	180b883a 	mov	r5,r3
  800fb8:	2005883a 	mov	r2,r4
  800fbc:	2807883a 	mov	r3,r5
  800fc0:	100d883a 	mov	r6,r2
  800fc4:	180f883a 	mov	r7,r3
  800fc8:	8009883a 	mov	r4,r16
  800fcc:	880b883a 	mov	r5,r17
  800fd0:	080527c0 	call	80527c <__ledf2>
  800fd4:	1000040e 	bge	r2,zero,800fe8 <logic+0xd58>
  800fd8:	e13ffd17 	ldw	r4,-12(fp)
  800fdc:	20800617 	ldw	r2,24(r4)
  800fe0:	20c00717 	ldw	r3,28(r4)
  800fe4:	00000d06 	br	80101c <logic+0xd8c>
  800fe8:	e13ffd17 	ldw	r4,-12(fp)
  800fec:	20800017 	ldw	r2,0(r4)
  800ff0:	20c00117 	ldw	r3,4(r4)
  800ff4:	100d883a 	mov	r6,r2
  800ff8:	180f883a 	mov	r7,r3
  800ffc:	0009883a 	mov	r4,zero
  801000:	015023b4 	movhi	r5,16526
  801004:	296c0004 	addi	r5,r5,-20480
  801008:	0805a880 	call	805a88 <__subdf3>
  80100c:	1009883a 	mov	r4,r2
  801010:	180b883a 	mov	r5,r3
  801014:	2005883a 	mov	r2,r4
  801018:	2807883a 	mov	r3,r5
  80101c:	e13ffd17 	ldw	r4,-12(fp)
  801020:	20800615 	stw	r2,24(r4)
  801024:	20c00715 	stw	r3,28(r4)
  }
  d->_cg74 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  801028:	e0bffd17 	ldw	r2,-12(fp)
  80102c:	10800983 	ldbu	r2,38(r2)
  801030:	10803fcc 	andi	r2,r2,255
  801034:	1080201c 	xori	r2,r2,128
  801038:	10bfe004 	addi	r2,r2,-128
  80103c:	10000c1e 	bne	r2,zero,801070 <logic+0xde0>
  801040:	e0bffd17 	ldw	r2,-12(fp)
  801044:	108009c3 	ldbu	r2,39(r2)
  801048:	10803fcc 	andi	r2,r2,255
  80104c:	1080201c 	xori	r2,r2,128
  801050:	10bfe004 	addi	r2,r2,-128
  801054:	1000061e 	bne	r2,zero,801070 <logic+0xde0>
  801058:	e0bffd17 	ldw	r2,-12(fp)
  80105c:	10800a03 	ldbu	r2,40(r2)
  801060:	10803fcc 	andi	r2,r2,255
  801064:	1080201c 	xori	r2,r2,128
  801068:	10bfe004 	addi	r2,r2,-128
  80106c:	10000226 	beq	r2,zero,801078 <logic+0xde8>
  801070:	00800044 	movi	r2,1
  801074:	00000106 	br	80107c <logic+0xdec>
  801078:	0005883a 	mov	r2,zero
  80107c:	1007883a 	mov	r3,r2
  801080:	e0bffd17 	ldw	r2,-12(fp)
  801084:	10c023c5 	stb	r3,143(r2)
  d->_g73 = d->_g78 && !d->_cg73;
  801088:	e0bffd17 	ldw	r2,-12(fp)
  80108c:	108015c3 	ldbu	r2,87(r2)
  801090:	10803fcc 	andi	r2,r2,255
  801094:	1080201c 	xori	r2,r2,128
  801098:	10bfe004 	addi	r2,r2,-128
  80109c:	10000826 	beq	r2,zero,8010c0 <logic+0xe30>
  8010a0:	e0bffd17 	ldw	r2,-12(fp)
  8010a4:	10802403 	ldbu	r2,144(r2)
  8010a8:	10803fcc 	andi	r2,r2,255
  8010ac:	1080201c 	xori	r2,r2,128
  8010b0:	10bfe004 	addi	r2,r2,-128
  8010b4:	1000021e 	bne	r2,zero,8010c0 <logic+0xe30>
  8010b8:	00800044 	movi	r2,1
  8010bc:	00000106 	br	8010c4 <logic+0xe34>
  8010c0:	0005883a 	mov	r2,zero
  8010c4:	1007883a 	mov	r3,r2
  8010c8:	e0bffd17 	ldw	r2,-12(fp)
  8010cc:	10c01545 	stb	r3,85(r2)
  d->_cg76 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  8010d0:	e0bffd17 	ldw	r2,-12(fp)
  8010d4:	10800983 	ldbu	r2,38(r2)
  8010d8:	10803fcc 	andi	r2,r2,255
  8010dc:	1080201c 	xori	r2,r2,128
  8010e0:	10bfe004 	addi	r2,r2,-128
  8010e4:	10000c1e 	bne	r2,zero,801118 <logic+0xe88>
  8010e8:	e0bffd17 	ldw	r2,-12(fp)
  8010ec:	108009c3 	ldbu	r2,39(r2)
  8010f0:	10803fcc 	andi	r2,r2,255
  8010f4:	1080201c 	xori	r2,r2,128
  8010f8:	10bfe004 	addi	r2,r2,-128
  8010fc:	1000061e 	bne	r2,zero,801118 <logic+0xe88>
  801100:	e0bffd17 	ldw	r2,-12(fp)
  801104:	10800a03 	ldbu	r2,40(r2)
  801108:	10803fcc 	andi	r2,r2,255
  80110c:	1080201c 	xori	r2,r2,128
  801110:	10bfe004 	addi	r2,r2,-128
  801114:	10000226 	beq	r2,zero,801120 <logic+0xe90>
  801118:	00800044 	movi	r2,1
  80111c:	00000106 	br	801124 <logic+0xe94>
  801120:	0005883a 	mov	r2,zero
  801124:	1007883a 	mov	r3,r2
  801128:	e0bffd17 	ldw	r2,-12(fp)
  80112c:	10c02445 	stb	r3,145(r2)
  d->_g75 = d->_g72 && d->_cg74 || d->_g73 && d->_cg76;
  801130:	e0bffd17 	ldw	r2,-12(fp)
  801134:	10801503 	ldbu	r2,84(r2)
  801138:	10803fcc 	andi	r2,r2,255
  80113c:	1080201c 	xori	r2,r2,128
  801140:	10bfe004 	addi	r2,r2,-128
  801144:	10000626 	beq	r2,zero,801160 <logic+0xed0>
  801148:	e0bffd17 	ldw	r2,-12(fp)
  80114c:	108023c3 	ldbu	r2,143(r2)
  801150:	10803fcc 	andi	r2,r2,255
  801154:	1080201c 	xori	r2,r2,128
  801158:	10bfe004 	addi	r2,r2,-128
  80115c:	10000c1e 	bne	r2,zero,801190 <logic+0xf00>
  801160:	e0bffd17 	ldw	r2,-12(fp)
  801164:	10801543 	ldbu	r2,85(r2)
  801168:	10803fcc 	andi	r2,r2,255
  80116c:	1080201c 	xori	r2,r2,128
  801170:	10bfe004 	addi	r2,r2,-128
  801174:	10000826 	beq	r2,zero,801198 <logic+0xf08>
  801178:	e0bffd17 	ldw	r2,-12(fp)
  80117c:	10802443 	ldbu	r2,145(r2)
  801180:	10803fcc 	andi	r2,r2,255
  801184:	1080201c 	xori	r2,r2,128
  801188:	10bfe004 	addi	r2,r2,-128
  80118c:	10000226 	beq	r2,zero,801198 <logic+0xf08>
  801190:	00800044 	movi	r2,1
  801194:	00000106 	br	80119c <logic+0xf0c>
  801198:	0005883a 	mov	r2,zero
  80119c:	1007883a 	mov	r3,r2
  8011a0:	e0bffd17 	ldw	r2,-12(fp)
  8011a4:	10c01585 	stb	r3,86(r2)
  d->_g83_e5 = !d->_g82;
  8011a8:	e0bffd17 	ldw	r2,-12(fp)
  8011ac:	10801603 	ldbu	r2,88(r2)
  8011b0:	10803fcc 	andi	r2,r2,255
  8011b4:	1080201c 	xori	r2,r2,128
  8011b8:	10bfe004 	addi	r2,r2,-128
  8011bc:	1005003a 	cmpeq	r2,r2,zero
  8011c0:	1007883a 	mov	r3,r2
  8011c4:	e0bffd17 	ldw	r2,-12(fp)
  8011c8:	10c02a45 	stb	r3,169(r2)
  d->_cg82 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  8011cc:	e0bffd17 	ldw	r2,-12(fp)
  8011d0:	10800983 	ldbu	r2,38(r2)
  8011d4:	10803fcc 	andi	r2,r2,255
  8011d8:	1080201c 	xori	r2,r2,128
  8011dc:	10bfe004 	addi	r2,r2,-128
  8011e0:	10000c1e 	bne	r2,zero,801214 <logic+0xf84>
  8011e4:	e0bffd17 	ldw	r2,-12(fp)
  8011e8:	108009c3 	ldbu	r2,39(r2)
  8011ec:	10803fcc 	andi	r2,r2,255
  8011f0:	1080201c 	xori	r2,r2,128
  8011f4:	10bfe004 	addi	r2,r2,-128
  8011f8:	1000061e 	bne	r2,zero,801214 <logic+0xf84>
  8011fc:	e0bffd17 	ldw	r2,-12(fp)
  801200:	10800a03 	ldbu	r2,40(r2)
  801204:	10803fcc 	andi	r2,r2,255
  801208:	1080201c 	xori	r2,r2,128
  80120c:	10bfe004 	addi	r2,r2,-128
  801210:	10000226 	beq	r2,zero,80121c <logic+0xf8c>
  801214:	00800044 	movi	r2,1
  801218:	00000106 	br	801220 <logic+0xf90>
  80121c:	0005883a 	mov	r2,zero
  801220:	1007883a 	mov	r3,r2
  801224:	e0bffd17 	ldw	r2,-12(fp)
  801228:	10c02505 	stb	r3,148(r2)
  d->_g83 = d->_g82 && d->_cg82;
  80122c:	e0bffd17 	ldw	r2,-12(fp)
  801230:	10801603 	ldbu	r2,88(r2)
  801234:	10803fcc 	andi	r2,r2,255
  801238:	1080201c 	xori	r2,r2,128
  80123c:	10bfe004 	addi	r2,r2,-128
  801240:	10000826 	beq	r2,zero,801264 <logic+0xfd4>
  801244:	e0bffd17 	ldw	r2,-12(fp)
  801248:	10802503 	ldbu	r2,148(r2)
  80124c:	10803fcc 	andi	r2,r2,255
  801250:	1080201c 	xori	r2,r2,128
  801254:	10bfe004 	addi	r2,r2,-128
  801258:	10000226 	beq	r2,zero,801264 <logic+0xfd4>
  80125c:	00800044 	movi	r2,1
  801260:	00000106 	br	801268 <logic+0xfd8>
  801264:	0005883a 	mov	r2,zero
  801268:	1007883a 	mov	r3,r2
  80126c:	e0bffd17 	ldw	r2,-12(fp)
  801270:	10c01645 	stb	r3,89(r2)
  d->_g93 = d->_pg54;
  801274:	e0bffd17 	ldw	r2,-12(fp)
  801278:	10c02d83 	ldbu	r3,182(r2)
  80127c:	e0bffd17 	ldw	r2,-12(fp)
  801280:	10c01745 	stb	r3,93(r2)
  d->_g87 = d->_pg52;
  801284:	e0bffd17 	ldw	r2,-12(fp)
  801288:	10c02dc3 	ldbu	r3,183(r2)
  80128c:	e0bffd17 	ldw	r2,-12(fp)
  801290:	10c01685 	stb	r3,90(r2)
  d->_g90_e6 = !(d->_g93 || d->_g87);
  801294:	e0bffd17 	ldw	r2,-12(fp)
  801298:	10801743 	ldbu	r2,93(r2)
  80129c:	10803fcc 	andi	r2,r2,255
  8012a0:	1080201c 	xori	r2,r2,128
  8012a4:	10bfe004 	addi	r2,r2,-128
  8012a8:	1000081e 	bne	r2,zero,8012cc <logic+0x103c>
  8012ac:	e0bffd17 	ldw	r2,-12(fp)
  8012b0:	10801683 	ldbu	r2,90(r2)
  8012b4:	10803fcc 	andi	r2,r2,255
  8012b8:	1080201c 	xori	r2,r2,128
  8012bc:	10bfe004 	addi	r2,r2,-128
  8012c0:	1000021e 	bne	r2,zero,8012cc <logic+0x103c>
  8012c4:	00800044 	movi	r2,1
  8012c8:	00000106 	br	8012d0 <logic+0x1040>
  8012cc:	0005883a 	mov	r2,zero
  8012d0:	1007883a 	mov	r3,r2
  8012d4:	e0bffd17 	ldw	r2,-12(fp)
  8012d8:	10c02a85 	stb	r3,170(r2)
  d->_g93 = d->_g87 || d->_g93;
  8012dc:	e0bffd17 	ldw	r2,-12(fp)
  8012e0:	10801683 	ldbu	r2,90(r2)
  8012e4:	10803fcc 	andi	r2,r2,255
  8012e8:	1080201c 	xori	r2,r2,128
  8012ec:	10bfe004 	addi	r2,r2,-128
  8012f0:	1000061e 	bne	r2,zero,80130c <logic+0x107c>
  8012f4:	e0bffd17 	ldw	r2,-12(fp)
  8012f8:	10801743 	ldbu	r2,93(r2)
  8012fc:	10803fcc 	andi	r2,r2,255
  801300:	1080201c 	xori	r2,r2,128
  801304:	10bfe004 	addi	r2,r2,-128
  801308:	10000226 	beq	r2,zero,801314 <logic+0x1084>
  80130c:	00800044 	movi	r2,1
  801310:	00000106 	br	801318 <logic+0x1088>
  801314:	0005883a 	mov	r2,zero
  801318:	1007883a 	mov	r3,r2
  80131c:	e0bffd17 	ldw	r2,-12(fp)
  801320:	10c01745 	stb	r3,93(r2)
  d->_cg88 = d->_region0_Atrium_AtriumTimer < AVI_VALUE;
  801324:	e13ffd17 	ldw	r4,-12(fp)
  801328:	20800217 	ldw	r2,8(r4)
  80132c:	20c00317 	ldw	r3,12(r4)
  801330:	04000044 	movi	r16,1
  801334:	000d883a 	mov	r6,zero
  801338:	01d01cf4 	movhi	r7,16499
  80133c:	39f00004 	addi	r7,r7,-16384
  801340:	1009883a 	mov	r4,r2
  801344:	180b883a 	mov	r5,r3
  801348:	080527c0 	call	80527c <__ledf2>
  80134c:	10000116 	blt	r2,zero,801354 <logic+0x10c4>
  801350:	0021883a 	mov	r16,zero
  801354:	8007883a 	mov	r3,r16
  801358:	e0bffd17 	ldw	r2,-12(fp)
  80135c:	10c02605 	stb	r3,152(r2)
  d->_g87 = d->_g93 && d->_cg88;
  801360:	e0bffd17 	ldw	r2,-12(fp)
  801364:	10801743 	ldbu	r2,93(r2)
  801368:	10803fcc 	andi	r2,r2,255
  80136c:	1080201c 	xori	r2,r2,128
  801370:	10bfe004 	addi	r2,r2,-128
  801374:	10000826 	beq	r2,zero,801398 <logic+0x1108>
  801378:	e0bffd17 	ldw	r2,-12(fp)
  80137c:	10802603 	ldbu	r2,152(r2)
  801380:	10803fcc 	andi	r2,r2,255
  801384:	1080201c 	xori	r2,r2,128
  801388:	10bfe004 	addi	r2,r2,-128
  80138c:	10000226 	beq	r2,zero,801398 <logic+0x1108>
  801390:	00800044 	movi	r2,1
  801394:	00000106 	br	80139c <logic+0x110c>
  801398:	0005883a 	mov	r2,zero
  80139c:	1007883a 	mov	r3,r2
  8013a0:	e0bffd17 	ldw	r2,-12(fp)
  8013a4:	10c01685 	stb	r3,90(r2)
  if (d->_g87) {
  8013a8:	e0bffd17 	ldw	r2,-12(fp)
  8013ac:	10801683 	ldbu	r2,90(r2)
  8013b0:	10803fcc 	andi	r2,r2,255
  8013b4:	1080201c 	xori	r2,r2,128
  8013b8:	10bfe004 	addi	r2,r2,-128
  8013bc:	10002a26 	beq	r2,zero,801468 <logic+0x11d8>
    d->sleepT = (d->sleepT < (AVI_VALUE - d->_region0_Atrium_AtriumTimer)) ? d->sleepT : (AVI_VALUE - d->_region0_Atrium_AtriumTimer);
  8013c0:	e0bffd17 	ldw	r2,-12(fp)
  8013c4:	14000617 	ldw	r16,24(r2)
  8013c8:	14400717 	ldw	r17,28(r2)
  8013cc:	e13ffd17 	ldw	r4,-12(fp)
  8013d0:	20800217 	ldw	r2,8(r4)
  8013d4:	20c00317 	ldw	r3,12(r4)
  8013d8:	100d883a 	mov	r6,r2
  8013dc:	180f883a 	mov	r7,r3
  8013e0:	0009883a 	mov	r4,zero
  8013e4:	01501cf4 	movhi	r5,16499
  8013e8:	29700004 	addi	r5,r5,-16384
  8013ec:	0805a880 	call	805a88 <__subdf3>
  8013f0:	1009883a 	mov	r4,r2
  8013f4:	180b883a 	mov	r5,r3
  8013f8:	2005883a 	mov	r2,r4
  8013fc:	2807883a 	mov	r3,r5
  801400:	100d883a 	mov	r6,r2
  801404:	180f883a 	mov	r7,r3
  801408:	8009883a 	mov	r4,r16
  80140c:	880b883a 	mov	r5,r17
  801410:	080527c0 	call	80527c <__ledf2>
  801414:	1000040e 	bge	r2,zero,801428 <logic+0x1198>
  801418:	e13ffd17 	ldw	r4,-12(fp)
  80141c:	20800617 	ldw	r2,24(r4)
  801420:	20c00717 	ldw	r3,28(r4)
  801424:	00000d06 	br	80145c <logic+0x11cc>
  801428:	e13ffd17 	ldw	r4,-12(fp)
  80142c:	20800217 	ldw	r2,8(r4)
  801430:	20c00317 	ldw	r3,12(r4)
  801434:	100d883a 	mov	r6,r2
  801438:	180f883a 	mov	r7,r3
  80143c:	0009883a 	mov	r4,zero
  801440:	01501cf4 	movhi	r5,16499
  801444:	29700004 	addi	r5,r5,-16384
  801448:	0805a880 	call	805a88 <__subdf3>
  80144c:	1009883a 	mov	r4,r2
  801450:	180b883a 	mov	r5,r3
  801454:	2005883a 	mov	r2,r4
  801458:	2807883a 	mov	r3,r5
  80145c:	e13ffd17 	ldw	r4,-12(fp)
  801460:	20800615 	stw	r2,24(r4)
  801464:	20c00715 	stw	r3,28(r4)
  }
  d->_cg89 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  801468:	e0bffd17 	ldw	r2,-12(fp)
  80146c:	10800983 	ldbu	r2,38(r2)
  801470:	10803fcc 	andi	r2,r2,255
  801474:	1080201c 	xori	r2,r2,128
  801478:	10bfe004 	addi	r2,r2,-128
  80147c:	10000c1e 	bne	r2,zero,8014b0 <logic+0x1220>
  801480:	e0bffd17 	ldw	r2,-12(fp)
  801484:	108009c3 	ldbu	r2,39(r2)
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1080201c 	xori	r2,r2,128
  801490:	10bfe004 	addi	r2,r2,-128
  801494:	1000061e 	bne	r2,zero,8014b0 <logic+0x1220>
  801498:	e0bffd17 	ldw	r2,-12(fp)
  80149c:	10800a03 	ldbu	r2,40(r2)
  8014a0:	10803fcc 	andi	r2,r2,255
  8014a4:	1080201c 	xori	r2,r2,128
  8014a8:	10bfe004 	addi	r2,r2,-128
  8014ac:	10000226 	beq	r2,zero,8014b8 <logic+0x1228>
  8014b0:	00800044 	movi	r2,1
  8014b4:	00000106 	br	8014bc <logic+0x122c>
  8014b8:	0005883a 	mov	r2,zero
  8014bc:	1007883a 	mov	r3,r2
  8014c0:	e0bffd17 	ldw	r2,-12(fp)
  8014c4:	10c025c5 	stb	r3,151(r2)
  d->_g88 = d->_g93 && !d->_cg88;
  8014c8:	e0bffd17 	ldw	r2,-12(fp)
  8014cc:	10801743 	ldbu	r2,93(r2)
  8014d0:	10803fcc 	andi	r2,r2,255
  8014d4:	1080201c 	xori	r2,r2,128
  8014d8:	10bfe004 	addi	r2,r2,-128
  8014dc:	10000826 	beq	r2,zero,801500 <logic+0x1270>
  8014e0:	e0bffd17 	ldw	r2,-12(fp)
  8014e4:	10802603 	ldbu	r2,152(r2)
  8014e8:	10803fcc 	andi	r2,r2,255
  8014ec:	1080201c 	xori	r2,r2,128
  8014f0:	10bfe004 	addi	r2,r2,-128
  8014f4:	1000021e 	bne	r2,zero,801500 <logic+0x1270>
  8014f8:	00800044 	movi	r2,1
  8014fc:	00000106 	br	801504 <logic+0x1274>
  801500:	0005883a 	mov	r2,zero
  801504:	1007883a 	mov	r3,r2
  801508:	e0bffd17 	ldw	r2,-12(fp)
  80150c:	10c016c5 	stb	r3,91(r2)
  d->_cg91 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  801510:	e0bffd17 	ldw	r2,-12(fp)
  801514:	10800983 	ldbu	r2,38(r2)
  801518:	10803fcc 	andi	r2,r2,255
  80151c:	1080201c 	xori	r2,r2,128
  801520:	10bfe004 	addi	r2,r2,-128
  801524:	10000c1e 	bne	r2,zero,801558 <logic+0x12c8>
  801528:	e0bffd17 	ldw	r2,-12(fp)
  80152c:	108009c3 	ldbu	r2,39(r2)
  801530:	10803fcc 	andi	r2,r2,255
  801534:	1080201c 	xori	r2,r2,128
  801538:	10bfe004 	addi	r2,r2,-128
  80153c:	1000061e 	bne	r2,zero,801558 <logic+0x12c8>
  801540:	e0bffd17 	ldw	r2,-12(fp)
  801544:	10800a03 	ldbu	r2,40(r2)
  801548:	10803fcc 	andi	r2,r2,255
  80154c:	1080201c 	xori	r2,r2,128
  801550:	10bfe004 	addi	r2,r2,-128
  801554:	10000226 	beq	r2,zero,801560 <logic+0x12d0>
  801558:	00800044 	movi	r2,1
  80155c:	00000106 	br	801564 <logic+0x12d4>
  801560:	0005883a 	mov	r2,zero
  801564:	1007883a 	mov	r3,r2
  801568:	e0bffd17 	ldw	r2,-12(fp)
  80156c:	10c02645 	stb	r3,153(r2)
  d->_g90 = d->_g87 && d->_cg89 || d->_g88 && d->_cg91;
  801570:	e0bffd17 	ldw	r2,-12(fp)
  801574:	10801683 	ldbu	r2,90(r2)
  801578:	10803fcc 	andi	r2,r2,255
  80157c:	1080201c 	xori	r2,r2,128
  801580:	10bfe004 	addi	r2,r2,-128
  801584:	10000626 	beq	r2,zero,8015a0 <logic+0x1310>
  801588:	e0bffd17 	ldw	r2,-12(fp)
  80158c:	108025c3 	ldbu	r2,151(r2)
  801590:	10803fcc 	andi	r2,r2,255
  801594:	1080201c 	xori	r2,r2,128
  801598:	10bfe004 	addi	r2,r2,-128
  80159c:	10000c1e 	bne	r2,zero,8015d0 <logic+0x1340>
  8015a0:	e0bffd17 	ldw	r2,-12(fp)
  8015a4:	108016c3 	ldbu	r2,91(r2)
  8015a8:	10803fcc 	andi	r2,r2,255
  8015ac:	1080201c 	xori	r2,r2,128
  8015b0:	10bfe004 	addi	r2,r2,-128
  8015b4:	10000826 	beq	r2,zero,8015d8 <logic+0x1348>
  8015b8:	e0bffd17 	ldw	r2,-12(fp)
  8015bc:	10802643 	ldbu	r2,153(r2)
  8015c0:	10803fcc 	andi	r2,r2,255
  8015c4:	1080201c 	xori	r2,r2,128
  8015c8:	10bfe004 	addi	r2,r2,-128
  8015cc:	10000226 	beq	r2,zero,8015d8 <logic+0x1348>
  8015d0:	00800044 	movi	r2,1
  8015d4:	00000106 	br	8015dc <logic+0x134c>
  8015d8:	0005883a 	mov	r2,zero
  8015dc:	1007883a 	mov	r3,r2
  8015e0:	e0bffd17 	ldw	r2,-12(fp)
  8015e4:	10c01705 	stb	r3,92(r2)
  d->_g97 = !d->_g97;
  8015e8:	e0bffd17 	ldw	r2,-12(fp)
  8015ec:	10801783 	ldbu	r2,94(r2)
  8015f0:	10803fcc 	andi	r2,r2,255
  8015f4:	1080201c 	xori	r2,r2,128
  8015f8:	10bfe004 	addi	r2,r2,-128
  8015fc:	1005003a 	cmpeq	r2,r2,zero
  801600:	1007883a 	mov	r3,r2
  801604:	e0bffd17 	ldw	r2,-12(fp)
  801608:	10c01785 	stb	r3,94(r2)
  d->_g101 = d->_g98 || d->_g101 || d->_g103;
  80160c:	e0bffd17 	ldw	r2,-12(fp)
  801610:	108017c3 	ldbu	r2,95(r2)
  801614:	10803fcc 	andi	r2,r2,255
  801618:	1080201c 	xori	r2,r2,128
  80161c:	10bfe004 	addi	r2,r2,-128
  801620:	10000c1e 	bne	r2,zero,801654 <logic+0x13c4>
  801624:	e0bffd17 	ldw	r2,-12(fp)
  801628:	10801883 	ldbu	r2,98(r2)
  80162c:	10803fcc 	andi	r2,r2,255
  801630:	1080201c 	xori	r2,r2,128
  801634:	10bfe004 	addi	r2,r2,-128
  801638:	1000061e 	bne	r2,zero,801654 <logic+0x13c4>
  80163c:	e0bffd17 	ldw	r2,-12(fp)
  801640:	108018c3 	ldbu	r2,99(r2)
  801644:	10803fcc 	andi	r2,r2,255
  801648:	1080201c 	xori	r2,r2,128
  80164c:	10bfe004 	addi	r2,r2,-128
  801650:	10000226 	beq	r2,zero,80165c <logic+0x13cc>
  801654:	00800044 	movi	r2,1
  801658:	00000106 	br	801660 <logic+0x13d0>
  80165c:	0005883a 	mov	r2,zero
  801660:	1007883a 	mov	r3,r2
  801664:	e0bffd17 	ldw	r2,-12(fp)
  801668:	10c01885 	stb	r3,98(r2)
  d->_g103 = (d->_g46_e1 || d->_g46) && (d->_g53_e2 || d->_g53) && (d->_g64_e3 || d->_g64) && (d->_g75_e4 || d->_g75) && (d->_g83_e5 || d->_g83) && (d->_g90_e6 || d->_g90) && (d->_g97 || d->_g101) && (d->_g46 || d->_g53 || d->_g64 || d->_g75 || d->_g83 || d->_g90 || d->_g101);
  80166c:	e0bffd17 	ldw	r2,-12(fp)
  801670:	10802943 	ldbu	r2,165(r2)
  801674:	10803fcc 	andi	r2,r2,255
  801678:	1080201c 	xori	r2,r2,128
  80167c:	10bfe004 	addi	r2,r2,-128
  801680:	1000061e 	bne	r2,zero,80169c <logic+0x140c>
  801684:	e0bffd17 	ldw	r2,-12(fp)
  801688:	10801183 	ldbu	r2,70(r2)
  80168c:	10803fcc 	andi	r2,r2,255
  801690:	1080201c 	xori	r2,r2,128
  801694:	10bfe004 	addi	r2,r2,-128
  801698:	10007426 	beq	r2,zero,80186c <logic+0x15dc>
  80169c:	e0bffd17 	ldw	r2,-12(fp)
  8016a0:	10802983 	ldbu	r2,166(r2)
  8016a4:	10803fcc 	andi	r2,r2,255
  8016a8:	1080201c 	xori	r2,r2,128
  8016ac:	10bfe004 	addi	r2,r2,-128
  8016b0:	1000061e 	bne	r2,zero,8016cc <logic+0x143c>
  8016b4:	e0bffd17 	ldw	r2,-12(fp)
  8016b8:	108012c3 	ldbu	r2,75(r2)
  8016bc:	10803fcc 	andi	r2,r2,255
  8016c0:	1080201c 	xori	r2,r2,128
  8016c4:	10bfe004 	addi	r2,r2,-128
  8016c8:	10006826 	beq	r2,zero,80186c <logic+0x15dc>
  8016cc:	e0bffd17 	ldw	r2,-12(fp)
  8016d0:	108029c3 	ldbu	r2,167(r2)
  8016d4:	10803fcc 	andi	r2,r2,255
  8016d8:	1080201c 	xori	r2,r2,128
  8016dc:	10bfe004 	addi	r2,r2,-128
  8016e0:	1000061e 	bne	r2,zero,8016fc <logic+0x146c>
  8016e4:	e0bffd17 	ldw	r2,-12(fp)
  8016e8:	10801483 	ldbu	r2,82(r2)
  8016ec:	10803fcc 	andi	r2,r2,255
  8016f0:	1080201c 	xori	r2,r2,128
  8016f4:	10bfe004 	addi	r2,r2,-128
  8016f8:	10005c26 	beq	r2,zero,80186c <logic+0x15dc>
  8016fc:	e0bffd17 	ldw	r2,-12(fp)
  801700:	10802a03 	ldbu	r2,168(r2)
  801704:	10803fcc 	andi	r2,r2,255
  801708:	1080201c 	xori	r2,r2,128
  80170c:	10bfe004 	addi	r2,r2,-128
  801710:	1000061e 	bne	r2,zero,80172c <logic+0x149c>
  801714:	e0bffd17 	ldw	r2,-12(fp)
  801718:	10801583 	ldbu	r2,86(r2)
  80171c:	10803fcc 	andi	r2,r2,255
  801720:	1080201c 	xori	r2,r2,128
  801724:	10bfe004 	addi	r2,r2,-128
  801728:	10005026 	beq	r2,zero,80186c <logic+0x15dc>
  80172c:	e0bffd17 	ldw	r2,-12(fp)
  801730:	10802a43 	ldbu	r2,169(r2)
  801734:	10803fcc 	andi	r2,r2,255
  801738:	1080201c 	xori	r2,r2,128
  80173c:	10bfe004 	addi	r2,r2,-128
  801740:	1000061e 	bne	r2,zero,80175c <logic+0x14cc>
  801744:	e0bffd17 	ldw	r2,-12(fp)
  801748:	10801643 	ldbu	r2,89(r2)
  80174c:	10803fcc 	andi	r2,r2,255
  801750:	1080201c 	xori	r2,r2,128
  801754:	10bfe004 	addi	r2,r2,-128
  801758:	10004426 	beq	r2,zero,80186c <logic+0x15dc>
  80175c:	e0bffd17 	ldw	r2,-12(fp)
  801760:	10802a83 	ldbu	r2,170(r2)
  801764:	10803fcc 	andi	r2,r2,255
  801768:	1080201c 	xori	r2,r2,128
  80176c:	10bfe004 	addi	r2,r2,-128
  801770:	1000061e 	bne	r2,zero,80178c <logic+0x14fc>
  801774:	e0bffd17 	ldw	r2,-12(fp)
  801778:	10801703 	ldbu	r2,92(r2)
  80177c:	10803fcc 	andi	r2,r2,255
  801780:	1080201c 	xori	r2,r2,128
  801784:	10bfe004 	addi	r2,r2,-128
  801788:	10003826 	beq	r2,zero,80186c <logic+0x15dc>
  80178c:	e0bffd17 	ldw	r2,-12(fp)
  801790:	10801783 	ldbu	r2,94(r2)
  801794:	10803fcc 	andi	r2,r2,255
  801798:	1080201c 	xori	r2,r2,128
  80179c:	10bfe004 	addi	r2,r2,-128
  8017a0:	1000061e 	bne	r2,zero,8017bc <logic+0x152c>
  8017a4:	e0bffd17 	ldw	r2,-12(fp)
  8017a8:	10801883 	ldbu	r2,98(r2)
  8017ac:	10803fcc 	andi	r2,r2,255
  8017b0:	1080201c 	xori	r2,r2,128
  8017b4:	10bfe004 	addi	r2,r2,-128
  8017b8:	10002c26 	beq	r2,zero,80186c <logic+0x15dc>
  8017bc:	e0bffd17 	ldw	r2,-12(fp)
  8017c0:	10801183 	ldbu	r2,70(r2)
  8017c4:	10803fcc 	andi	r2,r2,255
  8017c8:	1080201c 	xori	r2,r2,128
  8017cc:	10bfe004 	addi	r2,r2,-128
  8017d0:	1000241e 	bne	r2,zero,801864 <logic+0x15d4>
  8017d4:	e0bffd17 	ldw	r2,-12(fp)
  8017d8:	108012c3 	ldbu	r2,75(r2)
  8017dc:	10803fcc 	andi	r2,r2,255
  8017e0:	1080201c 	xori	r2,r2,128
  8017e4:	10bfe004 	addi	r2,r2,-128
  8017e8:	10001e1e 	bne	r2,zero,801864 <logic+0x15d4>
  8017ec:	e0bffd17 	ldw	r2,-12(fp)
  8017f0:	10801483 	ldbu	r2,82(r2)
  8017f4:	10803fcc 	andi	r2,r2,255
  8017f8:	1080201c 	xori	r2,r2,128
  8017fc:	10bfe004 	addi	r2,r2,-128
  801800:	1000181e 	bne	r2,zero,801864 <logic+0x15d4>
  801804:	e0bffd17 	ldw	r2,-12(fp)
  801808:	10801583 	ldbu	r2,86(r2)
  80180c:	10803fcc 	andi	r2,r2,255
  801810:	1080201c 	xori	r2,r2,128
  801814:	10bfe004 	addi	r2,r2,-128
  801818:	1000121e 	bne	r2,zero,801864 <logic+0x15d4>
  80181c:	e0bffd17 	ldw	r2,-12(fp)
  801820:	10801643 	ldbu	r2,89(r2)
  801824:	10803fcc 	andi	r2,r2,255
  801828:	1080201c 	xori	r2,r2,128
  80182c:	10bfe004 	addi	r2,r2,-128
  801830:	10000c1e 	bne	r2,zero,801864 <logic+0x15d4>
  801834:	e0bffd17 	ldw	r2,-12(fp)
  801838:	10801703 	ldbu	r2,92(r2)
  80183c:	10803fcc 	andi	r2,r2,255
  801840:	1080201c 	xori	r2,r2,128
  801844:	10bfe004 	addi	r2,r2,-128
  801848:	1000061e 	bne	r2,zero,801864 <logic+0x15d4>
  80184c:	e0bffd17 	ldw	r2,-12(fp)
  801850:	10801883 	ldbu	r2,98(r2)
  801854:	10803fcc 	andi	r2,r2,255
  801858:	1080201c 	xori	r2,r2,128
  80185c:	10bfe004 	addi	r2,r2,-128
  801860:	10000226 	beq	r2,zero,80186c <logic+0x15dc>
  801864:	00800044 	movi	r2,1
  801868:	00000106 	br	801870 <logic+0x15e0>
  80186c:	0005883a 	mov	r2,zero
  801870:	1007883a 	mov	r3,r2
  801874:	e0bffd17 	ldw	r2,-12(fp)
  801878:	10c018c5 	stb	r3,99(r2)
  d->_cg104 = d->_Pacemaker_local__Atrig2;
  80187c:	e0bffd17 	ldw	r2,-12(fp)
  801880:	10c00983 	ldbu	r3,38(r2)
  801884:	e0bffd17 	ldw	r2,-12(fp)
  801888:	10c02785 	stb	r3,158(r2)
  d->_g98 = d->_pg64_e3;
  80188c:	e0bffd17 	ldw	r2,-12(fp)
  801890:	10c02e03 	ldbu	r3,184(r2)
  801894:	e0bffd17 	ldw	r2,-12(fp)
  801898:	10c017c5 	stb	r3,95(r2)
  d->_g64_e3 = d->_GO || d->_g98;
  80189c:	e0bffd17 	ldw	r2,-12(fp)
  8018a0:	10801ac3 	ldbu	r2,107(r2)
  8018a4:	10803fcc 	andi	r2,r2,255
  8018a8:	1080201c 	xori	r2,r2,128
  8018ac:	10bfe004 	addi	r2,r2,-128
  8018b0:	1000061e 	bne	r2,zero,8018cc <logic+0x163c>
  8018b4:	e0bffd17 	ldw	r2,-12(fp)
  8018b8:	108017c3 	ldbu	r2,95(r2)
  8018bc:	10803fcc 	andi	r2,r2,255
  8018c0:	1080201c 	xori	r2,r2,128
  8018c4:	10bfe004 	addi	r2,r2,-128
  8018c8:	10000226 	beq	r2,zero,8018d4 <logic+0x1644>
  8018cc:	00800044 	movi	r2,1
  8018d0:	00000106 	br	8018d8 <logic+0x1648>
  8018d4:	0005883a 	mov	r2,zero
  8018d8:	1007883a 	mov	r3,r2
  8018dc:	e0bffd17 	ldw	r2,-12(fp)
  8018e0:	10c029c5 	stb	r3,167(r2)
  if (d->_g64_e3) {
  8018e4:	e0bffd17 	ldw	r2,-12(fp)
  8018e8:	108029c3 	ldbu	r2,167(r2)
  8018ec:	10803fcc 	andi	r2,r2,255
  8018f0:	1080201c 	xori	r2,r2,128
  8018f4:	10bfe004 	addi	r2,r2,-128
  8018f8:	10000426 	beq	r2,zero,80190c <logic+0x167c>
    d->AP = 0;
  8018fc:	e0bffd17 	ldw	r2,-12(fp)
  801900:	10000885 	stb	zero,34(r2)
    d->VP = 0;
  801904:	e0bffd17 	ldw	r2,-12(fp)
  801908:	100008c5 	stb	zero,35(r2)
  }
  d->_g99 = d->_g103 && !d->_cg104;
  80190c:	e0bffd17 	ldw	r2,-12(fp)
  801910:	108018c3 	ldbu	r2,99(r2)
  801914:	10803fcc 	andi	r2,r2,255
  801918:	1080201c 	xori	r2,r2,128
  80191c:	10bfe004 	addi	r2,r2,-128
  801920:	10000826 	beq	r2,zero,801944 <logic+0x16b4>
  801924:	e0bffd17 	ldw	r2,-12(fp)
  801928:	10802783 	ldbu	r2,158(r2)
  80192c:	10803fcc 	andi	r2,r2,255
  801930:	1080201c 	xori	r2,r2,128
  801934:	10bfe004 	addi	r2,r2,-128
  801938:	1000021e 	bne	r2,zero,801944 <logic+0x16b4>
  80193c:	00800044 	movi	r2,1
  801940:	00000106 	br	801948 <logic+0x16b8>
  801944:	0005883a 	mov	r2,zero
  801948:	1007883a 	mov	r3,r2
  80194c:	e0bffd17 	ldw	r2,-12(fp)
  801950:	10c01805 	stb	r3,96(r2)
  d->_cg106 = d->_Pacemaker_local__Atrig3;
  801954:	e0bffd17 	ldw	r2,-12(fp)
  801958:	10c009c3 	ldbu	r3,39(r2)
  80195c:	e0bffd17 	ldw	r2,-12(fp)
  801960:	10c027c5 	stb	r3,159(r2)
  d->_g46 = d->_g99 && d->_cg106;
  801964:	e0bffd17 	ldw	r2,-12(fp)
  801968:	10801803 	ldbu	r2,96(r2)
  80196c:	10803fcc 	andi	r2,r2,255
  801970:	1080201c 	xori	r2,r2,128
  801974:	10bfe004 	addi	r2,r2,-128
  801978:	10000826 	beq	r2,zero,80199c <logic+0x170c>
  80197c:	e0bffd17 	ldw	r2,-12(fp)
  801980:	108027c3 	ldbu	r2,159(r2)
  801984:	10803fcc 	andi	r2,r2,255
  801988:	1080201c 	xori	r2,r2,128
  80198c:	10bfe004 	addi	r2,r2,-128
  801990:	10000226 	beq	r2,zero,80199c <logic+0x170c>
  801994:	00800044 	movi	r2,1
  801998:	00000106 	br	8019a0 <logic+0x1710>
  80199c:	0005883a 	mov	r2,zero
  8019a0:	1007883a 	mov	r3,r2
  8019a4:	e0bffd17 	ldw	r2,-12(fp)
  8019a8:	10c01185 	stb	r3,70(r2)
  if (d->_g46) {
  8019ac:	e0bffd17 	ldw	r2,-12(fp)
  8019b0:	10801183 	ldbu	r2,70(r2)
  8019b4:	10803fcc 	andi	r2,r2,255
  8019b8:	1080201c 	xori	r2,r2,128
  8019bc:	10bfe004 	addi	r2,r2,-128
  8019c0:	10000626 	beq	r2,zero,8019dc <logic+0x174c>
    d->VP |= 1;
  8019c4:	e0bffd17 	ldw	r2,-12(fp)
  8019c8:	108008c3 	ldbu	r2,35(r2)
  8019cc:	10800054 	ori	r2,r2,1
  8019d0:	1007883a 	mov	r3,r2
  8019d4:	e0bffd17 	ldw	r2,-12(fp)
  8019d8:	10c008c5 	stb	r3,35(r2)
  }
  d->_g46_e1 = d->_g99 && !d->_cg106;
  8019dc:	e0bffd17 	ldw	r2,-12(fp)
  8019e0:	10801803 	ldbu	r2,96(r2)
  8019e4:	10803fcc 	andi	r2,r2,255
  8019e8:	1080201c 	xori	r2,r2,128
  8019ec:	10bfe004 	addi	r2,r2,-128
  8019f0:	10000826 	beq	r2,zero,801a14 <logic+0x1784>
  8019f4:	e0bffd17 	ldw	r2,-12(fp)
  8019f8:	108027c3 	ldbu	r2,159(r2)
  8019fc:	10803fcc 	andi	r2,r2,255
  801a00:	1080201c 	xori	r2,r2,128
  801a04:	10bfe004 	addi	r2,r2,-128
  801a08:	1000021e 	bne	r2,zero,801a14 <logic+0x1784>
  801a0c:	00800044 	movi	r2,1
  801a10:	00000106 	br	801a18 <logic+0x1788>
  801a14:	0005883a 	mov	r2,zero
  801a18:	1007883a 	mov	r3,r2
  801a1c:	e0bffd17 	ldw	r2,-12(fp)
  801a20:	10c02945 	stb	r3,165(r2)
  if (d->_g46_e1) {
  801a24:	e0bffd17 	ldw	r2,-12(fp)
  801a28:	10802943 	ldbu	r2,165(r2)
  801a2c:	10803fcc 	andi	r2,r2,255
  801a30:	1080201c 	xori	r2,r2,128
  801a34:	10bfe004 	addi	r2,r2,-128
  801a38:	10000626 	beq	r2,zero,801a54 <logic+0x17c4>
    d->VP |= 1;
  801a3c:	e0bffd17 	ldw	r2,-12(fp)
  801a40:	108008c3 	ldbu	r2,35(r2)
  801a44:	10800054 	ori	r2,r2,1
  801a48:	1007883a 	mov	r3,r2
  801a4c:	e0bffd17 	ldw	r2,-12(fp)
  801a50:	10c008c5 	stb	r3,35(r2)
  }
  d->_g64 = d->_g103 && d->_cg104 || d->_g46 || d->_g46_e1;
  801a54:	e0bffd17 	ldw	r2,-12(fp)
  801a58:	108018c3 	ldbu	r2,99(r2)
  801a5c:	10803fcc 	andi	r2,r2,255
  801a60:	1080201c 	xori	r2,r2,128
  801a64:	10bfe004 	addi	r2,r2,-128
  801a68:	10000626 	beq	r2,zero,801a84 <logic+0x17f4>
  801a6c:	e0bffd17 	ldw	r2,-12(fp)
  801a70:	10802783 	ldbu	r2,158(r2)
  801a74:	10803fcc 	andi	r2,r2,255
  801a78:	1080201c 	xori	r2,r2,128
  801a7c:	10bfe004 	addi	r2,r2,-128
  801a80:	10000c1e 	bne	r2,zero,801ab4 <logic+0x1824>
  801a84:	e0bffd17 	ldw	r2,-12(fp)
  801a88:	10801183 	ldbu	r2,70(r2)
  801a8c:	10803fcc 	andi	r2,r2,255
  801a90:	1080201c 	xori	r2,r2,128
  801a94:	10bfe004 	addi	r2,r2,-128
  801a98:	1000061e 	bne	r2,zero,801ab4 <logic+0x1824>
  801a9c:	e0bffd17 	ldw	r2,-12(fp)
  801aa0:	10802943 	ldbu	r2,165(r2)
  801aa4:	10803fcc 	andi	r2,r2,255
  801aa8:	1080201c 	xori	r2,r2,128
  801aac:	10bfe004 	addi	r2,r2,-128
  801ab0:	10000226 	beq	r2,zero,801abc <logic+0x182c>
  801ab4:	00800044 	movi	r2,1
  801ab8:	00000106 	br	801ac0 <logic+0x1830>
  801abc:	0005883a 	mov	r2,zero
  801ac0:	1007883a 	mov	r3,r2
  801ac4:	e0bffd17 	ldw	r2,-12(fp)
  801ac8:	10c01485 	stb	r3,82(r2)
  if (d->_g64) {
  801acc:	e0bffd17 	ldw	r2,-12(fp)
  801ad0:	10801483 	ldbu	r2,82(r2)
  801ad4:	10803fcc 	andi	r2,r2,255
  801ad8:	1080201c 	xori	r2,r2,128
  801adc:	10bfe004 	addi	r2,r2,-128
  801ae0:	10000326 	beq	r2,zero,801af0 <logic+0x1860>
    d->_region0_Atrium_VentricleTimer = 0;
  801ae4:	e0bffd17 	ldw	r2,-12(fp)
  801ae8:	10000015 	stw	zero,0(r2)
  801aec:	10000115 	stw	zero,4(r2)
  }
  d->_g53 = d->_GO || d->_g64;
  801af0:	e0bffd17 	ldw	r2,-12(fp)
  801af4:	10801ac3 	ldbu	r2,107(r2)
  801af8:	10803fcc 	andi	r2,r2,255
  801afc:	1080201c 	xori	r2,r2,128
  801b00:	10bfe004 	addi	r2,r2,-128
  801b04:	1000061e 	bne	r2,zero,801b20 <logic+0x1890>
  801b08:	e0bffd17 	ldw	r2,-12(fp)
  801b0c:	10801483 	ldbu	r2,82(r2)
  801b10:	10803fcc 	andi	r2,r2,255
  801b14:	1080201c 	xori	r2,r2,128
  801b18:	10bfe004 	addi	r2,r2,-128
  801b1c:	10000226 	beq	r2,zero,801b28 <logic+0x1898>
  801b20:	00800044 	movi	r2,1
  801b24:	00000106 	br	801b2c <logic+0x189c>
  801b28:	0005883a 	mov	r2,zero
  801b2c:	1007883a 	mov	r3,r2
  801b30:	e0bffd17 	ldw	r2,-12(fp)
  801b34:	10c012c5 	stb	r3,75(r2)
  if (d->_g53) {
  801b38:	e0bffd17 	ldw	r2,-12(fp)
  801b3c:	108012c3 	ldbu	r2,75(r2)
  801b40:	10803fcc 	andi	r2,r2,255
  801b44:	1080201c 	xori	r2,r2,128
  801b48:	10bfe004 	addi	r2,r2,-128
  801b4c:	10000426 	beq	r2,zero,801b60 <logic+0x18d0>
    d->_Pacemaker_local__Atrig = 0;
  801b50:	e0bffd17 	ldw	r2,-12(fp)
  801b54:	10000905 	stb	zero,36(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  801b58:	e0bffd17 	ldw	r2,-12(fp)
  801b5c:	10000945 	stb	zero,37(r2)
  }
  d->_cg4 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  801b60:	e0bffd17 	ldw	r2,-12(fp)
  801b64:	10800903 	ldbu	r2,36(r2)
  801b68:	10803fcc 	andi	r2,r2,255
  801b6c:	1080201c 	xori	r2,r2,128
  801b70:	10bfe004 	addi	r2,r2,-128
  801b74:	1000061e 	bne	r2,zero,801b90 <logic+0x1900>
  801b78:	e0bffd17 	ldw	r2,-12(fp)
  801b7c:	10800943 	ldbu	r2,37(r2)
  801b80:	10803fcc 	andi	r2,r2,255
  801b84:	1080201c 	xori	r2,r2,128
  801b88:	10bfe004 	addi	r2,r2,-128
  801b8c:	10000226 	beq	r2,zero,801b98 <logic+0x1908>
  801b90:	00800044 	movi	r2,1
  801b94:	00000106 	br	801b9c <logic+0x190c>
  801b98:	0005883a 	mov	r2,zero
  801b9c:	1007883a 	mov	r3,r2
  801ba0:	e0bffd17 	ldw	r2,-12(fp)
  801ba4:	10c01b05 	stb	r3,108(r2)
  d->_g75 = d->_pg99_e7;
  801ba8:	e0bffd17 	ldw	r2,-12(fp)
  801bac:	10c02e43 	ldbu	r3,185(r2)
  801bb0:	e0bffd17 	ldw	r2,-12(fp)
  801bb4:	10c01585 	stb	r3,86(r2)
  if (d->_g75) {
  801bb8:	e0bffd17 	ldw	r2,-12(fp)
  801bbc:	10801583 	ldbu	r2,86(r2)
  801bc0:	10803fcc 	andi	r2,r2,255
  801bc4:	1080201c 	xori	r2,r2,128
  801bc8:	10bfe004 	addi	r2,r2,-128
  801bcc:	10001226 	beq	r2,zero,801c18 <logic+0x1988>
    d->_region0_Atrium_VentricleTimer += d->deltaT;
  801bd0:	e13ffd17 	ldw	r4,-12(fp)
  801bd4:	20800017 	ldw	r2,0(r4)
  801bd8:	20c00117 	ldw	r3,4(r4)
  801bdc:	e1bffd17 	ldw	r6,-12(fp)
  801be0:	31000417 	ldw	r4,16(r6)
  801be4:	31400517 	ldw	r5,20(r6)
  801be8:	200d883a 	mov	r6,r4
  801bec:	280f883a 	mov	r7,r5
  801bf0:	1009883a 	mov	r4,r2
  801bf4:	180b883a 	mov	r5,r3
  801bf8:	08048f40 	call	8048f4 <__adddf3>
  801bfc:	1009883a 	mov	r4,r2
  801c00:	180b883a 	mov	r5,r3
  801c04:	2005883a 	mov	r2,r4
  801c08:	2807883a 	mov	r3,r5
  801c0c:	e13ffd17 	ldw	r4,-12(fp)
  801c10:	20800015 	stw	r2,0(r4)
  801c14:	20c00115 	stw	r3,4(r4)
  }
  d->_g83_e5 = d->_pg3;
  801c18:	e0bffd17 	ldw	r2,-12(fp)
  801c1c:	10c02e83 	ldbu	r3,186(r2)
  801c20:	e0bffd17 	ldw	r2,-12(fp)
  801c24:	10c02a45 	stb	r3,169(r2)
  d->_cg36 = d->_region0_Atrium_VentricleTimer >= PVARP_VALUE && d->AS;
  801c28:	e13ffd17 	ldw	r4,-12(fp)
  801c2c:	20800017 	ldw	r2,0(r4)
  801c30:	20c00117 	ldw	r3,4(r4)
  801c34:	000d883a 	mov	r6,zero
  801c38:	01d01274 	movhi	r7,16457
  801c3c:	1009883a 	mov	r4,r2
  801c40:	180b883a 	mov	r5,r3
  801c44:	08051a00 	call	8051a0 <__gedf2>
  801c48:	10000816 	blt	r2,zero,801c6c <logic+0x19dc>
  801c4c:	e0bffd17 	ldw	r2,-12(fp)
  801c50:	10800803 	ldbu	r2,32(r2)
  801c54:	10803fcc 	andi	r2,r2,255
  801c58:	1080201c 	xori	r2,r2,128
  801c5c:	10bfe004 	addi	r2,r2,-128
  801c60:	10000226 	beq	r2,zero,801c6c <logic+0x19dc>
  801c64:	00800044 	movi	r2,1
  801c68:	00000106 	br	801c70 <logic+0x19e0>
  801c6c:	0005883a 	mov	r2,zero
  801c70:	1007883a 	mov	r3,r2
  801c74:	e0bffd17 	ldw	r2,-12(fp)
  801c78:	10c01f45 	stb	r3,125(r2)
  d->_g83 = d->_g83_e5 && d->_cg36;
  801c7c:	e0bffd17 	ldw	r2,-12(fp)
  801c80:	10802a43 	ldbu	r2,169(r2)
  801c84:	10803fcc 	andi	r2,r2,255
  801c88:	1080201c 	xori	r2,r2,128
  801c8c:	10bfe004 	addi	r2,r2,-128
  801c90:	10000826 	beq	r2,zero,801cb4 <logic+0x1a24>
  801c94:	e0bffd17 	ldw	r2,-12(fp)
  801c98:	10801f43 	ldbu	r2,125(r2)
  801c9c:	10803fcc 	andi	r2,r2,255
  801ca0:	1080201c 	xori	r2,r2,128
  801ca4:	10bfe004 	addi	r2,r2,-128
  801ca8:	10000226 	beq	r2,zero,801cb4 <logic+0x1a24>
  801cac:	00800044 	movi	r2,1
  801cb0:	00000106 	br	801cb8 <logic+0x1a28>
  801cb4:	0005883a 	mov	r2,zero
  801cb8:	1007883a 	mov	r3,r2
  801cbc:	e0bffd17 	ldw	r2,-12(fp)
  801cc0:	10c01645 	stb	r3,89(r2)
  if (d->_g83) {
  801cc4:	e0bffd17 	ldw	r2,-12(fp)
  801cc8:	10801643 	ldbu	r2,89(r2)
  801ccc:	10803fcc 	andi	r2,r2,255
  801cd0:	1080201c 	xori	r2,r2,128
  801cd4:	10bfe004 	addi	r2,r2,-128
  801cd8:	10000326 	beq	r2,zero,801ce8 <logic+0x1a58>
    d->_Pacemaker_local__Atrig = 1;
  801cdc:	e0bffd17 	ldw	r2,-12(fp)
  801ce0:	00c00044 	movi	r3,1
  801ce4:	10c00905 	stb	r3,36(r2)
  }
  d->_g53_e2 = d->_g83_e5 && !d->_cg36;
  801ce8:	e0bffd17 	ldw	r2,-12(fp)
  801cec:	10802a43 	ldbu	r2,169(r2)
  801cf0:	10803fcc 	andi	r2,r2,255
  801cf4:	1080201c 	xori	r2,r2,128
  801cf8:	10bfe004 	addi	r2,r2,-128
  801cfc:	10000826 	beq	r2,zero,801d20 <logic+0x1a90>
  801d00:	e0bffd17 	ldw	r2,-12(fp)
  801d04:	10801f43 	ldbu	r2,125(r2)
  801d08:	10803fcc 	andi	r2,r2,255
  801d0c:	1080201c 	xori	r2,r2,128
  801d10:	10bfe004 	addi	r2,r2,-128
  801d14:	1000021e 	bne	r2,zero,801d20 <logic+0x1a90>
  801d18:	00800044 	movi	r2,1
  801d1c:	00000106 	br	801d24 <logic+0x1a94>
  801d20:	0005883a 	mov	r2,zero
  801d24:	1007883a 	mov	r3,r2
  801d28:	e0bffd17 	ldw	r2,-12(fp)
  801d2c:	10c02985 	stb	r3,166(r2)
  d->_cg39 = d->_region0_Atrium_VentricleTimer >= AEI_VALUE;
  801d30:	e13ffd17 	ldw	r4,-12(fp)
  801d34:	20800017 	ldw	r2,0(r4)
  801d38:	20c00117 	ldw	r3,4(r4)
  801d3c:	04000044 	movi	r16,1
  801d40:	000d883a 	mov	r6,zero
  801d44:	01d02274 	movhi	r7,16521
  801d48:	1009883a 	mov	r4,r2
  801d4c:	180b883a 	mov	r5,r3
  801d50:	08051a00 	call	8051a0 <__gedf2>
  801d54:	1000010e 	bge	r2,zero,801d5c <logic+0x1acc>
  801d58:	0021883a 	mov	r16,zero
  801d5c:	8007883a 	mov	r3,r16
  801d60:	e0bffd17 	ldw	r2,-12(fp)
  801d64:	10c01f05 	stb	r3,124(r2)
  d->_g90 = d->_g53_e2 && d->_cg39;
  801d68:	e0bffd17 	ldw	r2,-12(fp)
  801d6c:	10802983 	ldbu	r2,166(r2)
  801d70:	10803fcc 	andi	r2,r2,255
  801d74:	1080201c 	xori	r2,r2,128
  801d78:	10bfe004 	addi	r2,r2,-128
  801d7c:	10000826 	beq	r2,zero,801da0 <logic+0x1b10>
  801d80:	e0bffd17 	ldw	r2,-12(fp)
  801d84:	10801f03 	ldbu	r2,124(r2)
  801d88:	10803fcc 	andi	r2,r2,255
  801d8c:	1080201c 	xori	r2,r2,128
  801d90:	10bfe004 	addi	r2,r2,-128
  801d94:	10000226 	beq	r2,zero,801da0 <logic+0x1b10>
  801d98:	00800044 	movi	r2,1
  801d9c:	00000106 	br	801da4 <logic+0x1b14>
  801da0:	0005883a 	mov	r2,zero
  801da4:	1007883a 	mov	r3,r2
  801da8:	e0bffd17 	ldw	r2,-12(fp)
  801dac:	10c01705 	stb	r3,92(r2)
  if (d->_g90) {
  801db0:	e0bffd17 	ldw	r2,-12(fp)
  801db4:	10801703 	ldbu	r2,92(r2)
  801db8:	10803fcc 	andi	r2,r2,255
  801dbc:	1080201c 	xori	r2,r2,128
  801dc0:	10bfe004 	addi	r2,r2,-128
  801dc4:	10000326 	beq	r2,zero,801dd4 <logic+0x1b44>
    d->_Pacemaker_local__Atrig1 = 1;
  801dc8:	e0bffd17 	ldw	r2,-12(fp)
  801dcc:	00c00044 	movi	r3,1
  801dd0:	10c00945 	stb	r3,37(r2)
  }
  d->_cg6 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  801dd4:	e0bffd17 	ldw	r2,-12(fp)
  801dd8:	10800903 	ldbu	r2,36(r2)
  801ddc:	10803fcc 	andi	r2,r2,255
  801de0:	1080201c 	xori	r2,r2,128
  801de4:	10bfe004 	addi	r2,r2,-128
  801de8:	1000061e 	bne	r2,zero,801e04 <logic+0x1b74>
  801dec:	e0bffd17 	ldw	r2,-12(fp)
  801df0:	10800943 	ldbu	r2,37(r2)
  801df4:	10803fcc 	andi	r2,r2,255
  801df8:	1080201c 	xori	r2,r2,128
  801dfc:	10bfe004 	addi	r2,r2,-128
  801e00:	10000226 	beq	r2,zero,801e0c <logic+0x1b7c>
  801e04:	00800044 	movi	r2,1
  801e08:	00000106 	br	801e10 <logic+0x1b80>
  801e0c:	0005883a 	mov	r2,zero
  801e10:	1007883a 	mov	r3,r2
  801e14:	e0bffd17 	ldw	r2,-12(fp)
  801e18:	10c01b45 	stb	r3,109(r2)
  d->_g99_e7 = d->_g53 && !d->_cg4 || d->_g75 && !d->_cg6;
  801e1c:	e0bffd17 	ldw	r2,-12(fp)
  801e20:	108012c3 	ldbu	r2,75(r2)
  801e24:	10803fcc 	andi	r2,r2,255
  801e28:	1080201c 	xori	r2,r2,128
  801e2c:	10bfe004 	addi	r2,r2,-128
  801e30:	10000626 	beq	r2,zero,801e4c <logic+0x1bbc>
  801e34:	e0bffd17 	ldw	r2,-12(fp)
  801e38:	10801b03 	ldbu	r2,108(r2)
  801e3c:	10803fcc 	andi	r2,r2,255
  801e40:	1080201c 	xori	r2,r2,128
  801e44:	10bfe004 	addi	r2,r2,-128
  801e48:	10000c26 	beq	r2,zero,801e7c <logic+0x1bec>
  801e4c:	e0bffd17 	ldw	r2,-12(fp)
  801e50:	10801583 	ldbu	r2,86(r2)
  801e54:	10803fcc 	andi	r2,r2,255
  801e58:	1080201c 	xori	r2,r2,128
  801e5c:	10bfe004 	addi	r2,r2,-128
  801e60:	10000826 	beq	r2,zero,801e84 <logic+0x1bf4>
  801e64:	e0bffd17 	ldw	r2,-12(fp)
  801e68:	10801b43 	ldbu	r2,109(r2)
  801e6c:	10803fcc 	andi	r2,r2,255
  801e70:	1080201c 	xori	r2,r2,128
  801e74:	10bfe004 	addi	r2,r2,-128
  801e78:	1000021e 	bne	r2,zero,801e84 <logic+0x1bf4>
  801e7c:	00800044 	movi	r2,1
  801e80:	00000106 	br	801e88 <logic+0x1bf8>
  801e84:	0005883a 	mov	r2,zero
  801e88:	1007883a 	mov	r3,r2
  801e8c:	e0bffd17 	ldw	r2,-12(fp)
  801e90:	10c02ac5 	stb	r3,171(r2)
  d->_g75_e4 = d->_g75 && d->_cg6;
  801e94:	e0bffd17 	ldw	r2,-12(fp)
  801e98:	10801583 	ldbu	r2,86(r2)
  801e9c:	10803fcc 	andi	r2,r2,255
  801ea0:	1080201c 	xori	r2,r2,128
  801ea4:	10bfe004 	addi	r2,r2,-128
  801ea8:	10000826 	beq	r2,zero,801ecc <logic+0x1c3c>
  801eac:	e0bffd17 	ldw	r2,-12(fp)
  801eb0:	10801b43 	ldbu	r2,109(r2)
  801eb4:	10803fcc 	andi	r2,r2,255
  801eb8:	1080201c 	xori	r2,r2,128
  801ebc:	10bfe004 	addi	r2,r2,-128
  801ec0:	10000226 	beq	r2,zero,801ecc <logic+0x1c3c>
  801ec4:	00800044 	movi	r2,1
  801ec8:	00000106 	br	801ed0 <logic+0x1c40>
  801ecc:	0005883a 	mov	r2,zero
  801ed0:	1007883a 	mov	r3,r2
  801ed4:	e0bffd17 	ldw	r2,-12(fp)
  801ed8:	10c02a05 	stb	r3,168(r2)
  d->_cg8 = d->_region0_Atrium_VentricleTimer < PVARP_VALUE;
  801edc:	e13ffd17 	ldw	r4,-12(fp)
  801ee0:	20800017 	ldw	r2,0(r4)
  801ee4:	20c00117 	ldw	r3,4(r4)
  801ee8:	04000044 	movi	r16,1
  801eec:	000d883a 	mov	r6,zero
  801ef0:	01d01274 	movhi	r7,16457
  801ef4:	1009883a 	mov	r4,r2
  801ef8:	180b883a 	mov	r5,r3
  801efc:	080527c0 	call	80527c <__ledf2>
  801f00:	10000116 	blt	r2,zero,801f08 <logic+0x1c78>
  801f04:	0021883a 	mov	r16,zero
  801f08:	8007883a 	mov	r3,r16
  801f0c:	e0bffd17 	ldw	r2,-12(fp)
  801f10:	10c01b85 	stb	r3,110(r2)
  d->_g90_e6 = d->_g53 && d->_cg8;
  801f14:	e0bffd17 	ldw	r2,-12(fp)
  801f18:	108012c3 	ldbu	r2,75(r2)
  801f1c:	10803fcc 	andi	r2,r2,255
  801f20:	1080201c 	xori	r2,r2,128
  801f24:	10bfe004 	addi	r2,r2,-128
  801f28:	10000826 	beq	r2,zero,801f4c <logic+0x1cbc>
  801f2c:	e0bffd17 	ldw	r2,-12(fp)
  801f30:	10801b83 	ldbu	r2,110(r2)
  801f34:	10803fcc 	andi	r2,r2,255
  801f38:	1080201c 	xori	r2,r2,128
  801f3c:	10bfe004 	addi	r2,r2,-128
  801f40:	10000226 	beq	r2,zero,801f4c <logic+0x1cbc>
  801f44:	00800044 	movi	r2,1
  801f48:	00000106 	br	801f50 <logic+0x1cc0>
  801f4c:	0005883a 	mov	r2,zero
  801f50:	1007883a 	mov	r3,r2
  801f54:	e0bffd17 	ldw	r2,-12(fp)
  801f58:	10c02a85 	stb	r3,170(r2)
  if (d->_g90_e6) {
  801f5c:	e0bffd17 	ldw	r2,-12(fp)
  801f60:	10802a83 	ldbu	r2,170(r2)
  801f64:	10803fcc 	andi	r2,r2,255
  801f68:	1080201c 	xori	r2,r2,128
  801f6c:	10bfe004 	addi	r2,r2,-128
  801f70:	10002826 	beq	r2,zero,802014 <logic+0x1d84>
    d->sleepT = (d->sleepT < (PVARP_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (PVARP_VALUE - d->_region0_Atrium_VentricleTimer);
  801f74:	e0bffd17 	ldw	r2,-12(fp)
  801f78:	14000617 	ldw	r16,24(r2)
  801f7c:	14400717 	ldw	r17,28(r2)
  801f80:	e13ffd17 	ldw	r4,-12(fp)
  801f84:	20800017 	ldw	r2,0(r4)
  801f88:	20c00117 	ldw	r3,4(r4)
  801f8c:	100d883a 	mov	r6,r2
  801f90:	180f883a 	mov	r7,r3
  801f94:	0009883a 	mov	r4,zero
  801f98:	01501274 	movhi	r5,16457
  801f9c:	0805a880 	call	805a88 <__subdf3>
  801fa0:	1009883a 	mov	r4,r2
  801fa4:	180b883a 	mov	r5,r3
  801fa8:	2005883a 	mov	r2,r4
  801fac:	2807883a 	mov	r3,r5
  801fb0:	100d883a 	mov	r6,r2
  801fb4:	180f883a 	mov	r7,r3
  801fb8:	8009883a 	mov	r4,r16
  801fbc:	880b883a 	mov	r5,r17
  801fc0:	080527c0 	call	80527c <__ledf2>
  801fc4:	1000040e 	bge	r2,zero,801fd8 <logic+0x1d48>
  801fc8:	e13ffd17 	ldw	r4,-12(fp)
  801fcc:	20800617 	ldw	r2,24(r4)
  801fd0:	20c00717 	ldw	r3,28(r4)
  801fd4:	00000c06 	br	802008 <logic+0x1d78>
  801fd8:	e13ffd17 	ldw	r4,-12(fp)
  801fdc:	20800017 	ldw	r2,0(r4)
  801fe0:	20c00117 	ldw	r3,4(r4)
  801fe4:	100d883a 	mov	r6,r2
  801fe8:	180f883a 	mov	r7,r3
  801fec:	0009883a 	mov	r4,zero
  801ff0:	01501274 	movhi	r5,16457
  801ff4:	0805a880 	call	805a88 <__subdf3>
  801ff8:	1009883a 	mov	r4,r2
  801ffc:	180b883a 	mov	r5,r3
  802000:	2005883a 	mov	r2,r4
  802004:	2807883a 	mov	r3,r5
  802008:	e13ffd17 	ldw	r4,-12(fp)
  80200c:	20800615 	stw	r2,24(r4)
  802010:	20c00715 	stw	r3,28(r4)
  }
  d->_cg9 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802014:	e0bffd17 	ldw	r2,-12(fp)
  802018:	10800903 	ldbu	r2,36(r2)
  80201c:	10803fcc 	andi	r2,r2,255
  802020:	1080201c 	xori	r2,r2,128
  802024:	10bfe004 	addi	r2,r2,-128
  802028:	1000061e 	bne	r2,zero,802044 <logic+0x1db4>
  80202c:	e0bffd17 	ldw	r2,-12(fp)
  802030:	10800943 	ldbu	r2,37(r2)
  802034:	10803fcc 	andi	r2,r2,255
  802038:	1080201c 	xori	r2,r2,128
  80203c:	10bfe004 	addi	r2,r2,-128
  802040:	10000226 	beq	r2,zero,80204c <logic+0x1dbc>
  802044:	00800044 	movi	r2,1
  802048:	00000106 	br	802050 <logic+0x1dc0>
  80204c:	0005883a 	mov	r2,zero
  802050:	1007883a 	mov	r3,r2
  802054:	e0bffd17 	ldw	r2,-12(fp)
  802058:	10c01bc5 	stb	r3,111(r2)
  d->_g118 = d->_pg108;
  80205c:	e0bffd17 	ldw	r2,-12(fp)
  802060:	10c02ec3 	ldbu	r3,187(r2)
  802064:	e0bffd17 	ldw	r2,-12(fp)
  802068:	10c01a85 	stb	r3,106(r2)
  d->_g106 = d->_pg13;
  80206c:	e0bffd17 	ldw	r2,-12(fp)
  802070:	10c02f03 	ldbu	r3,188(r2)
  802074:	e0bffd17 	ldw	r2,-12(fp)
  802078:	10c01985 	stb	r3,102(r2)
  d->_g107 = d->_g118 || d->_g106;
  80207c:	e0bffd17 	ldw	r2,-12(fp)
  802080:	10801a83 	ldbu	r2,106(r2)
  802084:	10803fcc 	andi	r2,r2,255
  802088:	1080201c 	xori	r2,r2,128
  80208c:	10bfe004 	addi	r2,r2,-128
  802090:	1000061e 	bne	r2,zero,8020ac <logic+0x1e1c>
  802094:	e0bffd17 	ldw	r2,-12(fp)
  802098:	10801983 	ldbu	r2,102(r2)
  80209c:	10803fcc 	andi	r2,r2,255
  8020a0:	1080201c 	xori	r2,r2,128
  8020a4:	10bfe004 	addi	r2,r2,-128
  8020a8:	10000226 	beq	r2,zero,8020b4 <logic+0x1e24>
  8020ac:	00800044 	movi	r2,1
  8020b0:	00000106 	br	8020b8 <logic+0x1e28>
  8020b4:	0005883a 	mov	r2,zero
  8020b8:	1007883a 	mov	r3,r2
  8020bc:	e0bffd17 	ldw	r2,-12(fp)
  8020c0:	10c019c5 	stb	r3,103(r2)
  d->_cg12 = d->_region0_Atrium_VentricleTimer < PVARP_VALUE;
  8020c4:	e13ffd17 	ldw	r4,-12(fp)
  8020c8:	20800017 	ldw	r2,0(r4)
  8020cc:	20c00117 	ldw	r3,4(r4)
  8020d0:	04000044 	movi	r16,1
  8020d4:	000d883a 	mov	r6,zero
  8020d8:	01d01274 	movhi	r7,16457
  8020dc:	1009883a 	mov	r4,r2
  8020e0:	180b883a 	mov	r5,r3
  8020e4:	080527c0 	call	80527c <__ledf2>
  8020e8:	10000116 	blt	r2,zero,8020f0 <logic+0x1e60>
  8020ec:	0021883a 	mov	r16,zero
  8020f0:	8007883a 	mov	r3,r16
  8020f4:	e0bffd17 	ldw	r2,-12(fp)
  8020f8:	10c01c45 	stb	r3,113(r2)
  d->_g104 = d->_g107 && d->_cg12;
  8020fc:	e0bffd17 	ldw	r2,-12(fp)
  802100:	108019c3 	ldbu	r2,103(r2)
  802104:	10803fcc 	andi	r2,r2,255
  802108:	1080201c 	xori	r2,r2,128
  80210c:	10bfe004 	addi	r2,r2,-128
  802110:	10000826 	beq	r2,zero,802134 <logic+0x1ea4>
  802114:	e0bffd17 	ldw	r2,-12(fp)
  802118:	10801c43 	ldbu	r2,113(r2)
  80211c:	10803fcc 	andi	r2,r2,255
  802120:	1080201c 	xori	r2,r2,128
  802124:	10bfe004 	addi	r2,r2,-128
  802128:	10000226 	beq	r2,zero,802134 <logic+0x1ea4>
  80212c:	00800044 	movi	r2,1
  802130:	00000106 	br	802138 <logic+0x1ea8>
  802134:	0005883a 	mov	r2,zero
  802138:	1007883a 	mov	r3,r2
  80213c:	e0bffd17 	ldw	r2,-12(fp)
  802140:	10c01905 	stb	r3,100(r2)
  if (d->_g104) {
  802144:	e0bffd17 	ldw	r2,-12(fp)
  802148:	10801903 	ldbu	r2,100(r2)
  80214c:	10803fcc 	andi	r2,r2,255
  802150:	1080201c 	xori	r2,r2,128
  802154:	10bfe004 	addi	r2,r2,-128
  802158:	10002826 	beq	r2,zero,8021fc <logic+0x1f6c>
    d->sleepT = (d->sleepT < (PVARP_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (PVARP_VALUE - d->_region0_Atrium_VentricleTimer);
  80215c:	e0bffd17 	ldw	r2,-12(fp)
  802160:	14000617 	ldw	r16,24(r2)
  802164:	14400717 	ldw	r17,28(r2)
  802168:	e13ffd17 	ldw	r4,-12(fp)
  80216c:	20800017 	ldw	r2,0(r4)
  802170:	20c00117 	ldw	r3,4(r4)
  802174:	100d883a 	mov	r6,r2
  802178:	180f883a 	mov	r7,r3
  80217c:	0009883a 	mov	r4,zero
  802180:	01501274 	movhi	r5,16457
  802184:	0805a880 	call	805a88 <__subdf3>
  802188:	1009883a 	mov	r4,r2
  80218c:	180b883a 	mov	r5,r3
  802190:	2005883a 	mov	r2,r4
  802194:	2807883a 	mov	r3,r5
  802198:	100d883a 	mov	r6,r2
  80219c:	180f883a 	mov	r7,r3
  8021a0:	8009883a 	mov	r4,r16
  8021a4:	880b883a 	mov	r5,r17
  8021a8:	080527c0 	call	80527c <__ledf2>
  8021ac:	1000040e 	bge	r2,zero,8021c0 <logic+0x1f30>
  8021b0:	e13ffd17 	ldw	r4,-12(fp)
  8021b4:	20800617 	ldw	r2,24(r4)
  8021b8:	20c00717 	ldw	r3,28(r4)
  8021bc:	00000c06 	br	8021f0 <logic+0x1f60>
  8021c0:	e13ffd17 	ldw	r4,-12(fp)
  8021c4:	20800017 	ldw	r2,0(r4)
  8021c8:	20c00117 	ldw	r3,4(r4)
  8021cc:	100d883a 	mov	r6,r2
  8021d0:	180f883a 	mov	r7,r3
  8021d4:	0009883a 	mov	r4,zero
  8021d8:	01501274 	movhi	r5,16457
  8021dc:	0805a880 	call	805a88 <__subdf3>
  8021e0:	1009883a 	mov	r4,r2
  8021e4:	180b883a 	mov	r5,r3
  8021e8:	2005883a 	mov	r2,r4
  8021ec:	2807883a 	mov	r3,r5
  8021f0:	e13ffd17 	ldw	r4,-12(fp)
  8021f4:	20800615 	stw	r2,24(r4)
  8021f8:	20c00715 	stw	r3,28(r4)
  }
  d->_cg13 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8021fc:	e0bffd17 	ldw	r2,-12(fp)
  802200:	10800903 	ldbu	r2,36(r2)
  802204:	10803fcc 	andi	r2,r2,255
  802208:	1080201c 	xori	r2,r2,128
  80220c:	10bfe004 	addi	r2,r2,-128
  802210:	1000061e 	bne	r2,zero,80222c <logic+0x1f9c>
  802214:	e0bffd17 	ldw	r2,-12(fp)
  802218:	10800943 	ldbu	r2,37(r2)
  80221c:	10803fcc 	andi	r2,r2,255
  802220:	1080201c 	xori	r2,r2,128
  802224:	10bfe004 	addi	r2,r2,-128
  802228:	10000226 	beq	r2,zero,802234 <logic+0x1fa4>
  80222c:	00800044 	movi	r2,1
  802230:	00000106 	br	802238 <logic+0x1fa8>
  802234:	0005883a 	mov	r2,zero
  802238:	1007883a 	mov	r3,r2
  80223c:	e0bffd17 	ldw	r2,-12(fp)
  802240:	10c01c05 	stb	r3,112(r2)
  d->_g108 = d->_g90_e6 && !d->_cg9 || d->_g104 && !d->_cg13;
  802244:	e0bffd17 	ldw	r2,-12(fp)
  802248:	10802a83 	ldbu	r2,170(r2)
  80224c:	10803fcc 	andi	r2,r2,255
  802250:	1080201c 	xori	r2,r2,128
  802254:	10bfe004 	addi	r2,r2,-128
  802258:	10000626 	beq	r2,zero,802274 <logic+0x1fe4>
  80225c:	e0bffd17 	ldw	r2,-12(fp)
  802260:	10801bc3 	ldbu	r2,111(r2)
  802264:	10803fcc 	andi	r2,r2,255
  802268:	1080201c 	xori	r2,r2,128
  80226c:	10bfe004 	addi	r2,r2,-128
  802270:	10000c26 	beq	r2,zero,8022a4 <logic+0x2014>
  802274:	e0bffd17 	ldw	r2,-12(fp)
  802278:	10801903 	ldbu	r2,100(r2)
  80227c:	10803fcc 	andi	r2,r2,255
  802280:	1080201c 	xori	r2,r2,128
  802284:	10bfe004 	addi	r2,r2,-128
  802288:	10000826 	beq	r2,zero,8022ac <logic+0x201c>
  80228c:	e0bffd17 	ldw	r2,-12(fp)
  802290:	10801c03 	ldbu	r2,112(r2)
  802294:	10803fcc 	andi	r2,r2,255
  802298:	1080201c 	xori	r2,r2,128
  80229c:	10bfe004 	addi	r2,r2,-128
  8022a0:	1000021e 	bne	r2,zero,8022ac <logic+0x201c>
  8022a4:	00800044 	movi	r2,1
  8022a8:	00000106 	br	8022b0 <logic+0x2020>
  8022ac:	0005883a 	mov	r2,zero
  8022b0:	1007883a 	mov	r3,r2
  8022b4:	e0bffd17 	ldw	r2,-12(fp)
  8022b8:	10c01a05 	stb	r3,104(r2)
  d->_g105 = d->_g107 && !d->_cg12;
  8022bc:	e0bffd17 	ldw	r2,-12(fp)
  8022c0:	108019c3 	ldbu	r2,103(r2)
  8022c4:	10803fcc 	andi	r2,r2,255
  8022c8:	1080201c 	xori	r2,r2,128
  8022cc:	10bfe004 	addi	r2,r2,-128
  8022d0:	10000826 	beq	r2,zero,8022f4 <logic+0x2064>
  8022d4:	e0bffd17 	ldw	r2,-12(fp)
  8022d8:	10801c43 	ldbu	r2,113(r2)
  8022dc:	10803fcc 	andi	r2,r2,255
  8022e0:	1080201c 	xori	r2,r2,128
  8022e4:	10bfe004 	addi	r2,r2,-128
  8022e8:	1000021e 	bne	r2,zero,8022f4 <logic+0x2064>
  8022ec:	00800044 	movi	r2,1
  8022f0:	00000106 	br	8022f8 <logic+0x2068>
  8022f4:	0005883a 	mov	r2,zero
  8022f8:	1007883a 	mov	r3,r2
  8022fc:	e0bffd17 	ldw	r2,-12(fp)
  802300:	10c01945 	stb	r3,101(r2)
  d->_cg15 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802304:	e0bffd17 	ldw	r2,-12(fp)
  802308:	10800903 	ldbu	r2,36(r2)
  80230c:	10803fcc 	andi	r2,r2,255
  802310:	1080201c 	xori	r2,r2,128
  802314:	10bfe004 	addi	r2,r2,-128
  802318:	1000061e 	bne	r2,zero,802334 <logic+0x20a4>
  80231c:	e0bffd17 	ldw	r2,-12(fp)
  802320:	10800943 	ldbu	r2,37(r2)
  802324:	10803fcc 	andi	r2,r2,255
  802328:	1080201c 	xori	r2,r2,128
  80232c:	10bfe004 	addi	r2,r2,-128
  802330:	10000226 	beq	r2,zero,80233c <logic+0x20ac>
  802334:	00800044 	movi	r2,1
  802338:	00000106 	br	802340 <logic+0x20b0>
  80233c:	0005883a 	mov	r2,zero
  802340:	1007883a 	mov	r3,r2
  802344:	e0bffd17 	ldw	r2,-12(fp)
  802348:	10c01c85 	stb	r3,114(r2)
  d->_g9 = d->_g104 && d->_cg13 || d->_g105 && d->_cg15;
  80234c:	e0bffd17 	ldw	r2,-12(fp)
  802350:	10801903 	ldbu	r2,100(r2)
  802354:	10803fcc 	andi	r2,r2,255
  802358:	1080201c 	xori	r2,r2,128
  80235c:	10bfe004 	addi	r2,r2,-128
  802360:	10000626 	beq	r2,zero,80237c <logic+0x20ec>
  802364:	e0bffd17 	ldw	r2,-12(fp)
  802368:	10801c03 	ldbu	r2,112(r2)
  80236c:	10803fcc 	andi	r2,r2,255
  802370:	1080201c 	xori	r2,r2,128
  802374:	10bfe004 	addi	r2,r2,-128
  802378:	10000c1e 	bne	r2,zero,8023ac <logic+0x211c>
  80237c:	e0bffd17 	ldw	r2,-12(fp)
  802380:	10801943 	ldbu	r2,101(r2)
  802384:	10803fcc 	andi	r2,r2,255
  802388:	1080201c 	xori	r2,r2,128
  80238c:	10bfe004 	addi	r2,r2,-128
  802390:	10000826 	beq	r2,zero,8023b4 <logic+0x2124>
  802394:	e0bffd17 	ldw	r2,-12(fp)
  802398:	10801c83 	ldbu	r2,114(r2)
  80239c:	10803fcc 	andi	r2,r2,255
  8023a0:	1080201c 	xori	r2,r2,128
  8023a4:	10bfe004 	addi	r2,r2,-128
  8023a8:	10000226 	beq	r2,zero,8023b4 <logic+0x2124>
  8023ac:	00800044 	movi	r2,1
  8023b0:	00000106 	br	8023b8 <logic+0x2128>
  8023b4:	0005883a 	mov	r2,zero
  8023b8:	1007883a 	mov	r3,r2
  8023bc:	e0bffd17 	ldw	r2,-12(fp)
  8023c0:	10c00b05 	stb	r3,44(r2)
  d->_g12 = d->_g53 && !d->_cg8;
  8023c4:	e0bffd17 	ldw	r2,-12(fp)
  8023c8:	108012c3 	ldbu	r2,75(r2)
  8023cc:	10803fcc 	andi	r2,r2,255
  8023d0:	1080201c 	xori	r2,r2,128
  8023d4:	10bfe004 	addi	r2,r2,-128
  8023d8:	10000826 	beq	r2,zero,8023fc <logic+0x216c>
  8023dc:	e0bffd17 	ldw	r2,-12(fp)
  8023e0:	10801b83 	ldbu	r2,110(r2)
  8023e4:	10803fcc 	andi	r2,r2,255
  8023e8:	1080201c 	xori	r2,r2,128
  8023ec:	10bfe004 	addi	r2,r2,-128
  8023f0:	1000021e 	bne	r2,zero,8023fc <logic+0x216c>
  8023f4:	00800044 	movi	r2,1
  8023f8:	00000106 	br	802400 <logic+0x2170>
  8023fc:	0005883a 	mov	r2,zero
  802400:	1007883a 	mov	r3,r2
  802404:	e0bffd17 	ldw	r2,-12(fp)
  802408:	10c00b85 	stb	r3,46(r2)
  d->_cg18 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  80240c:	e0bffd17 	ldw	r2,-12(fp)
  802410:	10800903 	ldbu	r2,36(r2)
  802414:	10803fcc 	andi	r2,r2,255
  802418:	1080201c 	xori	r2,r2,128
  80241c:	10bfe004 	addi	r2,r2,-128
  802420:	1000061e 	bne	r2,zero,80243c <logic+0x21ac>
  802424:	e0bffd17 	ldw	r2,-12(fp)
  802428:	10800943 	ldbu	r2,37(r2)
  80242c:	10803fcc 	andi	r2,r2,255
  802430:	1080201c 	xori	r2,r2,128
  802434:	10bfe004 	addi	r2,r2,-128
  802438:	10000226 	beq	r2,zero,802444 <logic+0x21b4>
  80243c:	00800044 	movi	r2,1
  802440:	00000106 	br	802448 <logic+0x21b8>
  802444:	0005883a 	mov	r2,zero
  802448:	1007883a 	mov	r3,r2
  80244c:	e0bffd17 	ldw	r2,-12(fp)
  802450:	10c01cc5 	stb	r3,115(r2)
  d->_g13 = d->_g105 && !d->_cg15 || d->_g12 && !d->_cg18;
  802454:	e0bffd17 	ldw	r2,-12(fp)
  802458:	10801943 	ldbu	r2,101(r2)
  80245c:	10803fcc 	andi	r2,r2,255
  802460:	1080201c 	xori	r2,r2,128
  802464:	10bfe004 	addi	r2,r2,-128
  802468:	10000626 	beq	r2,zero,802484 <logic+0x21f4>
  80246c:	e0bffd17 	ldw	r2,-12(fp)
  802470:	10801c83 	ldbu	r2,114(r2)
  802474:	10803fcc 	andi	r2,r2,255
  802478:	1080201c 	xori	r2,r2,128
  80247c:	10bfe004 	addi	r2,r2,-128
  802480:	10000c26 	beq	r2,zero,8024b4 <logic+0x2224>
  802484:	e0bffd17 	ldw	r2,-12(fp)
  802488:	10800b83 	ldbu	r2,46(r2)
  80248c:	10803fcc 	andi	r2,r2,255
  802490:	1080201c 	xori	r2,r2,128
  802494:	10bfe004 	addi	r2,r2,-128
  802498:	10000826 	beq	r2,zero,8024bc <logic+0x222c>
  80249c:	e0bffd17 	ldw	r2,-12(fp)
  8024a0:	10801cc3 	ldbu	r2,115(r2)
  8024a4:	10803fcc 	andi	r2,r2,255
  8024a8:	1080201c 	xori	r2,r2,128
  8024ac:	10bfe004 	addi	r2,r2,-128
  8024b0:	1000021e 	bne	r2,zero,8024bc <logic+0x222c>
  8024b4:	00800044 	movi	r2,1
  8024b8:	00000106 	br	8024c0 <logic+0x2230>
  8024bc:	0005883a 	mov	r2,zero
  8024c0:	1007883a 	mov	r3,r2
  8024c4:	e0bffd17 	ldw	r2,-12(fp)
  8024c8:	10c00bc5 	stb	r3,47(r2)
  d->_cg19 = d->_region0_Atrium_VentricleTimer < AEI_VALUE;
  8024cc:	e13ffd17 	ldw	r4,-12(fp)
  8024d0:	20800017 	ldw	r2,0(r4)
  8024d4:	20c00117 	ldw	r3,4(r4)
  8024d8:	04000044 	movi	r16,1
  8024dc:	000d883a 	mov	r6,zero
  8024e0:	01d02274 	movhi	r7,16521
  8024e4:	1009883a 	mov	r4,r2
  8024e8:	180b883a 	mov	r5,r3
  8024ec:	080527c0 	call	80527c <__ledf2>
  8024f0:	10000116 	blt	r2,zero,8024f8 <logic+0x2268>
  8024f4:	0021883a 	mov	r16,zero
  8024f8:	8007883a 	mov	r3,r16
  8024fc:	e0bffd17 	ldw	r2,-12(fp)
  802500:	10c01d05 	stb	r3,116(r2)
  d->_g15 = d->_g53 && d->_cg19;
  802504:	e0bffd17 	ldw	r2,-12(fp)
  802508:	108012c3 	ldbu	r2,75(r2)
  80250c:	10803fcc 	andi	r2,r2,255
  802510:	1080201c 	xori	r2,r2,128
  802514:	10bfe004 	addi	r2,r2,-128
  802518:	10000826 	beq	r2,zero,80253c <logic+0x22ac>
  80251c:	e0bffd17 	ldw	r2,-12(fp)
  802520:	10801d03 	ldbu	r2,116(r2)
  802524:	10803fcc 	andi	r2,r2,255
  802528:	1080201c 	xori	r2,r2,128
  80252c:	10bfe004 	addi	r2,r2,-128
  802530:	10000226 	beq	r2,zero,80253c <logic+0x22ac>
  802534:	00800044 	movi	r2,1
  802538:	00000106 	br	802540 <logic+0x22b0>
  80253c:	0005883a 	mov	r2,zero
  802540:	1007883a 	mov	r3,r2
  802544:	e0bffd17 	ldw	r2,-12(fp)
  802548:	10c00c45 	stb	r3,49(r2)
  if (d->_g15) {
  80254c:	e0bffd17 	ldw	r2,-12(fp)
  802550:	10800c43 	ldbu	r2,49(r2)
  802554:	10803fcc 	andi	r2,r2,255
  802558:	1080201c 	xori	r2,r2,128
  80255c:	10bfe004 	addi	r2,r2,-128
  802560:	10002826 	beq	r2,zero,802604 <logic+0x2374>
    d->sleepT = (d->sleepT < (AEI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (AEI_VALUE - d->_region0_Atrium_VentricleTimer);
  802564:	e0bffd17 	ldw	r2,-12(fp)
  802568:	14000617 	ldw	r16,24(r2)
  80256c:	14400717 	ldw	r17,28(r2)
  802570:	e13ffd17 	ldw	r4,-12(fp)
  802574:	20800017 	ldw	r2,0(r4)
  802578:	20c00117 	ldw	r3,4(r4)
  80257c:	100d883a 	mov	r6,r2
  802580:	180f883a 	mov	r7,r3
  802584:	0009883a 	mov	r4,zero
  802588:	01502274 	movhi	r5,16521
  80258c:	0805a880 	call	805a88 <__subdf3>
  802590:	1009883a 	mov	r4,r2
  802594:	180b883a 	mov	r5,r3
  802598:	2005883a 	mov	r2,r4
  80259c:	2807883a 	mov	r3,r5
  8025a0:	100d883a 	mov	r6,r2
  8025a4:	180f883a 	mov	r7,r3
  8025a8:	8009883a 	mov	r4,r16
  8025ac:	880b883a 	mov	r5,r17
  8025b0:	080527c0 	call	80527c <__ledf2>
  8025b4:	1000040e 	bge	r2,zero,8025c8 <logic+0x2338>
  8025b8:	e13ffd17 	ldw	r4,-12(fp)
  8025bc:	20800617 	ldw	r2,24(r4)
  8025c0:	20c00717 	ldw	r3,28(r4)
  8025c4:	00000c06 	br	8025f8 <logic+0x2368>
  8025c8:	e13ffd17 	ldw	r4,-12(fp)
  8025cc:	20800017 	ldw	r2,0(r4)
  8025d0:	20c00117 	ldw	r3,4(r4)
  8025d4:	100d883a 	mov	r6,r2
  8025d8:	180f883a 	mov	r7,r3
  8025dc:	0009883a 	mov	r4,zero
  8025e0:	01502274 	movhi	r5,16521
  8025e4:	0805a880 	call	805a88 <__subdf3>
  8025e8:	1009883a 	mov	r4,r2
  8025ec:	180b883a 	mov	r5,r3
  8025f0:	2005883a 	mov	r2,r4
  8025f4:	2807883a 	mov	r3,r5
  8025f8:	e13ffd17 	ldw	r4,-12(fp)
  8025fc:	20800615 	stw	r2,24(r4)
  802600:	20c00715 	stw	r3,28(r4)
  }
  d->_cg20 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802604:	e0bffd17 	ldw	r2,-12(fp)
  802608:	10800903 	ldbu	r2,36(r2)
  80260c:	10803fcc 	andi	r2,r2,255
  802610:	1080201c 	xori	r2,r2,128
  802614:	10bfe004 	addi	r2,r2,-128
  802618:	1000061e 	bne	r2,zero,802634 <logic+0x23a4>
  80261c:	e0bffd17 	ldw	r2,-12(fp)
  802620:	10800943 	ldbu	r2,37(r2)
  802624:	10803fcc 	andi	r2,r2,255
  802628:	1080201c 	xori	r2,r2,128
  80262c:	10bfe004 	addi	r2,r2,-128
  802630:	10000226 	beq	r2,zero,80263c <logic+0x23ac>
  802634:	00800044 	movi	r2,1
  802638:	00000106 	br	802640 <logic+0x23b0>
  80263c:	0005883a 	mov	r2,zero
  802640:	1007883a 	mov	r3,r2
  802644:	e0bffd17 	ldw	r2,-12(fp)
  802648:	10c01d45 	stb	r3,117(r2)
  d->_g18 = d->_pg20;
  80264c:	e0bffd17 	ldw	r2,-12(fp)
  802650:	10c02f43 	ldbu	r3,189(r2)
  802654:	e0bffd17 	ldw	r2,-12(fp)
  802658:	10c00cc5 	stb	r3,51(r2)
  d->_g28 = d->_pg26;
  80265c:	e0bffd17 	ldw	r2,-12(fp)
  802660:	10c02f83 	ldbu	r3,190(r2)
  802664:	e0bffd17 	ldw	r2,-12(fp)
  802668:	10c00e85 	stb	r3,58(r2)
  d->_g23 = d->_g18 || d->_g28;
  80266c:	e0bffd17 	ldw	r2,-12(fp)
  802670:	10800cc3 	ldbu	r2,51(r2)
  802674:	10803fcc 	andi	r2,r2,255
  802678:	1080201c 	xori	r2,r2,128
  80267c:	10bfe004 	addi	r2,r2,-128
  802680:	1000061e 	bne	r2,zero,80269c <logic+0x240c>
  802684:	e0bffd17 	ldw	r2,-12(fp)
  802688:	10800e83 	ldbu	r2,58(r2)
  80268c:	10803fcc 	andi	r2,r2,255
  802690:	1080201c 	xori	r2,r2,128
  802694:	10bfe004 	addi	r2,r2,-128
  802698:	10000226 	beq	r2,zero,8026a4 <logic+0x2414>
  80269c:	00800044 	movi	r2,1
  8026a0:	00000106 	br	8026a8 <logic+0x2418>
  8026a4:	0005883a 	mov	r2,zero
  8026a8:	1007883a 	mov	r3,r2
  8026ac:	e0bffd17 	ldw	r2,-12(fp)
  8026b0:	10c00d85 	stb	r3,54(r2)
  d->_cg23 = d->_region0_Atrium_VentricleTimer < AEI_VALUE;
  8026b4:	e13ffd17 	ldw	r4,-12(fp)
  8026b8:	20800017 	ldw	r2,0(r4)
  8026bc:	20c00117 	ldw	r3,4(r4)
  8026c0:	04000044 	movi	r16,1
  8026c4:	000d883a 	mov	r6,zero
  8026c8:	01d02274 	movhi	r7,16521
  8026cc:	1009883a 	mov	r4,r2
  8026d0:	180b883a 	mov	r5,r3
  8026d4:	080527c0 	call	80527c <__ledf2>
  8026d8:	10000116 	blt	r2,zero,8026e0 <logic+0x2450>
  8026dc:	0021883a 	mov	r16,zero
  8026e0:	8007883a 	mov	r3,r16
  8026e4:	e0bffd17 	ldw	r2,-12(fp)
  8026e8:	10c01dc5 	stb	r3,119(r2)
  d->_g24 = d->_g23 && d->_cg23;
  8026ec:	e0bffd17 	ldw	r2,-12(fp)
  8026f0:	10800d83 	ldbu	r2,54(r2)
  8026f4:	10803fcc 	andi	r2,r2,255
  8026f8:	1080201c 	xori	r2,r2,128
  8026fc:	10bfe004 	addi	r2,r2,-128
  802700:	10000826 	beq	r2,zero,802724 <logic+0x2494>
  802704:	e0bffd17 	ldw	r2,-12(fp)
  802708:	10801dc3 	ldbu	r2,119(r2)
  80270c:	10803fcc 	andi	r2,r2,255
  802710:	1080201c 	xori	r2,r2,128
  802714:	10bfe004 	addi	r2,r2,-128
  802718:	10000226 	beq	r2,zero,802724 <logic+0x2494>
  80271c:	00800044 	movi	r2,1
  802720:	00000106 	br	802728 <logic+0x2498>
  802724:	0005883a 	mov	r2,zero
  802728:	1007883a 	mov	r3,r2
  80272c:	e0bffd17 	ldw	r2,-12(fp)
  802730:	10c00dc5 	stb	r3,55(r2)
  if (d->_g24) {
  802734:	e0bffd17 	ldw	r2,-12(fp)
  802738:	10800dc3 	ldbu	r2,55(r2)
  80273c:	10803fcc 	andi	r2,r2,255
  802740:	1080201c 	xori	r2,r2,128
  802744:	10bfe004 	addi	r2,r2,-128
  802748:	10002826 	beq	r2,zero,8027ec <logic+0x255c>
    d->sleepT = (d->sleepT < (AEI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (AEI_VALUE - d->_region0_Atrium_VentricleTimer);
  80274c:	e0bffd17 	ldw	r2,-12(fp)
  802750:	14000617 	ldw	r16,24(r2)
  802754:	14400717 	ldw	r17,28(r2)
  802758:	e13ffd17 	ldw	r4,-12(fp)
  80275c:	20800017 	ldw	r2,0(r4)
  802760:	20c00117 	ldw	r3,4(r4)
  802764:	100d883a 	mov	r6,r2
  802768:	180f883a 	mov	r7,r3
  80276c:	0009883a 	mov	r4,zero
  802770:	01502274 	movhi	r5,16521
  802774:	0805a880 	call	805a88 <__subdf3>
  802778:	1009883a 	mov	r4,r2
  80277c:	180b883a 	mov	r5,r3
  802780:	2005883a 	mov	r2,r4
  802784:	2807883a 	mov	r3,r5
  802788:	100d883a 	mov	r6,r2
  80278c:	180f883a 	mov	r7,r3
  802790:	8009883a 	mov	r4,r16
  802794:	880b883a 	mov	r5,r17
  802798:	080527c0 	call	80527c <__ledf2>
  80279c:	1000040e 	bge	r2,zero,8027b0 <logic+0x2520>
  8027a0:	e13ffd17 	ldw	r4,-12(fp)
  8027a4:	20800617 	ldw	r2,24(r4)
  8027a8:	20c00717 	ldw	r3,28(r4)
  8027ac:	00000c06 	br	8027e0 <logic+0x2550>
  8027b0:	e13ffd17 	ldw	r4,-12(fp)
  8027b4:	20800017 	ldw	r2,0(r4)
  8027b8:	20c00117 	ldw	r3,4(r4)
  8027bc:	100d883a 	mov	r6,r2
  8027c0:	180f883a 	mov	r7,r3
  8027c4:	0009883a 	mov	r4,zero
  8027c8:	01502274 	movhi	r5,16521
  8027cc:	0805a880 	call	805a88 <__subdf3>
  8027d0:	1009883a 	mov	r4,r2
  8027d4:	180b883a 	mov	r5,r3
  8027d8:	2005883a 	mov	r2,r4
  8027dc:	2807883a 	mov	r3,r5
  8027e0:	e13ffd17 	ldw	r4,-12(fp)
  8027e4:	20800615 	stw	r2,24(r4)
  8027e8:	20c00715 	stw	r3,28(r4)
  }
  d->_cg24 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8027ec:	e0bffd17 	ldw	r2,-12(fp)
  8027f0:	10800903 	ldbu	r2,36(r2)
  8027f4:	10803fcc 	andi	r2,r2,255
  8027f8:	1080201c 	xori	r2,r2,128
  8027fc:	10bfe004 	addi	r2,r2,-128
  802800:	1000061e 	bne	r2,zero,80281c <logic+0x258c>
  802804:	e0bffd17 	ldw	r2,-12(fp)
  802808:	10800943 	ldbu	r2,37(r2)
  80280c:	10803fcc 	andi	r2,r2,255
  802810:	1080201c 	xori	r2,r2,128
  802814:	10bfe004 	addi	r2,r2,-128
  802818:	10000226 	beq	r2,zero,802824 <logic+0x2594>
  80281c:	00800044 	movi	r2,1
  802820:	00000106 	br	802828 <logic+0x2598>
  802824:	0005883a 	mov	r2,zero
  802828:	1007883a 	mov	r3,r2
  80282c:	e0bffd17 	ldw	r2,-12(fp)
  802830:	10c01d85 	stb	r3,118(r2)
  d->_g20 = d->_g15 && !d->_cg20 || d->_g24 && !d->_cg24;
  802834:	e0bffd17 	ldw	r2,-12(fp)
  802838:	10800c43 	ldbu	r2,49(r2)
  80283c:	10803fcc 	andi	r2,r2,255
  802840:	1080201c 	xori	r2,r2,128
  802844:	10bfe004 	addi	r2,r2,-128
  802848:	10000626 	beq	r2,zero,802864 <logic+0x25d4>
  80284c:	e0bffd17 	ldw	r2,-12(fp)
  802850:	10801d43 	ldbu	r2,117(r2)
  802854:	10803fcc 	andi	r2,r2,255
  802858:	1080201c 	xori	r2,r2,128
  80285c:	10bfe004 	addi	r2,r2,-128
  802860:	10000c26 	beq	r2,zero,802894 <logic+0x2604>
  802864:	e0bffd17 	ldw	r2,-12(fp)
  802868:	10800dc3 	ldbu	r2,55(r2)
  80286c:	10803fcc 	andi	r2,r2,255
  802870:	1080201c 	xori	r2,r2,128
  802874:	10bfe004 	addi	r2,r2,-128
  802878:	10000826 	beq	r2,zero,80289c <logic+0x260c>
  80287c:	e0bffd17 	ldw	r2,-12(fp)
  802880:	10801d83 	ldbu	r2,118(r2)
  802884:	10803fcc 	andi	r2,r2,255
  802888:	1080201c 	xori	r2,r2,128
  80288c:	10bfe004 	addi	r2,r2,-128
  802890:	1000021e 	bne	r2,zero,80289c <logic+0x260c>
  802894:	00800044 	movi	r2,1
  802898:	00000106 	br	8028a0 <logic+0x2610>
  80289c:	0005883a 	mov	r2,zero
  8028a0:	1007883a 	mov	r3,r2
  8028a4:	e0bffd17 	ldw	r2,-12(fp)
  8028a8:	10c00d05 	stb	r3,52(r2)
  d->_g23 = d->_g23 && !d->_cg23;
  8028ac:	e0bffd17 	ldw	r2,-12(fp)
  8028b0:	10800d83 	ldbu	r2,54(r2)
  8028b4:	10803fcc 	andi	r2,r2,255
  8028b8:	1080201c 	xori	r2,r2,128
  8028bc:	10bfe004 	addi	r2,r2,-128
  8028c0:	10000826 	beq	r2,zero,8028e4 <logic+0x2654>
  8028c4:	e0bffd17 	ldw	r2,-12(fp)
  8028c8:	10801dc3 	ldbu	r2,119(r2)
  8028cc:	10803fcc 	andi	r2,r2,255
  8028d0:	1080201c 	xori	r2,r2,128
  8028d4:	10bfe004 	addi	r2,r2,-128
  8028d8:	1000021e 	bne	r2,zero,8028e4 <logic+0x2654>
  8028dc:	00800044 	movi	r2,1
  8028e0:	00000106 	br	8028e8 <logic+0x2658>
  8028e4:	0005883a 	mov	r2,zero
  8028e8:	1007883a 	mov	r3,r2
  8028ec:	e0bffd17 	ldw	r2,-12(fp)
  8028f0:	10c00d85 	stb	r3,54(r2)
  d->_cg26 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8028f4:	e0bffd17 	ldw	r2,-12(fp)
  8028f8:	10800903 	ldbu	r2,36(r2)
  8028fc:	10803fcc 	andi	r2,r2,255
  802900:	1080201c 	xori	r2,r2,128
  802904:	10bfe004 	addi	r2,r2,-128
  802908:	1000061e 	bne	r2,zero,802924 <logic+0x2694>
  80290c:	e0bffd17 	ldw	r2,-12(fp)
  802910:	10800943 	ldbu	r2,37(r2)
  802914:	10803fcc 	andi	r2,r2,255
  802918:	1080201c 	xori	r2,r2,128
  80291c:	10bfe004 	addi	r2,r2,-128
  802920:	10000226 	beq	r2,zero,80292c <logic+0x269c>
  802924:	00800044 	movi	r2,1
  802928:	00000106 	br	802930 <logic+0x26a0>
  80292c:	0005883a 	mov	r2,zero
  802930:	1007883a 	mov	r3,r2
  802934:	e0bffd17 	ldw	r2,-12(fp)
  802938:	10c01e05 	stb	r3,120(r2)
  d->_g24 = d->_g24 && d->_cg24 || d->_g23 && d->_cg26;
  80293c:	e0bffd17 	ldw	r2,-12(fp)
  802940:	10800dc3 	ldbu	r2,55(r2)
  802944:	10803fcc 	andi	r2,r2,255
  802948:	1080201c 	xori	r2,r2,128
  80294c:	10bfe004 	addi	r2,r2,-128
  802950:	10000626 	beq	r2,zero,80296c <logic+0x26dc>
  802954:	e0bffd17 	ldw	r2,-12(fp)
  802958:	10801d83 	ldbu	r2,118(r2)
  80295c:	10803fcc 	andi	r2,r2,255
  802960:	1080201c 	xori	r2,r2,128
  802964:	10bfe004 	addi	r2,r2,-128
  802968:	10000c1e 	bne	r2,zero,80299c <logic+0x270c>
  80296c:	e0bffd17 	ldw	r2,-12(fp)
  802970:	10800d83 	ldbu	r2,54(r2)
  802974:	10803fcc 	andi	r2,r2,255
  802978:	1080201c 	xori	r2,r2,128
  80297c:	10bfe004 	addi	r2,r2,-128
  802980:	10000826 	beq	r2,zero,8029a4 <logic+0x2714>
  802984:	e0bffd17 	ldw	r2,-12(fp)
  802988:	10801e03 	ldbu	r2,120(r2)
  80298c:	10803fcc 	andi	r2,r2,255
  802990:	1080201c 	xori	r2,r2,128
  802994:	10bfe004 	addi	r2,r2,-128
  802998:	10000226 	beq	r2,zero,8029a4 <logic+0x2714>
  80299c:	00800044 	movi	r2,1
  8029a0:	00000106 	br	8029a8 <logic+0x2718>
  8029a4:	0005883a 	mov	r2,zero
  8029a8:	1007883a 	mov	r3,r2
  8029ac:	e0bffd17 	ldw	r2,-12(fp)
  8029b0:	10c00dc5 	stb	r3,55(r2)
  d->_g29 = d->_g53 && !d->_cg19;
  8029b4:	e0bffd17 	ldw	r2,-12(fp)
  8029b8:	108012c3 	ldbu	r2,75(r2)
  8029bc:	10803fcc 	andi	r2,r2,255
  8029c0:	1080201c 	xori	r2,r2,128
  8029c4:	10bfe004 	addi	r2,r2,-128
  8029c8:	10000826 	beq	r2,zero,8029ec <logic+0x275c>
  8029cc:	e0bffd17 	ldw	r2,-12(fp)
  8029d0:	10801d03 	ldbu	r2,116(r2)
  8029d4:	10803fcc 	andi	r2,r2,255
  8029d8:	1080201c 	xori	r2,r2,128
  8029dc:	10bfe004 	addi	r2,r2,-128
  8029e0:	1000021e 	bne	r2,zero,8029ec <logic+0x275c>
  8029e4:	00800044 	movi	r2,1
  8029e8:	00000106 	br	8029f0 <logic+0x2760>
  8029ec:	0005883a 	mov	r2,zero
  8029f0:	1007883a 	mov	r3,r2
  8029f4:	e0bffd17 	ldw	r2,-12(fp)
  8029f8:	10c00ec5 	stb	r3,59(r2)
  d->_cg29 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8029fc:	e0bffd17 	ldw	r2,-12(fp)
  802a00:	10800903 	ldbu	r2,36(r2)
  802a04:	10803fcc 	andi	r2,r2,255
  802a08:	1080201c 	xori	r2,r2,128
  802a0c:	10bfe004 	addi	r2,r2,-128
  802a10:	1000061e 	bne	r2,zero,802a2c <logic+0x279c>
  802a14:	e0bffd17 	ldw	r2,-12(fp)
  802a18:	10800943 	ldbu	r2,37(r2)
  802a1c:	10803fcc 	andi	r2,r2,255
  802a20:	1080201c 	xori	r2,r2,128
  802a24:	10bfe004 	addi	r2,r2,-128
  802a28:	10000226 	beq	r2,zero,802a34 <logic+0x27a4>
  802a2c:	00800044 	movi	r2,1
  802a30:	00000106 	br	802a38 <logic+0x27a8>
  802a34:	0005883a 	mov	r2,zero
  802a38:	1007883a 	mov	r3,r2
  802a3c:	e0bffd17 	ldw	r2,-12(fp)
  802a40:	10c01e45 	stb	r3,121(r2)
  d->_g26 = d->_g23 && !d->_cg26 || d->_g29 && !d->_cg29;
  802a44:	e0bffd17 	ldw	r2,-12(fp)
  802a48:	10800d83 	ldbu	r2,54(r2)
  802a4c:	10803fcc 	andi	r2,r2,255
  802a50:	1080201c 	xori	r2,r2,128
  802a54:	10bfe004 	addi	r2,r2,-128
  802a58:	10000626 	beq	r2,zero,802a74 <logic+0x27e4>
  802a5c:	e0bffd17 	ldw	r2,-12(fp)
  802a60:	10801e03 	ldbu	r2,120(r2)
  802a64:	10803fcc 	andi	r2,r2,255
  802a68:	1080201c 	xori	r2,r2,128
  802a6c:	10bfe004 	addi	r2,r2,-128
  802a70:	10000c26 	beq	r2,zero,802aa4 <logic+0x2814>
  802a74:	e0bffd17 	ldw	r2,-12(fp)
  802a78:	10800ec3 	ldbu	r2,59(r2)
  802a7c:	10803fcc 	andi	r2,r2,255
  802a80:	1080201c 	xori	r2,r2,128
  802a84:	10bfe004 	addi	r2,r2,-128
  802a88:	10000826 	beq	r2,zero,802aac <logic+0x281c>
  802a8c:	e0bffd17 	ldw	r2,-12(fp)
  802a90:	10801e43 	ldbu	r2,121(r2)
  802a94:	10803fcc 	andi	r2,r2,255
  802a98:	1080201c 	xori	r2,r2,128
  802a9c:	10bfe004 	addi	r2,r2,-128
  802aa0:	1000021e 	bne	r2,zero,802aac <logic+0x281c>
  802aa4:	00800044 	movi	r2,1
  802aa8:	00000106 	br	802ab0 <logic+0x2820>
  802aac:	0005883a 	mov	r2,zero
  802ab0:	1007883a 	mov	r3,r2
  802ab4:	e0bffd17 	ldw	r2,-12(fp)
  802ab8:	10c00e45 	stb	r3,57(r2)
  d->_cg30 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802abc:	e0bffd17 	ldw	r2,-12(fp)
  802ac0:	10800903 	ldbu	r2,36(r2)
  802ac4:	10803fcc 	andi	r2,r2,255
  802ac8:	1080201c 	xori	r2,r2,128
  802acc:	10bfe004 	addi	r2,r2,-128
  802ad0:	1000061e 	bne	r2,zero,802aec <logic+0x285c>
  802ad4:	e0bffd17 	ldw	r2,-12(fp)
  802ad8:	10800943 	ldbu	r2,37(r2)
  802adc:	10803fcc 	andi	r2,r2,255
  802ae0:	1080201c 	xori	r2,r2,128
  802ae4:	10bfe004 	addi	r2,r2,-128
  802ae8:	10000226 	beq	r2,zero,802af4 <logic+0x2864>
  802aec:	00800044 	movi	r2,1
  802af0:	00000106 	br	802af8 <logic+0x2868>
  802af4:	0005883a 	mov	r2,zero
  802af8:	1007883a 	mov	r3,r2
  802afc:	e0bffd17 	ldw	r2,-12(fp)
  802b00:	10c01e85 	stb	r3,122(r2)
  d->_g29 = d->_pg31;
  802b04:	e0bffd17 	ldw	r2,-12(fp)
  802b08:	10c02fc3 	ldbu	r3,191(r2)
  802b0c:	e0bffd17 	ldw	r2,-12(fp)
  802b10:	10c00ec5 	stb	r3,59(r2)
  if (d->_g29) {
  802b14:	e0bffd17 	ldw	r2,-12(fp)
  802b18:	10800ec3 	ldbu	r2,59(r2)
  802b1c:	10803fcc 	andi	r2,r2,255
  802b20:	1080201c 	xori	r2,r2,128
  802b24:	10bfe004 	addi	r2,r2,-128
  802b28:	10001226 	beq	r2,zero,802b74 <logic+0x28e4>
    d->_region0_Atrium_AtriumTimer += d->deltaT;
  802b2c:	e13ffd17 	ldw	r4,-12(fp)
  802b30:	20800217 	ldw	r2,8(r4)
  802b34:	20c00317 	ldw	r3,12(r4)
  802b38:	e1bffd17 	ldw	r6,-12(fp)
  802b3c:	31000417 	ldw	r4,16(r6)
  802b40:	31400517 	ldw	r5,20(r6)
  802b44:	200d883a 	mov	r6,r4
  802b48:	280f883a 	mov	r7,r5
  802b4c:	1009883a 	mov	r4,r2
  802b50:	180b883a 	mov	r5,r3
  802b54:	08048f40 	call	8048f4 <__adddf3>
  802b58:	1009883a 	mov	r4,r2
  802b5c:	180b883a 	mov	r5,r3
  802b60:	2005883a 	mov	r2,r4
  802b64:	2807883a 	mov	r3,r5
  802b68:	e13ffd17 	ldw	r4,-12(fp)
  802b6c:	20800215 	stw	r2,8(r4)
  802b70:	20c00315 	stw	r3,12(r4)
  }
  d->_cg32 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802b74:	e0bffd17 	ldw	r2,-12(fp)
  802b78:	10800903 	ldbu	r2,36(r2)
  802b7c:	10803fcc 	andi	r2,r2,255
  802b80:	1080201c 	xori	r2,r2,128
  802b84:	10bfe004 	addi	r2,r2,-128
  802b88:	1000061e 	bne	r2,zero,802ba4 <logic+0x2914>
  802b8c:	e0bffd17 	ldw	r2,-12(fp)
  802b90:	10800943 	ldbu	r2,37(r2)
  802b94:	10803fcc 	andi	r2,r2,255
  802b98:	1080201c 	xori	r2,r2,128
  802b9c:	10bfe004 	addi	r2,r2,-128
  802ba0:	10000226 	beq	r2,zero,802bac <logic+0x291c>
  802ba4:	00800044 	movi	r2,1
  802ba8:	00000106 	br	802bb0 <logic+0x2920>
  802bac:	0005883a 	mov	r2,zero
  802bb0:	1007883a 	mov	r3,r2
  802bb4:	e0bffd17 	ldw	r2,-12(fp)
  802bb8:	10c01ec5 	stb	r3,123(r2)
  d->_g31 = d->_g53 && !d->_cg30 || d->_g29 && !d->_cg32;
  802bbc:	e0bffd17 	ldw	r2,-12(fp)
  802bc0:	108012c3 	ldbu	r2,75(r2)
  802bc4:	10803fcc 	andi	r2,r2,255
  802bc8:	1080201c 	xori	r2,r2,128
  802bcc:	10bfe004 	addi	r2,r2,-128
  802bd0:	10000626 	beq	r2,zero,802bec <logic+0x295c>
  802bd4:	e0bffd17 	ldw	r2,-12(fp)
  802bd8:	10801e83 	ldbu	r2,122(r2)
  802bdc:	10803fcc 	andi	r2,r2,255
  802be0:	1080201c 	xori	r2,r2,128
  802be4:	10bfe004 	addi	r2,r2,-128
  802be8:	10000c26 	beq	r2,zero,802c1c <logic+0x298c>
  802bec:	e0bffd17 	ldw	r2,-12(fp)
  802bf0:	10800ec3 	ldbu	r2,59(r2)
  802bf4:	10803fcc 	andi	r2,r2,255
  802bf8:	1080201c 	xori	r2,r2,128
  802bfc:	10bfe004 	addi	r2,r2,-128
  802c00:	10000826 	beq	r2,zero,802c24 <logic+0x2994>
  802c04:	e0bffd17 	ldw	r2,-12(fp)
  802c08:	10801ec3 	ldbu	r2,123(r2)
  802c0c:	10803fcc 	andi	r2,r2,255
  802c10:	1080201c 	xori	r2,r2,128
  802c14:	10bfe004 	addi	r2,r2,-128
  802c18:	1000021e 	bne	r2,zero,802c24 <logic+0x2994>
  802c1c:	00800044 	movi	r2,1
  802c20:	00000106 	br	802c28 <logic+0x2998>
  802c24:	0005883a 	mov	r2,zero
  802c28:	1007883a 	mov	r3,r2
  802c2c:	e0bffd17 	ldw	r2,-12(fp)
  802c30:	10c00f05 	stb	r3,60(r2)
  d->_g33 = d->_g29 && d->_cg32;
  802c34:	e0bffd17 	ldw	r2,-12(fp)
  802c38:	10800ec3 	ldbu	r2,59(r2)
  802c3c:	10803fcc 	andi	r2,r2,255
  802c40:	1080201c 	xori	r2,r2,128
  802c44:	10bfe004 	addi	r2,r2,-128
  802c48:	10000826 	beq	r2,zero,802c6c <logic+0x29dc>
  802c4c:	e0bffd17 	ldw	r2,-12(fp)
  802c50:	10801ec3 	ldbu	r2,123(r2)
  802c54:	10803fcc 	andi	r2,r2,255
  802c58:	1080201c 	xori	r2,r2,128
  802c5c:	10bfe004 	addi	r2,r2,-128
  802c60:	10000226 	beq	r2,zero,802c6c <logic+0x29dc>
  802c64:	00800044 	movi	r2,1
  802c68:	00000106 	br	802c70 <logic+0x29e0>
  802c6c:	0005883a 	mov	r2,zero
  802c70:	1007883a 	mov	r3,r2
  802c74:	e0bffd17 	ldw	r2,-12(fp)
  802c78:	10c00f85 	stb	r3,62(r2)
  d->_g3 = d->_g53 || d->_g53_e2 && !d->_cg39;
  802c7c:	e0bffd17 	ldw	r2,-12(fp)
  802c80:	108012c3 	ldbu	r2,75(r2)
  802c84:	10803fcc 	andi	r2,r2,255
  802c88:	1080201c 	xori	r2,r2,128
  802c8c:	10bfe004 	addi	r2,r2,-128
  802c90:	10000c1e 	bne	r2,zero,802cc4 <logic+0x2a34>
  802c94:	e0bffd17 	ldw	r2,-12(fp)
  802c98:	10802983 	ldbu	r2,166(r2)
  802c9c:	10803fcc 	andi	r2,r2,255
  802ca0:	1080201c 	xori	r2,r2,128
  802ca4:	10bfe004 	addi	r2,r2,-128
  802ca8:	10000826 	beq	r2,zero,802ccc <logic+0x2a3c>
  802cac:	e0bffd17 	ldw	r2,-12(fp)
  802cb0:	10801f03 	ldbu	r2,124(r2)
  802cb4:	10803fcc 	andi	r2,r2,255
  802cb8:	1080201c 	xori	r2,r2,128
  802cbc:	10bfe004 	addi	r2,r2,-128
  802cc0:	1000021e 	bne	r2,zero,802ccc <logic+0x2a3c>
  802cc4:	00800044 	movi	r2,1
  802cc8:	00000106 	br	802cd0 <logic+0x2a40>
  802ccc:	0005883a 	mov	r2,zero
  802cd0:	1007883a 	mov	r3,r2
  802cd4:	e0bffd17 	ldw	r2,-12(fp)
  802cd8:	10c00a45 	stb	r3,41(r2)
  d->_g39 = d->_g83 || d->_g90;
  802cdc:	e0bffd17 	ldw	r2,-12(fp)
  802ce0:	10801643 	ldbu	r2,89(r2)
  802ce4:	10803fcc 	andi	r2,r2,255
  802ce8:	1080201c 	xori	r2,r2,128
  802cec:	10bfe004 	addi	r2,r2,-128
  802cf0:	1000061e 	bne	r2,zero,802d0c <logic+0x2a7c>
  802cf4:	e0bffd17 	ldw	r2,-12(fp)
  802cf8:	10801703 	ldbu	r2,92(r2)
  802cfc:	10803fcc 	andi	r2,r2,255
  802d00:	1080201c 	xori	r2,r2,128
  802d04:	10bfe004 	addi	r2,r2,-128
  802d08:	10000226 	beq	r2,zero,802d14 <logic+0x2a84>
  802d0c:	00800044 	movi	r2,1
  802d10:	00000106 	br	802d18 <logic+0x2a88>
  802d14:	0005883a 	mov	r2,zero
  802d18:	1007883a 	mov	r3,r2
  802d1c:	e0bffd17 	ldw	r2,-12(fp)
  802d20:	10c01085 	stb	r3,66(r2)
  d->_g40 = !d->_g75;
  802d24:	e0bffd17 	ldw	r2,-12(fp)
  802d28:	10801583 	ldbu	r2,86(r2)
  802d2c:	10803fcc 	andi	r2,r2,255
  802d30:	1080201c 	xori	r2,r2,128
  802d34:	10bfe004 	addi	r2,r2,-128
  802d38:	1005003a 	cmpeq	r2,r2,zero
  802d3c:	1007883a 	mov	r3,r2
  802d40:	e0bffd17 	ldw	r2,-12(fp)
  802d44:	10c010c5 	stb	r3,67(r2)
  d->_g37 = !(d->_g106 || d->_g118);
  802d48:	e0bffd17 	ldw	r2,-12(fp)
  802d4c:	10801983 	ldbu	r2,102(r2)
  802d50:	10803fcc 	andi	r2,r2,255
  802d54:	1080201c 	xori	r2,r2,128
  802d58:	10bfe004 	addi	r2,r2,-128
  802d5c:	1000081e 	bne	r2,zero,802d80 <logic+0x2af0>
  802d60:	e0bffd17 	ldw	r2,-12(fp)
  802d64:	10801a83 	ldbu	r2,106(r2)
  802d68:	10803fcc 	andi	r2,r2,255
  802d6c:	1080201c 	xori	r2,r2,128
  802d70:	10bfe004 	addi	r2,r2,-128
  802d74:	1000021e 	bne	r2,zero,802d80 <logic+0x2af0>
  802d78:	00800044 	movi	r2,1
  802d7c:	00000106 	br	802d84 <logic+0x2af4>
  802d80:	0005883a 	mov	r2,zero
  802d84:	1007883a 	mov	r3,r2
  802d88:	e0bffd17 	ldw	r2,-12(fp)
  802d8c:	10c01005 	stb	r3,64(r2)
  d->_g6 = !(d->_g28 || d->_g18);
  802d90:	e0bffd17 	ldw	r2,-12(fp)
  802d94:	10800e83 	ldbu	r2,58(r2)
  802d98:	10803fcc 	andi	r2,r2,255
  802d9c:	1080201c 	xori	r2,r2,128
  802da0:	10bfe004 	addi	r2,r2,-128
  802da4:	1000081e 	bne	r2,zero,802dc8 <logic+0x2b38>
  802da8:	e0bffd17 	ldw	r2,-12(fp)
  802dac:	10800cc3 	ldbu	r2,51(r2)
  802db0:	10803fcc 	andi	r2,r2,255
  802db4:	1080201c 	xori	r2,r2,128
  802db8:	10bfe004 	addi	r2,r2,-128
  802dbc:	1000021e 	bne	r2,zero,802dc8 <logic+0x2b38>
  802dc0:	00800044 	movi	r2,1
  802dc4:	00000106 	br	802dcc <logic+0x2b3c>
  802dc8:	0005883a 	mov	r2,zero
  802dcc:	1007883a 	mov	r3,r2
  802dd0:	e0bffd17 	ldw	r2,-12(fp)
  802dd4:	10c00a85 	stb	r3,42(r2)
  d->_g11 = !d->_g29;
  802dd8:	e0bffd17 	ldw	r2,-12(fp)
  802ddc:	10800ec3 	ldbu	r2,59(r2)
  802de0:	10803fcc 	andi	r2,r2,255
  802de4:	1080201c 	xori	r2,r2,128
  802de8:	10bfe004 	addi	r2,r2,-128
  802dec:	1005003a 	cmpeq	r2,r2,zero
  802df0:	1007883a 	mov	r3,r2
  802df4:	e0bffd17 	ldw	r2,-12(fp)
  802df8:	10c00b45 	stb	r3,45(r2)
  d->_g17 = !d->_g83_e5;
  802dfc:	e0bffd17 	ldw	r2,-12(fp)
  802e00:	10802a43 	ldbu	r2,169(r2)
  802e04:	10803fcc 	andi	r2,r2,255
  802e08:	1080201c 	xori	r2,r2,128
  802e0c:	10bfe004 	addi	r2,r2,-128
  802e10:	1005003a 	cmpeq	r2,r2,zero
  802e14:	1007883a 	mov	r3,r2
  802e18:	e0bffd17 	ldw	r2,-12(fp)
  802e1c:	10c00c85 	stb	r3,50(r2)
  d->_g22 = (d->_g40 || d->_g75_e4) && (d->_g37 || d->_g9) && (d->_g6 || d->_g24) && (d->_g11 || d->_g33) && (d->_g17 || d->_g39) && (d->_g75_e4 || d->_g9 || d->_g24 || d->_g33 || d->_g39);
  802e20:	e0bffd17 	ldw	r2,-12(fp)
  802e24:	108010c3 	ldbu	r2,67(r2)
  802e28:	10803fcc 	andi	r2,r2,255
  802e2c:	1080201c 	xori	r2,r2,128
  802e30:	10bfe004 	addi	r2,r2,-128
  802e34:	1000061e 	bne	r2,zero,802e50 <logic+0x2bc0>
  802e38:	e0bffd17 	ldw	r2,-12(fp)
  802e3c:	10802a03 	ldbu	r2,168(r2)
  802e40:	10803fcc 	andi	r2,r2,255
  802e44:	1080201c 	xori	r2,r2,128
  802e48:	10bfe004 	addi	r2,r2,-128
  802e4c:	10005026 	beq	r2,zero,802f90 <logic+0x2d00>
  802e50:	e0bffd17 	ldw	r2,-12(fp)
  802e54:	10801003 	ldbu	r2,64(r2)
  802e58:	10803fcc 	andi	r2,r2,255
  802e5c:	1080201c 	xori	r2,r2,128
  802e60:	10bfe004 	addi	r2,r2,-128
  802e64:	1000061e 	bne	r2,zero,802e80 <logic+0x2bf0>
  802e68:	e0bffd17 	ldw	r2,-12(fp)
  802e6c:	10800b03 	ldbu	r2,44(r2)
  802e70:	10803fcc 	andi	r2,r2,255
  802e74:	1080201c 	xori	r2,r2,128
  802e78:	10bfe004 	addi	r2,r2,-128
  802e7c:	10004426 	beq	r2,zero,802f90 <logic+0x2d00>
  802e80:	e0bffd17 	ldw	r2,-12(fp)
  802e84:	10800a83 	ldbu	r2,42(r2)
  802e88:	10803fcc 	andi	r2,r2,255
  802e8c:	1080201c 	xori	r2,r2,128
  802e90:	10bfe004 	addi	r2,r2,-128
  802e94:	1000061e 	bne	r2,zero,802eb0 <logic+0x2c20>
  802e98:	e0bffd17 	ldw	r2,-12(fp)
  802e9c:	10800dc3 	ldbu	r2,55(r2)
  802ea0:	10803fcc 	andi	r2,r2,255
  802ea4:	1080201c 	xori	r2,r2,128
  802ea8:	10bfe004 	addi	r2,r2,-128
  802eac:	10003826 	beq	r2,zero,802f90 <logic+0x2d00>
  802eb0:	e0bffd17 	ldw	r2,-12(fp)
  802eb4:	10800b43 	ldbu	r2,45(r2)
  802eb8:	10803fcc 	andi	r2,r2,255
  802ebc:	1080201c 	xori	r2,r2,128
  802ec0:	10bfe004 	addi	r2,r2,-128
  802ec4:	1000061e 	bne	r2,zero,802ee0 <logic+0x2c50>
  802ec8:	e0bffd17 	ldw	r2,-12(fp)
  802ecc:	10800f83 	ldbu	r2,62(r2)
  802ed0:	10803fcc 	andi	r2,r2,255
  802ed4:	1080201c 	xori	r2,r2,128
  802ed8:	10bfe004 	addi	r2,r2,-128
  802edc:	10002c26 	beq	r2,zero,802f90 <logic+0x2d00>
  802ee0:	e0bffd17 	ldw	r2,-12(fp)
  802ee4:	10800c83 	ldbu	r2,50(r2)
  802ee8:	10803fcc 	andi	r2,r2,255
  802eec:	1080201c 	xori	r2,r2,128
  802ef0:	10bfe004 	addi	r2,r2,-128
  802ef4:	1000061e 	bne	r2,zero,802f10 <logic+0x2c80>
  802ef8:	e0bffd17 	ldw	r2,-12(fp)
  802efc:	10801083 	ldbu	r2,66(r2)
  802f00:	10803fcc 	andi	r2,r2,255
  802f04:	1080201c 	xori	r2,r2,128
  802f08:	10bfe004 	addi	r2,r2,-128
  802f0c:	10002026 	beq	r2,zero,802f90 <logic+0x2d00>
  802f10:	e0bffd17 	ldw	r2,-12(fp)
  802f14:	10802a03 	ldbu	r2,168(r2)
  802f18:	10803fcc 	andi	r2,r2,255
  802f1c:	1080201c 	xori	r2,r2,128
  802f20:	10bfe004 	addi	r2,r2,-128
  802f24:	1000181e 	bne	r2,zero,802f88 <logic+0x2cf8>
  802f28:	e0bffd17 	ldw	r2,-12(fp)
  802f2c:	10800b03 	ldbu	r2,44(r2)
  802f30:	10803fcc 	andi	r2,r2,255
  802f34:	1080201c 	xori	r2,r2,128
  802f38:	10bfe004 	addi	r2,r2,-128
  802f3c:	1000121e 	bne	r2,zero,802f88 <logic+0x2cf8>
  802f40:	e0bffd17 	ldw	r2,-12(fp)
  802f44:	10800dc3 	ldbu	r2,55(r2)
  802f48:	10803fcc 	andi	r2,r2,255
  802f4c:	1080201c 	xori	r2,r2,128
  802f50:	10bfe004 	addi	r2,r2,-128
  802f54:	10000c1e 	bne	r2,zero,802f88 <logic+0x2cf8>
  802f58:	e0bffd17 	ldw	r2,-12(fp)
  802f5c:	10800f83 	ldbu	r2,62(r2)
  802f60:	10803fcc 	andi	r2,r2,255
  802f64:	1080201c 	xori	r2,r2,128
  802f68:	10bfe004 	addi	r2,r2,-128
  802f6c:	1000061e 	bne	r2,zero,802f88 <logic+0x2cf8>
  802f70:	e0bffd17 	ldw	r2,-12(fp)
  802f74:	10801083 	ldbu	r2,66(r2)
  802f78:	10803fcc 	andi	r2,r2,255
  802f7c:	1080201c 	xori	r2,r2,128
  802f80:	10bfe004 	addi	r2,r2,-128
  802f84:	10000226 	beq	r2,zero,802f90 <logic+0x2d00>
  802f88:	00800044 	movi	r2,1
  802f8c:	00000106 	br	802f94 <logic+0x2d04>
  802f90:	0005883a 	mov	r2,zero
  802f94:	1007883a 	mov	r3,r2
  802f98:	e0bffd17 	ldw	r2,-12(fp)
  802f9c:	10c00d45 	stb	r3,53(r2)
  d->_cg41 = d->_Pacemaker_local__Atrig;
  802fa0:	e0bffd17 	ldw	r2,-12(fp)
  802fa4:	10c00903 	ldbu	r3,36(r2)
  802fa8:	e0bffd17 	ldw	r2,-12(fp)
  802fac:	10c01f85 	stb	r3,126(r2)
  d->_g28 = d->_g22 && !d->_cg41;
  802fb0:	e0bffd17 	ldw	r2,-12(fp)
  802fb4:	10800d43 	ldbu	r2,53(r2)
  802fb8:	10803fcc 	andi	r2,r2,255
  802fbc:	1080201c 	xori	r2,r2,128
  802fc0:	10bfe004 	addi	r2,r2,-128
  802fc4:	10000826 	beq	r2,zero,802fe8 <logic+0x2d58>
  802fc8:	e0bffd17 	ldw	r2,-12(fp)
  802fcc:	10801f83 	ldbu	r2,126(r2)
  802fd0:	10803fcc 	andi	r2,r2,255
  802fd4:	1080201c 	xori	r2,r2,128
  802fd8:	10bfe004 	addi	r2,r2,-128
  802fdc:	1000021e 	bne	r2,zero,802fe8 <logic+0x2d58>
  802fe0:	00800044 	movi	r2,1
  802fe4:	00000106 	br	802fec <logic+0x2d5c>
  802fe8:	0005883a 	mov	r2,zero
  802fec:	1007883a 	mov	r3,r2
  802ff0:	e0bffd17 	ldw	r2,-12(fp)
  802ff4:	10c00e85 	stb	r3,58(r2)
  if (d->_g28) {
  802ff8:	e0bffd17 	ldw	r2,-12(fp)
  802ffc:	10800e83 	ldbu	r2,58(r2)
  803000:	10803fcc 	andi	r2,r2,255
  803004:	1080201c 	xori	r2,r2,128
  803008:	10bfe004 	addi	r2,r2,-128
  80300c:	10000626 	beq	r2,zero,803028 <logic+0x2d98>
    d->AP |= 1;
  803010:	e0bffd17 	ldw	r2,-12(fp)
  803014:	10800883 	ldbu	r2,34(r2)
  803018:	10800054 	ori	r2,r2,1
  80301c:	1007883a 	mov	r3,r2
  803020:	e0bffd17 	ldw	r2,-12(fp)
  803024:	10c00885 	stb	r3,34(r2)
  }
  d->_g32 = d->_g22 && d->_cg41 || d->_g28;
  803028:	e0bffd17 	ldw	r2,-12(fp)
  80302c:	10800d43 	ldbu	r2,53(r2)
  803030:	10803fcc 	andi	r2,r2,255
  803034:	1080201c 	xori	r2,r2,128
  803038:	10bfe004 	addi	r2,r2,-128
  80303c:	10000626 	beq	r2,zero,803058 <logic+0x2dc8>
  803040:	e0bffd17 	ldw	r2,-12(fp)
  803044:	10801f83 	ldbu	r2,126(r2)
  803048:	10803fcc 	andi	r2,r2,255
  80304c:	1080201c 	xori	r2,r2,128
  803050:	10bfe004 	addi	r2,r2,-128
  803054:	1000061e 	bne	r2,zero,803070 <logic+0x2de0>
  803058:	e0bffd17 	ldw	r2,-12(fp)
  80305c:	10800e83 	ldbu	r2,58(r2)
  803060:	10803fcc 	andi	r2,r2,255
  803064:	1080201c 	xori	r2,r2,128
  803068:	10bfe004 	addi	r2,r2,-128
  80306c:	10000226 	beq	r2,zero,803078 <logic+0x2de8>
  803070:	00800044 	movi	r2,1
  803074:	00000106 	br	80307c <logic+0x2dec>
  803078:	0005883a 	mov	r2,zero
  80307c:	1007883a 	mov	r3,r2
  803080:	e0bffd17 	ldw	r2,-12(fp)
  803084:	10c00f45 	stb	r3,61(r2)
  if (d->_g32) {
  803088:	e0bffd17 	ldw	r2,-12(fp)
  80308c:	10800f43 	ldbu	r2,61(r2)
  803090:	10803fcc 	andi	r2,r2,255
  803094:	1080201c 	xori	r2,r2,128
  803098:	10bfe004 	addi	r2,r2,-128
  80309c:	10000926 	beq	r2,zero,8030c4 <logic+0x2e34>
    d->_region0_Atrium_AtriumTimer = 0;
  8030a0:	e0bffd17 	ldw	r2,-12(fp)
  8030a4:	10000215 	stw	zero,8(r2)
  8030a8:	10000315 	stw	zero,12(r2)
    d->_Pacemaker_local__Atrig2 = 0;
  8030ac:	e0bffd17 	ldw	r2,-12(fp)
  8030b0:	10000985 	stb	zero,38(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  8030b4:	e0bffd17 	ldw	r2,-12(fp)
  8030b8:	100009c5 	stb	zero,39(r2)
    d->_Pacemaker_local__Atrig4 = 0;
  8030bc:	e0bffd17 	ldw	r2,-12(fp)
  8030c0:	10000a05 	stb	zero,40(r2)
  }
  d->_cg43 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  8030c4:	e0bffd17 	ldw	r2,-12(fp)
  8030c8:	10800983 	ldbu	r2,38(r2)
  8030cc:	10803fcc 	andi	r2,r2,255
  8030d0:	1080201c 	xori	r2,r2,128
  8030d4:	10bfe004 	addi	r2,r2,-128
  8030d8:	10000c1e 	bne	r2,zero,80310c <logic+0x2e7c>
  8030dc:	e0bffd17 	ldw	r2,-12(fp)
  8030e0:	108009c3 	ldbu	r2,39(r2)
  8030e4:	10803fcc 	andi	r2,r2,255
  8030e8:	1080201c 	xori	r2,r2,128
  8030ec:	10bfe004 	addi	r2,r2,-128
  8030f0:	1000061e 	bne	r2,zero,80310c <logic+0x2e7c>
  8030f4:	e0bffd17 	ldw	r2,-12(fp)
  8030f8:	10800a03 	ldbu	r2,40(r2)
  8030fc:	10803fcc 	andi	r2,r2,255
  803100:	1080201c 	xori	r2,r2,128
  803104:	10bfe004 	addi	r2,r2,-128
  803108:	10000226 	beq	r2,zero,803114 <logic+0x2e84>
  80310c:	00800044 	movi	r2,1
  803110:	00000106 	br	803118 <logic+0x2e88>
  803114:	0005883a 	mov	r2,zero
  803118:	1007883a 	mov	r3,r2
  80311c:	e0bffd17 	ldw	r2,-12(fp)
  803120:	10c01fc5 	stb	r3,127(r2)
  d->_g36 = d->_g32 && !d->_cg43 || d->_g45 && !d->_cg45;
  803124:	e0bffd17 	ldw	r2,-12(fp)
  803128:	10800f43 	ldbu	r2,61(r2)
  80312c:	10803fcc 	andi	r2,r2,255
  803130:	1080201c 	xori	r2,r2,128
  803134:	10bfe004 	addi	r2,r2,-128
  803138:	10000626 	beq	r2,zero,803154 <logic+0x2ec4>
  80313c:	e0bffd17 	ldw	r2,-12(fp)
  803140:	10801fc3 	ldbu	r2,127(r2)
  803144:	10803fcc 	andi	r2,r2,255
  803148:	1080201c 	xori	r2,r2,128
  80314c:	10bfe004 	addi	r2,r2,-128
  803150:	10000c26 	beq	r2,zero,803184 <logic+0x2ef4>
  803154:	e0bffd17 	ldw	r2,-12(fp)
  803158:	10801143 	ldbu	r2,69(r2)
  80315c:	10803fcc 	andi	r2,r2,255
  803160:	1080201c 	xori	r2,r2,128
  803164:	10bfe004 	addi	r2,r2,-128
  803168:	10000826 	beq	r2,zero,80318c <logic+0x2efc>
  80316c:	e0bffd17 	ldw	r2,-12(fp)
  803170:	10802003 	ldbu	r2,128(r2)
  803174:	10803fcc 	andi	r2,r2,255
  803178:	1080201c 	xori	r2,r2,128
  80317c:	10bfe004 	addi	r2,r2,-128
  803180:	1000021e 	bne	r2,zero,80318c <logic+0x2efc>
  803184:	00800044 	movi	r2,1
  803188:	00000106 	br	803190 <logic+0x2f00>
  80318c:	0005883a 	mov	r2,zero
  803190:	1007883a 	mov	r3,r2
  803194:	e0bffd17 	ldw	r2,-12(fp)
  803198:	10c00fc5 	stb	r3,63(r2)
  d->_cg47 = d->_region0_Atrium_VentricleTimer < VRP_VALUE;
  80319c:	e13ffd17 	ldw	r4,-12(fp)
  8031a0:	20800017 	ldw	r2,0(r4)
  8031a4:	20c00117 	ldw	r3,4(r4)
  8031a8:	04000044 	movi	r16,1
  8031ac:	000d883a 	mov	r6,zero
  8031b0:	01d018f4 	movhi	r7,16483
  8031b4:	39f00004 	addi	r7,r7,-16384
  8031b8:	1009883a 	mov	r4,r2
  8031bc:	180b883a 	mov	r5,r3
  8031c0:	080527c0 	call	80527c <__ledf2>
  8031c4:	10000116 	blt	r2,zero,8031cc <logic+0x2f3c>
  8031c8:	0021883a 	mov	r16,zero
  8031cc:	8007883a 	mov	r3,r16
  8031d0:	e0bffd17 	ldw	r2,-12(fp)
  8031d4:	10c02045 	stb	r3,129(r2)
  d->_g38 = d->_g32 && d->_cg47;
  8031d8:	e0bffd17 	ldw	r2,-12(fp)
  8031dc:	10800f43 	ldbu	r2,61(r2)
  8031e0:	10803fcc 	andi	r2,r2,255
  8031e4:	1080201c 	xori	r2,r2,128
  8031e8:	10bfe004 	addi	r2,r2,-128
  8031ec:	10000826 	beq	r2,zero,803210 <logic+0x2f80>
  8031f0:	e0bffd17 	ldw	r2,-12(fp)
  8031f4:	10802043 	ldbu	r2,129(r2)
  8031f8:	10803fcc 	andi	r2,r2,255
  8031fc:	1080201c 	xori	r2,r2,128
  803200:	10bfe004 	addi	r2,r2,-128
  803204:	10000226 	beq	r2,zero,803210 <logic+0x2f80>
  803208:	00800044 	movi	r2,1
  80320c:	00000106 	br	803214 <logic+0x2f84>
  803210:	0005883a 	mov	r2,zero
  803214:	1007883a 	mov	r3,r2
  803218:	e0bffd17 	ldw	r2,-12(fp)
  80321c:	10c01045 	stb	r3,65(r2)
  if (d->_g38) {
  803220:	e0bffd17 	ldw	r2,-12(fp)
  803224:	10801043 	ldbu	r2,65(r2)
  803228:	10803fcc 	andi	r2,r2,255
  80322c:	1080201c 	xori	r2,r2,128
  803230:	10bfe004 	addi	r2,r2,-128
  803234:	10002a26 	beq	r2,zero,8032e0 <logic+0x3050>
    d->sleepT = (d->sleepT < (VRP_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (VRP_VALUE - d->_region0_Atrium_VentricleTimer);
  803238:	e0bffd17 	ldw	r2,-12(fp)
  80323c:	14000617 	ldw	r16,24(r2)
  803240:	14400717 	ldw	r17,28(r2)
  803244:	e13ffd17 	ldw	r4,-12(fp)
  803248:	20800017 	ldw	r2,0(r4)
  80324c:	20c00117 	ldw	r3,4(r4)
  803250:	100d883a 	mov	r6,r2
  803254:	180f883a 	mov	r7,r3
  803258:	0009883a 	mov	r4,zero
  80325c:	015018f4 	movhi	r5,16483
  803260:	29700004 	addi	r5,r5,-16384
  803264:	0805a880 	call	805a88 <__subdf3>
  803268:	1009883a 	mov	r4,r2
  80326c:	180b883a 	mov	r5,r3
  803270:	2005883a 	mov	r2,r4
  803274:	2807883a 	mov	r3,r5
  803278:	100d883a 	mov	r6,r2
  80327c:	180f883a 	mov	r7,r3
  803280:	8009883a 	mov	r4,r16
  803284:	880b883a 	mov	r5,r17
  803288:	080527c0 	call	80527c <__ledf2>
  80328c:	1000040e 	bge	r2,zero,8032a0 <logic+0x3010>
  803290:	e13ffd17 	ldw	r4,-12(fp)
  803294:	20800617 	ldw	r2,24(r4)
  803298:	20c00717 	ldw	r3,28(r4)
  80329c:	00000d06 	br	8032d4 <logic+0x3044>
  8032a0:	e13ffd17 	ldw	r4,-12(fp)
  8032a4:	20800017 	ldw	r2,0(r4)
  8032a8:	20c00117 	ldw	r3,4(r4)
  8032ac:	100d883a 	mov	r6,r2
  8032b0:	180f883a 	mov	r7,r3
  8032b4:	0009883a 	mov	r4,zero
  8032b8:	015018f4 	movhi	r5,16483
  8032bc:	29700004 	addi	r5,r5,-16384
  8032c0:	0805a880 	call	805a88 <__subdf3>
  8032c4:	1009883a 	mov	r4,r2
  8032c8:	180b883a 	mov	r5,r3
  8032cc:	2005883a 	mov	r2,r4
  8032d0:	2807883a 	mov	r3,r5
  8032d4:	e13ffd17 	ldw	r4,-12(fp)
  8032d8:	20800615 	stw	r2,24(r4)
  8032dc:	20c00715 	stw	r3,28(r4)
  }
  d->_cg48 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  8032e0:	e0bffd17 	ldw	r2,-12(fp)
  8032e4:	10800983 	ldbu	r2,38(r2)
  8032e8:	10803fcc 	andi	r2,r2,255
  8032ec:	1080201c 	xori	r2,r2,128
  8032f0:	10bfe004 	addi	r2,r2,-128
  8032f4:	10000c1e 	bne	r2,zero,803328 <logic+0x3098>
  8032f8:	e0bffd17 	ldw	r2,-12(fp)
  8032fc:	108009c3 	ldbu	r2,39(r2)
  803300:	10803fcc 	andi	r2,r2,255
  803304:	1080201c 	xori	r2,r2,128
  803308:	10bfe004 	addi	r2,r2,-128
  80330c:	1000061e 	bne	r2,zero,803328 <logic+0x3098>
  803310:	e0bffd17 	ldw	r2,-12(fp)
  803314:	10800a03 	ldbu	r2,40(r2)
  803318:	10803fcc 	andi	r2,r2,255
  80331c:	1080201c 	xori	r2,r2,128
  803320:	10bfe004 	addi	r2,r2,-128
  803324:	10000226 	beq	r2,zero,803330 <logic+0x30a0>
  803328:	00800044 	movi	r2,1
  80332c:	00000106 	br	803334 <logic+0x30a4>
  803330:	0005883a 	mov	r2,zero
  803334:	1007883a 	mov	r3,r2
  803338:	e0bffd17 	ldw	r2,-12(fp)
  80333c:	10c02085 	stb	r3,130(r2)
  d->_g33 = d->_g38 && !d->_cg48 || d->_g50 && !d->_cg52;
  803340:	e0bffd17 	ldw	r2,-12(fp)
  803344:	10801043 	ldbu	r2,65(r2)
  803348:	10803fcc 	andi	r2,r2,255
  80334c:	1080201c 	xori	r2,r2,128
  803350:	10bfe004 	addi	r2,r2,-128
  803354:	10000626 	beq	r2,zero,803370 <logic+0x30e0>
  803358:	e0bffd17 	ldw	r2,-12(fp)
  80335c:	10802083 	ldbu	r2,130(r2)
  803360:	10803fcc 	andi	r2,r2,255
  803364:	1080201c 	xori	r2,r2,128
  803368:	10bfe004 	addi	r2,r2,-128
  80336c:	10000c26 	beq	r2,zero,8033a0 <logic+0x3110>
  803370:	e0bffd17 	ldw	r2,-12(fp)
  803374:	10801203 	ldbu	r2,72(r2)
  803378:	10803fcc 	andi	r2,r2,255
  80337c:	1080201c 	xori	r2,r2,128
  803380:	10bfe004 	addi	r2,r2,-128
  803384:	10000826 	beq	r2,zero,8033a8 <logic+0x3118>
  803388:	e0bffd17 	ldw	r2,-12(fp)
  80338c:	108020c3 	ldbu	r2,131(r2)
  803390:	10803fcc 	andi	r2,r2,255
  803394:	1080201c 	xori	r2,r2,128
  803398:	10bfe004 	addi	r2,r2,-128
  80339c:	1000021e 	bne	r2,zero,8033a8 <logic+0x3118>
  8033a0:	00800044 	movi	r2,1
  8033a4:	00000106 	br	8033ac <logic+0x311c>
  8033a8:	0005883a 	mov	r2,zero
  8033ac:	1007883a 	mov	r3,r2
  8033b0:	e0bffd17 	ldw	r2,-12(fp)
  8033b4:	10c00f85 	stb	r3,62(r2)
  d->_g25 = d->_g32 && !d->_cg47;
  8033b8:	e0bffd17 	ldw	r2,-12(fp)
  8033bc:	10800f43 	ldbu	r2,61(r2)
  8033c0:	10803fcc 	andi	r2,r2,255
  8033c4:	1080201c 	xori	r2,r2,128
  8033c8:	10bfe004 	addi	r2,r2,-128
  8033cc:	10000826 	beq	r2,zero,8033f0 <logic+0x3160>
  8033d0:	e0bffd17 	ldw	r2,-12(fp)
  8033d4:	10802043 	ldbu	r2,129(r2)
  8033d8:	10803fcc 	andi	r2,r2,255
  8033dc:	1080201c 	xori	r2,r2,128
  8033e0:	10bfe004 	addi	r2,r2,-128
  8033e4:	1000021e 	bne	r2,zero,8033f0 <logic+0x3160>
  8033e8:	00800044 	movi	r2,1
  8033ec:	00000106 	br	8033f4 <logic+0x3164>
  8033f0:	0005883a 	mov	r2,zero
  8033f4:	1007883a 	mov	r3,r2
  8033f8:	e0bffd17 	ldw	r2,-12(fp)
  8033fc:	10c00e05 	stb	r3,56(r2)
  d->_cg57 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803400:	e0bffd17 	ldw	r2,-12(fp)
  803404:	10800983 	ldbu	r2,38(r2)
  803408:	10803fcc 	andi	r2,r2,255
  80340c:	1080201c 	xori	r2,r2,128
  803410:	10bfe004 	addi	r2,r2,-128
  803414:	10000c1e 	bne	r2,zero,803448 <logic+0x31b8>
  803418:	e0bffd17 	ldw	r2,-12(fp)
  80341c:	108009c3 	ldbu	r2,39(r2)
  803420:	10803fcc 	andi	r2,r2,255
  803424:	1080201c 	xori	r2,r2,128
  803428:	10bfe004 	addi	r2,r2,-128
  80342c:	1000061e 	bne	r2,zero,803448 <logic+0x31b8>
  803430:	e0bffd17 	ldw	r2,-12(fp)
  803434:	10800a03 	ldbu	r2,40(r2)
  803438:	10803fcc 	andi	r2,r2,255
  80343c:	1080201c 	xori	r2,r2,128
  803440:	10bfe004 	addi	r2,r2,-128
  803444:	10000226 	beq	r2,zero,803450 <logic+0x31c0>
  803448:	00800044 	movi	r2,1
  80344c:	00000106 	br	803454 <logic+0x31c4>
  803450:	0005883a 	mov	r2,zero
  803454:	1007883a 	mov	r3,r2
  803458:	e0bffd17 	ldw	r2,-12(fp)
  80345c:	10c02185 	stb	r3,134(r2)
  d->_g14 = d->_g51 && !d->_cg54 || d->_g25 && !d->_cg57;
  803460:	e0bffd17 	ldw	r2,-12(fp)
  803464:	10801243 	ldbu	r2,73(r2)
  803468:	10803fcc 	andi	r2,r2,255
  80346c:	1080201c 	xori	r2,r2,128
  803470:	10bfe004 	addi	r2,r2,-128
  803474:	10000626 	beq	r2,zero,803490 <logic+0x3200>
  803478:	e0bffd17 	ldw	r2,-12(fp)
  80347c:	10802143 	ldbu	r2,133(r2)
  803480:	10803fcc 	andi	r2,r2,255
  803484:	1080201c 	xori	r2,r2,128
  803488:	10bfe004 	addi	r2,r2,-128
  80348c:	10000c26 	beq	r2,zero,8034c0 <logic+0x3230>
  803490:	e0bffd17 	ldw	r2,-12(fp)
  803494:	10800e03 	ldbu	r2,56(r2)
  803498:	10803fcc 	andi	r2,r2,255
  80349c:	1080201c 	xori	r2,r2,128
  8034a0:	10bfe004 	addi	r2,r2,-128
  8034a4:	10000826 	beq	r2,zero,8034c8 <logic+0x3238>
  8034a8:	e0bffd17 	ldw	r2,-12(fp)
  8034ac:	10802183 	ldbu	r2,134(r2)
  8034b0:	10803fcc 	andi	r2,r2,255
  8034b4:	1080201c 	xori	r2,r2,128
  8034b8:	10bfe004 	addi	r2,r2,-128
  8034bc:	1000021e 	bne	r2,zero,8034c8 <logic+0x3238>
  8034c0:	00800044 	movi	r2,1
  8034c4:	00000106 	br	8034cc <logic+0x323c>
  8034c8:	0005883a 	mov	r2,zero
  8034cc:	1007883a 	mov	r3,r2
  8034d0:	e0bffd17 	ldw	r2,-12(fp)
  8034d4:	10c00c05 	stb	r3,48(r2)
  d->_cg58 = d->_region0_Atrium_VentricleTimer < URI_VALUE;
  8034d8:	e13ffd17 	ldw	r4,-12(fp)
  8034dc:	20800017 	ldw	r2,0(r4)
  8034e0:	20c00117 	ldw	r3,4(r4)
  8034e4:	04000044 	movi	r16,1
  8034e8:	000d883a 	mov	r6,zero
  8034ec:	01d02334 	movhi	r7,16524
  8034f0:	39c80004 	addi	r7,r7,8192
  8034f4:	1009883a 	mov	r4,r2
  8034f8:	180b883a 	mov	r5,r3
  8034fc:	080527c0 	call	80527c <__ledf2>
  803500:	10000116 	blt	r2,zero,803508 <logic+0x3278>
  803504:	0021883a 	mov	r16,zero
  803508:	8007883a 	mov	r3,r16
  80350c:	e0bffd17 	ldw	r2,-12(fp)
  803510:	10c021c5 	stb	r3,135(r2)
  d->_g33_e4 = d->_g32 && d->_cg58;
  803514:	e0bffd17 	ldw	r2,-12(fp)
  803518:	10800f43 	ldbu	r2,61(r2)
  80351c:	10803fcc 	andi	r2,r2,255
  803520:	1080201c 	xori	r2,r2,128
  803524:	10bfe004 	addi	r2,r2,-128
  803528:	10000826 	beq	r2,zero,80354c <logic+0x32bc>
  80352c:	e0bffd17 	ldw	r2,-12(fp)
  803530:	108021c3 	ldbu	r2,135(r2)
  803534:	10803fcc 	andi	r2,r2,255
  803538:	1080201c 	xori	r2,r2,128
  80353c:	10bfe004 	addi	r2,r2,-128
  803540:	10000226 	beq	r2,zero,80354c <logic+0x32bc>
  803544:	00800044 	movi	r2,1
  803548:	00000106 	br	803550 <logic+0x32c0>
  80354c:	0005883a 	mov	r2,zero
  803550:	1007883a 	mov	r3,r2
  803554:	e0bffd17 	ldw	r2,-12(fp)
  803558:	10c028c5 	stb	r3,163(r2)
  if (d->_g33_e4) {
  80355c:	e0bffd17 	ldw	r2,-12(fp)
  803560:	108028c3 	ldbu	r2,163(r2)
  803564:	10803fcc 	andi	r2,r2,255
  803568:	1080201c 	xori	r2,r2,128
  80356c:	10bfe004 	addi	r2,r2,-128
  803570:	10002a26 	beq	r2,zero,80361c <logic+0x338c>
    d->sleepT = (d->sleepT < (URI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (URI_VALUE - d->_region0_Atrium_VentricleTimer);
  803574:	e0bffd17 	ldw	r2,-12(fp)
  803578:	14000617 	ldw	r16,24(r2)
  80357c:	14400717 	ldw	r17,28(r2)
  803580:	e13ffd17 	ldw	r4,-12(fp)
  803584:	20800017 	ldw	r2,0(r4)
  803588:	20c00117 	ldw	r3,4(r4)
  80358c:	100d883a 	mov	r6,r2
  803590:	180f883a 	mov	r7,r3
  803594:	0009883a 	mov	r4,zero
  803598:	01502334 	movhi	r5,16524
  80359c:	29480004 	addi	r5,r5,8192
  8035a0:	0805a880 	call	805a88 <__subdf3>
  8035a4:	1009883a 	mov	r4,r2
  8035a8:	180b883a 	mov	r5,r3
  8035ac:	2005883a 	mov	r2,r4
  8035b0:	2807883a 	mov	r3,r5
  8035b4:	100d883a 	mov	r6,r2
  8035b8:	180f883a 	mov	r7,r3
  8035bc:	8009883a 	mov	r4,r16
  8035c0:	880b883a 	mov	r5,r17
  8035c4:	080527c0 	call	80527c <__ledf2>
  8035c8:	1000040e 	bge	r2,zero,8035dc <logic+0x334c>
  8035cc:	e13ffd17 	ldw	r4,-12(fp)
  8035d0:	20800617 	ldw	r2,24(r4)
  8035d4:	20c00717 	ldw	r3,28(r4)
  8035d8:	00000d06 	br	803610 <logic+0x3380>
  8035dc:	e13ffd17 	ldw	r4,-12(fp)
  8035e0:	20800017 	ldw	r2,0(r4)
  8035e4:	20c00117 	ldw	r3,4(r4)
  8035e8:	100d883a 	mov	r6,r2
  8035ec:	180f883a 	mov	r7,r3
  8035f0:	0009883a 	mov	r4,zero
  8035f4:	01502334 	movhi	r5,16524
  8035f8:	29480004 	addi	r5,r5,8192
  8035fc:	0805a880 	call	805a88 <__subdf3>
  803600:	1009883a 	mov	r4,r2
  803604:	180b883a 	mov	r5,r3
  803608:	2005883a 	mov	r2,r4
  80360c:	2807883a 	mov	r3,r5
  803610:	e13ffd17 	ldw	r4,-12(fp)
  803614:	20800615 	stw	r2,24(r4)
  803618:	20c00715 	stw	r3,28(r4)
  }
  d->_cg59 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  80361c:	e0bffd17 	ldw	r2,-12(fp)
  803620:	10800983 	ldbu	r2,38(r2)
  803624:	10803fcc 	andi	r2,r2,255
  803628:	1080201c 	xori	r2,r2,128
  80362c:	10bfe004 	addi	r2,r2,-128
  803630:	10000c1e 	bne	r2,zero,803664 <logic+0x33d4>
  803634:	e0bffd17 	ldw	r2,-12(fp)
  803638:	108009c3 	ldbu	r2,39(r2)
  80363c:	10803fcc 	andi	r2,r2,255
  803640:	1080201c 	xori	r2,r2,128
  803644:	10bfe004 	addi	r2,r2,-128
  803648:	1000061e 	bne	r2,zero,803664 <logic+0x33d4>
  80364c:	e0bffd17 	ldw	r2,-12(fp)
  803650:	10800a03 	ldbu	r2,40(r2)
  803654:	10803fcc 	andi	r2,r2,255
  803658:	1080201c 	xori	r2,r2,128
  80365c:	10bfe004 	addi	r2,r2,-128
  803660:	10000226 	beq	r2,zero,80366c <logic+0x33dc>
  803664:	00800044 	movi	r2,1
  803668:	00000106 	br	803670 <logic+0x33e0>
  80366c:	0005883a 	mov	r2,zero
  803670:	1007883a 	mov	r3,r2
  803674:	e0bffd17 	ldw	r2,-12(fp)
  803678:	10c02205 	stb	r3,136(r2)
  d->_g7 = d->_g33_e4 && !d->_cg59 || d->_g61 && !d->_cg63;
  80367c:	e0bffd17 	ldw	r2,-12(fp)
  803680:	108028c3 	ldbu	r2,163(r2)
  803684:	10803fcc 	andi	r2,r2,255
  803688:	1080201c 	xori	r2,r2,128
  80368c:	10bfe004 	addi	r2,r2,-128
  803690:	10000626 	beq	r2,zero,8036ac <logic+0x341c>
  803694:	e0bffd17 	ldw	r2,-12(fp)
  803698:	10802203 	ldbu	r2,136(r2)
  80369c:	10803fcc 	andi	r2,r2,255
  8036a0:	1080201c 	xori	r2,r2,128
  8036a4:	10bfe004 	addi	r2,r2,-128
  8036a8:	10000c26 	beq	r2,zero,8036dc <logic+0x344c>
  8036ac:	e0bffd17 	ldw	r2,-12(fp)
  8036b0:	10801403 	ldbu	r2,80(r2)
  8036b4:	10803fcc 	andi	r2,r2,255
  8036b8:	1080201c 	xori	r2,r2,128
  8036bc:	10bfe004 	addi	r2,r2,-128
  8036c0:	10000826 	beq	r2,zero,8036e4 <logic+0x3454>
  8036c4:	e0bffd17 	ldw	r2,-12(fp)
  8036c8:	10802243 	ldbu	r2,137(r2)
  8036cc:	10803fcc 	andi	r2,r2,255
  8036d0:	1080201c 	xori	r2,r2,128
  8036d4:	10bfe004 	addi	r2,r2,-128
  8036d8:	1000021e 	bne	r2,zero,8036e4 <logic+0x3454>
  8036dc:	00800044 	movi	r2,1
  8036e0:	00000106 	br	8036e8 <logic+0x3458>
  8036e4:	0005883a 	mov	r2,zero
  8036e8:	1007883a 	mov	r3,r2
  8036ec:	e0bffd17 	ldw	r2,-12(fp)
  8036f0:	10c00ac5 	stb	r3,43(r2)
  d->_g7_e1 = d->_g32 && !d->_cg58;
  8036f4:	e0bffd17 	ldw	r2,-12(fp)
  8036f8:	10800f43 	ldbu	r2,61(r2)
  8036fc:	10803fcc 	andi	r2,r2,255
  803700:	1080201c 	xori	r2,r2,128
  803704:	10bfe004 	addi	r2,r2,-128
  803708:	10000826 	beq	r2,zero,80372c <logic+0x349c>
  80370c:	e0bffd17 	ldw	r2,-12(fp)
  803710:	108021c3 	ldbu	r2,135(r2)
  803714:	10803fcc 	andi	r2,r2,255
  803718:	1080201c 	xori	r2,r2,128
  80371c:	10bfe004 	addi	r2,r2,-128
  803720:	1000021e 	bne	r2,zero,80372c <logic+0x349c>
  803724:	00800044 	movi	r2,1
  803728:	00000106 	br	803730 <logic+0x34a0>
  80372c:	0005883a 	mov	r2,zero
  803730:	1007883a 	mov	r3,r2
  803734:	e0bffd17 	ldw	r2,-12(fp)
  803738:	10c02805 	stb	r3,160(r2)
  d->_cg68 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  80373c:	e0bffd17 	ldw	r2,-12(fp)
  803740:	10800983 	ldbu	r2,38(r2)
  803744:	10803fcc 	andi	r2,r2,255
  803748:	1080201c 	xori	r2,r2,128
  80374c:	10bfe004 	addi	r2,r2,-128
  803750:	10000c1e 	bne	r2,zero,803784 <logic+0x34f4>
  803754:	e0bffd17 	ldw	r2,-12(fp)
  803758:	108009c3 	ldbu	r2,39(r2)
  80375c:	10803fcc 	andi	r2,r2,255
  803760:	1080201c 	xori	r2,r2,128
  803764:	10bfe004 	addi	r2,r2,-128
  803768:	1000061e 	bne	r2,zero,803784 <logic+0x34f4>
  80376c:	e0bffd17 	ldw	r2,-12(fp)
  803770:	10800a03 	ldbu	r2,40(r2)
  803774:	10803fcc 	andi	r2,r2,255
  803778:	1080201c 	xori	r2,r2,128
  80377c:	10bfe004 	addi	r2,r2,-128
  803780:	10000226 	beq	r2,zero,80378c <logic+0x34fc>
  803784:	00800044 	movi	r2,1
  803788:	00000106 	br	803790 <logic+0x3500>
  80378c:	0005883a 	mov	r2,zero
  803790:	1007883a 	mov	r3,r2
  803794:	e0bffd17 	ldw	r2,-12(fp)
  803798:	10c02305 	stb	r3,140(r2)
  d->_g38_e5 = d->_g62 && !d->_cg65 || d->_g7_e1 && !d->_cg68;
  80379c:	e0bffd17 	ldw	r2,-12(fp)
  8037a0:	10801443 	ldbu	r2,81(r2)
  8037a4:	10803fcc 	andi	r2,r2,255
  8037a8:	1080201c 	xori	r2,r2,128
  8037ac:	10bfe004 	addi	r2,r2,-128
  8037b0:	10000626 	beq	r2,zero,8037cc <logic+0x353c>
  8037b4:	e0bffd17 	ldw	r2,-12(fp)
  8037b8:	108022c3 	ldbu	r2,139(r2)
  8037bc:	10803fcc 	andi	r2,r2,255
  8037c0:	1080201c 	xori	r2,r2,128
  8037c4:	10bfe004 	addi	r2,r2,-128
  8037c8:	10000c26 	beq	r2,zero,8037fc <logic+0x356c>
  8037cc:	e0bffd17 	ldw	r2,-12(fp)
  8037d0:	10802803 	ldbu	r2,160(r2)
  8037d4:	10803fcc 	andi	r2,r2,255
  8037d8:	1080201c 	xori	r2,r2,128
  8037dc:	10bfe004 	addi	r2,r2,-128
  8037e0:	10000826 	beq	r2,zero,803804 <logic+0x3574>
  8037e4:	e0bffd17 	ldw	r2,-12(fp)
  8037e8:	10802303 	ldbu	r2,140(r2)
  8037ec:	10803fcc 	andi	r2,r2,255
  8037f0:	1080201c 	xori	r2,r2,128
  8037f4:	10bfe004 	addi	r2,r2,-128
  8037f8:	1000021e 	bne	r2,zero,803804 <logic+0x3574>
  8037fc:	00800044 	movi	r2,1
  803800:	00000106 	br	803808 <logic+0x3578>
  803804:	0005883a 	mov	r2,zero
  803808:	1007883a 	mov	r3,r2
  80380c:	e0bffd17 	ldw	r2,-12(fp)
  803810:	10c02905 	stb	r3,164(r2)
  d->_cg69 = d->_region0_Atrium_VentricleTimer < LRI_VALUE;
  803814:	e13ffd17 	ldw	r4,-12(fp)
  803818:	20800017 	ldw	r2,0(r4)
  80381c:	20c00117 	ldw	r3,4(r4)
  803820:	04000044 	movi	r16,1
  803824:	000d883a 	mov	r6,zero
  803828:	01d023b4 	movhi	r7,16526
  80382c:	39ec0004 	addi	r7,r7,-20480
  803830:	1009883a 	mov	r4,r2
  803834:	180b883a 	mov	r5,r3
  803838:	080527c0 	call	80527c <__ledf2>
  80383c:	10000116 	blt	r2,zero,803844 <logic+0x35b4>
  803840:	0021883a 	mov	r16,zero
  803844:	8007883a 	mov	r3,r16
  803848:	e0bffd17 	ldw	r2,-12(fp)
  80384c:	10c02345 	stb	r3,141(r2)
  d->_g25_e3 = d->_g32 && d->_cg69;
  803850:	e0bffd17 	ldw	r2,-12(fp)
  803854:	10800f43 	ldbu	r2,61(r2)
  803858:	10803fcc 	andi	r2,r2,255
  80385c:	1080201c 	xori	r2,r2,128
  803860:	10bfe004 	addi	r2,r2,-128
  803864:	10000826 	beq	r2,zero,803888 <logic+0x35f8>
  803868:	e0bffd17 	ldw	r2,-12(fp)
  80386c:	10802343 	ldbu	r2,141(r2)
  803870:	10803fcc 	andi	r2,r2,255
  803874:	1080201c 	xori	r2,r2,128
  803878:	10bfe004 	addi	r2,r2,-128
  80387c:	10000226 	beq	r2,zero,803888 <logic+0x35f8>
  803880:	00800044 	movi	r2,1
  803884:	00000106 	br	80388c <logic+0x35fc>
  803888:	0005883a 	mov	r2,zero
  80388c:	1007883a 	mov	r3,r2
  803890:	e0bffd17 	ldw	r2,-12(fp)
  803894:	10c02885 	stb	r3,162(r2)
  if (d->_g25_e3) {
  803898:	e0bffd17 	ldw	r2,-12(fp)
  80389c:	10802883 	ldbu	r2,162(r2)
  8038a0:	10803fcc 	andi	r2,r2,255
  8038a4:	1080201c 	xori	r2,r2,128
  8038a8:	10bfe004 	addi	r2,r2,-128
  8038ac:	10002a26 	beq	r2,zero,803958 <logic+0x36c8>
    d->sleepT = (d->sleepT < (LRI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (LRI_VALUE - d->_region0_Atrium_VentricleTimer);
  8038b0:	e0bffd17 	ldw	r2,-12(fp)
  8038b4:	14000617 	ldw	r16,24(r2)
  8038b8:	14400717 	ldw	r17,28(r2)
  8038bc:	e13ffd17 	ldw	r4,-12(fp)
  8038c0:	20800017 	ldw	r2,0(r4)
  8038c4:	20c00117 	ldw	r3,4(r4)
  8038c8:	100d883a 	mov	r6,r2
  8038cc:	180f883a 	mov	r7,r3
  8038d0:	0009883a 	mov	r4,zero
  8038d4:	015023b4 	movhi	r5,16526
  8038d8:	296c0004 	addi	r5,r5,-20480
  8038dc:	0805a880 	call	805a88 <__subdf3>
  8038e0:	1009883a 	mov	r4,r2
  8038e4:	180b883a 	mov	r5,r3
  8038e8:	2005883a 	mov	r2,r4
  8038ec:	2807883a 	mov	r3,r5
  8038f0:	100d883a 	mov	r6,r2
  8038f4:	180f883a 	mov	r7,r3
  8038f8:	8009883a 	mov	r4,r16
  8038fc:	880b883a 	mov	r5,r17
  803900:	080527c0 	call	80527c <__ledf2>
  803904:	1000040e 	bge	r2,zero,803918 <logic+0x3688>
  803908:	e13ffd17 	ldw	r4,-12(fp)
  80390c:	20800617 	ldw	r2,24(r4)
  803910:	20c00717 	ldw	r3,28(r4)
  803914:	00000d06 	br	80394c <logic+0x36bc>
  803918:	e13ffd17 	ldw	r4,-12(fp)
  80391c:	20800017 	ldw	r2,0(r4)
  803920:	20c00117 	ldw	r3,4(r4)
  803924:	100d883a 	mov	r6,r2
  803928:	180f883a 	mov	r7,r3
  80392c:	0009883a 	mov	r4,zero
  803930:	015023b4 	movhi	r5,16526
  803934:	296c0004 	addi	r5,r5,-20480
  803938:	0805a880 	call	805a88 <__subdf3>
  80393c:	1009883a 	mov	r4,r2
  803940:	180b883a 	mov	r5,r3
  803944:	2005883a 	mov	r2,r4
  803948:	2807883a 	mov	r3,r5
  80394c:	e13ffd17 	ldw	r4,-12(fp)
  803950:	20800615 	stw	r2,24(r4)
  803954:	20c00715 	stw	r3,28(r4)
  }
  d->_cg70 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803958:	e0bffd17 	ldw	r2,-12(fp)
  80395c:	10800983 	ldbu	r2,38(r2)
  803960:	10803fcc 	andi	r2,r2,255
  803964:	1080201c 	xori	r2,r2,128
  803968:	10bfe004 	addi	r2,r2,-128
  80396c:	10000c1e 	bne	r2,zero,8039a0 <logic+0x3710>
  803970:	e0bffd17 	ldw	r2,-12(fp)
  803974:	108009c3 	ldbu	r2,39(r2)
  803978:	10803fcc 	andi	r2,r2,255
  80397c:	1080201c 	xori	r2,r2,128
  803980:	10bfe004 	addi	r2,r2,-128
  803984:	1000061e 	bne	r2,zero,8039a0 <logic+0x3710>
  803988:	e0bffd17 	ldw	r2,-12(fp)
  80398c:	10800a03 	ldbu	r2,40(r2)
  803990:	10803fcc 	andi	r2,r2,255
  803994:	1080201c 	xori	r2,r2,128
  803998:	10bfe004 	addi	r2,r2,-128
  80399c:	10000226 	beq	r2,zero,8039a8 <logic+0x3718>
  8039a0:	00800044 	movi	r2,1
  8039a4:	00000106 	br	8039ac <logic+0x371c>
  8039a8:	0005883a 	mov	r2,zero
  8039ac:	1007883a 	mov	r3,r2
  8039b0:	e0bffd17 	ldw	r2,-12(fp)
  8039b4:	10c02385 	stb	r3,142(r2)
  d->_g14_e2 = d->_g25_e3 && !d->_cg70 || d->_g72 && !d->_cg74;
  8039b8:	e0bffd17 	ldw	r2,-12(fp)
  8039bc:	10802883 	ldbu	r2,162(r2)
  8039c0:	10803fcc 	andi	r2,r2,255
  8039c4:	1080201c 	xori	r2,r2,128
  8039c8:	10bfe004 	addi	r2,r2,-128
  8039cc:	10000626 	beq	r2,zero,8039e8 <logic+0x3758>
  8039d0:	e0bffd17 	ldw	r2,-12(fp)
  8039d4:	10802383 	ldbu	r2,142(r2)
  8039d8:	10803fcc 	andi	r2,r2,255
  8039dc:	1080201c 	xori	r2,r2,128
  8039e0:	10bfe004 	addi	r2,r2,-128
  8039e4:	10000c26 	beq	r2,zero,803a18 <logic+0x3788>
  8039e8:	e0bffd17 	ldw	r2,-12(fp)
  8039ec:	10801503 	ldbu	r2,84(r2)
  8039f0:	10803fcc 	andi	r2,r2,255
  8039f4:	1080201c 	xori	r2,r2,128
  8039f8:	10bfe004 	addi	r2,r2,-128
  8039fc:	10000826 	beq	r2,zero,803a20 <logic+0x3790>
  803a00:	e0bffd17 	ldw	r2,-12(fp)
  803a04:	108023c3 	ldbu	r2,143(r2)
  803a08:	10803fcc 	andi	r2,r2,255
  803a0c:	1080201c 	xori	r2,r2,128
  803a10:	10bfe004 	addi	r2,r2,-128
  803a14:	1000021e 	bne	r2,zero,803a20 <logic+0x3790>
  803a18:	00800044 	movi	r2,1
  803a1c:	00000106 	br	803a24 <logic+0x3794>
  803a20:	0005883a 	mov	r2,zero
  803a24:	1007883a 	mov	r3,r2
  803a28:	e0bffd17 	ldw	r2,-12(fp)
  803a2c:	10c02845 	stb	r3,161(r2)
  d->_g109 = d->_g32 && !d->_cg69;
  803a30:	e0bffd17 	ldw	r2,-12(fp)
  803a34:	10800f43 	ldbu	r2,61(r2)
  803a38:	10803fcc 	andi	r2,r2,255
  803a3c:	1080201c 	xori	r2,r2,128
  803a40:	10bfe004 	addi	r2,r2,-128
  803a44:	10000826 	beq	r2,zero,803a68 <logic+0x37d8>
  803a48:	e0bffd17 	ldw	r2,-12(fp)
  803a4c:	10802343 	ldbu	r2,141(r2)
  803a50:	10803fcc 	andi	r2,r2,255
  803a54:	1080201c 	xori	r2,r2,128
  803a58:	10bfe004 	addi	r2,r2,-128
  803a5c:	1000021e 	bne	r2,zero,803a68 <logic+0x37d8>
  803a60:	00800044 	movi	r2,1
  803a64:	00000106 	br	803a6c <logic+0x37dc>
  803a68:	0005883a 	mov	r2,zero
  803a6c:	1007883a 	mov	r3,r2
  803a70:	e0bffd17 	ldw	r2,-12(fp)
  803a74:	10c01a45 	stb	r3,105(r2)
  d->_cg79 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803a78:	e0bffd17 	ldw	r2,-12(fp)
  803a7c:	10800983 	ldbu	r2,38(r2)
  803a80:	10803fcc 	andi	r2,r2,255
  803a84:	1080201c 	xori	r2,r2,128
  803a88:	10bfe004 	addi	r2,r2,-128
  803a8c:	10000c1e 	bne	r2,zero,803ac0 <logic+0x3830>
  803a90:	e0bffd17 	ldw	r2,-12(fp)
  803a94:	108009c3 	ldbu	r2,39(r2)
  803a98:	10803fcc 	andi	r2,r2,255
  803a9c:	1080201c 	xori	r2,r2,128
  803aa0:	10bfe004 	addi	r2,r2,-128
  803aa4:	1000061e 	bne	r2,zero,803ac0 <logic+0x3830>
  803aa8:	e0bffd17 	ldw	r2,-12(fp)
  803aac:	10800a03 	ldbu	r2,40(r2)
  803ab0:	10803fcc 	andi	r2,r2,255
  803ab4:	1080201c 	xori	r2,r2,128
  803ab8:	10bfe004 	addi	r2,r2,-128
  803abc:	10000226 	beq	r2,zero,803ac8 <logic+0x3838>
  803ac0:	00800044 	movi	r2,1
  803ac4:	00000106 	br	803acc <logic+0x383c>
  803ac8:	0005883a 	mov	r2,zero
  803acc:	1007883a 	mov	r3,r2
  803ad0:	e0bffd17 	ldw	r2,-12(fp)
  803ad4:	10c02485 	stb	r3,146(r2)
  d->_g41 = d->_g73 && !d->_cg76 || d->_g109 && !d->_cg79;
  803ad8:	e0bffd17 	ldw	r2,-12(fp)
  803adc:	10801543 	ldbu	r2,85(r2)
  803ae0:	10803fcc 	andi	r2,r2,255
  803ae4:	1080201c 	xori	r2,r2,128
  803ae8:	10bfe004 	addi	r2,r2,-128
  803aec:	10000626 	beq	r2,zero,803b08 <logic+0x3878>
  803af0:	e0bffd17 	ldw	r2,-12(fp)
  803af4:	10802443 	ldbu	r2,145(r2)
  803af8:	10803fcc 	andi	r2,r2,255
  803afc:	1080201c 	xori	r2,r2,128
  803b00:	10bfe004 	addi	r2,r2,-128
  803b04:	10000c26 	beq	r2,zero,803b38 <logic+0x38a8>
  803b08:	e0bffd17 	ldw	r2,-12(fp)
  803b0c:	10801a43 	ldbu	r2,105(r2)
  803b10:	10803fcc 	andi	r2,r2,255
  803b14:	1080201c 	xori	r2,r2,128
  803b18:	10bfe004 	addi	r2,r2,-128
  803b1c:	10000826 	beq	r2,zero,803b40 <logic+0x38b0>
  803b20:	e0bffd17 	ldw	r2,-12(fp)
  803b24:	10802483 	ldbu	r2,146(r2)
  803b28:	10803fcc 	andi	r2,r2,255
  803b2c:	1080201c 	xori	r2,r2,128
  803b30:	10bfe004 	addi	r2,r2,-128
  803b34:	1000021e 	bne	r2,zero,803b40 <logic+0x38b0>
  803b38:	00800044 	movi	r2,1
  803b3c:	00000106 	br	803b44 <logic+0x38b4>
  803b40:	0005883a 	mov	r2,zero
  803b44:	1007883a 	mov	r3,r2
  803b48:	e0bffd17 	ldw	r2,-12(fp)
  803b4c:	10c01105 	stb	r3,68(r2)
  d->_cg80 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803b50:	e0bffd17 	ldw	r2,-12(fp)
  803b54:	10800983 	ldbu	r2,38(r2)
  803b58:	10803fcc 	andi	r2,r2,255
  803b5c:	1080201c 	xori	r2,r2,128
  803b60:	10bfe004 	addi	r2,r2,-128
  803b64:	10000c1e 	bne	r2,zero,803b98 <logic+0x3908>
  803b68:	e0bffd17 	ldw	r2,-12(fp)
  803b6c:	108009c3 	ldbu	r2,39(r2)
  803b70:	10803fcc 	andi	r2,r2,255
  803b74:	1080201c 	xori	r2,r2,128
  803b78:	10bfe004 	addi	r2,r2,-128
  803b7c:	1000061e 	bne	r2,zero,803b98 <logic+0x3908>
  803b80:	e0bffd17 	ldw	r2,-12(fp)
  803b84:	10800a03 	ldbu	r2,40(r2)
  803b88:	10803fcc 	andi	r2,r2,255
  803b8c:	1080201c 	xori	r2,r2,128
  803b90:	10bfe004 	addi	r2,r2,-128
  803b94:	10000226 	beq	r2,zero,803ba0 <logic+0x3910>
  803b98:	00800044 	movi	r2,1
  803b9c:	00000106 	br	803ba4 <logic+0x3914>
  803ba0:	0005883a 	mov	r2,zero
  803ba4:	1007883a 	mov	r3,r2
  803ba8:	e0bffd17 	ldw	r2,-12(fp)
  803bac:	10c024c5 	stb	r3,147(r2)
  d->_g45 = d->_g32 && !d->_cg80 || d->_g82 && !d->_cg82;
  803bb0:	e0bffd17 	ldw	r2,-12(fp)
  803bb4:	10800f43 	ldbu	r2,61(r2)
  803bb8:	10803fcc 	andi	r2,r2,255
  803bbc:	1080201c 	xori	r2,r2,128
  803bc0:	10bfe004 	addi	r2,r2,-128
  803bc4:	10000626 	beq	r2,zero,803be0 <logic+0x3950>
  803bc8:	e0bffd17 	ldw	r2,-12(fp)
  803bcc:	108024c3 	ldbu	r2,147(r2)
  803bd0:	10803fcc 	andi	r2,r2,255
  803bd4:	1080201c 	xori	r2,r2,128
  803bd8:	10bfe004 	addi	r2,r2,-128
  803bdc:	10000c26 	beq	r2,zero,803c10 <logic+0x3980>
  803be0:	e0bffd17 	ldw	r2,-12(fp)
  803be4:	10801603 	ldbu	r2,88(r2)
  803be8:	10803fcc 	andi	r2,r2,255
  803bec:	1080201c 	xori	r2,r2,128
  803bf0:	10bfe004 	addi	r2,r2,-128
  803bf4:	10000826 	beq	r2,zero,803c18 <logic+0x3988>
  803bf8:	e0bffd17 	ldw	r2,-12(fp)
  803bfc:	10802503 	ldbu	r2,148(r2)
  803c00:	10803fcc 	andi	r2,r2,255
  803c04:	1080201c 	xori	r2,r2,128
  803c08:	10bfe004 	addi	r2,r2,-128
  803c0c:	1000021e 	bne	r2,zero,803c18 <logic+0x3988>
  803c10:	00800044 	movi	r2,1
  803c14:	00000106 	br	803c1c <logic+0x398c>
  803c18:	0005883a 	mov	r2,zero
  803c1c:	1007883a 	mov	r3,r2
  803c20:	e0bffd17 	ldw	r2,-12(fp)
  803c24:	10c01145 	stb	r3,69(r2)
  d->_cg84 = d->_region0_Atrium_AtriumTimer < AVI_VALUE;
  803c28:	e13ffd17 	ldw	r4,-12(fp)
  803c2c:	20800217 	ldw	r2,8(r4)
  803c30:	20c00317 	ldw	r3,12(r4)
  803c34:	04000044 	movi	r16,1
  803c38:	000d883a 	mov	r6,zero
  803c3c:	01d01cf4 	movhi	r7,16499
  803c40:	39f00004 	addi	r7,r7,-16384
  803c44:	1009883a 	mov	r4,r2
  803c48:	180b883a 	mov	r5,r3
  803c4c:	080527c0 	call	80527c <__ledf2>
  803c50:	10000116 	blt	r2,zero,803c58 <logic+0x39c8>
  803c54:	0021883a 	mov	r16,zero
  803c58:	8007883a 	mov	r3,r16
  803c5c:	e0bffd17 	ldw	r2,-12(fp)
  803c60:	10c02545 	stb	r3,149(r2)
  d->_g48 = d->_g32 && d->_cg84;
  803c64:	e0bffd17 	ldw	r2,-12(fp)
  803c68:	10800f43 	ldbu	r2,61(r2)
  803c6c:	10803fcc 	andi	r2,r2,255
  803c70:	1080201c 	xori	r2,r2,128
  803c74:	10bfe004 	addi	r2,r2,-128
  803c78:	10000826 	beq	r2,zero,803c9c <logic+0x3a0c>
  803c7c:	e0bffd17 	ldw	r2,-12(fp)
  803c80:	10802543 	ldbu	r2,149(r2)
  803c84:	10803fcc 	andi	r2,r2,255
  803c88:	1080201c 	xori	r2,r2,128
  803c8c:	10bfe004 	addi	r2,r2,-128
  803c90:	10000226 	beq	r2,zero,803c9c <logic+0x3a0c>
  803c94:	00800044 	movi	r2,1
  803c98:	00000106 	br	803ca0 <logic+0x3a10>
  803c9c:	0005883a 	mov	r2,zero
  803ca0:	1007883a 	mov	r3,r2
  803ca4:	e0bffd17 	ldw	r2,-12(fp)
  803ca8:	10c011c5 	stb	r3,71(r2)
  if (d->_g48) {
  803cac:	e0bffd17 	ldw	r2,-12(fp)
  803cb0:	108011c3 	ldbu	r2,71(r2)
  803cb4:	10803fcc 	andi	r2,r2,255
  803cb8:	1080201c 	xori	r2,r2,128
  803cbc:	10bfe004 	addi	r2,r2,-128
  803cc0:	10002a26 	beq	r2,zero,803d6c <logic+0x3adc>
    d->sleepT = (d->sleepT < (AVI_VALUE - d->_region0_Atrium_AtriumTimer)) ? d->sleepT : (AVI_VALUE - d->_region0_Atrium_AtriumTimer);
  803cc4:	e0bffd17 	ldw	r2,-12(fp)
  803cc8:	14000617 	ldw	r16,24(r2)
  803ccc:	14400717 	ldw	r17,28(r2)
  803cd0:	e13ffd17 	ldw	r4,-12(fp)
  803cd4:	20800217 	ldw	r2,8(r4)
  803cd8:	20c00317 	ldw	r3,12(r4)
  803cdc:	100d883a 	mov	r6,r2
  803ce0:	180f883a 	mov	r7,r3
  803ce4:	0009883a 	mov	r4,zero
  803ce8:	01501cf4 	movhi	r5,16499
  803cec:	29700004 	addi	r5,r5,-16384
  803cf0:	0805a880 	call	805a88 <__subdf3>
  803cf4:	1009883a 	mov	r4,r2
  803cf8:	180b883a 	mov	r5,r3
  803cfc:	2005883a 	mov	r2,r4
  803d00:	2807883a 	mov	r3,r5
  803d04:	100d883a 	mov	r6,r2
  803d08:	180f883a 	mov	r7,r3
  803d0c:	8009883a 	mov	r4,r16
  803d10:	880b883a 	mov	r5,r17
  803d14:	080527c0 	call	80527c <__ledf2>
  803d18:	1000040e 	bge	r2,zero,803d2c <logic+0x3a9c>
  803d1c:	e13ffd17 	ldw	r4,-12(fp)
  803d20:	20800617 	ldw	r2,24(r4)
  803d24:	20c00717 	ldw	r3,28(r4)
  803d28:	00000d06 	br	803d60 <logic+0x3ad0>
  803d2c:	e13ffd17 	ldw	r4,-12(fp)
  803d30:	20800217 	ldw	r2,8(r4)
  803d34:	20c00317 	ldw	r3,12(r4)
  803d38:	100d883a 	mov	r6,r2
  803d3c:	180f883a 	mov	r7,r3
  803d40:	0009883a 	mov	r4,zero
  803d44:	01501cf4 	movhi	r5,16499
  803d48:	29700004 	addi	r5,r5,-16384
  803d4c:	0805a880 	call	805a88 <__subdf3>
  803d50:	1009883a 	mov	r4,r2
  803d54:	180b883a 	mov	r5,r3
  803d58:	2005883a 	mov	r2,r4
  803d5c:	2807883a 	mov	r3,r5
  803d60:	e13ffd17 	ldw	r4,-12(fp)
  803d64:	20800615 	stw	r2,24(r4)
  803d68:	20c00715 	stw	r3,28(r4)
  }
  d->_cg85 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803d6c:	e0bffd17 	ldw	r2,-12(fp)
  803d70:	10800983 	ldbu	r2,38(r2)
  803d74:	10803fcc 	andi	r2,r2,255
  803d78:	1080201c 	xori	r2,r2,128
  803d7c:	10bfe004 	addi	r2,r2,-128
  803d80:	10000c1e 	bne	r2,zero,803db4 <logic+0x3b24>
  803d84:	e0bffd17 	ldw	r2,-12(fp)
  803d88:	108009c3 	ldbu	r2,39(r2)
  803d8c:	10803fcc 	andi	r2,r2,255
  803d90:	1080201c 	xori	r2,r2,128
  803d94:	10bfe004 	addi	r2,r2,-128
  803d98:	1000061e 	bne	r2,zero,803db4 <logic+0x3b24>
  803d9c:	e0bffd17 	ldw	r2,-12(fp)
  803da0:	10800a03 	ldbu	r2,40(r2)
  803da4:	10803fcc 	andi	r2,r2,255
  803da8:	1080201c 	xori	r2,r2,128
  803dac:	10bfe004 	addi	r2,r2,-128
  803db0:	10000226 	beq	r2,zero,803dbc <logic+0x3b2c>
  803db4:	00800044 	movi	r2,1
  803db8:	00000106 	br	803dc0 <logic+0x3b30>
  803dbc:	0005883a 	mov	r2,zero
  803dc0:	1007883a 	mov	r3,r2
  803dc4:	e0bffd17 	ldw	r2,-12(fp)
  803dc8:	10c02585 	stb	r3,150(r2)
  d->_g52 = d->_g48 && !d->_cg85 || d->_g87 && !d->_cg89;
  803dcc:	e0bffd17 	ldw	r2,-12(fp)
  803dd0:	108011c3 	ldbu	r2,71(r2)
  803dd4:	10803fcc 	andi	r2,r2,255
  803dd8:	1080201c 	xori	r2,r2,128
  803ddc:	10bfe004 	addi	r2,r2,-128
  803de0:	10000626 	beq	r2,zero,803dfc <logic+0x3b6c>
  803de4:	e0bffd17 	ldw	r2,-12(fp)
  803de8:	10802583 	ldbu	r2,150(r2)
  803dec:	10803fcc 	andi	r2,r2,255
  803df0:	1080201c 	xori	r2,r2,128
  803df4:	10bfe004 	addi	r2,r2,-128
  803df8:	10000c26 	beq	r2,zero,803e2c <logic+0x3b9c>
  803dfc:	e0bffd17 	ldw	r2,-12(fp)
  803e00:	10801683 	ldbu	r2,90(r2)
  803e04:	10803fcc 	andi	r2,r2,255
  803e08:	1080201c 	xori	r2,r2,128
  803e0c:	10bfe004 	addi	r2,r2,-128
  803e10:	10000826 	beq	r2,zero,803e34 <logic+0x3ba4>
  803e14:	e0bffd17 	ldw	r2,-12(fp)
  803e18:	108025c3 	ldbu	r2,151(r2)
  803e1c:	10803fcc 	andi	r2,r2,255
  803e20:	1080201c 	xori	r2,r2,128
  803e24:	10bfe004 	addi	r2,r2,-128
  803e28:	1000021e 	bne	r2,zero,803e34 <logic+0x3ba4>
  803e2c:	00800044 	movi	r2,1
  803e30:	00000106 	br	803e38 <logic+0x3ba8>
  803e34:	0005883a 	mov	r2,zero
  803e38:	1007883a 	mov	r3,r2
  803e3c:	e0bffd17 	ldw	r2,-12(fp)
  803e40:	10c01285 	stb	r3,74(r2)
  d->_g57 = d->_g32 && !d->_cg84;
  803e44:	e0bffd17 	ldw	r2,-12(fp)
  803e48:	10800f43 	ldbu	r2,61(r2)
  803e4c:	10803fcc 	andi	r2,r2,255
  803e50:	1080201c 	xori	r2,r2,128
  803e54:	10bfe004 	addi	r2,r2,-128
  803e58:	10000826 	beq	r2,zero,803e7c <logic+0x3bec>
  803e5c:	e0bffd17 	ldw	r2,-12(fp)
  803e60:	10802543 	ldbu	r2,149(r2)
  803e64:	10803fcc 	andi	r2,r2,255
  803e68:	1080201c 	xori	r2,r2,128
  803e6c:	10bfe004 	addi	r2,r2,-128
  803e70:	1000021e 	bne	r2,zero,803e7c <logic+0x3bec>
  803e74:	00800044 	movi	r2,1
  803e78:	00000106 	br	803e80 <logic+0x3bf0>
  803e7c:	0005883a 	mov	r2,zero
  803e80:	1007883a 	mov	r3,r2
  803e84:	e0bffd17 	ldw	r2,-12(fp)
  803e88:	10c01385 	stb	r3,78(r2)
  d->_cg94 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803e8c:	e0bffd17 	ldw	r2,-12(fp)
  803e90:	10800983 	ldbu	r2,38(r2)
  803e94:	10803fcc 	andi	r2,r2,255
  803e98:	1080201c 	xori	r2,r2,128
  803e9c:	10bfe004 	addi	r2,r2,-128
  803ea0:	10000c1e 	bne	r2,zero,803ed4 <logic+0x3c44>
  803ea4:	e0bffd17 	ldw	r2,-12(fp)
  803ea8:	108009c3 	ldbu	r2,39(r2)
  803eac:	10803fcc 	andi	r2,r2,255
  803eb0:	1080201c 	xori	r2,r2,128
  803eb4:	10bfe004 	addi	r2,r2,-128
  803eb8:	1000061e 	bne	r2,zero,803ed4 <logic+0x3c44>
  803ebc:	e0bffd17 	ldw	r2,-12(fp)
  803ec0:	10800a03 	ldbu	r2,40(r2)
  803ec4:	10803fcc 	andi	r2,r2,255
  803ec8:	1080201c 	xori	r2,r2,128
  803ecc:	10bfe004 	addi	r2,r2,-128
  803ed0:	10000226 	beq	r2,zero,803edc <logic+0x3c4c>
  803ed4:	00800044 	movi	r2,1
  803ed8:	00000106 	br	803ee0 <logic+0x3c50>
  803edc:	0005883a 	mov	r2,zero
  803ee0:	1007883a 	mov	r3,r2
  803ee4:	e0bffd17 	ldw	r2,-12(fp)
  803ee8:	10c02685 	stb	r3,154(r2)
  d->_g54 = d->_g88 && !d->_cg91 || d->_g57 && !d->_cg94;
  803eec:	e0bffd17 	ldw	r2,-12(fp)
  803ef0:	108016c3 	ldbu	r2,91(r2)
  803ef4:	10803fcc 	andi	r2,r2,255
  803ef8:	1080201c 	xori	r2,r2,128
  803efc:	10bfe004 	addi	r2,r2,-128
  803f00:	10000626 	beq	r2,zero,803f1c <logic+0x3c8c>
  803f04:	e0bffd17 	ldw	r2,-12(fp)
  803f08:	10802643 	ldbu	r2,153(r2)
  803f0c:	10803fcc 	andi	r2,r2,255
  803f10:	1080201c 	xori	r2,r2,128
  803f14:	10bfe004 	addi	r2,r2,-128
  803f18:	10000c26 	beq	r2,zero,803f4c <logic+0x3cbc>
  803f1c:	e0bffd17 	ldw	r2,-12(fp)
  803f20:	10801383 	ldbu	r2,78(r2)
  803f24:	10803fcc 	andi	r2,r2,255
  803f28:	1080201c 	xori	r2,r2,128
  803f2c:	10bfe004 	addi	r2,r2,-128
  803f30:	10000826 	beq	r2,zero,803f54 <logic+0x3cc4>
  803f34:	e0bffd17 	ldw	r2,-12(fp)
  803f38:	10802683 	ldbu	r2,154(r2)
  803f3c:	10803fcc 	andi	r2,r2,255
  803f40:	1080201c 	xori	r2,r2,128
  803f44:	10bfe004 	addi	r2,r2,-128
  803f48:	1000021e 	bne	r2,zero,803f54 <logic+0x3cc4>
  803f4c:	00800044 	movi	r2,1
  803f50:	00000106 	br	803f58 <logic+0x3cc8>
  803f54:	0005883a 	mov	r2,zero
  803f58:	1007883a 	mov	r3,r2
  803f5c:	e0bffd17 	ldw	r2,-12(fp)
  803f60:	10c01305 	stb	r3,76(r2)
  d->_g59 = d->_g32 || d->_g100 && !d->_cg102;
  803f64:	e0bffd17 	ldw	r2,-12(fp)
  803f68:	10800f43 	ldbu	r2,61(r2)
  803f6c:	10803fcc 	andi	r2,r2,255
  803f70:	1080201c 	xori	r2,r2,128
  803f74:	10bfe004 	addi	r2,r2,-128
  803f78:	10000c1e 	bne	r2,zero,803fac <logic+0x3d1c>
  803f7c:	e0bffd17 	ldw	r2,-12(fp)
  803f80:	10801843 	ldbu	r2,97(r2)
  803f84:	10803fcc 	andi	r2,r2,255
  803f88:	1080201c 	xori	r2,r2,128
  803f8c:	10bfe004 	addi	r2,r2,-128
  803f90:	10000826 	beq	r2,zero,803fb4 <logic+0x3d24>
  803f94:	e0bffd17 	ldw	r2,-12(fp)
  803f98:	108026c3 	ldbu	r2,155(r2)
  803f9c:	10803fcc 	andi	r2,r2,255
  803fa0:	1080201c 	xori	r2,r2,128
  803fa4:	10bfe004 	addi	r2,r2,-128
  803fa8:	1000021e 	bne	r2,zero,803fb4 <logic+0x3d24>
  803fac:	00800044 	movi	r2,1
  803fb0:	00000106 	br	803fb8 <logic+0x3d28>
  803fb4:	0005883a 	mov	r2,zero
  803fb8:	1007883a 	mov	r3,r2
  803fbc:	e0bffd17 	ldw	r2,-12(fp)
  803fc0:	10c013c5 	stb	r3,79(r2)
}
  803fc4:	0001883a 	nop
  803fc8:	e6fffe04 	addi	sp,fp,-8
  803fcc:	dfc00317 	ldw	ra,12(sp)
  803fd0:	df000217 	ldw	fp,8(sp)
  803fd4:	dc400117 	ldw	r17,4(sp)
  803fd8:	dc000017 	ldw	r16,0(sp)
  803fdc:	dec00404 	addi	sp,sp,16
  803fe0:	f800283a 	ret

00803fe4 <reset>:

void reset(TickData* d) {
  803fe4:	defffe04 	addi	sp,sp,-8
  803fe8:	df000115 	stw	fp,4(sp)
  803fec:	df000104 	addi	fp,sp,4
  803ff0:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  803ff4:	e0bfff17 	ldw	r2,-4(fp)
  803ff8:	00c00044 	movi	r3,1
  803ffc:	10c01ac5 	stb	r3,107(r2)
  d->_TERM = 0;
  804000:	e0bfff17 	ldw	r2,-4(fp)
  804004:	10002b05 	stb	zero,172(r2)
  d->_region0_Atrium_VentricleTimer = 0.0;
  804008:	e0bfff17 	ldw	r2,-4(fp)
  80400c:	10000015 	stw	zero,0(r2)
  804010:	10000115 	stw	zero,4(r2)
  d->_region0_Atrium_AtriumTimer = 0.0;
  804014:	e0bfff17 	ldw	r2,-4(fp)
  804018:	10000215 	stw	zero,8(r2)
  80401c:	10000315 	stw	zero,12(r2)
  d->deltaT = 0.0;
  804020:	e0bfff17 	ldw	r2,-4(fp)
  804024:	10000415 	stw	zero,16(r2)
  804028:	10000515 	stw	zero,20(r2)
  d->sleepT = 0.0;
  80402c:	e0bfff17 	ldw	r2,-4(fp)
  804030:	10000615 	stw	zero,24(r2)
  804034:	10000715 	stw	zero,28(r2)
  d->_pg36 = 0;
  804038:	e0bfff17 	ldw	r2,-4(fp)
  80403c:	10002b45 	stb	zero,173(r2)
  d->_pg59 = 0;
  804040:	e0bfff17 	ldw	r2,-4(fp)
  804044:	10002b85 	stb	zero,174(r2)
  d->_pg45 = 0;
  804048:	e0bfff17 	ldw	r2,-4(fp)
  80404c:	10002bc5 	stb	zero,175(r2)
  d->_pg14 = 0;
  804050:	e0bfff17 	ldw	r2,-4(fp)
  804054:	10002c05 	stb	zero,176(r2)
  d->_pg33 = 0;
  804058:	e0bfff17 	ldw	r2,-4(fp)
  80405c:	10002c45 	stb	zero,177(r2)
  d->_pg38_e5 = 0;
  804060:	e0bfff17 	ldw	r2,-4(fp)
  804064:	10002c85 	stb	zero,178(r2)
  d->_pg7 = 0;
  804068:	e0bfff17 	ldw	r2,-4(fp)
  80406c:	10002cc5 	stb	zero,179(r2)
  d->_pg41 = 0;
  804070:	e0bfff17 	ldw	r2,-4(fp)
  804074:	10002d05 	stb	zero,180(r2)
  d->_pg14_e2 = 0;
  804078:	e0bfff17 	ldw	r2,-4(fp)
  80407c:	10002d45 	stb	zero,181(r2)
  d->_pg54 = 0;
  804080:	e0bfff17 	ldw	r2,-4(fp)
  804084:	10002d85 	stb	zero,182(r2)
  d->_pg52 = 0;
  804088:	e0bfff17 	ldw	r2,-4(fp)
  80408c:	10002dc5 	stb	zero,183(r2)
  d->_pg64_e3 = 0;
  804090:	e0bfff17 	ldw	r2,-4(fp)
  804094:	10002e05 	stb	zero,184(r2)
  d->_pg99_e7 = 0;
  804098:	e0bfff17 	ldw	r2,-4(fp)
  80409c:	10002e45 	stb	zero,185(r2)
  d->_pg3 = 0;
  8040a0:	e0bfff17 	ldw	r2,-4(fp)
  8040a4:	10002e85 	stb	zero,186(r2)
  d->_pg108 = 0;
  8040a8:	e0bfff17 	ldw	r2,-4(fp)
  8040ac:	10002ec5 	stb	zero,187(r2)
  d->_pg13 = 0;
  8040b0:	e0bfff17 	ldw	r2,-4(fp)
  8040b4:	10002f05 	stb	zero,188(r2)
  d->_pg20 = 0;
  8040b8:	e0bfff17 	ldw	r2,-4(fp)
  8040bc:	10002f45 	stb	zero,189(r2)
  d->_pg26 = 0;
  8040c0:	e0bfff17 	ldw	r2,-4(fp)
  8040c4:	10002f85 	stb	zero,190(r2)
  d->_pg31 = 0;
  8040c8:	e0bfff17 	ldw	r2,-4(fp)
  8040cc:	10002fc5 	stb	zero,191(r2)
}
  8040d0:	0001883a 	nop
  8040d4:	e037883a 	mov	sp,fp
  8040d8:	df000017 	ldw	fp,0(sp)
  8040dc:	dec00104 	addi	sp,sp,4
  8040e0:	f800283a 	ret

008040e4 <tick>:

void tick(TickData* d) {
  8040e4:	defffd04 	addi	sp,sp,-12
  8040e8:	dfc00215 	stw	ra,8(sp)
  8040ec:	df000115 	stw	fp,4(sp)
  8040f0:	df000104 	addi	fp,sp,4
  8040f4:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  8040f8:	e13fff17 	ldw	r4,-4(fp)
  8040fc:	08002900 	call	800290 <logic>

  d->_pg36 = d->_g36;
  804100:	e0bfff17 	ldw	r2,-4(fp)
  804104:	10c00fc3 	ldbu	r3,63(r2)
  804108:	e0bfff17 	ldw	r2,-4(fp)
  80410c:	10c02b45 	stb	r3,173(r2)
  d->_pg59 = d->_g59;
  804110:	e0bfff17 	ldw	r2,-4(fp)
  804114:	10c013c3 	ldbu	r3,79(r2)
  804118:	e0bfff17 	ldw	r2,-4(fp)
  80411c:	10c02b85 	stb	r3,174(r2)
  d->_pg45 = d->_g45;
  804120:	e0bfff17 	ldw	r2,-4(fp)
  804124:	10c01143 	ldbu	r3,69(r2)
  804128:	e0bfff17 	ldw	r2,-4(fp)
  80412c:	10c02bc5 	stb	r3,175(r2)
  d->_pg14 = d->_g14;
  804130:	e0bfff17 	ldw	r2,-4(fp)
  804134:	10c00c03 	ldbu	r3,48(r2)
  804138:	e0bfff17 	ldw	r2,-4(fp)
  80413c:	10c02c05 	stb	r3,176(r2)
  d->_pg33 = d->_g33;
  804140:	e0bfff17 	ldw	r2,-4(fp)
  804144:	10c00f83 	ldbu	r3,62(r2)
  804148:	e0bfff17 	ldw	r2,-4(fp)
  80414c:	10c02c45 	stb	r3,177(r2)
  d->_pg38_e5 = d->_g38_e5;
  804150:	e0bfff17 	ldw	r2,-4(fp)
  804154:	10c02903 	ldbu	r3,164(r2)
  804158:	e0bfff17 	ldw	r2,-4(fp)
  80415c:	10c02c85 	stb	r3,178(r2)
  d->_pg7 = d->_g7;
  804160:	e0bfff17 	ldw	r2,-4(fp)
  804164:	10c00ac3 	ldbu	r3,43(r2)
  804168:	e0bfff17 	ldw	r2,-4(fp)
  80416c:	10c02cc5 	stb	r3,179(r2)
  d->_pg41 = d->_g41;
  804170:	e0bfff17 	ldw	r2,-4(fp)
  804174:	10c01103 	ldbu	r3,68(r2)
  804178:	e0bfff17 	ldw	r2,-4(fp)
  80417c:	10c02d05 	stb	r3,180(r2)
  d->_pg14_e2 = d->_g14_e2;
  804180:	e0bfff17 	ldw	r2,-4(fp)
  804184:	10c02843 	ldbu	r3,161(r2)
  804188:	e0bfff17 	ldw	r2,-4(fp)
  80418c:	10c02d45 	stb	r3,181(r2)
  d->_pg54 = d->_g54;
  804190:	e0bfff17 	ldw	r2,-4(fp)
  804194:	10c01303 	ldbu	r3,76(r2)
  804198:	e0bfff17 	ldw	r2,-4(fp)
  80419c:	10c02d85 	stb	r3,182(r2)
  d->_pg52 = d->_g52;
  8041a0:	e0bfff17 	ldw	r2,-4(fp)
  8041a4:	10c01283 	ldbu	r3,74(r2)
  8041a8:	e0bfff17 	ldw	r2,-4(fp)
  8041ac:	10c02dc5 	stb	r3,183(r2)
  d->_pg64_e3 = d->_g64_e3;
  8041b0:	e0bfff17 	ldw	r2,-4(fp)
  8041b4:	10c029c3 	ldbu	r3,167(r2)
  8041b8:	e0bfff17 	ldw	r2,-4(fp)
  8041bc:	10c02e05 	stb	r3,184(r2)
  d->_pg99_e7 = d->_g99_e7;
  8041c0:	e0bfff17 	ldw	r2,-4(fp)
  8041c4:	10c02ac3 	ldbu	r3,171(r2)
  8041c8:	e0bfff17 	ldw	r2,-4(fp)
  8041cc:	10c02e45 	stb	r3,185(r2)
  d->_pg3 = d->_g3;
  8041d0:	e0bfff17 	ldw	r2,-4(fp)
  8041d4:	10c00a43 	ldbu	r3,41(r2)
  8041d8:	e0bfff17 	ldw	r2,-4(fp)
  8041dc:	10c02e85 	stb	r3,186(r2)
  d->_pg108 = d->_g108;
  8041e0:	e0bfff17 	ldw	r2,-4(fp)
  8041e4:	10c01a03 	ldbu	r3,104(r2)
  8041e8:	e0bfff17 	ldw	r2,-4(fp)
  8041ec:	10c02ec5 	stb	r3,187(r2)
  d->_pg13 = d->_g13;
  8041f0:	e0bfff17 	ldw	r2,-4(fp)
  8041f4:	10c00bc3 	ldbu	r3,47(r2)
  8041f8:	e0bfff17 	ldw	r2,-4(fp)
  8041fc:	10c02f05 	stb	r3,188(r2)
  d->_pg20 = d->_g20;
  804200:	e0bfff17 	ldw	r2,-4(fp)
  804204:	10c00d03 	ldbu	r3,52(r2)
  804208:	e0bfff17 	ldw	r2,-4(fp)
  80420c:	10c02f45 	stb	r3,189(r2)
  d->_pg26 = d->_g26;
  804210:	e0bfff17 	ldw	r2,-4(fp)
  804214:	10c00e43 	ldbu	r3,57(r2)
  804218:	e0bfff17 	ldw	r2,-4(fp)
  80421c:	10c02f85 	stb	r3,190(r2)
  d->_pg31 = d->_g31;
  804220:	e0bfff17 	ldw	r2,-4(fp)
  804224:	10c00f03 	ldbu	r3,60(r2)
  804228:	e0bfff17 	ldw	r2,-4(fp)
  80422c:	10c02fc5 	stb	r3,191(r2)
  d->_GO = 0;
  804230:	e0bfff17 	ldw	r2,-4(fp)
  804234:	10001ac5 	stb	zero,107(r2)
}
  804238:	0001883a 	nop
  80423c:	e037883a 	mov	sp,fp
  804240:	dfc00117 	ldw	ra,4(sp)
  804244:	df000017 	ldw	fp,0(sp)
  804248:	dec00204 	addi	sp,sp,8
  80424c:	f800283a 	ret

00804250 <timerISR>:
#include "../inc/chart.h"
#include "../inc/state.h"
#include "../inc/defines.h"

// ISR for pacemaker timing
alt_u32 timerISR(void* context){
  804250:	defffd04 	addi	sp,sp,-12
  804254:	df000215 	stw	fp,8(sp)
  804258:	df000204 	addi	fp,sp,8
  80425c:	e13fff15 	stw	r4,-4(fp)
	int* timeCount = (int*) context;
  804260:	e0bfff17 	ldw	r2,-4(fp)
  804264:	e0bffe15 	stw	r2,-8(fp)
	(*timeCount)++;
  804268:	e0bffe17 	ldw	r2,-8(fp)
  80426c:	10800017 	ldw	r2,0(r2)
  804270:	10c00044 	addi	r3,r2,1
  804274:	e0bffe17 	ldw	r2,-8(fp)
  804278:	10c00015 	stw	r3,0(r2)
	return 1; // next time out is 1ms
  80427c:	00800044 	movi	r2,1
}
  804280:	e037883a 	mov	sp,fp
  804284:	df000017 	ldw	fp,0(sp)
  804288:	dec00104 	addi	sp,sp,4
  80428c:	f800283a 	ret

00804290 <main>:


int main()
{
  804290:	deffb904 	addi	sp,sp,-284
  804294:	dfc04615 	stw	ra,280(sp)
  804298:	df004515 	stw	fp,276(sp)
  80429c:	df004504 	addi	fp,sp,276
	// Pacemaker init
	uint8_t state = -1;
  8042a0:	00bfffc4 	movi	r2,-1
  8042a4:	e0bfc705 	stb	r2,-228(fp)

	// Button init
	int key = 0;
  8042a8:	e03fc515 	stw	zero,-236(fp)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  8042ac:	00c001c4 	movi	r3,7
  8042b0:	00804074 	movhi	r2,257
  8042b4:	10842a04 	addi	r2,r2,4264
  8042b8:	10c00035 	stwio	r3,0(r2)

	// SC Chart Init
	TickData data;
	reset(&data);
  8042bc:	e0bfc804 	addi	r2,fp,-224
  8042c0:	1009883a 	mov	r4,r2
  8042c4:	0803fe40 	call	803fe4 <reset>
	tick(&data);
  8042c8:	e0bfc804 	addi	r2,fp,-224
  8042cc:	1009883a 	mov	r4,r2
  8042d0:	08040e40 	call	8040e4 <tick>

	// Timer Init
	uint64_t systemTime = 0;
  8042d4:	e03ff815 	stw	zero,-32(fp)
  8042d8:	e03ff915 	stw	zero,-28(fp)
	uint64_t prevTime = 0;
  8042dc:	e03fbb15 	stw	zero,-276(fp)
  8042e0:	e03fbc15 	stw	zero,-272(fp)
	uint64_t apTime = -1;
  8042e4:	00bfffc4 	movi	r2,-1
  8042e8:	e0bfbd15 	stw	r2,-268(fp)
  8042ec:	00bfffc4 	movi	r2,-1
  8042f0:	e0bfbe15 	stw	r2,-264(fp)
	uint64_t vpTime = -1;
  8042f4:	00bfffc4 	movi	r2,-1
  8042f8:	e0bfbf15 	stw	r2,-260(fp)
  8042fc:	00bfffc4 	movi	r2,-1
  804300:	e0bfc015 	stw	r2,-256(fp)
	uint64_t asTime = -1;
  804304:	00bfffc4 	movi	r2,-1
  804308:	e0bfc115 	stw	r2,-252(fp)
  80430c:	00bfffc4 	movi	r2,-1
  804310:	e0bfc215 	stw	r2,-248(fp)
	uint64_t vsTime = -1;
  804314:	00bfffc4 	movi	r2,-1
  804318:	e0bfc315 	stw	r2,-244(fp)
  80431c:	00bfffc4 	movi	r2,-1
  804320:	e0bfc415 	stw	r2,-240(fp)

	alt_alarm ticker;
	void* timerContext = (void*) &systemTime;
  804324:	e0bff804 	addi	r2,fp,-32
  804328:	e0bfc615 	stw	r2,-232(fp)
	alt_alarm_start(&ticker, 1, timerISR, timerContext);
  80432c:	e0bffa04 	addi	r2,fp,-24
  804330:	e1ffc617 	ldw	r7,-232(fp)
  804334:	01802034 	movhi	r6,128
  804338:	31909404 	addi	r6,r6,16976
  80433c:	01400044 	movi	r5,1
  804340:	1009883a 	mov	r4,r2
  804344:	0809a740 	call	809a74 <alt_alarm_start>


	// Reset LED
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x00);
  804348:	0007883a 	mov	r3,zero
  80434c:	00804074 	movhi	r2,257
  804350:	10841c04 	addi	r2,r2,4208
  804354:	10c00035 	stwio	r3,0(r2)

	while(1){
		// update time
	    data.deltaT = systemTime - prevTime;
  804358:	e13ff817 	ldw	r4,-32(fp)
  80435c:	e17ff917 	ldw	r5,-28(fp)
  804360:	e1bfbb17 	ldw	r6,-276(fp)
  804364:	e1ffbc17 	ldw	r7,-272(fp)
  804368:	2185c83a 	sub	r2,r4,r6
  80436c:	2091803a 	cmpltu	r8,r4,r2
  804370:	29c7c83a 	sub	r3,r5,r7
  804374:	1a09c83a 	sub	r4,r3,r8
  804378:	2007883a 	mov	r3,r4
  80437c:	100b883a 	mov	r5,r2
  804380:	180d883a 	mov	r6,r3
  804384:	2809883a 	mov	r4,r5
  804388:	300b883a 	mov	r5,r6
  80438c:	08048840 	call	804884 <__floatundidf>
  804390:	1009883a 	mov	r4,r2
  804394:	180b883a 	mov	r5,r3
  804398:	e13fcc15 	stw	r4,-208(fp)
  80439c:	e17fcd15 	stw	r5,-204(fp)
	    prevTime = systemTime;
  8043a0:	e0bff817 	ldw	r2,-32(fp)
  8043a4:	e0bfbb15 	stw	r2,-276(fp)
  8043a8:	e0bff917 	ldw	r2,-28(fp)
  8043ac:	e0bfbc15 	stw	r2,-272(fp)

	    updateState(&state);
  8043b0:	e0bfc704 	addi	r2,fp,-228
  8043b4:	1009883a 	mov	r4,r2
  8043b8:	080476c0 	call	80476c <updateState>

	    // Update inputs
	    switch (state & 0b1){
  8043bc:	e0bfc703 	ldbu	r2,-228(fp)
  8043c0:	10803fcc 	andi	r2,r2,255
  8043c4:	1080004c 	andi	r2,r2,1
  8043c8:	10000326 	beq	r2,zero,8043d8 <main+0x148>
  8043cc:	10800060 	cmpeqi	r2,r2,1
  8043d0:	1000091e 	bne	r2,zero,8043f8 <main+0x168>
  8043d4:	00000406 	br	8043e8 <main+0x158>
	    case CHART:
	    	tick(&data);
  8043d8:	e0bfc804 	addi	r2,fp,-224
  8043dc:	1009883a 	mov	r4,r2
  8043e0:	08040e40 	call	8040e4 <tick>
	    	break;
  8043e4:	00000506 	br	8043fc <main+0x16c>
	    case CODE:
	    	break;
	    default:
			tick(&data);
  8043e8:	e0bfc804 	addi	r2,fp,-224
  8043ec:	1009883a 	mov	r4,r2
  8043f0:	08040e40 	call	8040e4 <tick>
	    	break;
  8043f4:	00000106 	br	8043fc <main+0x16c>
	    switch (state & 0b1){
	    case CHART:
	    	tick(&data);
	    	break;
	    case CODE:
	    	break;
  8043f8:	0001883a 	nop
	    default:
			tick(&data);
	    	break;
	    }

	    key = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8043fc:	00804074 	movhi	r2,257
  804400:	10842b04 	addi	r2,r2,4268
  804404:	10800037 	ldwio	r2,0(r2)
  804408:	e0bfc515 	stw	r2,-236(fp)
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  80440c:	0007883a 	mov	r3,zero
  804410:	00804074 	movhi	r2,257
  804414:	10842b04 	addi	r2,r2,4268
  804418:	10c00035 	stwio	r3,0(r2)

		// Set inputs
	    if ((state & 0x2) == BUTTONS) {
  80441c:	e0bfc703 	ldbu	r2,-228(fp)
  804420:	10803fcc 	andi	r2,r2,255
  804424:	1080008c 	andi	r2,r2,2
  804428:	10000f1e 	bne	r2,zero,804468 <main+0x1d8>
			if(key == 1) {
  80442c:	e0bfc517 	ldw	r2,-236(fp)
  804430:	10800058 	cmpnei	r2,r2,1
  804434:	1000031e 	bne	r2,zero,804444 <main+0x1b4>
				data.AS = 1;
  804438:	00800044 	movi	r2,1
  80443c:	e0bfd005 	stb	r2,-192(fp)
  804440:	00004106 	br	804548 <main+0x2b8>
			} else if (key == 2){
  804444:	e0bfc517 	ldw	r2,-236(fp)
  804448:	10800098 	cmpnei	r2,r2,2
  80444c:	1000031e 	bne	r2,zero,80445c <main+0x1cc>
				data.VS = 1;
  804450:	00800044 	movi	r2,1
  804454:	e0bfd045 	stb	r2,-191(fp)
  804458:	00003b06 	br	804548 <main+0x2b8>
			} else {
				data.AS = 0;
  80445c:	e03fd005 	stb	zero,-192(fp)
				data.VS = 0;
  804460:	e03fd045 	stb	zero,-191(fp)
  804464:	00003806 	br	804548 <main+0x2b8>
			}
	    } else { // UART
	    	static char input = 0;
	    	if (input != IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE)){
  804468:	d0a72603 	ldbu	r2,-25448(gp)
  80446c:	10c03fcc 	andi	r3,r2,255
  804470:	18c0201c 	xori	r3,r3,128
  804474:	18ffe004 	addi	r3,r3,-128
  804478:	00804074 	movhi	r2,257
  80447c:	10841004 	addi	r2,r2,4160
  804480:	10800037 	ldwio	r2,0(r2)
  804484:	18801b26 	beq	r3,r2,8044f4 <main+0x264>
	    		input = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
  804488:	00804074 	movhi	r2,257
  80448c:	10841004 	addi	r2,r2,4160
  804490:	10800037 	ldwio	r2,0(r2)
  804494:	d0a72605 	stb	r2,-25448(gp)
				if (input == 'V'){
  804498:	d0a72603 	ldbu	r2,-25448(gp)
  80449c:	10803fcc 	andi	r2,r2,255
  8044a0:	1080201c 	xori	r2,r2,128
  8044a4:	10bfe004 	addi	r2,r2,-128
  8044a8:	10801598 	cmpnei	r2,r2,86
  8044ac:	1000041e 	bne	r2,zero,8044c0 <main+0x230>
					data.VS = 1;
  8044b0:	00800044 	movi	r2,1
  8044b4:	e0bfd045 	stb	r2,-191(fp)
					data.AS = 0;
  8044b8:	e03fd005 	stb	zero,-192(fp)
  8044bc:	00000f06 	br	8044fc <main+0x26c>
				} else if (input == 'A'){
  8044c0:	d0a72603 	ldbu	r2,-25448(gp)
  8044c4:	10803fcc 	andi	r2,r2,255
  8044c8:	1080201c 	xori	r2,r2,128
  8044cc:	10bfe004 	addi	r2,r2,-128
  8044d0:	10801058 	cmpnei	r2,r2,65
  8044d4:	1000041e 	bne	r2,zero,8044e8 <main+0x258>
					data.AS = 1;
  8044d8:	00800044 	movi	r2,1
  8044dc:	e0bfd005 	stb	r2,-192(fp)
					data.VS = 0;
  8044e0:	e03fd045 	stb	zero,-191(fp)
  8044e4:	00000506 	br	8044fc <main+0x26c>
				} else {
					data.VS = 0;
  8044e8:	e03fd045 	stb	zero,-191(fp)
					data.AS = 0;
  8044ec:	e03fd005 	stb	zero,-192(fp)
  8044f0:	00000206 	br	8044fc <main+0x26c>
				}
	    	} else {
				data.VS = 0;
  8044f4:	e03fd045 	stb	zero,-191(fp)
				data.AS = 0;
  8044f8:	e03fd005 	stb	zero,-192(fp)
			}

	    	// UART Output
	    	if (data.AP){
  8044fc:	e0bfd083 	ldbu	r2,-190(fp)
  804500:	10803fcc 	andi	r2,r2,255
  804504:	1080201c 	xori	r2,r2,128
  804508:	10bfe004 	addi	r2,r2,-128
  80450c:	10000526 	beq	r2,zero,804524 <main+0x294>
	    		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, 'A');
  804510:	00c01044 	movi	r3,65
  804514:	00804074 	movhi	r2,257
  804518:	10841104 	addi	r2,r2,4164
  80451c:	10c00035 	stwio	r3,0(r2)
  804520:	00000906 	br	804548 <main+0x2b8>
	    	} else if (data.VP){
  804524:	e0bfd0c3 	ldbu	r2,-189(fp)
  804528:	10803fcc 	andi	r2,r2,255
  80452c:	1080201c 	xori	r2,r2,128
  804530:	10bfe004 	addi	r2,r2,-128
  804534:	10000426 	beq	r2,zero,804548 <main+0x2b8>
	    		IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, 'V');
  804538:	00c01584 	movi	r3,86
  80453c:	00804074 	movhi	r2,257
  804540:	10841104 	addi	r2,r2,4164
  804544:	10c00035 	stwio	r3,0(r2)
	    	}
	    }

	    // Set outputs
	    if((data.AP) || (apTime < 50)){
  804548:	e0bfd083 	ldbu	r2,-190(fp)
  80454c:	10803fcc 	andi	r2,r2,255
  804550:	1080201c 	xori	r2,r2,128
  804554:	10bfe004 	addi	r2,r2,-128
  804558:	1000071e 	bne	r2,zero,804578 <main+0x2e8>
  80455c:	e0bfbe17 	ldw	r2,-264(fp)
  804560:	1000151e 	bne	r2,zero,8045b8 <main+0x328>
  804564:	e0bfbe17 	ldw	r2,-264(fp)
  804568:	1000031e 	bne	r2,zero,804578 <main+0x2e8>
  80456c:	e0bfbd17 	ldw	r2,-268(fp)
  804570:	10800ca8 	cmpgeui	r2,r2,50
  804574:	1000101e 	bne	r2,zero,8045b8 <main+0x328>
		    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x01);
  804578:	00c00044 	movi	r3,1
  80457c:	00804074 	movhi	r2,257
  804580:	10841c04 	addi	r2,r2,4208
  804584:	10c00035 	stwio	r3,0(r2)
		    apTime++;
  804588:	e13fbd17 	ldw	r4,-268(fp)
  80458c:	e17fbe17 	ldw	r5,-264(fp)
  804590:	01800044 	movi	r6,1
  804594:	000f883a 	mov	r7,zero
  804598:	2185883a 	add	r2,r4,r6
  80459c:	1111803a 	cmpltu	r8,r2,r4
  8045a0:	29c7883a 	add	r3,r5,r7
  8045a4:	40c9883a 	add	r4,r8,r3
  8045a8:	2007883a 	mov	r3,r4
  8045ac:	e0bfbd15 	stw	r2,-268(fp)
  8045b0:	e0ffbe15 	stw	r3,-264(fp)
  8045b4:	00002806 	br	804658 <main+0x3c8>
	    } else if ((data.VP) || (vpTime < 50)){
  8045b8:	e0bfd0c3 	ldbu	r2,-189(fp)
  8045bc:	10803fcc 	andi	r2,r2,255
  8045c0:	1080201c 	xori	r2,r2,128
  8045c4:	10bfe004 	addi	r2,r2,-128
  8045c8:	1000071e 	bne	r2,zero,8045e8 <main+0x358>
  8045cc:	e0bfc017 	ldw	r2,-256(fp)
  8045d0:	1000151e 	bne	r2,zero,804628 <main+0x398>
  8045d4:	e0bfc017 	ldw	r2,-256(fp)
  8045d8:	1000031e 	bne	r2,zero,8045e8 <main+0x358>
  8045dc:	e0bfbf17 	ldw	r2,-260(fp)
  8045e0:	10800ca8 	cmpgeui	r2,r2,50
  8045e4:	1000101e 	bne	r2,zero,804628 <main+0x398>
		    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x02);
  8045e8:	00c00084 	movi	r3,2
  8045ec:	00804074 	movhi	r2,257
  8045f0:	10841c04 	addi	r2,r2,4208
  8045f4:	10c00035 	stwio	r3,0(r2)
		    vpTime++;
  8045f8:	e13fbf17 	ldw	r4,-260(fp)
  8045fc:	e17fc017 	ldw	r5,-256(fp)
  804600:	01800044 	movi	r6,1
  804604:	000f883a 	mov	r7,zero
  804608:	2185883a 	add	r2,r4,r6
  80460c:	1111803a 	cmpltu	r8,r2,r4
  804610:	29c7883a 	add	r3,r5,r7
  804614:	40c9883a 	add	r4,r8,r3
  804618:	2007883a 	mov	r3,r4
  80461c:	e0bfbf15 	stw	r2,-260(fp)
  804620:	e0ffc015 	stw	r3,-256(fp)
  804624:	00000c06 	br	804658 <main+0x3c8>
	    } else {
		    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x00);
  804628:	0007883a 	mov	r3,zero
  80462c:	00804074 	movhi	r2,257
  804630:	10841c04 	addi	r2,r2,4208
  804634:	10c00035 	stwio	r3,0(r2)
		    apTime = -1;
  804638:	00bfffc4 	movi	r2,-1
  80463c:	e0bfbd15 	stw	r2,-268(fp)
  804640:	00bfffc4 	movi	r2,-1
  804644:	e0bfbe15 	stw	r2,-264(fp)
		    vpTime = -1;
  804648:	00bfffc4 	movi	r2,-1
  80464c:	e0bfbf15 	stw	r2,-260(fp)
  804650:	00bfffc4 	movi	r2,-1
  804654:	e0bfc015 	stw	r2,-256(fp)
	    }
	    // Set outputs
	    if((data.AS) || (asTime < 50)){
  804658:	e0bfd003 	ldbu	r2,-192(fp)
  80465c:	10803fcc 	andi	r2,r2,255
  804660:	1080201c 	xori	r2,r2,128
  804664:	10bfe004 	addi	r2,r2,-128
  804668:	1000071e 	bne	r2,zero,804688 <main+0x3f8>
  80466c:	e0bfc217 	ldw	r2,-248(fp)
  804670:	1000151e 	bne	r2,zero,8046c8 <main+0x438>
  804674:	e0bfc217 	ldw	r2,-248(fp)
  804678:	1000031e 	bne	r2,zero,804688 <main+0x3f8>
  80467c:	e0bfc117 	ldw	r2,-252(fp)
  804680:	10800ca8 	cmpgeui	r2,r2,50
  804684:	1000101e 	bne	r2,zero,8046c8 <main+0x438>
		    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x01);
  804688:	00c00044 	movi	r3,1
  80468c:	00804074 	movhi	r2,257
  804690:	10842004 	addi	r2,r2,4224
  804694:	10c00035 	stwio	r3,0(r2)
		    asTime++;
  804698:	e13fc117 	ldw	r4,-252(fp)
  80469c:	e17fc217 	ldw	r5,-248(fp)
  8046a0:	01800044 	movi	r6,1
  8046a4:	000f883a 	mov	r7,zero
  8046a8:	2185883a 	add	r2,r4,r6
  8046ac:	1111803a 	cmpltu	r8,r2,r4
  8046b0:	29c7883a 	add	r3,r5,r7
  8046b4:	40c9883a 	add	r4,r8,r3
  8046b8:	2007883a 	mov	r3,r4
  8046bc:	e0bfc115 	stw	r2,-252(fp)
  8046c0:	e0ffc215 	stw	r3,-248(fp)
  8046c4:	00002806 	br	804768 <main+0x4d8>
	    } else if ((data.VS) || (vsTime < 50)){
  8046c8:	e0bfd043 	ldbu	r2,-191(fp)
  8046cc:	10803fcc 	andi	r2,r2,255
  8046d0:	1080201c 	xori	r2,r2,128
  8046d4:	10bfe004 	addi	r2,r2,-128
  8046d8:	1000071e 	bne	r2,zero,8046f8 <main+0x468>
  8046dc:	e0bfc417 	ldw	r2,-240(fp)
  8046e0:	1000151e 	bne	r2,zero,804738 <main+0x4a8>
  8046e4:	e0bfc417 	ldw	r2,-240(fp)
  8046e8:	1000031e 	bne	r2,zero,8046f8 <main+0x468>
  8046ec:	e0bfc317 	ldw	r2,-244(fp)
  8046f0:	10800ca8 	cmpgeui	r2,r2,50
  8046f4:	1000101e 	bne	r2,zero,804738 <main+0x4a8>
		    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x02);
  8046f8:	00c00084 	movi	r3,2
  8046fc:	00804074 	movhi	r2,257
  804700:	10842004 	addi	r2,r2,4224
  804704:	10c00035 	stwio	r3,0(r2)
		    vsTime++;
  804708:	e13fc317 	ldw	r4,-244(fp)
  80470c:	e17fc417 	ldw	r5,-240(fp)
  804710:	01800044 	movi	r6,1
  804714:	000f883a 	mov	r7,zero
  804718:	2185883a 	add	r2,r4,r6
  80471c:	1111803a 	cmpltu	r8,r2,r4
  804720:	29c7883a 	add	r3,r5,r7
  804724:	40c9883a 	add	r4,r8,r3
  804728:	2007883a 	mov	r3,r4
  80472c:	e0bfc315 	stw	r2,-244(fp)
  804730:	e0ffc415 	stw	r3,-240(fp)
  804734:	00000c06 	br	804768 <main+0x4d8>
	    } else {
		    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x00);
  804738:	0007883a 	mov	r3,zero
  80473c:	00804074 	movhi	r2,257
  804740:	10842004 	addi	r2,r2,4224
  804744:	10c00035 	stwio	r3,0(r2)
		    asTime = -1;
  804748:	00bfffc4 	movi	r2,-1
  80474c:	e0bfc115 	stw	r2,-252(fp)
  804750:	00bfffc4 	movi	r2,-1
  804754:	e0bfc215 	stw	r2,-248(fp)
		    vsTime = -1;
  804758:	00bfffc4 	movi	r2,-1
  80475c:	e0bfc315 	stw	r2,-244(fp)
  804760:	00bfffc4 	movi	r2,-1
  804764:	e0bfc415 	stw	r2,-240(fp)
	    }
	}
  804768:	003efb06 	br	804358 <__alt_mem_onchip_mem+0xff7fc358>

0080476c <updateState>:
#include <system.h>
#include <stdio.h>
#include <altera_avalon_pio_regs.h>

void updateState(uint8_t *state)
{
  80476c:	defffc04 	addi	sp,sp,-16
  804770:	dfc00315 	stw	ra,12(sp)
  804774:	df000215 	stw	fp,8(sp)
  804778:	df000204 	addi	fp,sp,8
  80477c:	e13fff15 	stw	r4,-4(fp)
    if ((*state) != (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x3)){
  804780:	e0bfff17 	ldw	r2,-4(fp)
  804784:	10800003 	ldbu	r2,0(r2)
  804788:	10c03fcc 	andi	r3,r2,255
  80478c:	00804074 	movhi	r2,257
  804790:	10842404 	addi	r2,r2,4240
  804794:	10800037 	ldwio	r2,0(r2)
  804798:	108000cc 	andi	r2,r2,3
  80479c:	18803326 	beq	r3,r2,80486c <updateState+0x100>
    	(*state) = (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x3);
  8047a0:	00804074 	movhi	r2,257
  8047a4:	10842404 	addi	r2,r2,4240
  8047a8:	10800037 	ldwio	r2,0(r2)
  8047ac:	108000cc 	andi	r2,r2,3
  8047b0:	1007883a 	mov	r3,r2
  8047b4:	e0bfff17 	ldw	r2,-4(fp)
  8047b8:	10c00005 	stb	r3,0(r2)
    	FILE* lcd_fp = fopen(LCD_NAME, "w");
  8047bc:	01402074 	movhi	r5,129
  8047c0:	29770b04 	addi	r5,r5,-9172
  8047c4:	01002074 	movhi	r4,129
  8047c8:	21370c04 	addi	r4,r4,-9168
  8047cc:	0806cd00 	call	806cd0 <fopen>
  8047d0:	e0bffe15 	stw	r2,-8(fp)
    	if (((*state) & 0x1) == CHART){
  8047d4:	e0bfff17 	ldw	r2,-4(fp)
  8047d8:	10800003 	ldbu	r2,0(r2)
  8047dc:	10803fcc 	andi	r2,r2,255
  8047e0:	1080004c 	andi	r2,r2,1
  8047e4:	1000071e 	bne	r2,zero,804804 <updateState+0x98>
    		fprintf(lcd_fp, "Mode : SCChart\n");
  8047e8:	e1fffe17 	ldw	r7,-8(fp)
  8047ec:	018003c4 	movi	r6,15
  8047f0:	01400044 	movi	r5,1
  8047f4:	01002074 	movhi	r4,129
  8047f8:	21370f04 	addi	r4,r4,-9156
  8047fc:	080784c0 	call	80784c <fwrite>
  804800:	00000606 	br	80481c <updateState+0xb0>
    	} else {
    		fprintf(lcd_fp, "Mode : Code\n");
  804804:	e1fffe17 	ldw	r7,-8(fp)
  804808:	01800304 	movi	r6,12
  80480c:	01400044 	movi	r5,1
  804810:	01002074 	movhi	r4,129
  804814:	21371304 	addi	r4,r4,-9140
  804818:	080784c0 	call	80784c <fwrite>
    	}
    	if (((*state) & 0x2) == BUTTONS) {
  80481c:	e0bfff17 	ldw	r2,-4(fp)
  804820:	10800003 	ldbu	r2,0(r2)
  804824:	10803fcc 	andi	r2,r2,255
  804828:	1080008c 	andi	r2,r2,2
  80482c:	1000071e 	bne	r2,zero,80484c <updateState+0xe0>
    		fprintf(lcd_fp, "Input: Buttons\n");
  804830:	e1fffe17 	ldw	r7,-8(fp)
  804834:	018003c4 	movi	r6,15
  804838:	01400044 	movi	r5,1
  80483c:	01002074 	movhi	r4,129
  804840:	21371704 	addi	r4,r4,-9124
  804844:	080784c0 	call	80784c <fwrite>
  804848:	00000606 	br	804864 <updateState+0xf8>
    	} else {
    		fprintf(lcd_fp, "Input: UART\n");
  80484c:	e1fffe17 	ldw	r7,-8(fp)
  804850:	01800304 	movi	r6,12
  804854:	01400044 	movi	r5,1
  804858:	01002074 	movhi	r4,129
  80485c:	21371b04 	addi	r4,r4,-9108
  804860:	080784c0 	call	80784c <fwrite>
    	}
    	fclose(lcd_fp);
  804864:	e13ffe17 	ldw	r4,-8(fp)
  804868:	08065800 	call	806580 <fclose>
    }
}
  80486c:	0001883a 	nop
  804870:	e037883a 	mov	sp,fp
  804874:	dfc00117 	ldw	ra,4(sp)
  804878:	df000017 	ldw	fp,0(sp)
  80487c:	dec00204 	addi	sp,sp,8
  804880:	f800283a 	ret

00804884 <__floatundidf>:
  804884:	defffc04 	addi	sp,sp,-16
  804888:	dc800215 	stw	r18,8(sp)
  80488c:	2025883a 	mov	r18,r4
  804890:	2809883a 	mov	r4,r5
  804894:	dfc00315 	stw	ra,12(sp)
  804898:	dc400115 	stw	r17,4(sp)
  80489c:	dc000015 	stw	r16,0(sp)
  8048a0:	08063840 	call	806384 <__floatunsidf>
  8048a4:	000d883a 	mov	r6,zero
  8048a8:	01d07c34 	movhi	r7,16880
  8048ac:	180b883a 	mov	r5,r3
  8048b0:	1009883a 	mov	r4,r2
  8048b4:	08053700 	call	805370 <__muldf3>
  8048b8:	9009883a 	mov	r4,r18
  8048bc:	1023883a 	mov	r17,r2
  8048c0:	1821883a 	mov	r16,r3
  8048c4:	08063840 	call	806384 <__floatunsidf>
  8048c8:	880d883a 	mov	r6,r17
  8048cc:	800f883a 	mov	r7,r16
  8048d0:	1009883a 	mov	r4,r2
  8048d4:	180b883a 	mov	r5,r3
  8048d8:	08048f40 	call	8048f4 <__adddf3>
  8048dc:	dfc00317 	ldw	ra,12(sp)
  8048e0:	dc800217 	ldw	r18,8(sp)
  8048e4:	dc400117 	ldw	r17,4(sp)
  8048e8:	dc000017 	ldw	r16,0(sp)
  8048ec:	dec00404 	addi	sp,sp,16
  8048f0:	f800283a 	ret

008048f4 <__adddf3>:
  8048f4:	02c00434 	movhi	r11,16
  8048f8:	5affffc4 	addi	r11,r11,-1
  8048fc:	2806d7fa 	srli	r3,r5,31
  804900:	2ad4703a 	and	r10,r5,r11
  804904:	3ad2703a 	and	r9,r7,r11
  804908:	3804d53a 	srli	r2,r7,20
  80490c:	3018d77a 	srli	r12,r6,29
  804910:	280ad53a 	srli	r5,r5,20
  804914:	501490fa 	slli	r10,r10,3
  804918:	2010d77a 	srli	r8,r4,29
  80491c:	481290fa 	slli	r9,r9,3
  804920:	380ed7fa 	srli	r7,r7,31
  804924:	defffb04 	addi	sp,sp,-20
  804928:	dc800215 	stw	r18,8(sp)
  80492c:	dc400115 	stw	r17,4(sp)
  804930:	dc000015 	stw	r16,0(sp)
  804934:	dfc00415 	stw	ra,16(sp)
  804938:	dcc00315 	stw	r19,12(sp)
  80493c:	1c803fcc 	andi	r18,r3,255
  804940:	2c01ffcc 	andi	r16,r5,2047
  804944:	5210b03a 	or	r8,r10,r8
  804948:	202290fa 	slli	r17,r4,3
  80494c:	1081ffcc 	andi	r2,r2,2047
  804950:	4b12b03a 	or	r9,r9,r12
  804954:	300c90fa 	slli	r6,r6,3
  804958:	91c07526 	beq	r18,r7,804b30 <__adddf3+0x23c>
  80495c:	8087c83a 	sub	r3,r16,r2
  804960:	00c0ab0e 	bge	zero,r3,804c10 <__adddf3+0x31c>
  804964:	10002a1e 	bne	r2,zero,804a10 <__adddf3+0x11c>
  804968:	4984b03a 	or	r2,r9,r6
  80496c:	1000961e 	bne	r2,zero,804bc8 <__adddf3+0x2d4>
  804970:	888001cc 	andi	r2,r17,7
  804974:	10000726 	beq	r2,zero,804994 <__adddf3+0xa0>
  804978:	888003cc 	andi	r2,r17,15
  80497c:	00c00104 	movi	r3,4
  804980:	10c00426 	beq	r2,r3,804994 <__adddf3+0xa0>
  804984:	88c7883a 	add	r3,r17,r3
  804988:	1c63803a 	cmpltu	r17,r3,r17
  80498c:	4451883a 	add	r8,r8,r17
  804990:	1823883a 	mov	r17,r3
  804994:	4080202c 	andhi	r2,r8,128
  804998:	10005926 	beq	r2,zero,804b00 <__adddf3+0x20c>
  80499c:	84000044 	addi	r16,r16,1
  8049a0:	0081ffc4 	movi	r2,2047
  8049a4:	8080ba26 	beq	r16,r2,804c90 <__adddf3+0x39c>
  8049a8:	00bfe034 	movhi	r2,65408
  8049ac:	10bfffc4 	addi	r2,r2,-1
  8049b0:	4090703a 	and	r8,r8,r2
  8049b4:	4004977a 	slli	r2,r8,29
  8049b8:	4010927a 	slli	r8,r8,9
  8049bc:	8822d0fa 	srli	r17,r17,3
  8049c0:	8401ffcc 	andi	r16,r16,2047
  8049c4:	4010d33a 	srli	r8,r8,12
  8049c8:	9007883a 	mov	r3,r18
  8049cc:	1444b03a 	or	r2,r2,r17
  8049d0:	8401ffcc 	andi	r16,r16,2047
  8049d4:	8020953a 	slli	r16,r16,20
  8049d8:	18c03fcc 	andi	r3,r3,255
  8049dc:	01000434 	movhi	r4,16
  8049e0:	213fffc4 	addi	r4,r4,-1
  8049e4:	180697fa 	slli	r3,r3,31
  8049e8:	4110703a 	and	r8,r8,r4
  8049ec:	4410b03a 	or	r8,r8,r16
  8049f0:	40c6b03a 	or	r3,r8,r3
  8049f4:	dfc00417 	ldw	ra,16(sp)
  8049f8:	dcc00317 	ldw	r19,12(sp)
  8049fc:	dc800217 	ldw	r18,8(sp)
  804a00:	dc400117 	ldw	r17,4(sp)
  804a04:	dc000017 	ldw	r16,0(sp)
  804a08:	dec00504 	addi	sp,sp,20
  804a0c:	f800283a 	ret
  804a10:	0081ffc4 	movi	r2,2047
  804a14:	80bfd626 	beq	r16,r2,804970 <__alt_mem_onchip_mem+0xff7fc970>
  804a18:	4a402034 	orhi	r9,r9,128
  804a1c:	00800e04 	movi	r2,56
  804a20:	10c09f16 	blt	r2,r3,804ca0 <__adddf3+0x3ac>
  804a24:	008007c4 	movi	r2,31
  804a28:	10c0c216 	blt	r2,r3,804d34 <__adddf3+0x440>
  804a2c:	00800804 	movi	r2,32
  804a30:	10c5c83a 	sub	r2,r2,r3
  804a34:	488a983a 	sll	r5,r9,r2
  804a38:	30c8d83a 	srl	r4,r6,r3
  804a3c:	3084983a 	sll	r2,r6,r2
  804a40:	48c6d83a 	srl	r3,r9,r3
  804a44:	290cb03a 	or	r6,r5,r4
  804a48:	1004c03a 	cmpne	r2,r2,zero
  804a4c:	308cb03a 	or	r6,r6,r2
  804a50:	898dc83a 	sub	r6,r17,r6
  804a54:	89a3803a 	cmpltu	r17,r17,r6
  804a58:	40d1c83a 	sub	r8,r8,r3
  804a5c:	4451c83a 	sub	r8,r8,r17
  804a60:	3023883a 	mov	r17,r6
  804a64:	4080202c 	andhi	r2,r8,128
  804a68:	10002326 	beq	r2,zero,804af8 <__adddf3+0x204>
  804a6c:	04c02034 	movhi	r19,128
  804a70:	9cffffc4 	addi	r19,r19,-1
  804a74:	44e6703a 	and	r19,r8,r19
  804a78:	98007626 	beq	r19,zero,804c54 <__adddf3+0x360>
  804a7c:	9809883a 	mov	r4,r19
  804a80:	080642c0 	call	80642c <__clzsi2>
  804a84:	10fffe04 	addi	r3,r2,-8
  804a88:	010007c4 	movi	r4,31
  804a8c:	20c07716 	blt	r4,r3,804c6c <__adddf3+0x378>
  804a90:	00800804 	movi	r2,32
  804a94:	10c5c83a 	sub	r2,r2,r3
  804a98:	8884d83a 	srl	r2,r17,r2
  804a9c:	98d0983a 	sll	r8,r19,r3
  804aa0:	88e2983a 	sll	r17,r17,r3
  804aa4:	1204b03a 	or	r2,r2,r8
  804aa8:	1c007416 	blt	r3,r16,804c7c <__adddf3+0x388>
  804aac:	1c21c83a 	sub	r16,r3,r16
  804ab0:	82000044 	addi	r8,r16,1
  804ab4:	00c007c4 	movi	r3,31
  804ab8:	1a009116 	blt	r3,r8,804d00 <__adddf3+0x40c>
  804abc:	00c00804 	movi	r3,32
  804ac0:	1a07c83a 	sub	r3,r3,r8
  804ac4:	8a08d83a 	srl	r4,r17,r8
  804ac8:	88e2983a 	sll	r17,r17,r3
  804acc:	10c6983a 	sll	r3,r2,r3
  804ad0:	1210d83a 	srl	r8,r2,r8
  804ad4:	8804c03a 	cmpne	r2,r17,zero
  804ad8:	1906b03a 	or	r3,r3,r4
  804adc:	18a2b03a 	or	r17,r3,r2
  804ae0:	0021883a 	mov	r16,zero
  804ae4:	003fa206 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  804ae8:	1890b03a 	or	r8,r3,r2
  804aec:	40017d26 	beq	r8,zero,8050e4 <__adddf3+0x7f0>
  804af0:	1011883a 	mov	r8,r2
  804af4:	1823883a 	mov	r17,r3
  804af8:	888001cc 	andi	r2,r17,7
  804afc:	103f9e1e 	bne	r2,zero,804978 <__alt_mem_onchip_mem+0xff7fc978>
  804b00:	4004977a 	slli	r2,r8,29
  804b04:	8822d0fa 	srli	r17,r17,3
  804b08:	4010d0fa 	srli	r8,r8,3
  804b0c:	9007883a 	mov	r3,r18
  804b10:	1444b03a 	or	r2,r2,r17
  804b14:	0101ffc4 	movi	r4,2047
  804b18:	81002426 	beq	r16,r4,804bac <__adddf3+0x2b8>
  804b1c:	8120703a 	and	r16,r16,r4
  804b20:	01000434 	movhi	r4,16
  804b24:	213fffc4 	addi	r4,r4,-1
  804b28:	4110703a 	and	r8,r8,r4
  804b2c:	003fa806 	br	8049d0 <__alt_mem_onchip_mem+0xff7fc9d0>
  804b30:	8089c83a 	sub	r4,r16,r2
  804b34:	01005e0e 	bge	zero,r4,804cb0 <__adddf3+0x3bc>
  804b38:	10002b26 	beq	r2,zero,804be8 <__adddf3+0x2f4>
  804b3c:	0081ffc4 	movi	r2,2047
  804b40:	80bf8b26 	beq	r16,r2,804970 <__alt_mem_onchip_mem+0xff7fc970>
  804b44:	4a402034 	orhi	r9,r9,128
  804b48:	00800e04 	movi	r2,56
  804b4c:	1100a40e 	bge	r2,r4,804de0 <__adddf3+0x4ec>
  804b50:	498cb03a 	or	r6,r9,r6
  804b54:	300ac03a 	cmpne	r5,r6,zero
  804b58:	0013883a 	mov	r9,zero
  804b5c:	2c4b883a 	add	r5,r5,r17
  804b60:	2c63803a 	cmpltu	r17,r5,r17
  804b64:	4a11883a 	add	r8,r9,r8
  804b68:	8a11883a 	add	r8,r17,r8
  804b6c:	2823883a 	mov	r17,r5
  804b70:	4080202c 	andhi	r2,r8,128
  804b74:	103fe026 	beq	r2,zero,804af8 <__alt_mem_onchip_mem+0xff7fcaf8>
  804b78:	84000044 	addi	r16,r16,1
  804b7c:	0081ffc4 	movi	r2,2047
  804b80:	8080d226 	beq	r16,r2,804ecc <__adddf3+0x5d8>
  804b84:	00bfe034 	movhi	r2,65408
  804b88:	10bfffc4 	addi	r2,r2,-1
  804b8c:	4090703a 	and	r8,r8,r2
  804b90:	880ad07a 	srli	r5,r17,1
  804b94:	400897fa 	slli	r4,r8,31
  804b98:	88c0004c 	andi	r3,r17,1
  804b9c:	28e2b03a 	or	r17,r5,r3
  804ba0:	4010d07a 	srli	r8,r8,1
  804ba4:	2462b03a 	or	r17,r4,r17
  804ba8:	003f7106 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  804bac:	4088b03a 	or	r4,r8,r2
  804bb0:	20014526 	beq	r4,zero,8050c8 <__adddf3+0x7d4>
  804bb4:	01000434 	movhi	r4,16
  804bb8:	42000234 	orhi	r8,r8,8
  804bbc:	213fffc4 	addi	r4,r4,-1
  804bc0:	4110703a 	and	r8,r8,r4
  804bc4:	003f8206 	br	8049d0 <__alt_mem_onchip_mem+0xff7fc9d0>
  804bc8:	18ffffc4 	addi	r3,r3,-1
  804bcc:	1800491e 	bne	r3,zero,804cf4 <__adddf3+0x400>
  804bd0:	898bc83a 	sub	r5,r17,r6
  804bd4:	8963803a 	cmpltu	r17,r17,r5
  804bd8:	4251c83a 	sub	r8,r8,r9
  804bdc:	4451c83a 	sub	r8,r8,r17
  804be0:	2823883a 	mov	r17,r5
  804be4:	003f9f06 	br	804a64 <__alt_mem_onchip_mem+0xff7fca64>
  804be8:	4984b03a 	or	r2,r9,r6
  804bec:	103f6026 	beq	r2,zero,804970 <__alt_mem_onchip_mem+0xff7fc970>
  804bf0:	213fffc4 	addi	r4,r4,-1
  804bf4:	2000931e 	bne	r4,zero,804e44 <__adddf3+0x550>
  804bf8:	898d883a 	add	r6,r17,r6
  804bfc:	3463803a 	cmpltu	r17,r6,r17
  804c00:	4251883a 	add	r8,r8,r9
  804c04:	8a11883a 	add	r8,r17,r8
  804c08:	3023883a 	mov	r17,r6
  804c0c:	003fd806 	br	804b70 <__alt_mem_onchip_mem+0xff7fcb70>
  804c10:	1800541e 	bne	r3,zero,804d64 <__adddf3+0x470>
  804c14:	80800044 	addi	r2,r16,1
  804c18:	1081ffcc 	andi	r2,r2,2047
  804c1c:	00c00044 	movi	r3,1
  804c20:	1880a00e 	bge	r3,r2,804ea4 <__adddf3+0x5b0>
  804c24:	8989c83a 	sub	r4,r17,r6
  804c28:	8905803a 	cmpltu	r2,r17,r4
  804c2c:	4267c83a 	sub	r19,r8,r9
  804c30:	98a7c83a 	sub	r19,r19,r2
  804c34:	9880202c 	andhi	r2,r19,128
  804c38:	10006326 	beq	r2,zero,804dc8 <__adddf3+0x4d4>
  804c3c:	3463c83a 	sub	r17,r6,r17
  804c40:	4a07c83a 	sub	r3,r9,r8
  804c44:	344d803a 	cmpltu	r6,r6,r17
  804c48:	19a7c83a 	sub	r19,r3,r6
  804c4c:	3825883a 	mov	r18,r7
  804c50:	983f8a1e 	bne	r19,zero,804a7c <__alt_mem_onchip_mem+0xff7fca7c>
  804c54:	8809883a 	mov	r4,r17
  804c58:	080642c0 	call	80642c <__clzsi2>
  804c5c:	10800804 	addi	r2,r2,32
  804c60:	10fffe04 	addi	r3,r2,-8
  804c64:	010007c4 	movi	r4,31
  804c68:	20ff890e 	bge	r4,r3,804a90 <__alt_mem_onchip_mem+0xff7fca90>
  804c6c:	10bff604 	addi	r2,r2,-40
  804c70:	8884983a 	sll	r2,r17,r2
  804c74:	0023883a 	mov	r17,zero
  804c78:	1c3f8c0e 	bge	r3,r16,804aac <__alt_mem_onchip_mem+0xff7fcaac>
  804c7c:	023fe034 	movhi	r8,65408
  804c80:	423fffc4 	addi	r8,r8,-1
  804c84:	80e1c83a 	sub	r16,r16,r3
  804c88:	1210703a 	and	r8,r2,r8
  804c8c:	003f3806 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  804c90:	9007883a 	mov	r3,r18
  804c94:	0011883a 	mov	r8,zero
  804c98:	0005883a 	mov	r2,zero
  804c9c:	003f4c06 	br	8049d0 <__alt_mem_onchip_mem+0xff7fc9d0>
  804ca0:	498cb03a 	or	r6,r9,r6
  804ca4:	300cc03a 	cmpne	r6,r6,zero
  804ca8:	0007883a 	mov	r3,zero
  804cac:	003f6806 	br	804a50 <__alt_mem_onchip_mem+0xff7fca50>
  804cb0:	20009c1e 	bne	r4,zero,804f24 <__adddf3+0x630>
  804cb4:	80800044 	addi	r2,r16,1
  804cb8:	1141ffcc 	andi	r5,r2,2047
  804cbc:	01000044 	movi	r4,1
  804cc0:	2140670e 	bge	r4,r5,804e60 <__adddf3+0x56c>
  804cc4:	0101ffc4 	movi	r4,2047
  804cc8:	11007f26 	beq	r2,r4,804ec8 <__adddf3+0x5d4>
  804ccc:	898d883a 	add	r6,r17,r6
  804cd0:	4247883a 	add	r3,r8,r9
  804cd4:	3451803a 	cmpltu	r8,r6,r17
  804cd8:	40d1883a 	add	r8,r8,r3
  804cdc:	402297fa 	slli	r17,r8,31
  804ce0:	300cd07a 	srli	r6,r6,1
  804ce4:	4010d07a 	srli	r8,r8,1
  804ce8:	1021883a 	mov	r16,r2
  804cec:	89a2b03a 	or	r17,r17,r6
  804cf0:	003f1f06 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  804cf4:	0081ffc4 	movi	r2,2047
  804cf8:	80bf481e 	bne	r16,r2,804a1c <__alt_mem_onchip_mem+0xff7fca1c>
  804cfc:	003f1c06 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  804d00:	843ff844 	addi	r16,r16,-31
  804d04:	01000804 	movi	r4,32
  804d08:	1406d83a 	srl	r3,r2,r16
  804d0c:	41005026 	beq	r8,r4,804e50 <__adddf3+0x55c>
  804d10:	01001004 	movi	r4,64
  804d14:	2211c83a 	sub	r8,r4,r8
  804d18:	1204983a 	sll	r2,r2,r8
  804d1c:	88a2b03a 	or	r17,r17,r2
  804d20:	8822c03a 	cmpne	r17,r17,zero
  804d24:	1c62b03a 	or	r17,r3,r17
  804d28:	0011883a 	mov	r8,zero
  804d2c:	0021883a 	mov	r16,zero
  804d30:	003f7106 	br	804af8 <__alt_mem_onchip_mem+0xff7fcaf8>
  804d34:	193ff804 	addi	r4,r3,-32
  804d38:	00800804 	movi	r2,32
  804d3c:	4908d83a 	srl	r4,r9,r4
  804d40:	18804526 	beq	r3,r2,804e58 <__adddf3+0x564>
  804d44:	00801004 	movi	r2,64
  804d48:	10c5c83a 	sub	r2,r2,r3
  804d4c:	4886983a 	sll	r3,r9,r2
  804d50:	198cb03a 	or	r6,r3,r6
  804d54:	300cc03a 	cmpne	r6,r6,zero
  804d58:	218cb03a 	or	r6,r4,r6
  804d5c:	0007883a 	mov	r3,zero
  804d60:	003f3b06 	br	804a50 <__alt_mem_onchip_mem+0xff7fca50>
  804d64:	80002a26 	beq	r16,zero,804e10 <__adddf3+0x51c>
  804d68:	0101ffc4 	movi	r4,2047
  804d6c:	11006826 	beq	r2,r4,804f10 <__adddf3+0x61c>
  804d70:	00c7c83a 	sub	r3,zero,r3
  804d74:	42002034 	orhi	r8,r8,128
  804d78:	01000e04 	movi	r4,56
  804d7c:	20c07c16 	blt	r4,r3,804f70 <__adddf3+0x67c>
  804d80:	010007c4 	movi	r4,31
  804d84:	20c0da16 	blt	r4,r3,8050f0 <__adddf3+0x7fc>
  804d88:	01000804 	movi	r4,32
  804d8c:	20c9c83a 	sub	r4,r4,r3
  804d90:	4114983a 	sll	r10,r8,r4
  804d94:	88cad83a 	srl	r5,r17,r3
  804d98:	8908983a 	sll	r4,r17,r4
  804d9c:	40c6d83a 	srl	r3,r8,r3
  804da0:	5162b03a 	or	r17,r10,r5
  804da4:	2008c03a 	cmpne	r4,r4,zero
  804da8:	8922b03a 	or	r17,r17,r4
  804dac:	3463c83a 	sub	r17,r6,r17
  804db0:	48c7c83a 	sub	r3,r9,r3
  804db4:	344d803a 	cmpltu	r6,r6,r17
  804db8:	1991c83a 	sub	r8,r3,r6
  804dbc:	1021883a 	mov	r16,r2
  804dc0:	3825883a 	mov	r18,r7
  804dc4:	003f2706 	br	804a64 <__alt_mem_onchip_mem+0xff7fca64>
  804dc8:	24d0b03a 	or	r8,r4,r19
  804dcc:	40001b1e 	bne	r8,zero,804e3c <__adddf3+0x548>
  804dd0:	0005883a 	mov	r2,zero
  804dd4:	0007883a 	mov	r3,zero
  804dd8:	0021883a 	mov	r16,zero
  804ddc:	003f4d06 	br	804b14 <__alt_mem_onchip_mem+0xff7fcb14>
  804de0:	008007c4 	movi	r2,31
  804de4:	11003c16 	blt	r2,r4,804ed8 <__adddf3+0x5e4>
  804de8:	00800804 	movi	r2,32
  804dec:	1105c83a 	sub	r2,r2,r4
  804df0:	488e983a 	sll	r7,r9,r2
  804df4:	310ad83a 	srl	r5,r6,r4
  804df8:	3084983a 	sll	r2,r6,r2
  804dfc:	4912d83a 	srl	r9,r9,r4
  804e00:	394ab03a 	or	r5,r7,r5
  804e04:	1004c03a 	cmpne	r2,r2,zero
  804e08:	288ab03a 	or	r5,r5,r2
  804e0c:	003f5306 	br	804b5c <__alt_mem_onchip_mem+0xff7fcb5c>
  804e10:	4448b03a 	or	r4,r8,r17
  804e14:	20003e26 	beq	r4,zero,804f10 <__adddf3+0x61c>
  804e18:	00c6303a 	nor	r3,zero,r3
  804e1c:	18003a1e 	bne	r3,zero,804f08 <__adddf3+0x614>
  804e20:	3463c83a 	sub	r17,r6,r17
  804e24:	4a07c83a 	sub	r3,r9,r8
  804e28:	344d803a 	cmpltu	r6,r6,r17
  804e2c:	1991c83a 	sub	r8,r3,r6
  804e30:	1021883a 	mov	r16,r2
  804e34:	3825883a 	mov	r18,r7
  804e38:	003f0a06 	br	804a64 <__alt_mem_onchip_mem+0xff7fca64>
  804e3c:	2023883a 	mov	r17,r4
  804e40:	003f0d06 	br	804a78 <__alt_mem_onchip_mem+0xff7fca78>
  804e44:	0081ffc4 	movi	r2,2047
  804e48:	80bf3f1e 	bne	r16,r2,804b48 <__alt_mem_onchip_mem+0xff7fcb48>
  804e4c:	003ec806 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  804e50:	0005883a 	mov	r2,zero
  804e54:	003fb106 	br	804d1c <__alt_mem_onchip_mem+0xff7fcd1c>
  804e58:	0007883a 	mov	r3,zero
  804e5c:	003fbc06 	br	804d50 <__alt_mem_onchip_mem+0xff7fcd50>
  804e60:	4444b03a 	or	r2,r8,r17
  804e64:	8000871e 	bne	r16,zero,805084 <__adddf3+0x790>
  804e68:	1000ba26 	beq	r2,zero,805154 <__adddf3+0x860>
  804e6c:	4984b03a 	or	r2,r9,r6
  804e70:	103ebf26 	beq	r2,zero,804970 <__alt_mem_onchip_mem+0xff7fc970>
  804e74:	8985883a 	add	r2,r17,r6
  804e78:	4247883a 	add	r3,r8,r9
  804e7c:	1451803a 	cmpltu	r8,r2,r17
  804e80:	40d1883a 	add	r8,r8,r3
  804e84:	40c0202c 	andhi	r3,r8,128
  804e88:	1023883a 	mov	r17,r2
  804e8c:	183f1a26 	beq	r3,zero,804af8 <__alt_mem_onchip_mem+0xff7fcaf8>
  804e90:	00bfe034 	movhi	r2,65408
  804e94:	10bfffc4 	addi	r2,r2,-1
  804e98:	2021883a 	mov	r16,r4
  804e9c:	4090703a 	and	r8,r8,r2
  804ea0:	003eb306 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  804ea4:	4444b03a 	or	r2,r8,r17
  804ea8:	8000291e 	bne	r16,zero,804f50 <__adddf3+0x65c>
  804eac:	10004b1e 	bne	r2,zero,804fdc <__adddf3+0x6e8>
  804eb0:	4990b03a 	or	r8,r9,r6
  804eb4:	40008b26 	beq	r8,zero,8050e4 <__adddf3+0x7f0>
  804eb8:	4811883a 	mov	r8,r9
  804ebc:	3023883a 	mov	r17,r6
  804ec0:	3825883a 	mov	r18,r7
  804ec4:	003eaa06 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  804ec8:	1021883a 	mov	r16,r2
  804ecc:	0011883a 	mov	r8,zero
  804ed0:	0005883a 	mov	r2,zero
  804ed4:	003f0f06 	br	804b14 <__alt_mem_onchip_mem+0xff7fcb14>
  804ed8:	217ff804 	addi	r5,r4,-32
  804edc:	00800804 	movi	r2,32
  804ee0:	494ad83a 	srl	r5,r9,r5
  804ee4:	20807d26 	beq	r4,r2,8050dc <__adddf3+0x7e8>
  804ee8:	00801004 	movi	r2,64
  804eec:	1109c83a 	sub	r4,r2,r4
  804ef0:	4912983a 	sll	r9,r9,r4
  804ef4:	498cb03a 	or	r6,r9,r6
  804ef8:	300cc03a 	cmpne	r6,r6,zero
  804efc:	298ab03a 	or	r5,r5,r6
  804f00:	0013883a 	mov	r9,zero
  804f04:	003f1506 	br	804b5c <__alt_mem_onchip_mem+0xff7fcb5c>
  804f08:	0101ffc4 	movi	r4,2047
  804f0c:	113f9a1e 	bne	r2,r4,804d78 <__alt_mem_onchip_mem+0xff7fcd78>
  804f10:	4811883a 	mov	r8,r9
  804f14:	3023883a 	mov	r17,r6
  804f18:	1021883a 	mov	r16,r2
  804f1c:	3825883a 	mov	r18,r7
  804f20:	003e9306 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  804f24:	8000161e 	bne	r16,zero,804f80 <__adddf3+0x68c>
  804f28:	444ab03a 	or	r5,r8,r17
  804f2c:	28005126 	beq	r5,zero,805074 <__adddf3+0x780>
  804f30:	0108303a 	nor	r4,zero,r4
  804f34:	20004d1e 	bne	r4,zero,80506c <__adddf3+0x778>
  804f38:	89a3883a 	add	r17,r17,r6
  804f3c:	4253883a 	add	r9,r8,r9
  804f40:	898d803a 	cmpltu	r6,r17,r6
  804f44:	3251883a 	add	r8,r6,r9
  804f48:	1021883a 	mov	r16,r2
  804f4c:	003f0806 	br	804b70 <__alt_mem_onchip_mem+0xff7fcb70>
  804f50:	1000301e 	bne	r2,zero,805014 <__adddf3+0x720>
  804f54:	4984b03a 	or	r2,r9,r6
  804f58:	10007126 	beq	r2,zero,805120 <__adddf3+0x82c>
  804f5c:	4811883a 	mov	r8,r9
  804f60:	3023883a 	mov	r17,r6
  804f64:	3825883a 	mov	r18,r7
  804f68:	0401ffc4 	movi	r16,2047
  804f6c:	003e8006 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  804f70:	4462b03a 	or	r17,r8,r17
  804f74:	8822c03a 	cmpne	r17,r17,zero
  804f78:	0007883a 	mov	r3,zero
  804f7c:	003f8b06 	br	804dac <__alt_mem_onchip_mem+0xff7fcdac>
  804f80:	0141ffc4 	movi	r5,2047
  804f84:	11403b26 	beq	r2,r5,805074 <__adddf3+0x780>
  804f88:	0109c83a 	sub	r4,zero,r4
  804f8c:	42002034 	orhi	r8,r8,128
  804f90:	01400e04 	movi	r5,56
  804f94:	29006716 	blt	r5,r4,805134 <__adddf3+0x840>
  804f98:	014007c4 	movi	r5,31
  804f9c:	29007016 	blt	r5,r4,805160 <__adddf3+0x86c>
  804fa0:	01400804 	movi	r5,32
  804fa4:	290bc83a 	sub	r5,r5,r4
  804fa8:	4154983a 	sll	r10,r8,r5
  804fac:	890ed83a 	srl	r7,r17,r4
  804fb0:	894a983a 	sll	r5,r17,r5
  804fb4:	4108d83a 	srl	r4,r8,r4
  804fb8:	51e2b03a 	or	r17,r10,r7
  804fbc:	280ac03a 	cmpne	r5,r5,zero
  804fc0:	8962b03a 	or	r17,r17,r5
  804fc4:	89a3883a 	add	r17,r17,r6
  804fc8:	2253883a 	add	r9,r4,r9
  804fcc:	898d803a 	cmpltu	r6,r17,r6
  804fd0:	3251883a 	add	r8,r6,r9
  804fd4:	1021883a 	mov	r16,r2
  804fd8:	003ee506 	br	804b70 <__alt_mem_onchip_mem+0xff7fcb70>
  804fdc:	4984b03a 	or	r2,r9,r6
  804fe0:	103e6326 	beq	r2,zero,804970 <__alt_mem_onchip_mem+0xff7fc970>
  804fe4:	8987c83a 	sub	r3,r17,r6
  804fe8:	88c9803a 	cmpltu	r4,r17,r3
  804fec:	4245c83a 	sub	r2,r8,r9
  804ff0:	1105c83a 	sub	r2,r2,r4
  804ff4:	1100202c 	andhi	r4,r2,128
  804ff8:	203ebb26 	beq	r4,zero,804ae8 <__alt_mem_onchip_mem+0xff7fcae8>
  804ffc:	3463c83a 	sub	r17,r6,r17
  805000:	4a07c83a 	sub	r3,r9,r8
  805004:	344d803a 	cmpltu	r6,r6,r17
  805008:	1991c83a 	sub	r8,r3,r6
  80500c:	3825883a 	mov	r18,r7
  805010:	003e5706 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  805014:	4984b03a 	or	r2,r9,r6
  805018:	10002e26 	beq	r2,zero,8050d4 <__adddf3+0x7e0>
  80501c:	4004d0fa 	srli	r2,r8,3
  805020:	8822d0fa 	srli	r17,r17,3
  805024:	4010977a 	slli	r8,r8,29
  805028:	10c0022c 	andhi	r3,r2,8
  80502c:	4462b03a 	or	r17,r8,r17
  805030:	18000826 	beq	r3,zero,805054 <__adddf3+0x760>
  805034:	4808d0fa 	srli	r4,r9,3
  805038:	20c0022c 	andhi	r3,r4,8
  80503c:	1800051e 	bne	r3,zero,805054 <__adddf3+0x760>
  805040:	300cd0fa 	srli	r6,r6,3
  805044:	4806977a 	slli	r3,r9,29
  805048:	2005883a 	mov	r2,r4
  80504c:	3825883a 	mov	r18,r7
  805050:	19a2b03a 	or	r17,r3,r6
  805054:	8810d77a 	srli	r8,r17,29
  805058:	100490fa 	slli	r2,r2,3
  80505c:	882290fa 	slli	r17,r17,3
  805060:	0401ffc4 	movi	r16,2047
  805064:	4090b03a 	or	r8,r8,r2
  805068:	003e4106 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  80506c:	0141ffc4 	movi	r5,2047
  805070:	117fc71e 	bne	r2,r5,804f90 <__alt_mem_onchip_mem+0xff7fcf90>
  805074:	4811883a 	mov	r8,r9
  805078:	3023883a 	mov	r17,r6
  80507c:	1021883a 	mov	r16,r2
  805080:	003e3b06 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  805084:	10002f26 	beq	r2,zero,805144 <__adddf3+0x850>
  805088:	4984b03a 	or	r2,r9,r6
  80508c:	10001126 	beq	r2,zero,8050d4 <__adddf3+0x7e0>
  805090:	4004d0fa 	srli	r2,r8,3
  805094:	8822d0fa 	srli	r17,r17,3
  805098:	4010977a 	slli	r8,r8,29
  80509c:	10c0022c 	andhi	r3,r2,8
  8050a0:	4462b03a 	or	r17,r8,r17
  8050a4:	183feb26 	beq	r3,zero,805054 <__alt_mem_onchip_mem+0xff7fd054>
  8050a8:	4808d0fa 	srli	r4,r9,3
  8050ac:	20c0022c 	andhi	r3,r4,8
  8050b0:	183fe81e 	bne	r3,zero,805054 <__alt_mem_onchip_mem+0xff7fd054>
  8050b4:	300cd0fa 	srli	r6,r6,3
  8050b8:	4806977a 	slli	r3,r9,29
  8050bc:	2005883a 	mov	r2,r4
  8050c0:	19a2b03a 	or	r17,r3,r6
  8050c4:	003fe306 	br	805054 <__alt_mem_onchip_mem+0xff7fd054>
  8050c8:	0011883a 	mov	r8,zero
  8050cc:	0005883a 	mov	r2,zero
  8050d0:	003e3f06 	br	8049d0 <__alt_mem_onchip_mem+0xff7fc9d0>
  8050d4:	0401ffc4 	movi	r16,2047
  8050d8:	003e2506 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  8050dc:	0013883a 	mov	r9,zero
  8050e0:	003f8406 	br	804ef4 <__alt_mem_onchip_mem+0xff7fcef4>
  8050e4:	0005883a 	mov	r2,zero
  8050e8:	0007883a 	mov	r3,zero
  8050ec:	003e8906 	br	804b14 <__alt_mem_onchip_mem+0xff7fcb14>
  8050f0:	197ff804 	addi	r5,r3,-32
  8050f4:	01000804 	movi	r4,32
  8050f8:	414ad83a 	srl	r5,r8,r5
  8050fc:	19002426 	beq	r3,r4,805190 <__adddf3+0x89c>
  805100:	01001004 	movi	r4,64
  805104:	20c7c83a 	sub	r3,r4,r3
  805108:	40c6983a 	sll	r3,r8,r3
  80510c:	1c46b03a 	or	r3,r3,r17
  805110:	1806c03a 	cmpne	r3,r3,zero
  805114:	28e2b03a 	or	r17,r5,r3
  805118:	0007883a 	mov	r3,zero
  80511c:	003f2306 	br	804dac <__alt_mem_onchip_mem+0xff7fcdac>
  805120:	0007883a 	mov	r3,zero
  805124:	5811883a 	mov	r8,r11
  805128:	00bfffc4 	movi	r2,-1
  80512c:	0401ffc4 	movi	r16,2047
  805130:	003e7806 	br	804b14 <__alt_mem_onchip_mem+0xff7fcb14>
  805134:	4462b03a 	or	r17,r8,r17
  805138:	8822c03a 	cmpne	r17,r17,zero
  80513c:	0009883a 	mov	r4,zero
  805140:	003fa006 	br	804fc4 <__alt_mem_onchip_mem+0xff7fcfc4>
  805144:	4811883a 	mov	r8,r9
  805148:	3023883a 	mov	r17,r6
  80514c:	0401ffc4 	movi	r16,2047
  805150:	003e0706 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  805154:	4811883a 	mov	r8,r9
  805158:	3023883a 	mov	r17,r6
  80515c:	003e0406 	br	804970 <__alt_mem_onchip_mem+0xff7fc970>
  805160:	21fff804 	addi	r7,r4,-32
  805164:	01400804 	movi	r5,32
  805168:	41ced83a 	srl	r7,r8,r7
  80516c:	21400a26 	beq	r4,r5,805198 <__adddf3+0x8a4>
  805170:	01401004 	movi	r5,64
  805174:	2909c83a 	sub	r4,r5,r4
  805178:	4108983a 	sll	r4,r8,r4
  80517c:	2448b03a 	or	r4,r4,r17
  805180:	2008c03a 	cmpne	r4,r4,zero
  805184:	3922b03a 	or	r17,r7,r4
  805188:	0009883a 	mov	r4,zero
  80518c:	003f8d06 	br	804fc4 <__alt_mem_onchip_mem+0xff7fcfc4>
  805190:	0007883a 	mov	r3,zero
  805194:	003fdd06 	br	80510c <__alt_mem_onchip_mem+0xff7fd10c>
  805198:	0009883a 	mov	r4,zero
  80519c:	003ff706 	br	80517c <__alt_mem_onchip_mem+0xff7fd17c>

008051a0 <__gedf2>:
  8051a0:	2804d53a 	srli	r2,r5,20
  8051a4:	3806d53a 	srli	r3,r7,20
  8051a8:	02000434 	movhi	r8,16
  8051ac:	423fffc4 	addi	r8,r8,-1
  8051b0:	1081ffcc 	andi	r2,r2,2047
  8051b4:	0241ffc4 	movi	r9,2047
  8051b8:	2a14703a 	and	r10,r5,r8
  8051bc:	18c1ffcc 	andi	r3,r3,2047
  8051c0:	3a10703a 	and	r8,r7,r8
  8051c4:	280ad7fa 	srli	r5,r5,31
  8051c8:	380ed7fa 	srli	r7,r7,31
  8051cc:	12401d26 	beq	r2,r9,805244 <__gedf2+0xa4>
  8051d0:	0241ffc4 	movi	r9,2047
  8051d4:	1a401226 	beq	r3,r9,805220 <__gedf2+0x80>
  8051d8:	1000081e 	bne	r2,zero,8051fc <__gedf2+0x5c>
  8051dc:	2296b03a 	or	r11,r4,r10
  8051e0:	5813003a 	cmpeq	r9,r11,zero
  8051e4:	1800091e 	bne	r3,zero,80520c <__gedf2+0x6c>
  8051e8:	3218b03a 	or	r12,r6,r8
  8051ec:	6000071e 	bne	r12,zero,80520c <__gedf2+0x6c>
  8051f0:	0005883a 	mov	r2,zero
  8051f4:	5800101e 	bne	r11,zero,805238 <__gedf2+0x98>
  8051f8:	f800283a 	ret
  8051fc:	18000c1e 	bne	r3,zero,805230 <__gedf2+0x90>
  805200:	3212b03a 	or	r9,r6,r8
  805204:	48000c26 	beq	r9,zero,805238 <__gedf2+0x98>
  805208:	0013883a 	mov	r9,zero
  80520c:	39c03fcc 	andi	r7,r7,255
  805210:	48000826 	beq	r9,zero,805234 <__gedf2+0x94>
  805214:	38000926 	beq	r7,zero,80523c <__gedf2+0x9c>
  805218:	00800044 	movi	r2,1
  80521c:	f800283a 	ret
  805220:	3212b03a 	or	r9,r6,r8
  805224:	483fec26 	beq	r9,zero,8051d8 <__alt_mem_onchip_mem+0xff7fd1d8>
  805228:	00bfff84 	movi	r2,-2
  80522c:	f800283a 	ret
  805230:	39c03fcc 	andi	r7,r7,255
  805234:	29c00626 	beq	r5,r7,805250 <__gedf2+0xb0>
  805238:	283ff726 	beq	r5,zero,805218 <__alt_mem_onchip_mem+0xff7fd218>
  80523c:	00bfffc4 	movi	r2,-1
  805240:	f800283a 	ret
  805244:	2292b03a 	or	r9,r4,r10
  805248:	483fe126 	beq	r9,zero,8051d0 <__alt_mem_onchip_mem+0xff7fd1d0>
  80524c:	003ff606 	br	805228 <__alt_mem_onchip_mem+0xff7fd228>
  805250:	18bff916 	blt	r3,r2,805238 <__alt_mem_onchip_mem+0xff7fd238>
  805254:	10c00316 	blt	r2,r3,805264 <__gedf2+0xc4>
  805258:	42bff736 	bltu	r8,r10,805238 <__alt_mem_onchip_mem+0xff7fd238>
  80525c:	52000326 	beq	r10,r8,80526c <__gedf2+0xcc>
  805260:	5200042e 	bgeu	r10,r8,805274 <__gedf2+0xd4>
  805264:	283fec1e 	bne	r5,zero,805218 <__alt_mem_onchip_mem+0xff7fd218>
  805268:	003ff406 	br	80523c <__alt_mem_onchip_mem+0xff7fd23c>
  80526c:	313ff236 	bltu	r6,r4,805238 <__alt_mem_onchip_mem+0xff7fd238>
  805270:	21bffc36 	bltu	r4,r6,805264 <__alt_mem_onchip_mem+0xff7fd264>
  805274:	0005883a 	mov	r2,zero
  805278:	f800283a 	ret

0080527c <__ledf2>:
  80527c:	2804d53a 	srli	r2,r5,20
  805280:	3810d53a 	srli	r8,r7,20
  805284:	00c00434 	movhi	r3,16
  805288:	18ffffc4 	addi	r3,r3,-1
  80528c:	1081ffcc 	andi	r2,r2,2047
  805290:	0241ffc4 	movi	r9,2047
  805294:	28d4703a 	and	r10,r5,r3
  805298:	4201ffcc 	andi	r8,r8,2047
  80529c:	38c6703a 	and	r3,r7,r3
  8052a0:	280ad7fa 	srli	r5,r5,31
  8052a4:	380ed7fa 	srli	r7,r7,31
  8052a8:	12401f26 	beq	r2,r9,805328 <__ledf2+0xac>
  8052ac:	0241ffc4 	movi	r9,2047
  8052b0:	42401426 	beq	r8,r9,805304 <__ledf2+0x88>
  8052b4:	1000091e 	bne	r2,zero,8052dc <__ledf2+0x60>
  8052b8:	2296b03a 	or	r11,r4,r10
  8052bc:	5813003a 	cmpeq	r9,r11,zero
  8052c0:	29403fcc 	andi	r5,r5,255
  8052c4:	40000a1e 	bne	r8,zero,8052f0 <__ledf2+0x74>
  8052c8:	30d8b03a 	or	r12,r6,r3
  8052cc:	6000081e 	bne	r12,zero,8052f0 <__ledf2+0x74>
  8052d0:	0005883a 	mov	r2,zero
  8052d4:	5800111e 	bne	r11,zero,80531c <__ledf2+0xa0>
  8052d8:	f800283a 	ret
  8052dc:	29403fcc 	andi	r5,r5,255
  8052e0:	40000c1e 	bne	r8,zero,805314 <__ledf2+0x98>
  8052e4:	30d2b03a 	or	r9,r6,r3
  8052e8:	48000c26 	beq	r9,zero,80531c <__ledf2+0xa0>
  8052ec:	0013883a 	mov	r9,zero
  8052f0:	39c03fcc 	andi	r7,r7,255
  8052f4:	48000826 	beq	r9,zero,805318 <__ledf2+0x9c>
  8052f8:	38001126 	beq	r7,zero,805340 <__ledf2+0xc4>
  8052fc:	00800044 	movi	r2,1
  805300:	f800283a 	ret
  805304:	30d2b03a 	or	r9,r6,r3
  805308:	483fea26 	beq	r9,zero,8052b4 <__alt_mem_onchip_mem+0xff7fd2b4>
  80530c:	00800084 	movi	r2,2
  805310:	f800283a 	ret
  805314:	39c03fcc 	andi	r7,r7,255
  805318:	39400726 	beq	r7,r5,805338 <__ledf2+0xbc>
  80531c:	2800081e 	bne	r5,zero,805340 <__ledf2+0xc4>
  805320:	00800044 	movi	r2,1
  805324:	f800283a 	ret
  805328:	2292b03a 	or	r9,r4,r10
  80532c:	483fdf26 	beq	r9,zero,8052ac <__alt_mem_onchip_mem+0xff7fd2ac>
  805330:	00800084 	movi	r2,2
  805334:	f800283a 	ret
  805338:	4080030e 	bge	r8,r2,805348 <__ledf2+0xcc>
  80533c:	383fef26 	beq	r7,zero,8052fc <__alt_mem_onchip_mem+0xff7fd2fc>
  805340:	00bfffc4 	movi	r2,-1
  805344:	f800283a 	ret
  805348:	123feb16 	blt	r2,r8,8052f8 <__alt_mem_onchip_mem+0xff7fd2f8>
  80534c:	1abff336 	bltu	r3,r10,80531c <__alt_mem_onchip_mem+0xff7fd31c>
  805350:	50c00326 	beq	r10,r3,805360 <__ledf2+0xe4>
  805354:	50c0042e 	bgeu	r10,r3,805368 <__ledf2+0xec>
  805358:	283fe81e 	bne	r5,zero,8052fc <__alt_mem_onchip_mem+0xff7fd2fc>
  80535c:	003ff806 	br	805340 <__alt_mem_onchip_mem+0xff7fd340>
  805360:	313fee36 	bltu	r6,r4,80531c <__alt_mem_onchip_mem+0xff7fd31c>
  805364:	21bffc36 	bltu	r4,r6,805358 <__alt_mem_onchip_mem+0xff7fd358>
  805368:	0005883a 	mov	r2,zero
  80536c:	f800283a 	ret

00805370 <__muldf3>:
  805370:	defff304 	addi	sp,sp,-52
  805374:	2804d53a 	srli	r2,r5,20
  805378:	dd800915 	stw	r22,36(sp)
  80537c:	282cd7fa 	srli	r22,r5,31
  805380:	dc000315 	stw	r16,12(sp)
  805384:	04000434 	movhi	r16,16
  805388:	dd400815 	stw	r21,32(sp)
  80538c:	dc800515 	stw	r18,20(sp)
  805390:	843fffc4 	addi	r16,r16,-1
  805394:	dfc00c15 	stw	ra,48(sp)
  805398:	df000b15 	stw	fp,44(sp)
  80539c:	ddc00a15 	stw	r23,40(sp)
  8053a0:	dd000715 	stw	r20,28(sp)
  8053a4:	dcc00615 	stw	r19,24(sp)
  8053a8:	dc400415 	stw	r17,16(sp)
  8053ac:	1481ffcc 	andi	r18,r2,2047
  8053b0:	2c20703a 	and	r16,r5,r16
  8053b4:	b02b883a 	mov	r21,r22
  8053b8:	b2403fcc 	andi	r9,r22,255
  8053bc:	90006026 	beq	r18,zero,805540 <__muldf3+0x1d0>
  8053c0:	0081ffc4 	movi	r2,2047
  8053c4:	2029883a 	mov	r20,r4
  8053c8:	90803626 	beq	r18,r2,8054a4 <__muldf3+0x134>
  8053cc:	80800434 	orhi	r2,r16,16
  8053d0:	100490fa 	slli	r2,r2,3
  8053d4:	2020d77a 	srli	r16,r4,29
  8053d8:	202890fa 	slli	r20,r4,3
  8053dc:	94bf0044 	addi	r18,r18,-1023
  8053e0:	80a0b03a 	or	r16,r16,r2
  8053e4:	0027883a 	mov	r19,zero
  8053e8:	0039883a 	mov	fp,zero
  8053ec:	3804d53a 	srli	r2,r7,20
  8053f0:	382ed7fa 	srli	r23,r7,31
  8053f4:	04400434 	movhi	r17,16
  8053f8:	8c7fffc4 	addi	r17,r17,-1
  8053fc:	1081ffcc 	andi	r2,r2,2047
  805400:	3011883a 	mov	r8,r6
  805404:	3c62703a 	and	r17,r7,r17
  805408:	ba803fcc 	andi	r10,r23,255
  80540c:	10006d26 	beq	r2,zero,8055c4 <__muldf3+0x254>
  805410:	00c1ffc4 	movi	r3,2047
  805414:	10c06526 	beq	r2,r3,8055ac <__muldf3+0x23c>
  805418:	88c00434 	orhi	r3,r17,16
  80541c:	180690fa 	slli	r3,r3,3
  805420:	3022d77a 	srli	r17,r6,29
  805424:	301090fa 	slli	r8,r6,3
  805428:	10bf0044 	addi	r2,r2,-1023
  80542c:	88e2b03a 	or	r17,r17,r3
  805430:	000b883a 	mov	r5,zero
  805434:	9085883a 	add	r2,r18,r2
  805438:	2cc8b03a 	or	r4,r5,r19
  80543c:	00c003c4 	movi	r3,15
  805440:	bdacf03a 	xor	r22,r23,r22
  805444:	12c00044 	addi	r11,r2,1
  805448:	19009936 	bltu	r3,r4,8056b0 <__muldf3+0x340>
  80544c:	200890ba 	slli	r4,r4,2
  805450:	00c02034 	movhi	r3,128
  805454:	18d51904 	addi	r3,r3,21604
  805458:	20c9883a 	add	r4,r4,r3
  80545c:	20c00017 	ldw	r3,0(r4)
  805460:	1800683a 	jmp	r3
  805464:	008056b0 	cmpltui	r2,zero,346
  805468:	008054c4 	movi	r2,339
  80546c:	008054c4 	movi	r2,339
  805470:	008054c0 	call	8054c <__reset-0x77fab4>
  805474:	0080568c 	andi	r2,zero,346
  805478:	0080568c 	andi	r2,zero,346
  80547c:	00805674 	movhi	r2,345
  805480:	008054c0 	call	8054c <__reset-0x77fab4>
  805484:	0080568c 	andi	r2,zero,346
  805488:	00805674 	movhi	r2,345
  80548c:	0080568c 	andi	r2,zero,346
  805490:	008054c0 	call	8054c <__reset-0x77fab4>
  805494:	0080569c 	xori	r2,zero,346
  805498:	0080569c 	xori	r2,zero,346
  80549c:	0080569c 	xori	r2,zero,346
  8054a0:	008058b8 	rdprs	r2,zero,354
  8054a4:	2404b03a 	or	r2,r4,r16
  8054a8:	10006f1e 	bne	r2,zero,805668 <__muldf3+0x2f8>
  8054ac:	04c00204 	movi	r19,8
  8054b0:	0021883a 	mov	r16,zero
  8054b4:	0029883a 	mov	r20,zero
  8054b8:	07000084 	movi	fp,2
  8054bc:	003fcb06 	br	8053ec <__alt_mem_onchip_mem+0xff7fd3ec>
  8054c0:	502d883a 	mov	r22,r10
  8054c4:	00800084 	movi	r2,2
  8054c8:	28805726 	beq	r5,r2,805628 <__muldf3+0x2b8>
  8054cc:	008000c4 	movi	r2,3
  8054d0:	28816626 	beq	r5,r2,805a6c <__muldf3+0x6fc>
  8054d4:	00800044 	movi	r2,1
  8054d8:	2881411e 	bne	r5,r2,8059e0 <__muldf3+0x670>
  8054dc:	b02b883a 	mov	r21,r22
  8054e0:	0005883a 	mov	r2,zero
  8054e4:	000b883a 	mov	r5,zero
  8054e8:	0029883a 	mov	r20,zero
  8054ec:	1004953a 	slli	r2,r2,20
  8054f0:	a8c03fcc 	andi	r3,r21,255
  8054f4:	04400434 	movhi	r17,16
  8054f8:	8c7fffc4 	addi	r17,r17,-1
  8054fc:	180697fa 	slli	r3,r3,31
  805500:	2c4a703a 	and	r5,r5,r17
  805504:	288ab03a 	or	r5,r5,r2
  805508:	28c6b03a 	or	r3,r5,r3
  80550c:	a005883a 	mov	r2,r20
  805510:	dfc00c17 	ldw	ra,48(sp)
  805514:	df000b17 	ldw	fp,44(sp)
  805518:	ddc00a17 	ldw	r23,40(sp)
  80551c:	dd800917 	ldw	r22,36(sp)
  805520:	dd400817 	ldw	r21,32(sp)
  805524:	dd000717 	ldw	r20,28(sp)
  805528:	dcc00617 	ldw	r19,24(sp)
  80552c:	dc800517 	ldw	r18,20(sp)
  805530:	dc400417 	ldw	r17,16(sp)
  805534:	dc000317 	ldw	r16,12(sp)
  805538:	dec00d04 	addi	sp,sp,52
  80553c:	f800283a 	ret
  805540:	2404b03a 	or	r2,r4,r16
  805544:	2027883a 	mov	r19,r4
  805548:	10004226 	beq	r2,zero,805654 <__muldf3+0x2e4>
  80554c:	8000fc26 	beq	r16,zero,805940 <__muldf3+0x5d0>
  805550:	8009883a 	mov	r4,r16
  805554:	d9800215 	stw	r6,8(sp)
  805558:	d9c00015 	stw	r7,0(sp)
  80555c:	da400115 	stw	r9,4(sp)
  805560:	080642c0 	call	80642c <__clzsi2>
  805564:	d9800217 	ldw	r6,8(sp)
  805568:	d9c00017 	ldw	r7,0(sp)
  80556c:	da400117 	ldw	r9,4(sp)
  805570:	113ffd44 	addi	r4,r2,-11
  805574:	00c00704 	movi	r3,28
  805578:	1900ed16 	blt	r3,r4,805930 <__muldf3+0x5c0>
  80557c:	00c00744 	movi	r3,29
  805580:	147ffe04 	addi	r17,r2,-8
  805584:	1907c83a 	sub	r3,r3,r4
  805588:	8460983a 	sll	r16,r16,r17
  80558c:	98c6d83a 	srl	r3,r19,r3
  805590:	9c68983a 	sll	r20,r19,r17
  805594:	1c20b03a 	or	r16,r3,r16
  805598:	1080fcc4 	addi	r2,r2,1011
  80559c:	00a5c83a 	sub	r18,zero,r2
  8055a0:	0027883a 	mov	r19,zero
  8055a4:	0039883a 	mov	fp,zero
  8055a8:	003f9006 	br	8053ec <__alt_mem_onchip_mem+0xff7fd3ec>
  8055ac:	3446b03a 	or	r3,r6,r17
  8055b0:	1800261e 	bne	r3,zero,80564c <__muldf3+0x2dc>
  8055b4:	0023883a 	mov	r17,zero
  8055b8:	0011883a 	mov	r8,zero
  8055bc:	01400084 	movi	r5,2
  8055c0:	003f9c06 	br	805434 <__alt_mem_onchip_mem+0xff7fd434>
  8055c4:	3446b03a 	or	r3,r6,r17
  8055c8:	18001c26 	beq	r3,zero,80563c <__muldf3+0x2cc>
  8055cc:	8800ce26 	beq	r17,zero,805908 <__muldf3+0x598>
  8055d0:	8809883a 	mov	r4,r17
  8055d4:	d9800215 	stw	r6,8(sp)
  8055d8:	da400115 	stw	r9,4(sp)
  8055dc:	da800015 	stw	r10,0(sp)
  8055e0:	080642c0 	call	80642c <__clzsi2>
  8055e4:	d9800217 	ldw	r6,8(sp)
  8055e8:	da400117 	ldw	r9,4(sp)
  8055ec:	da800017 	ldw	r10,0(sp)
  8055f0:	113ffd44 	addi	r4,r2,-11
  8055f4:	00c00704 	movi	r3,28
  8055f8:	1900bf16 	blt	r3,r4,8058f8 <__muldf3+0x588>
  8055fc:	00c00744 	movi	r3,29
  805600:	123ffe04 	addi	r8,r2,-8
  805604:	1907c83a 	sub	r3,r3,r4
  805608:	8a22983a 	sll	r17,r17,r8
  80560c:	30c6d83a 	srl	r3,r6,r3
  805610:	3210983a 	sll	r8,r6,r8
  805614:	1c62b03a 	or	r17,r3,r17
  805618:	1080fcc4 	addi	r2,r2,1011
  80561c:	0085c83a 	sub	r2,zero,r2
  805620:	000b883a 	mov	r5,zero
  805624:	003f8306 	br	805434 <__alt_mem_onchip_mem+0xff7fd434>
  805628:	b02b883a 	mov	r21,r22
  80562c:	0081ffc4 	movi	r2,2047
  805630:	000b883a 	mov	r5,zero
  805634:	0029883a 	mov	r20,zero
  805638:	003fac06 	br	8054ec <__alt_mem_onchip_mem+0xff7fd4ec>
  80563c:	0023883a 	mov	r17,zero
  805640:	0011883a 	mov	r8,zero
  805644:	01400044 	movi	r5,1
  805648:	003f7a06 	br	805434 <__alt_mem_onchip_mem+0xff7fd434>
  80564c:	014000c4 	movi	r5,3
  805650:	003f7806 	br	805434 <__alt_mem_onchip_mem+0xff7fd434>
  805654:	04c00104 	movi	r19,4
  805658:	0021883a 	mov	r16,zero
  80565c:	0029883a 	mov	r20,zero
  805660:	07000044 	movi	fp,1
  805664:	003f6106 	br	8053ec <__alt_mem_onchip_mem+0xff7fd3ec>
  805668:	04c00304 	movi	r19,12
  80566c:	070000c4 	movi	fp,3
  805670:	003f5e06 	br	8053ec <__alt_mem_onchip_mem+0xff7fd3ec>
  805674:	01400434 	movhi	r5,16
  805678:	002b883a 	mov	r21,zero
  80567c:	297fffc4 	addi	r5,r5,-1
  805680:	053fffc4 	movi	r20,-1
  805684:	0081ffc4 	movi	r2,2047
  805688:	003f9806 	br	8054ec <__alt_mem_onchip_mem+0xff7fd4ec>
  80568c:	8023883a 	mov	r17,r16
  805690:	a011883a 	mov	r8,r20
  805694:	e00b883a 	mov	r5,fp
  805698:	003f8a06 	br	8054c4 <__alt_mem_onchip_mem+0xff7fd4c4>
  80569c:	8023883a 	mov	r17,r16
  8056a0:	a011883a 	mov	r8,r20
  8056a4:	482d883a 	mov	r22,r9
  8056a8:	e00b883a 	mov	r5,fp
  8056ac:	003f8506 	br	8054c4 <__alt_mem_onchip_mem+0xff7fd4c4>
  8056b0:	a00ad43a 	srli	r5,r20,16
  8056b4:	401ad43a 	srli	r13,r8,16
  8056b8:	a53fffcc 	andi	r20,r20,65535
  8056bc:	423fffcc 	andi	r8,r8,65535
  8056c0:	4519383a 	mul	r12,r8,r20
  8056c4:	4147383a 	mul	r3,r8,r5
  8056c8:	6d09383a 	mul	r4,r13,r20
  8056cc:	600cd43a 	srli	r6,r12,16
  8056d0:	2b5d383a 	mul	r14,r5,r13
  8056d4:	20c9883a 	add	r4,r4,r3
  8056d8:	310d883a 	add	r6,r6,r4
  8056dc:	30c0022e 	bgeu	r6,r3,8056e8 <__muldf3+0x378>
  8056e0:	00c00074 	movhi	r3,1
  8056e4:	70dd883a 	add	r14,r14,r3
  8056e8:	8826d43a 	srli	r19,r17,16
  8056ec:	8bffffcc 	andi	r15,r17,65535
  8056f0:	7d23383a 	mul	r17,r15,r20
  8056f4:	7949383a 	mul	r4,r15,r5
  8056f8:	9d29383a 	mul	r20,r19,r20
  8056fc:	8814d43a 	srli	r10,r17,16
  805700:	3012943a 	slli	r9,r6,16
  805704:	a129883a 	add	r20,r20,r4
  805708:	633fffcc 	andi	r12,r12,65535
  80570c:	5515883a 	add	r10,r10,r20
  805710:	3006d43a 	srli	r3,r6,16
  805714:	4b13883a 	add	r9,r9,r12
  805718:	2ccb383a 	mul	r5,r5,r19
  80571c:	5100022e 	bgeu	r10,r4,805728 <__muldf3+0x3b8>
  805720:	01000074 	movhi	r4,1
  805724:	290b883a 	add	r5,r5,r4
  805728:	802ad43a 	srli	r21,r16,16
  80572c:	843fffcc 	andi	r16,r16,65535
  805730:	440d383a 	mul	r6,r8,r16
  805734:	4565383a 	mul	r18,r8,r21
  805738:	8349383a 	mul	r4,r16,r13
  80573c:	500e943a 	slli	r7,r10,16
  805740:	3010d43a 	srli	r8,r6,16
  805744:	5028d43a 	srli	r20,r10,16
  805748:	2489883a 	add	r4,r4,r18
  80574c:	8abfffcc 	andi	r10,r17,65535
  805750:	3a95883a 	add	r10,r7,r10
  805754:	4119883a 	add	r12,r8,r4
  805758:	a169883a 	add	r20,r20,r5
  80575c:	1a87883a 	add	r3,r3,r10
  805760:	6d5b383a 	mul	r13,r13,r21
  805764:	6480022e 	bgeu	r12,r18,805770 <__muldf3+0x400>
  805768:	01000074 	movhi	r4,1
  80576c:	691b883a 	add	r13,r13,r4
  805770:	7c25383a 	mul	r18,r15,r16
  805774:	7d4b383a 	mul	r5,r15,r21
  805778:	84cf383a 	mul	r7,r16,r19
  80577c:	901ed43a 	srli	r15,r18,16
  805780:	6008d43a 	srli	r4,r12,16
  805784:	6010943a 	slli	r8,r12,16
  805788:	394f883a 	add	r7,r7,r5
  80578c:	333fffcc 	andi	r12,r6,65535
  805790:	79df883a 	add	r15,r15,r7
  805794:	235b883a 	add	r13,r4,r13
  805798:	9d63383a 	mul	r17,r19,r21
  80579c:	4309883a 	add	r4,r8,r12
  8057a0:	7940022e 	bgeu	r15,r5,8057ac <__muldf3+0x43c>
  8057a4:	01400074 	movhi	r5,1
  8057a8:	8963883a 	add	r17,r17,r5
  8057ac:	780a943a 	slli	r5,r15,16
  8057b0:	91bfffcc 	andi	r6,r18,65535
  8057b4:	70c7883a 	add	r3,r14,r3
  8057b8:	298d883a 	add	r6,r5,r6
  8057bc:	1a8f803a 	cmpltu	r7,r3,r10
  8057c0:	350b883a 	add	r5,r6,r20
  8057c4:	20c7883a 	add	r3,r4,r3
  8057c8:	3955883a 	add	r10,r7,r5
  8057cc:	1909803a 	cmpltu	r4,r3,r4
  8057d0:	6a91883a 	add	r8,r13,r10
  8057d4:	780cd43a 	srli	r6,r15,16
  8057d8:	2219883a 	add	r12,r4,r8
  8057dc:	2d0b803a 	cmpltu	r5,r5,r20
  8057e0:	51cf803a 	cmpltu	r7,r10,r7
  8057e4:	29ceb03a 	or	r7,r5,r7
  8057e8:	4351803a 	cmpltu	r8,r8,r13
  8057ec:	610b803a 	cmpltu	r5,r12,r4
  8057f0:	4148b03a 	or	r4,r8,r5
  8057f4:	398f883a 	add	r7,r7,r6
  8057f8:	3909883a 	add	r4,r7,r4
  8057fc:	1810927a 	slli	r8,r3,9
  805800:	2449883a 	add	r4,r4,r17
  805804:	2008927a 	slli	r4,r4,9
  805808:	6022d5fa 	srli	r17,r12,23
  80580c:	1806d5fa 	srli	r3,r3,23
  805810:	4252b03a 	or	r9,r8,r9
  805814:	600a927a 	slli	r5,r12,9
  805818:	4810c03a 	cmpne	r8,r9,zero
  80581c:	2462b03a 	or	r17,r4,r17
  805820:	40c6b03a 	or	r3,r8,r3
  805824:	8900402c 	andhi	r4,r17,256
  805828:	1950b03a 	or	r8,r3,r5
  80582c:	20000726 	beq	r4,zero,80584c <__muldf3+0x4dc>
  805830:	4006d07a 	srli	r3,r8,1
  805834:	880497fa 	slli	r2,r17,31
  805838:	4200004c 	andi	r8,r8,1
  80583c:	8822d07a 	srli	r17,r17,1
  805840:	1a10b03a 	or	r8,r3,r8
  805844:	1210b03a 	or	r8,r2,r8
  805848:	5805883a 	mov	r2,r11
  80584c:	1140ffc4 	addi	r5,r2,1023
  805850:	0140440e 	bge	zero,r5,805964 <__muldf3+0x5f4>
  805854:	40c001cc 	andi	r3,r8,7
  805858:	18000726 	beq	r3,zero,805878 <__muldf3+0x508>
  80585c:	40c003cc 	andi	r3,r8,15
  805860:	01000104 	movi	r4,4
  805864:	19000426 	beq	r3,r4,805878 <__muldf3+0x508>
  805868:	4107883a 	add	r3,r8,r4
  80586c:	1a11803a 	cmpltu	r8,r3,r8
  805870:	8a23883a 	add	r17,r17,r8
  805874:	1811883a 	mov	r8,r3
  805878:	88c0402c 	andhi	r3,r17,256
  80587c:	18000426 	beq	r3,zero,805890 <__muldf3+0x520>
  805880:	11410004 	addi	r5,r2,1024
  805884:	00bfc034 	movhi	r2,65280
  805888:	10bfffc4 	addi	r2,r2,-1
  80588c:	88a2703a 	and	r17,r17,r2
  805890:	0081ff84 	movi	r2,2046
  805894:	117f6416 	blt	r2,r5,805628 <__alt_mem_onchip_mem+0xff7fd628>
  805898:	8828977a 	slli	r20,r17,29
  80589c:	4010d0fa 	srli	r8,r8,3
  8058a0:	8822927a 	slli	r17,r17,9
  8058a4:	2881ffcc 	andi	r2,r5,2047
  8058a8:	a228b03a 	or	r20,r20,r8
  8058ac:	880ad33a 	srli	r5,r17,12
  8058b0:	b02b883a 	mov	r21,r22
  8058b4:	003f0d06 	br	8054ec <__alt_mem_onchip_mem+0xff7fd4ec>
  8058b8:	8080022c 	andhi	r2,r16,8
  8058bc:	10000926 	beq	r2,zero,8058e4 <__muldf3+0x574>
  8058c0:	8880022c 	andhi	r2,r17,8
  8058c4:	1000071e 	bne	r2,zero,8058e4 <__muldf3+0x574>
  8058c8:	00800434 	movhi	r2,16
  8058cc:	89400234 	orhi	r5,r17,8
  8058d0:	10bfffc4 	addi	r2,r2,-1
  8058d4:	b82b883a 	mov	r21,r23
  8058d8:	288a703a 	and	r5,r5,r2
  8058dc:	4029883a 	mov	r20,r8
  8058e0:	003f6806 	br	805684 <__alt_mem_onchip_mem+0xff7fd684>
  8058e4:	00800434 	movhi	r2,16
  8058e8:	81400234 	orhi	r5,r16,8
  8058ec:	10bfffc4 	addi	r2,r2,-1
  8058f0:	288a703a 	and	r5,r5,r2
  8058f4:	003f6306 	br	805684 <__alt_mem_onchip_mem+0xff7fd684>
  8058f8:	147ff604 	addi	r17,r2,-40
  8058fc:	3462983a 	sll	r17,r6,r17
  805900:	0011883a 	mov	r8,zero
  805904:	003f4406 	br	805618 <__alt_mem_onchip_mem+0xff7fd618>
  805908:	3009883a 	mov	r4,r6
  80590c:	d9800215 	stw	r6,8(sp)
  805910:	da400115 	stw	r9,4(sp)
  805914:	da800015 	stw	r10,0(sp)
  805918:	080642c0 	call	80642c <__clzsi2>
  80591c:	10800804 	addi	r2,r2,32
  805920:	da800017 	ldw	r10,0(sp)
  805924:	da400117 	ldw	r9,4(sp)
  805928:	d9800217 	ldw	r6,8(sp)
  80592c:	003f3006 	br	8055f0 <__alt_mem_onchip_mem+0xff7fd5f0>
  805930:	143ff604 	addi	r16,r2,-40
  805934:	9c20983a 	sll	r16,r19,r16
  805938:	0029883a 	mov	r20,zero
  80593c:	003f1606 	br	805598 <__alt_mem_onchip_mem+0xff7fd598>
  805940:	d9800215 	stw	r6,8(sp)
  805944:	d9c00015 	stw	r7,0(sp)
  805948:	da400115 	stw	r9,4(sp)
  80594c:	080642c0 	call	80642c <__clzsi2>
  805950:	10800804 	addi	r2,r2,32
  805954:	da400117 	ldw	r9,4(sp)
  805958:	d9c00017 	ldw	r7,0(sp)
  80595c:	d9800217 	ldw	r6,8(sp)
  805960:	003f0306 	br	805570 <__alt_mem_onchip_mem+0xff7fd570>
  805964:	00c00044 	movi	r3,1
  805968:	1947c83a 	sub	r3,r3,r5
  80596c:	00800e04 	movi	r2,56
  805970:	10feda16 	blt	r2,r3,8054dc <__alt_mem_onchip_mem+0xff7fd4dc>
  805974:	008007c4 	movi	r2,31
  805978:	10c01b16 	blt	r2,r3,8059e8 <__muldf3+0x678>
  80597c:	00800804 	movi	r2,32
  805980:	10c5c83a 	sub	r2,r2,r3
  805984:	888a983a 	sll	r5,r17,r2
  805988:	40c8d83a 	srl	r4,r8,r3
  80598c:	4084983a 	sll	r2,r8,r2
  805990:	88e2d83a 	srl	r17,r17,r3
  805994:	2906b03a 	or	r3,r5,r4
  805998:	1004c03a 	cmpne	r2,r2,zero
  80599c:	1886b03a 	or	r3,r3,r2
  8059a0:	188001cc 	andi	r2,r3,7
  8059a4:	10000726 	beq	r2,zero,8059c4 <__muldf3+0x654>
  8059a8:	188003cc 	andi	r2,r3,15
  8059ac:	01000104 	movi	r4,4
  8059b0:	11000426 	beq	r2,r4,8059c4 <__muldf3+0x654>
  8059b4:	1805883a 	mov	r2,r3
  8059b8:	10c00104 	addi	r3,r2,4
  8059bc:	1885803a 	cmpltu	r2,r3,r2
  8059c0:	88a3883a 	add	r17,r17,r2
  8059c4:	8880202c 	andhi	r2,r17,128
  8059c8:	10001c26 	beq	r2,zero,805a3c <__muldf3+0x6cc>
  8059cc:	b02b883a 	mov	r21,r22
  8059d0:	00800044 	movi	r2,1
  8059d4:	000b883a 	mov	r5,zero
  8059d8:	0029883a 	mov	r20,zero
  8059dc:	003ec306 	br	8054ec <__alt_mem_onchip_mem+0xff7fd4ec>
  8059e0:	5805883a 	mov	r2,r11
  8059e4:	003f9906 	br	80584c <__alt_mem_onchip_mem+0xff7fd84c>
  8059e8:	00bff844 	movi	r2,-31
  8059ec:	1145c83a 	sub	r2,r2,r5
  8059f0:	8888d83a 	srl	r4,r17,r2
  8059f4:	00800804 	movi	r2,32
  8059f8:	18801a26 	beq	r3,r2,805a64 <__muldf3+0x6f4>
  8059fc:	00801004 	movi	r2,64
  805a00:	10c5c83a 	sub	r2,r2,r3
  805a04:	8884983a 	sll	r2,r17,r2
  805a08:	1204b03a 	or	r2,r2,r8
  805a0c:	1004c03a 	cmpne	r2,r2,zero
  805a10:	2084b03a 	or	r2,r4,r2
  805a14:	144001cc 	andi	r17,r2,7
  805a18:	88000d1e 	bne	r17,zero,805a50 <__muldf3+0x6e0>
  805a1c:	000b883a 	mov	r5,zero
  805a20:	1028d0fa 	srli	r20,r2,3
  805a24:	b02b883a 	mov	r21,r22
  805a28:	0005883a 	mov	r2,zero
  805a2c:	a468b03a 	or	r20,r20,r17
  805a30:	003eae06 	br	8054ec <__alt_mem_onchip_mem+0xff7fd4ec>
  805a34:	1007883a 	mov	r3,r2
  805a38:	0023883a 	mov	r17,zero
  805a3c:	880a927a 	slli	r5,r17,9
  805a40:	1805883a 	mov	r2,r3
  805a44:	8822977a 	slli	r17,r17,29
  805a48:	280ad33a 	srli	r5,r5,12
  805a4c:	003ff406 	br	805a20 <__alt_mem_onchip_mem+0xff7fda20>
  805a50:	10c003cc 	andi	r3,r2,15
  805a54:	01000104 	movi	r4,4
  805a58:	193ff626 	beq	r3,r4,805a34 <__alt_mem_onchip_mem+0xff7fda34>
  805a5c:	0023883a 	mov	r17,zero
  805a60:	003fd506 	br	8059b8 <__alt_mem_onchip_mem+0xff7fd9b8>
  805a64:	0005883a 	mov	r2,zero
  805a68:	003fe706 	br	805a08 <__alt_mem_onchip_mem+0xff7fda08>
  805a6c:	00800434 	movhi	r2,16
  805a70:	89400234 	orhi	r5,r17,8
  805a74:	10bfffc4 	addi	r2,r2,-1
  805a78:	b02b883a 	mov	r21,r22
  805a7c:	288a703a 	and	r5,r5,r2
  805a80:	4029883a 	mov	r20,r8
  805a84:	003eff06 	br	805684 <__alt_mem_onchip_mem+0xff7fd684>

00805a88 <__subdf3>:
  805a88:	02000434 	movhi	r8,16
  805a8c:	423fffc4 	addi	r8,r8,-1
  805a90:	defffb04 	addi	sp,sp,-20
  805a94:	2a14703a 	and	r10,r5,r8
  805a98:	3812d53a 	srli	r9,r7,20
  805a9c:	3a10703a 	and	r8,r7,r8
  805aa0:	2006d77a 	srli	r3,r4,29
  805aa4:	3004d77a 	srli	r2,r6,29
  805aa8:	dc000015 	stw	r16,0(sp)
  805aac:	501490fa 	slli	r10,r10,3
  805ab0:	2820d53a 	srli	r16,r5,20
  805ab4:	401090fa 	slli	r8,r8,3
  805ab8:	dc800215 	stw	r18,8(sp)
  805abc:	dc400115 	stw	r17,4(sp)
  805ac0:	dfc00415 	stw	ra,16(sp)
  805ac4:	202290fa 	slli	r17,r4,3
  805ac8:	dcc00315 	stw	r19,12(sp)
  805acc:	4a41ffcc 	andi	r9,r9,2047
  805ad0:	0101ffc4 	movi	r4,2047
  805ad4:	2824d7fa 	srli	r18,r5,31
  805ad8:	8401ffcc 	andi	r16,r16,2047
  805adc:	50c6b03a 	or	r3,r10,r3
  805ae0:	380ed7fa 	srli	r7,r7,31
  805ae4:	408ab03a 	or	r5,r8,r2
  805ae8:	300c90fa 	slli	r6,r6,3
  805aec:	49009626 	beq	r9,r4,805d48 <__subdf3+0x2c0>
  805af0:	39c0005c 	xori	r7,r7,1
  805af4:	8245c83a 	sub	r2,r16,r9
  805af8:	3c807426 	beq	r7,r18,805ccc <__subdf3+0x244>
  805afc:	0080af0e 	bge	zero,r2,805dbc <__subdf3+0x334>
  805b00:	48002a1e 	bne	r9,zero,805bac <__subdf3+0x124>
  805b04:	2988b03a 	or	r4,r5,r6
  805b08:	20009a1e 	bne	r4,zero,805d74 <__subdf3+0x2ec>
  805b0c:	888001cc 	andi	r2,r17,7
  805b10:	10000726 	beq	r2,zero,805b30 <__subdf3+0xa8>
  805b14:	888003cc 	andi	r2,r17,15
  805b18:	01000104 	movi	r4,4
  805b1c:	11000426 	beq	r2,r4,805b30 <__subdf3+0xa8>
  805b20:	890b883a 	add	r5,r17,r4
  805b24:	2c63803a 	cmpltu	r17,r5,r17
  805b28:	1c47883a 	add	r3,r3,r17
  805b2c:	2823883a 	mov	r17,r5
  805b30:	1880202c 	andhi	r2,r3,128
  805b34:	10005926 	beq	r2,zero,805c9c <__subdf3+0x214>
  805b38:	84000044 	addi	r16,r16,1
  805b3c:	0081ffc4 	movi	r2,2047
  805b40:	8080be26 	beq	r16,r2,805e3c <__subdf3+0x3b4>
  805b44:	017fe034 	movhi	r5,65408
  805b48:	297fffc4 	addi	r5,r5,-1
  805b4c:	1946703a 	and	r3,r3,r5
  805b50:	1804977a 	slli	r2,r3,29
  805b54:	1806927a 	slli	r3,r3,9
  805b58:	8822d0fa 	srli	r17,r17,3
  805b5c:	8401ffcc 	andi	r16,r16,2047
  805b60:	180ad33a 	srli	r5,r3,12
  805b64:	9100004c 	andi	r4,r18,1
  805b68:	1444b03a 	or	r2,r2,r17
  805b6c:	80c1ffcc 	andi	r3,r16,2047
  805b70:	1820953a 	slli	r16,r3,20
  805b74:	20c03fcc 	andi	r3,r4,255
  805b78:	180897fa 	slli	r4,r3,31
  805b7c:	00c00434 	movhi	r3,16
  805b80:	18ffffc4 	addi	r3,r3,-1
  805b84:	28c6703a 	and	r3,r5,r3
  805b88:	1c06b03a 	or	r3,r3,r16
  805b8c:	1906b03a 	or	r3,r3,r4
  805b90:	dfc00417 	ldw	ra,16(sp)
  805b94:	dcc00317 	ldw	r19,12(sp)
  805b98:	dc800217 	ldw	r18,8(sp)
  805b9c:	dc400117 	ldw	r17,4(sp)
  805ba0:	dc000017 	ldw	r16,0(sp)
  805ba4:	dec00504 	addi	sp,sp,20
  805ba8:	f800283a 	ret
  805bac:	0101ffc4 	movi	r4,2047
  805bb0:	813fd626 	beq	r16,r4,805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  805bb4:	29402034 	orhi	r5,r5,128
  805bb8:	01000e04 	movi	r4,56
  805bbc:	2080a316 	blt	r4,r2,805e4c <__subdf3+0x3c4>
  805bc0:	010007c4 	movi	r4,31
  805bc4:	2080c616 	blt	r4,r2,805ee0 <__subdf3+0x458>
  805bc8:	01000804 	movi	r4,32
  805bcc:	2089c83a 	sub	r4,r4,r2
  805bd0:	2910983a 	sll	r8,r5,r4
  805bd4:	308ed83a 	srl	r7,r6,r2
  805bd8:	3108983a 	sll	r4,r6,r4
  805bdc:	2884d83a 	srl	r2,r5,r2
  805be0:	41ccb03a 	or	r6,r8,r7
  805be4:	2008c03a 	cmpne	r4,r4,zero
  805be8:	310cb03a 	or	r6,r6,r4
  805bec:	898dc83a 	sub	r6,r17,r6
  805bf0:	89a3803a 	cmpltu	r17,r17,r6
  805bf4:	1887c83a 	sub	r3,r3,r2
  805bf8:	1c47c83a 	sub	r3,r3,r17
  805bfc:	3023883a 	mov	r17,r6
  805c00:	1880202c 	andhi	r2,r3,128
  805c04:	10002326 	beq	r2,zero,805c94 <__subdf3+0x20c>
  805c08:	04c02034 	movhi	r19,128
  805c0c:	9cffffc4 	addi	r19,r19,-1
  805c10:	1ce6703a 	and	r19,r3,r19
  805c14:	98007a26 	beq	r19,zero,805e00 <__subdf3+0x378>
  805c18:	9809883a 	mov	r4,r19
  805c1c:	080642c0 	call	80642c <__clzsi2>
  805c20:	113ffe04 	addi	r4,r2,-8
  805c24:	00c007c4 	movi	r3,31
  805c28:	19007b16 	blt	r3,r4,805e18 <__subdf3+0x390>
  805c2c:	00800804 	movi	r2,32
  805c30:	1105c83a 	sub	r2,r2,r4
  805c34:	8884d83a 	srl	r2,r17,r2
  805c38:	9906983a 	sll	r3,r19,r4
  805c3c:	8922983a 	sll	r17,r17,r4
  805c40:	10c4b03a 	or	r2,r2,r3
  805c44:	24007816 	blt	r4,r16,805e28 <__subdf3+0x3a0>
  805c48:	2421c83a 	sub	r16,r4,r16
  805c4c:	80c00044 	addi	r3,r16,1
  805c50:	010007c4 	movi	r4,31
  805c54:	20c09516 	blt	r4,r3,805eac <__subdf3+0x424>
  805c58:	01400804 	movi	r5,32
  805c5c:	28cbc83a 	sub	r5,r5,r3
  805c60:	88c8d83a 	srl	r4,r17,r3
  805c64:	8962983a 	sll	r17,r17,r5
  805c68:	114a983a 	sll	r5,r2,r5
  805c6c:	10c6d83a 	srl	r3,r2,r3
  805c70:	8804c03a 	cmpne	r2,r17,zero
  805c74:	290ab03a 	or	r5,r5,r4
  805c78:	28a2b03a 	or	r17,r5,r2
  805c7c:	0021883a 	mov	r16,zero
  805c80:	003fa206 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  805c84:	2090b03a 	or	r8,r4,r2
  805c88:	40018e26 	beq	r8,zero,8062c4 <__subdf3+0x83c>
  805c8c:	1007883a 	mov	r3,r2
  805c90:	2023883a 	mov	r17,r4
  805c94:	888001cc 	andi	r2,r17,7
  805c98:	103f9e1e 	bne	r2,zero,805b14 <__alt_mem_onchip_mem+0xff7fdb14>
  805c9c:	1804977a 	slli	r2,r3,29
  805ca0:	8822d0fa 	srli	r17,r17,3
  805ca4:	1810d0fa 	srli	r8,r3,3
  805ca8:	9100004c 	andi	r4,r18,1
  805cac:	1444b03a 	or	r2,r2,r17
  805cb0:	00c1ffc4 	movi	r3,2047
  805cb4:	80c02826 	beq	r16,r3,805d58 <__subdf3+0x2d0>
  805cb8:	01400434 	movhi	r5,16
  805cbc:	297fffc4 	addi	r5,r5,-1
  805cc0:	80e0703a 	and	r16,r16,r3
  805cc4:	414a703a 	and	r5,r8,r5
  805cc8:	003fa806 	br	805b6c <__alt_mem_onchip_mem+0xff7fdb6c>
  805ccc:	0080630e 	bge	zero,r2,805e5c <__subdf3+0x3d4>
  805cd0:	48003026 	beq	r9,zero,805d94 <__subdf3+0x30c>
  805cd4:	0101ffc4 	movi	r4,2047
  805cd8:	813f8c26 	beq	r16,r4,805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  805cdc:	29402034 	orhi	r5,r5,128
  805ce0:	01000e04 	movi	r4,56
  805ce4:	2080a90e 	bge	r4,r2,805f8c <__subdf3+0x504>
  805ce8:	298cb03a 	or	r6,r5,r6
  805cec:	3012c03a 	cmpne	r9,r6,zero
  805cf0:	0005883a 	mov	r2,zero
  805cf4:	4c53883a 	add	r9,r9,r17
  805cf8:	4c63803a 	cmpltu	r17,r9,r17
  805cfc:	10c7883a 	add	r3,r2,r3
  805d00:	88c7883a 	add	r3,r17,r3
  805d04:	4823883a 	mov	r17,r9
  805d08:	1880202c 	andhi	r2,r3,128
  805d0c:	1000d026 	beq	r2,zero,806050 <__subdf3+0x5c8>
  805d10:	84000044 	addi	r16,r16,1
  805d14:	0081ffc4 	movi	r2,2047
  805d18:	8080fe26 	beq	r16,r2,806114 <__subdf3+0x68c>
  805d1c:	00bfe034 	movhi	r2,65408
  805d20:	10bfffc4 	addi	r2,r2,-1
  805d24:	1886703a 	and	r3,r3,r2
  805d28:	880ad07a 	srli	r5,r17,1
  805d2c:	180497fa 	slli	r2,r3,31
  805d30:	8900004c 	andi	r4,r17,1
  805d34:	2922b03a 	or	r17,r5,r4
  805d38:	1806d07a 	srli	r3,r3,1
  805d3c:	1462b03a 	or	r17,r2,r17
  805d40:	3825883a 	mov	r18,r7
  805d44:	003f7106 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  805d48:	2984b03a 	or	r2,r5,r6
  805d4c:	103f6826 	beq	r2,zero,805af0 <__alt_mem_onchip_mem+0xff7fdaf0>
  805d50:	39c03fcc 	andi	r7,r7,255
  805d54:	003f6706 	br	805af4 <__alt_mem_onchip_mem+0xff7fdaf4>
  805d58:	4086b03a 	or	r3,r8,r2
  805d5c:	18015226 	beq	r3,zero,8062a8 <__subdf3+0x820>
  805d60:	00c00434 	movhi	r3,16
  805d64:	41400234 	orhi	r5,r8,8
  805d68:	18ffffc4 	addi	r3,r3,-1
  805d6c:	28ca703a 	and	r5,r5,r3
  805d70:	003f7e06 	br	805b6c <__alt_mem_onchip_mem+0xff7fdb6c>
  805d74:	10bfffc4 	addi	r2,r2,-1
  805d78:	1000491e 	bne	r2,zero,805ea0 <__subdf3+0x418>
  805d7c:	898fc83a 	sub	r7,r17,r6
  805d80:	89e3803a 	cmpltu	r17,r17,r7
  805d84:	1947c83a 	sub	r3,r3,r5
  805d88:	1c47c83a 	sub	r3,r3,r17
  805d8c:	3823883a 	mov	r17,r7
  805d90:	003f9b06 	br	805c00 <__alt_mem_onchip_mem+0xff7fdc00>
  805d94:	2988b03a 	or	r4,r5,r6
  805d98:	203f5c26 	beq	r4,zero,805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  805d9c:	10bfffc4 	addi	r2,r2,-1
  805da0:	1000931e 	bne	r2,zero,805ff0 <__subdf3+0x568>
  805da4:	898d883a 	add	r6,r17,r6
  805da8:	3463803a 	cmpltu	r17,r6,r17
  805dac:	1947883a 	add	r3,r3,r5
  805db0:	88c7883a 	add	r3,r17,r3
  805db4:	3023883a 	mov	r17,r6
  805db8:	003fd306 	br	805d08 <__alt_mem_onchip_mem+0xff7fdd08>
  805dbc:	1000541e 	bne	r2,zero,805f10 <__subdf3+0x488>
  805dc0:	80800044 	addi	r2,r16,1
  805dc4:	1081ffcc 	andi	r2,r2,2047
  805dc8:	01000044 	movi	r4,1
  805dcc:	2080a20e 	bge	r4,r2,806058 <__subdf3+0x5d0>
  805dd0:	8989c83a 	sub	r4,r17,r6
  805dd4:	8905803a 	cmpltu	r2,r17,r4
  805dd8:	1967c83a 	sub	r19,r3,r5
  805ddc:	98a7c83a 	sub	r19,r19,r2
  805de0:	9880202c 	andhi	r2,r19,128
  805de4:	10006326 	beq	r2,zero,805f74 <__subdf3+0x4ec>
  805de8:	3463c83a 	sub	r17,r6,r17
  805dec:	28c7c83a 	sub	r3,r5,r3
  805df0:	344d803a 	cmpltu	r6,r6,r17
  805df4:	19a7c83a 	sub	r19,r3,r6
  805df8:	3825883a 	mov	r18,r7
  805dfc:	983f861e 	bne	r19,zero,805c18 <__alt_mem_onchip_mem+0xff7fdc18>
  805e00:	8809883a 	mov	r4,r17
  805e04:	080642c0 	call	80642c <__clzsi2>
  805e08:	10800804 	addi	r2,r2,32
  805e0c:	113ffe04 	addi	r4,r2,-8
  805e10:	00c007c4 	movi	r3,31
  805e14:	193f850e 	bge	r3,r4,805c2c <__alt_mem_onchip_mem+0xff7fdc2c>
  805e18:	10bff604 	addi	r2,r2,-40
  805e1c:	8884983a 	sll	r2,r17,r2
  805e20:	0023883a 	mov	r17,zero
  805e24:	243f880e 	bge	r4,r16,805c48 <__alt_mem_onchip_mem+0xff7fdc48>
  805e28:	00ffe034 	movhi	r3,65408
  805e2c:	18ffffc4 	addi	r3,r3,-1
  805e30:	8121c83a 	sub	r16,r16,r4
  805e34:	10c6703a 	and	r3,r2,r3
  805e38:	003f3406 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  805e3c:	9100004c 	andi	r4,r18,1
  805e40:	000b883a 	mov	r5,zero
  805e44:	0005883a 	mov	r2,zero
  805e48:	003f4806 	br	805b6c <__alt_mem_onchip_mem+0xff7fdb6c>
  805e4c:	298cb03a 	or	r6,r5,r6
  805e50:	300cc03a 	cmpne	r6,r6,zero
  805e54:	0005883a 	mov	r2,zero
  805e58:	003f6406 	br	805bec <__alt_mem_onchip_mem+0xff7fdbec>
  805e5c:	10009a1e 	bne	r2,zero,8060c8 <__subdf3+0x640>
  805e60:	82400044 	addi	r9,r16,1
  805e64:	4881ffcc 	andi	r2,r9,2047
  805e68:	02800044 	movi	r10,1
  805e6c:	5080670e 	bge	r10,r2,80600c <__subdf3+0x584>
  805e70:	0081ffc4 	movi	r2,2047
  805e74:	4880af26 	beq	r9,r2,806134 <__subdf3+0x6ac>
  805e78:	898d883a 	add	r6,r17,r6
  805e7c:	1945883a 	add	r2,r3,r5
  805e80:	3447803a 	cmpltu	r3,r6,r17
  805e84:	1887883a 	add	r3,r3,r2
  805e88:	182297fa 	slli	r17,r3,31
  805e8c:	300cd07a 	srli	r6,r6,1
  805e90:	1806d07a 	srli	r3,r3,1
  805e94:	4821883a 	mov	r16,r9
  805e98:	89a2b03a 	or	r17,r17,r6
  805e9c:	003f1b06 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  805ea0:	0101ffc4 	movi	r4,2047
  805ea4:	813f441e 	bne	r16,r4,805bb8 <__alt_mem_onchip_mem+0xff7fdbb8>
  805ea8:	003f1806 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  805eac:	843ff844 	addi	r16,r16,-31
  805eb0:	01400804 	movi	r5,32
  805eb4:	1408d83a 	srl	r4,r2,r16
  805eb8:	19405026 	beq	r3,r5,805ffc <__subdf3+0x574>
  805ebc:	01401004 	movi	r5,64
  805ec0:	28c7c83a 	sub	r3,r5,r3
  805ec4:	10c4983a 	sll	r2,r2,r3
  805ec8:	88a2b03a 	or	r17,r17,r2
  805ecc:	8822c03a 	cmpne	r17,r17,zero
  805ed0:	2462b03a 	or	r17,r4,r17
  805ed4:	0007883a 	mov	r3,zero
  805ed8:	0021883a 	mov	r16,zero
  805edc:	003f6d06 	br	805c94 <__alt_mem_onchip_mem+0xff7fdc94>
  805ee0:	11fff804 	addi	r7,r2,-32
  805ee4:	01000804 	movi	r4,32
  805ee8:	29ced83a 	srl	r7,r5,r7
  805eec:	11004526 	beq	r2,r4,806004 <__subdf3+0x57c>
  805ef0:	01001004 	movi	r4,64
  805ef4:	2089c83a 	sub	r4,r4,r2
  805ef8:	2904983a 	sll	r2,r5,r4
  805efc:	118cb03a 	or	r6,r2,r6
  805f00:	300cc03a 	cmpne	r6,r6,zero
  805f04:	398cb03a 	or	r6,r7,r6
  805f08:	0005883a 	mov	r2,zero
  805f0c:	003f3706 	br	805bec <__alt_mem_onchip_mem+0xff7fdbec>
  805f10:	80002a26 	beq	r16,zero,805fbc <__subdf3+0x534>
  805f14:	0101ffc4 	movi	r4,2047
  805f18:	49006626 	beq	r9,r4,8060b4 <__subdf3+0x62c>
  805f1c:	0085c83a 	sub	r2,zero,r2
  805f20:	18c02034 	orhi	r3,r3,128
  805f24:	01000e04 	movi	r4,56
  805f28:	20807e16 	blt	r4,r2,806124 <__subdf3+0x69c>
  805f2c:	010007c4 	movi	r4,31
  805f30:	2080e716 	blt	r4,r2,8062d0 <__subdf3+0x848>
  805f34:	01000804 	movi	r4,32
  805f38:	2089c83a 	sub	r4,r4,r2
  805f3c:	1914983a 	sll	r10,r3,r4
  805f40:	8890d83a 	srl	r8,r17,r2
  805f44:	8908983a 	sll	r4,r17,r4
  805f48:	1884d83a 	srl	r2,r3,r2
  805f4c:	5222b03a 	or	r17,r10,r8
  805f50:	2006c03a 	cmpne	r3,r4,zero
  805f54:	88e2b03a 	or	r17,r17,r3
  805f58:	3463c83a 	sub	r17,r6,r17
  805f5c:	2885c83a 	sub	r2,r5,r2
  805f60:	344d803a 	cmpltu	r6,r6,r17
  805f64:	1187c83a 	sub	r3,r2,r6
  805f68:	4821883a 	mov	r16,r9
  805f6c:	3825883a 	mov	r18,r7
  805f70:	003f2306 	br	805c00 <__alt_mem_onchip_mem+0xff7fdc00>
  805f74:	24d0b03a 	or	r8,r4,r19
  805f78:	40001b1e 	bne	r8,zero,805fe8 <__subdf3+0x560>
  805f7c:	0005883a 	mov	r2,zero
  805f80:	0009883a 	mov	r4,zero
  805f84:	0021883a 	mov	r16,zero
  805f88:	003f4906 	br	805cb0 <__alt_mem_onchip_mem+0xff7fdcb0>
  805f8c:	010007c4 	movi	r4,31
  805f90:	20803a16 	blt	r4,r2,80607c <__subdf3+0x5f4>
  805f94:	01000804 	movi	r4,32
  805f98:	2089c83a 	sub	r4,r4,r2
  805f9c:	2912983a 	sll	r9,r5,r4
  805fa0:	3090d83a 	srl	r8,r6,r2
  805fa4:	3108983a 	sll	r4,r6,r4
  805fa8:	2884d83a 	srl	r2,r5,r2
  805fac:	4a12b03a 	or	r9,r9,r8
  805fb0:	2008c03a 	cmpne	r4,r4,zero
  805fb4:	4912b03a 	or	r9,r9,r4
  805fb8:	003f4e06 	br	805cf4 <__alt_mem_onchip_mem+0xff7fdcf4>
  805fbc:	1c48b03a 	or	r4,r3,r17
  805fc0:	20003c26 	beq	r4,zero,8060b4 <__subdf3+0x62c>
  805fc4:	0084303a 	nor	r2,zero,r2
  805fc8:	1000381e 	bne	r2,zero,8060ac <__subdf3+0x624>
  805fcc:	3463c83a 	sub	r17,r6,r17
  805fd0:	28c5c83a 	sub	r2,r5,r3
  805fd4:	344d803a 	cmpltu	r6,r6,r17
  805fd8:	1187c83a 	sub	r3,r2,r6
  805fdc:	4821883a 	mov	r16,r9
  805fe0:	3825883a 	mov	r18,r7
  805fe4:	003f0606 	br	805c00 <__alt_mem_onchip_mem+0xff7fdc00>
  805fe8:	2023883a 	mov	r17,r4
  805fec:	003f0906 	br	805c14 <__alt_mem_onchip_mem+0xff7fdc14>
  805ff0:	0101ffc4 	movi	r4,2047
  805ff4:	813f3a1e 	bne	r16,r4,805ce0 <__alt_mem_onchip_mem+0xff7fdce0>
  805ff8:	003ec406 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  805ffc:	0005883a 	mov	r2,zero
  806000:	003fb106 	br	805ec8 <__alt_mem_onchip_mem+0xff7fdec8>
  806004:	0005883a 	mov	r2,zero
  806008:	003fbc06 	br	805efc <__alt_mem_onchip_mem+0xff7fdefc>
  80600c:	1c44b03a 	or	r2,r3,r17
  806010:	80008e1e 	bne	r16,zero,80624c <__subdf3+0x7c4>
  806014:	1000c826 	beq	r2,zero,806338 <__subdf3+0x8b0>
  806018:	2984b03a 	or	r2,r5,r6
  80601c:	103ebb26 	beq	r2,zero,805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  806020:	8989883a 	add	r4,r17,r6
  806024:	1945883a 	add	r2,r3,r5
  806028:	2447803a 	cmpltu	r3,r4,r17
  80602c:	1887883a 	add	r3,r3,r2
  806030:	1880202c 	andhi	r2,r3,128
  806034:	2023883a 	mov	r17,r4
  806038:	103f1626 	beq	r2,zero,805c94 <__alt_mem_onchip_mem+0xff7fdc94>
  80603c:	00bfe034 	movhi	r2,65408
  806040:	10bfffc4 	addi	r2,r2,-1
  806044:	5021883a 	mov	r16,r10
  806048:	1886703a 	and	r3,r3,r2
  80604c:	003eaf06 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  806050:	3825883a 	mov	r18,r7
  806054:	003f0f06 	br	805c94 <__alt_mem_onchip_mem+0xff7fdc94>
  806058:	1c44b03a 	or	r2,r3,r17
  80605c:	8000251e 	bne	r16,zero,8060f4 <__subdf3+0x66c>
  806060:	1000661e 	bne	r2,zero,8061fc <__subdf3+0x774>
  806064:	2990b03a 	or	r8,r5,r6
  806068:	40009626 	beq	r8,zero,8062c4 <__subdf3+0x83c>
  80606c:	2807883a 	mov	r3,r5
  806070:	3023883a 	mov	r17,r6
  806074:	3825883a 	mov	r18,r7
  806078:	003ea406 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  80607c:	127ff804 	addi	r9,r2,-32
  806080:	01000804 	movi	r4,32
  806084:	2a52d83a 	srl	r9,r5,r9
  806088:	11008c26 	beq	r2,r4,8062bc <__subdf3+0x834>
  80608c:	01001004 	movi	r4,64
  806090:	2085c83a 	sub	r2,r4,r2
  806094:	2884983a 	sll	r2,r5,r2
  806098:	118cb03a 	or	r6,r2,r6
  80609c:	300cc03a 	cmpne	r6,r6,zero
  8060a0:	4992b03a 	or	r9,r9,r6
  8060a4:	0005883a 	mov	r2,zero
  8060a8:	003f1206 	br	805cf4 <__alt_mem_onchip_mem+0xff7fdcf4>
  8060ac:	0101ffc4 	movi	r4,2047
  8060b0:	493f9c1e 	bne	r9,r4,805f24 <__alt_mem_onchip_mem+0xff7fdf24>
  8060b4:	2807883a 	mov	r3,r5
  8060b8:	3023883a 	mov	r17,r6
  8060bc:	4821883a 	mov	r16,r9
  8060c0:	3825883a 	mov	r18,r7
  8060c4:	003e9106 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  8060c8:	80001f1e 	bne	r16,zero,806148 <__subdf3+0x6c0>
  8060cc:	1c48b03a 	or	r4,r3,r17
  8060d0:	20005a26 	beq	r4,zero,80623c <__subdf3+0x7b4>
  8060d4:	0084303a 	nor	r2,zero,r2
  8060d8:	1000561e 	bne	r2,zero,806234 <__subdf3+0x7ac>
  8060dc:	89a3883a 	add	r17,r17,r6
  8060e0:	1945883a 	add	r2,r3,r5
  8060e4:	898d803a 	cmpltu	r6,r17,r6
  8060e8:	3087883a 	add	r3,r6,r2
  8060ec:	4821883a 	mov	r16,r9
  8060f0:	003f0506 	br	805d08 <__alt_mem_onchip_mem+0xff7fdd08>
  8060f4:	10002b1e 	bne	r2,zero,8061a4 <__subdf3+0x71c>
  8060f8:	2984b03a 	or	r2,r5,r6
  8060fc:	10008026 	beq	r2,zero,806300 <__subdf3+0x878>
  806100:	2807883a 	mov	r3,r5
  806104:	3023883a 	mov	r17,r6
  806108:	3825883a 	mov	r18,r7
  80610c:	0401ffc4 	movi	r16,2047
  806110:	003e7e06 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  806114:	3809883a 	mov	r4,r7
  806118:	0011883a 	mov	r8,zero
  80611c:	0005883a 	mov	r2,zero
  806120:	003ee306 	br	805cb0 <__alt_mem_onchip_mem+0xff7fdcb0>
  806124:	1c62b03a 	or	r17,r3,r17
  806128:	8822c03a 	cmpne	r17,r17,zero
  80612c:	0005883a 	mov	r2,zero
  806130:	003f8906 	br	805f58 <__alt_mem_onchip_mem+0xff7fdf58>
  806134:	3809883a 	mov	r4,r7
  806138:	4821883a 	mov	r16,r9
  80613c:	0011883a 	mov	r8,zero
  806140:	0005883a 	mov	r2,zero
  806144:	003eda06 	br	805cb0 <__alt_mem_onchip_mem+0xff7fdcb0>
  806148:	0101ffc4 	movi	r4,2047
  80614c:	49003b26 	beq	r9,r4,80623c <__subdf3+0x7b4>
  806150:	0085c83a 	sub	r2,zero,r2
  806154:	18c02034 	orhi	r3,r3,128
  806158:	01000e04 	movi	r4,56
  80615c:	20806e16 	blt	r4,r2,806318 <__subdf3+0x890>
  806160:	010007c4 	movi	r4,31
  806164:	20807716 	blt	r4,r2,806344 <__subdf3+0x8bc>
  806168:	01000804 	movi	r4,32
  80616c:	2089c83a 	sub	r4,r4,r2
  806170:	1914983a 	sll	r10,r3,r4
  806174:	8890d83a 	srl	r8,r17,r2
  806178:	8908983a 	sll	r4,r17,r4
  80617c:	1884d83a 	srl	r2,r3,r2
  806180:	5222b03a 	or	r17,r10,r8
  806184:	2006c03a 	cmpne	r3,r4,zero
  806188:	88e2b03a 	or	r17,r17,r3
  80618c:	89a3883a 	add	r17,r17,r6
  806190:	1145883a 	add	r2,r2,r5
  806194:	898d803a 	cmpltu	r6,r17,r6
  806198:	3087883a 	add	r3,r6,r2
  80619c:	4821883a 	mov	r16,r9
  8061a0:	003ed906 	br	805d08 <__alt_mem_onchip_mem+0xff7fdd08>
  8061a4:	2984b03a 	or	r2,r5,r6
  8061a8:	10004226 	beq	r2,zero,8062b4 <__subdf3+0x82c>
  8061ac:	1808d0fa 	srli	r4,r3,3
  8061b0:	8822d0fa 	srli	r17,r17,3
  8061b4:	1806977a 	slli	r3,r3,29
  8061b8:	2080022c 	andhi	r2,r4,8
  8061bc:	1c62b03a 	or	r17,r3,r17
  8061c0:	10000826 	beq	r2,zero,8061e4 <__subdf3+0x75c>
  8061c4:	2812d0fa 	srli	r9,r5,3
  8061c8:	4880022c 	andhi	r2,r9,8
  8061cc:	1000051e 	bne	r2,zero,8061e4 <__subdf3+0x75c>
  8061d0:	300cd0fa 	srli	r6,r6,3
  8061d4:	2804977a 	slli	r2,r5,29
  8061d8:	4809883a 	mov	r4,r9
  8061dc:	3825883a 	mov	r18,r7
  8061e0:	11a2b03a 	or	r17,r2,r6
  8061e4:	8806d77a 	srli	r3,r17,29
  8061e8:	200890fa 	slli	r4,r4,3
  8061ec:	882290fa 	slli	r17,r17,3
  8061f0:	0401ffc4 	movi	r16,2047
  8061f4:	1906b03a 	or	r3,r3,r4
  8061f8:	003e4406 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  8061fc:	2984b03a 	or	r2,r5,r6
  806200:	103e4226 	beq	r2,zero,805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  806204:	8989c83a 	sub	r4,r17,r6
  806208:	8911803a 	cmpltu	r8,r17,r4
  80620c:	1945c83a 	sub	r2,r3,r5
  806210:	1205c83a 	sub	r2,r2,r8
  806214:	1200202c 	andhi	r8,r2,128
  806218:	403e9a26 	beq	r8,zero,805c84 <__alt_mem_onchip_mem+0xff7fdc84>
  80621c:	3463c83a 	sub	r17,r6,r17
  806220:	28c5c83a 	sub	r2,r5,r3
  806224:	344d803a 	cmpltu	r6,r6,r17
  806228:	1187c83a 	sub	r3,r2,r6
  80622c:	3825883a 	mov	r18,r7
  806230:	003e3606 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  806234:	0101ffc4 	movi	r4,2047
  806238:	493fc71e 	bne	r9,r4,806158 <__alt_mem_onchip_mem+0xff7fe158>
  80623c:	2807883a 	mov	r3,r5
  806240:	3023883a 	mov	r17,r6
  806244:	4821883a 	mov	r16,r9
  806248:	003e3006 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  80624c:	10003626 	beq	r2,zero,806328 <__subdf3+0x8a0>
  806250:	2984b03a 	or	r2,r5,r6
  806254:	10001726 	beq	r2,zero,8062b4 <__subdf3+0x82c>
  806258:	1808d0fa 	srli	r4,r3,3
  80625c:	8822d0fa 	srli	r17,r17,3
  806260:	1806977a 	slli	r3,r3,29
  806264:	2080022c 	andhi	r2,r4,8
  806268:	1c62b03a 	or	r17,r3,r17
  80626c:	10000726 	beq	r2,zero,80628c <__subdf3+0x804>
  806270:	2812d0fa 	srli	r9,r5,3
  806274:	4880022c 	andhi	r2,r9,8
  806278:	1000041e 	bne	r2,zero,80628c <__subdf3+0x804>
  80627c:	300cd0fa 	srli	r6,r6,3
  806280:	2804977a 	slli	r2,r5,29
  806284:	4809883a 	mov	r4,r9
  806288:	11a2b03a 	or	r17,r2,r6
  80628c:	8806d77a 	srli	r3,r17,29
  806290:	200890fa 	slli	r4,r4,3
  806294:	882290fa 	slli	r17,r17,3
  806298:	3825883a 	mov	r18,r7
  80629c:	1906b03a 	or	r3,r3,r4
  8062a0:	0401ffc4 	movi	r16,2047
  8062a4:	003e1906 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  8062a8:	000b883a 	mov	r5,zero
  8062ac:	0005883a 	mov	r2,zero
  8062b0:	003e2e06 	br	805b6c <__alt_mem_onchip_mem+0xff7fdb6c>
  8062b4:	0401ffc4 	movi	r16,2047
  8062b8:	003e1406 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  8062bc:	0005883a 	mov	r2,zero
  8062c0:	003f7506 	br	806098 <__alt_mem_onchip_mem+0xff7fe098>
  8062c4:	0005883a 	mov	r2,zero
  8062c8:	0009883a 	mov	r4,zero
  8062cc:	003e7806 	br	805cb0 <__alt_mem_onchip_mem+0xff7fdcb0>
  8062d0:	123ff804 	addi	r8,r2,-32
  8062d4:	01000804 	movi	r4,32
  8062d8:	1a10d83a 	srl	r8,r3,r8
  8062dc:	11002526 	beq	r2,r4,806374 <__subdf3+0x8ec>
  8062e0:	01001004 	movi	r4,64
  8062e4:	2085c83a 	sub	r2,r4,r2
  8062e8:	1884983a 	sll	r2,r3,r2
  8062ec:	1444b03a 	or	r2,r2,r17
  8062f0:	1004c03a 	cmpne	r2,r2,zero
  8062f4:	40a2b03a 	or	r17,r8,r2
  8062f8:	0005883a 	mov	r2,zero
  8062fc:	003f1606 	br	805f58 <__alt_mem_onchip_mem+0xff7fdf58>
  806300:	02000434 	movhi	r8,16
  806304:	0009883a 	mov	r4,zero
  806308:	423fffc4 	addi	r8,r8,-1
  80630c:	00bfffc4 	movi	r2,-1
  806310:	0401ffc4 	movi	r16,2047
  806314:	003e6606 	br	805cb0 <__alt_mem_onchip_mem+0xff7fdcb0>
  806318:	1c62b03a 	or	r17,r3,r17
  80631c:	8822c03a 	cmpne	r17,r17,zero
  806320:	0005883a 	mov	r2,zero
  806324:	003f9906 	br	80618c <__alt_mem_onchip_mem+0xff7fe18c>
  806328:	2807883a 	mov	r3,r5
  80632c:	3023883a 	mov	r17,r6
  806330:	0401ffc4 	movi	r16,2047
  806334:	003df506 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  806338:	2807883a 	mov	r3,r5
  80633c:	3023883a 	mov	r17,r6
  806340:	003df206 	br	805b0c <__alt_mem_onchip_mem+0xff7fdb0c>
  806344:	123ff804 	addi	r8,r2,-32
  806348:	01000804 	movi	r4,32
  80634c:	1a10d83a 	srl	r8,r3,r8
  806350:	11000a26 	beq	r2,r4,80637c <__subdf3+0x8f4>
  806354:	01001004 	movi	r4,64
  806358:	2085c83a 	sub	r2,r4,r2
  80635c:	1884983a 	sll	r2,r3,r2
  806360:	1444b03a 	or	r2,r2,r17
  806364:	1004c03a 	cmpne	r2,r2,zero
  806368:	40a2b03a 	or	r17,r8,r2
  80636c:	0005883a 	mov	r2,zero
  806370:	003f8606 	br	80618c <__alt_mem_onchip_mem+0xff7fe18c>
  806374:	0005883a 	mov	r2,zero
  806378:	003fdc06 	br	8062ec <__alt_mem_onchip_mem+0xff7fe2ec>
  80637c:	0005883a 	mov	r2,zero
  806380:	003ff706 	br	806360 <__alt_mem_onchip_mem+0xff7fe360>

00806384 <__floatunsidf>:
  806384:	defffe04 	addi	sp,sp,-8
  806388:	dc000015 	stw	r16,0(sp)
  80638c:	dfc00115 	stw	ra,4(sp)
  806390:	2021883a 	mov	r16,r4
  806394:	20002226 	beq	r4,zero,806420 <__floatunsidf+0x9c>
  806398:	080642c0 	call	80642c <__clzsi2>
  80639c:	01010784 	movi	r4,1054
  8063a0:	2089c83a 	sub	r4,r4,r2
  8063a4:	01810cc4 	movi	r6,1075
  8063a8:	310dc83a 	sub	r6,r6,r4
  8063ac:	00c007c4 	movi	r3,31
  8063b0:	1980120e 	bge	r3,r6,8063fc <__floatunsidf+0x78>
  8063b4:	00c104c4 	movi	r3,1043
  8063b8:	1907c83a 	sub	r3,r3,r4
  8063bc:	80ca983a 	sll	r5,r16,r3
  8063c0:	00800434 	movhi	r2,16
  8063c4:	10bfffc4 	addi	r2,r2,-1
  8063c8:	2101ffcc 	andi	r4,r4,2047
  8063cc:	0021883a 	mov	r16,zero
  8063d0:	288a703a 	and	r5,r5,r2
  8063d4:	2008953a 	slli	r4,r4,20
  8063d8:	00c00434 	movhi	r3,16
  8063dc:	18ffffc4 	addi	r3,r3,-1
  8063e0:	28c6703a 	and	r3,r5,r3
  8063e4:	8005883a 	mov	r2,r16
  8063e8:	1906b03a 	or	r3,r3,r4
  8063ec:	dfc00117 	ldw	ra,4(sp)
  8063f0:	dc000017 	ldw	r16,0(sp)
  8063f4:	dec00204 	addi	sp,sp,8
  8063f8:	f800283a 	ret
  8063fc:	00c002c4 	movi	r3,11
  806400:	188bc83a 	sub	r5,r3,r2
  806404:	814ad83a 	srl	r5,r16,r5
  806408:	00c00434 	movhi	r3,16
  80640c:	18ffffc4 	addi	r3,r3,-1
  806410:	81a0983a 	sll	r16,r16,r6
  806414:	2101ffcc 	andi	r4,r4,2047
  806418:	28ca703a 	and	r5,r5,r3
  80641c:	003fed06 	br	8063d4 <__alt_mem_onchip_mem+0xff7fe3d4>
  806420:	0009883a 	mov	r4,zero
  806424:	000b883a 	mov	r5,zero
  806428:	003fea06 	br	8063d4 <__alt_mem_onchip_mem+0xff7fe3d4>

0080642c <__clzsi2>:
  80642c:	00bfffd4 	movui	r2,65535
  806430:	11000536 	bltu	r2,r4,806448 <__clzsi2+0x1c>
  806434:	00803fc4 	movi	r2,255
  806438:	11000f36 	bltu	r2,r4,806478 <__clzsi2+0x4c>
  80643c:	00800804 	movi	r2,32
  806440:	0007883a 	mov	r3,zero
  806444:	00000506 	br	80645c <__clzsi2+0x30>
  806448:	00804034 	movhi	r2,256
  80644c:	10bfffc4 	addi	r2,r2,-1
  806450:	11000c2e 	bgeu	r2,r4,806484 <__clzsi2+0x58>
  806454:	00800204 	movi	r2,8
  806458:	00c00604 	movi	r3,24
  80645c:	20c8d83a 	srl	r4,r4,r3
  806460:	00c02074 	movhi	r3,129
  806464:	18f71e44 	addi	r3,r3,-9095
  806468:	1909883a 	add	r4,r3,r4
  80646c:	20c00003 	ldbu	r3,0(r4)
  806470:	10c5c83a 	sub	r2,r2,r3
  806474:	f800283a 	ret
  806478:	00800604 	movi	r2,24
  80647c:	00c00204 	movi	r3,8
  806480:	003ff606 	br	80645c <__alt_mem_onchip_mem+0xff7fe45c>
  806484:	00800404 	movi	r2,16
  806488:	1007883a 	mov	r3,r2
  80648c:	003ff306 	br	80645c <__alt_mem_onchip_mem+0xff7fe45c>

00806490 <_fclose_r>:
  806490:	28003926 	beq	r5,zero,806578 <_fclose_r+0xe8>
  806494:	defffc04 	addi	sp,sp,-16
  806498:	dc400115 	stw	r17,4(sp)
  80649c:	dc000015 	stw	r16,0(sp)
  8064a0:	dfc00315 	stw	ra,12(sp)
  8064a4:	dc800215 	stw	r18,8(sp)
  8064a8:	2023883a 	mov	r17,r4
  8064ac:	2821883a 	mov	r16,r5
  8064b0:	20000226 	beq	r4,zero,8064bc <_fclose_r+0x2c>
  8064b4:	20800e17 	ldw	r2,56(r4)
  8064b8:	10002726 	beq	r2,zero,806558 <_fclose_r+0xc8>
  8064bc:	8080030f 	ldh	r2,12(r16)
  8064c0:	1000071e 	bne	r2,zero,8064e0 <_fclose_r+0x50>
  8064c4:	0005883a 	mov	r2,zero
  8064c8:	dfc00317 	ldw	ra,12(sp)
  8064cc:	dc800217 	ldw	r18,8(sp)
  8064d0:	dc400117 	ldw	r17,4(sp)
  8064d4:	dc000017 	ldw	r16,0(sp)
  8064d8:	dec00404 	addi	sp,sp,16
  8064dc:	f800283a 	ret
  8064e0:	800b883a 	mov	r5,r16
  8064e4:	8809883a 	mov	r4,r17
  8064e8:	08065940 	call	806594 <__sflush_r>
  8064ec:	1025883a 	mov	r18,r2
  8064f0:	80800b17 	ldw	r2,44(r16)
  8064f4:	10000426 	beq	r2,zero,806508 <_fclose_r+0x78>
  8064f8:	81400717 	ldw	r5,28(r16)
  8064fc:	8809883a 	mov	r4,r17
  806500:	103ee83a 	callr	r2
  806504:	10001616 	blt	r2,zero,806560 <_fclose_r+0xd0>
  806508:	8080030b 	ldhu	r2,12(r16)
  80650c:	1080200c 	andi	r2,r2,128
  806510:	1000151e 	bne	r2,zero,806568 <_fclose_r+0xd8>
  806514:	81400c17 	ldw	r5,48(r16)
  806518:	28000526 	beq	r5,zero,806530 <_fclose_r+0xa0>
  80651c:	80801004 	addi	r2,r16,64
  806520:	28800226 	beq	r5,r2,80652c <_fclose_r+0x9c>
  806524:	8809883a 	mov	r4,r17
  806528:	0806e0c0 	call	806e0c <_free_r>
  80652c:	80000c15 	stw	zero,48(r16)
  806530:	81401117 	ldw	r5,68(r16)
  806534:	28000326 	beq	r5,zero,806544 <_fclose_r+0xb4>
  806538:	8809883a 	mov	r4,r17
  80653c:	0806e0c0 	call	806e0c <_free_r>
  806540:	80001115 	stw	zero,68(r16)
  806544:	0806b9c0 	call	806b9c <__sfp_lock_acquire>
  806548:	8000030d 	sth	zero,12(r16)
  80654c:	0806ba00 	call	806ba0 <__sfp_lock_release>
  806550:	9005883a 	mov	r2,r18
  806554:	003fdc06 	br	8064c8 <__alt_mem_onchip_mem+0xff7fe4c8>
  806558:	0806b8c0 	call	806b8c <__sinit>
  80655c:	003fd706 	br	8064bc <__alt_mem_onchip_mem+0xff7fe4bc>
  806560:	04bfffc4 	movi	r18,-1
  806564:	003fe806 	br	806508 <__alt_mem_onchip_mem+0xff7fe508>
  806568:	81400417 	ldw	r5,16(r16)
  80656c:	8809883a 	mov	r4,r17
  806570:	0806e0c0 	call	806e0c <_free_r>
  806574:	003fe706 	br	806514 <__alt_mem_onchip_mem+0xff7fe514>
  806578:	0005883a 	mov	r2,zero
  80657c:	f800283a 	ret

00806580 <fclose>:
  806580:	00802074 	movhi	r2,129
  806584:	10bf1804 	addi	r2,r2,-928
  806588:	200b883a 	mov	r5,r4
  80658c:	11000017 	ldw	r4,0(r2)
  806590:	08064901 	jmpi	806490 <_fclose_r>

00806594 <__sflush_r>:
  806594:	2880030b 	ldhu	r2,12(r5)
  806598:	defffb04 	addi	sp,sp,-20
  80659c:	dcc00315 	stw	r19,12(sp)
  8065a0:	dc400115 	stw	r17,4(sp)
  8065a4:	dfc00415 	stw	ra,16(sp)
  8065a8:	dc800215 	stw	r18,8(sp)
  8065ac:	dc000015 	stw	r16,0(sp)
  8065b0:	10c0020c 	andi	r3,r2,8
  8065b4:	2823883a 	mov	r17,r5
  8065b8:	2027883a 	mov	r19,r4
  8065bc:	1800311e 	bne	r3,zero,806684 <__sflush_r+0xf0>
  8065c0:	28c00117 	ldw	r3,4(r5)
  8065c4:	10820014 	ori	r2,r2,2048
  8065c8:	2880030d 	sth	r2,12(r5)
  8065cc:	00c04b0e 	bge	zero,r3,8066fc <__sflush_r+0x168>
  8065d0:	8a000a17 	ldw	r8,40(r17)
  8065d4:	40002326 	beq	r8,zero,806664 <__sflush_r+0xd0>
  8065d8:	9c000017 	ldw	r16,0(r19)
  8065dc:	10c4000c 	andi	r3,r2,4096
  8065e0:	98000015 	stw	zero,0(r19)
  8065e4:	18004826 	beq	r3,zero,806708 <__sflush_r+0x174>
  8065e8:	89801417 	ldw	r6,80(r17)
  8065ec:	10c0010c 	andi	r3,r2,4
  8065f0:	18000626 	beq	r3,zero,80660c <__sflush_r+0x78>
  8065f4:	88c00117 	ldw	r3,4(r17)
  8065f8:	88800c17 	ldw	r2,48(r17)
  8065fc:	30cdc83a 	sub	r6,r6,r3
  806600:	10000226 	beq	r2,zero,80660c <__sflush_r+0x78>
  806604:	88800f17 	ldw	r2,60(r17)
  806608:	308dc83a 	sub	r6,r6,r2
  80660c:	89400717 	ldw	r5,28(r17)
  806610:	000f883a 	mov	r7,zero
  806614:	9809883a 	mov	r4,r19
  806618:	403ee83a 	callr	r8
  80661c:	00ffffc4 	movi	r3,-1
  806620:	10c04426 	beq	r2,r3,806734 <__sflush_r+0x1a0>
  806624:	88c0030b 	ldhu	r3,12(r17)
  806628:	89000417 	ldw	r4,16(r17)
  80662c:	88000115 	stw	zero,4(r17)
  806630:	197dffcc 	andi	r5,r3,63487
  806634:	8940030d 	sth	r5,12(r17)
  806638:	89000015 	stw	r4,0(r17)
  80663c:	18c4000c 	andi	r3,r3,4096
  806640:	18002c1e 	bne	r3,zero,8066f4 <__sflush_r+0x160>
  806644:	89400c17 	ldw	r5,48(r17)
  806648:	9c000015 	stw	r16,0(r19)
  80664c:	28000526 	beq	r5,zero,806664 <__sflush_r+0xd0>
  806650:	88801004 	addi	r2,r17,64
  806654:	28800226 	beq	r5,r2,806660 <__sflush_r+0xcc>
  806658:	9809883a 	mov	r4,r19
  80665c:	0806e0c0 	call	806e0c <_free_r>
  806660:	88000c15 	stw	zero,48(r17)
  806664:	0005883a 	mov	r2,zero
  806668:	dfc00417 	ldw	ra,16(sp)
  80666c:	dcc00317 	ldw	r19,12(sp)
  806670:	dc800217 	ldw	r18,8(sp)
  806674:	dc400117 	ldw	r17,4(sp)
  806678:	dc000017 	ldw	r16,0(sp)
  80667c:	dec00504 	addi	sp,sp,20
  806680:	f800283a 	ret
  806684:	2c800417 	ldw	r18,16(r5)
  806688:	903ff626 	beq	r18,zero,806664 <__alt_mem_onchip_mem+0xff7fe664>
  80668c:	2c000017 	ldw	r16,0(r5)
  806690:	108000cc 	andi	r2,r2,3
  806694:	2c800015 	stw	r18,0(r5)
  806698:	84a1c83a 	sub	r16,r16,r18
  80669c:	1000131e 	bne	r2,zero,8066ec <__sflush_r+0x158>
  8066a0:	28800517 	ldw	r2,20(r5)
  8066a4:	88800215 	stw	r2,8(r17)
  8066a8:	04000316 	blt	zero,r16,8066b8 <__sflush_r+0x124>
  8066ac:	003fed06 	br	806664 <__alt_mem_onchip_mem+0xff7fe664>
  8066b0:	90a5883a 	add	r18,r18,r2
  8066b4:	043feb0e 	bge	zero,r16,806664 <__alt_mem_onchip_mem+0xff7fe664>
  8066b8:	88800917 	ldw	r2,36(r17)
  8066bc:	89400717 	ldw	r5,28(r17)
  8066c0:	800f883a 	mov	r7,r16
  8066c4:	900d883a 	mov	r6,r18
  8066c8:	9809883a 	mov	r4,r19
  8066cc:	103ee83a 	callr	r2
  8066d0:	80a1c83a 	sub	r16,r16,r2
  8066d4:	00bff616 	blt	zero,r2,8066b0 <__alt_mem_onchip_mem+0xff7fe6b0>
  8066d8:	88c0030b 	ldhu	r3,12(r17)
  8066dc:	00bfffc4 	movi	r2,-1
  8066e0:	18c01014 	ori	r3,r3,64
  8066e4:	88c0030d 	sth	r3,12(r17)
  8066e8:	003fdf06 	br	806668 <__alt_mem_onchip_mem+0xff7fe668>
  8066ec:	0005883a 	mov	r2,zero
  8066f0:	003fec06 	br	8066a4 <__alt_mem_onchip_mem+0xff7fe6a4>
  8066f4:	88801415 	stw	r2,80(r17)
  8066f8:	003fd206 	br	806644 <__alt_mem_onchip_mem+0xff7fe644>
  8066fc:	28c00f17 	ldw	r3,60(r5)
  806700:	00ffb316 	blt	zero,r3,8065d0 <__alt_mem_onchip_mem+0xff7fe5d0>
  806704:	003fd706 	br	806664 <__alt_mem_onchip_mem+0xff7fe664>
  806708:	89400717 	ldw	r5,28(r17)
  80670c:	000d883a 	mov	r6,zero
  806710:	01c00044 	movi	r7,1
  806714:	9809883a 	mov	r4,r19
  806718:	403ee83a 	callr	r8
  80671c:	100d883a 	mov	r6,r2
  806720:	00bfffc4 	movi	r2,-1
  806724:	30801426 	beq	r6,r2,806778 <__sflush_r+0x1e4>
  806728:	8880030b 	ldhu	r2,12(r17)
  80672c:	8a000a17 	ldw	r8,40(r17)
  806730:	003fae06 	br	8065ec <__alt_mem_onchip_mem+0xff7fe5ec>
  806734:	98c00017 	ldw	r3,0(r19)
  806738:	183fba26 	beq	r3,zero,806624 <__alt_mem_onchip_mem+0xff7fe624>
  80673c:	01000744 	movi	r4,29
  806740:	19000626 	beq	r3,r4,80675c <__sflush_r+0x1c8>
  806744:	01000584 	movi	r4,22
  806748:	19000426 	beq	r3,r4,80675c <__sflush_r+0x1c8>
  80674c:	88c0030b 	ldhu	r3,12(r17)
  806750:	18c01014 	ori	r3,r3,64
  806754:	88c0030d 	sth	r3,12(r17)
  806758:	003fc306 	br	806668 <__alt_mem_onchip_mem+0xff7fe668>
  80675c:	8880030b 	ldhu	r2,12(r17)
  806760:	88c00417 	ldw	r3,16(r17)
  806764:	88000115 	stw	zero,4(r17)
  806768:	10bdffcc 	andi	r2,r2,63487
  80676c:	8880030d 	sth	r2,12(r17)
  806770:	88c00015 	stw	r3,0(r17)
  806774:	003fb306 	br	806644 <__alt_mem_onchip_mem+0xff7fe644>
  806778:	98800017 	ldw	r2,0(r19)
  80677c:	103fea26 	beq	r2,zero,806728 <__alt_mem_onchip_mem+0xff7fe728>
  806780:	00c00744 	movi	r3,29
  806784:	10c00226 	beq	r2,r3,806790 <__sflush_r+0x1fc>
  806788:	00c00584 	movi	r3,22
  80678c:	10c0031e 	bne	r2,r3,80679c <__sflush_r+0x208>
  806790:	9c000015 	stw	r16,0(r19)
  806794:	0005883a 	mov	r2,zero
  806798:	003fb306 	br	806668 <__alt_mem_onchip_mem+0xff7fe668>
  80679c:	88c0030b 	ldhu	r3,12(r17)
  8067a0:	3005883a 	mov	r2,r6
  8067a4:	18c01014 	ori	r3,r3,64
  8067a8:	88c0030d 	sth	r3,12(r17)
  8067ac:	003fae06 	br	806668 <__alt_mem_onchip_mem+0xff7fe668>

008067b0 <_fflush_r>:
  8067b0:	defffd04 	addi	sp,sp,-12
  8067b4:	dc000115 	stw	r16,4(sp)
  8067b8:	dfc00215 	stw	ra,8(sp)
  8067bc:	2021883a 	mov	r16,r4
  8067c0:	20000226 	beq	r4,zero,8067cc <_fflush_r+0x1c>
  8067c4:	20800e17 	ldw	r2,56(r4)
  8067c8:	10000c26 	beq	r2,zero,8067fc <_fflush_r+0x4c>
  8067cc:	2880030f 	ldh	r2,12(r5)
  8067d0:	1000051e 	bne	r2,zero,8067e8 <_fflush_r+0x38>
  8067d4:	0005883a 	mov	r2,zero
  8067d8:	dfc00217 	ldw	ra,8(sp)
  8067dc:	dc000117 	ldw	r16,4(sp)
  8067e0:	dec00304 	addi	sp,sp,12
  8067e4:	f800283a 	ret
  8067e8:	8009883a 	mov	r4,r16
  8067ec:	dfc00217 	ldw	ra,8(sp)
  8067f0:	dc000117 	ldw	r16,4(sp)
  8067f4:	dec00304 	addi	sp,sp,12
  8067f8:	08065941 	jmpi	806594 <__sflush_r>
  8067fc:	d9400015 	stw	r5,0(sp)
  806800:	0806b8c0 	call	806b8c <__sinit>
  806804:	d9400017 	ldw	r5,0(sp)
  806808:	003ff006 	br	8067cc <__alt_mem_onchip_mem+0xff7fe7cc>

0080680c <fflush>:
  80680c:	20000526 	beq	r4,zero,806824 <fflush+0x18>
  806810:	00802074 	movhi	r2,129
  806814:	10bf1804 	addi	r2,r2,-928
  806818:	200b883a 	mov	r5,r4
  80681c:	11000017 	ldw	r4,0(r2)
  806820:	08067b01 	jmpi	8067b0 <_fflush_r>
  806824:	00802074 	movhi	r2,129
  806828:	10bf1704 	addi	r2,r2,-932
  80682c:	11000017 	ldw	r4,0(r2)
  806830:	01402034 	movhi	r5,128
  806834:	2959ec04 	addi	r5,r5,26544
  806838:	08076bc1 	jmpi	8076bc <_fwalk_reent>

0080683c <__fp_unlock>:
  80683c:	0005883a 	mov	r2,zero
  806840:	f800283a 	ret

00806844 <_cleanup_r>:
  806844:	01402034 	movhi	r5,128
  806848:	29592404 	addi	r5,r5,25744
  80684c:	08076bc1 	jmpi	8076bc <_fwalk_reent>

00806850 <__sinit.part.1>:
  806850:	defff704 	addi	sp,sp,-36
  806854:	00c02034 	movhi	r3,128
  806858:	dfc00815 	stw	ra,32(sp)
  80685c:	ddc00715 	stw	r23,28(sp)
  806860:	dd800615 	stw	r22,24(sp)
  806864:	dd400515 	stw	r21,20(sp)
  806868:	dd000415 	stw	r20,16(sp)
  80686c:	dcc00315 	stw	r19,12(sp)
  806870:	dc800215 	stw	r18,8(sp)
  806874:	dc400115 	stw	r17,4(sp)
  806878:	dc000015 	stw	r16,0(sp)
  80687c:	18da1104 	addi	r3,r3,26692
  806880:	24000117 	ldw	r16,4(r4)
  806884:	20c00f15 	stw	r3,60(r4)
  806888:	2080bb04 	addi	r2,r4,748
  80688c:	00c000c4 	movi	r3,3
  806890:	20c0b915 	stw	r3,740(r4)
  806894:	2080ba15 	stw	r2,744(r4)
  806898:	2000b815 	stw	zero,736(r4)
  80689c:	05c00204 	movi	r23,8
  8068a0:	00800104 	movi	r2,4
  8068a4:	2025883a 	mov	r18,r4
  8068a8:	b80d883a 	mov	r6,r23
  8068ac:	81001704 	addi	r4,r16,92
  8068b0:	000b883a 	mov	r5,zero
  8068b4:	80000015 	stw	zero,0(r16)
  8068b8:	80000115 	stw	zero,4(r16)
  8068bc:	80000215 	stw	zero,8(r16)
  8068c0:	8080030d 	sth	r2,12(r16)
  8068c4:	80001915 	stw	zero,100(r16)
  8068c8:	8000038d 	sth	zero,14(r16)
  8068cc:	80000415 	stw	zero,16(r16)
  8068d0:	80000515 	stw	zero,20(r16)
  8068d4:	80000615 	stw	zero,24(r16)
  8068d8:	08082480 	call	808248 <memset>
  8068dc:	05802074 	movhi	r22,129
  8068e0:	94400217 	ldw	r17,8(r18)
  8068e4:	05402074 	movhi	r21,129
  8068e8:	05002074 	movhi	r20,129
  8068ec:	04c02074 	movhi	r19,129
  8068f0:	b5a18504 	addi	r22,r22,-31212
  8068f4:	ad619c04 	addi	r21,r21,-31120
  8068f8:	a521bb04 	addi	r20,r20,-30996
  8068fc:	9ce1d204 	addi	r19,r19,-30904
  806900:	85800815 	stw	r22,32(r16)
  806904:	85400915 	stw	r21,36(r16)
  806908:	85000a15 	stw	r20,40(r16)
  80690c:	84c00b15 	stw	r19,44(r16)
  806910:	84000715 	stw	r16,28(r16)
  806914:	00800284 	movi	r2,10
  806918:	8880030d 	sth	r2,12(r17)
  80691c:	00800044 	movi	r2,1
  806920:	b80d883a 	mov	r6,r23
  806924:	89001704 	addi	r4,r17,92
  806928:	000b883a 	mov	r5,zero
  80692c:	88000015 	stw	zero,0(r17)
  806930:	88000115 	stw	zero,4(r17)
  806934:	88000215 	stw	zero,8(r17)
  806938:	88001915 	stw	zero,100(r17)
  80693c:	8880038d 	sth	r2,14(r17)
  806940:	88000415 	stw	zero,16(r17)
  806944:	88000515 	stw	zero,20(r17)
  806948:	88000615 	stw	zero,24(r17)
  80694c:	08082480 	call	808248 <memset>
  806950:	94000317 	ldw	r16,12(r18)
  806954:	00800484 	movi	r2,18
  806958:	8c400715 	stw	r17,28(r17)
  80695c:	8d800815 	stw	r22,32(r17)
  806960:	8d400915 	stw	r21,36(r17)
  806964:	8d000a15 	stw	r20,40(r17)
  806968:	8cc00b15 	stw	r19,44(r17)
  80696c:	8080030d 	sth	r2,12(r16)
  806970:	00800084 	movi	r2,2
  806974:	80000015 	stw	zero,0(r16)
  806978:	80000115 	stw	zero,4(r16)
  80697c:	80000215 	stw	zero,8(r16)
  806980:	80001915 	stw	zero,100(r16)
  806984:	8080038d 	sth	r2,14(r16)
  806988:	80000415 	stw	zero,16(r16)
  80698c:	80000515 	stw	zero,20(r16)
  806990:	80000615 	stw	zero,24(r16)
  806994:	b80d883a 	mov	r6,r23
  806998:	000b883a 	mov	r5,zero
  80699c:	81001704 	addi	r4,r16,92
  8069a0:	08082480 	call	808248 <memset>
  8069a4:	00800044 	movi	r2,1
  8069a8:	84000715 	stw	r16,28(r16)
  8069ac:	85800815 	stw	r22,32(r16)
  8069b0:	85400915 	stw	r21,36(r16)
  8069b4:	85000a15 	stw	r20,40(r16)
  8069b8:	84c00b15 	stw	r19,44(r16)
  8069bc:	90800e15 	stw	r2,56(r18)
  8069c0:	dfc00817 	ldw	ra,32(sp)
  8069c4:	ddc00717 	ldw	r23,28(sp)
  8069c8:	dd800617 	ldw	r22,24(sp)
  8069cc:	dd400517 	ldw	r21,20(sp)
  8069d0:	dd000417 	ldw	r20,16(sp)
  8069d4:	dcc00317 	ldw	r19,12(sp)
  8069d8:	dc800217 	ldw	r18,8(sp)
  8069dc:	dc400117 	ldw	r17,4(sp)
  8069e0:	dc000017 	ldw	r16,0(sp)
  8069e4:	dec00904 	addi	sp,sp,36
  8069e8:	f800283a 	ret

008069ec <__fp_lock>:
  8069ec:	0005883a 	mov	r2,zero
  8069f0:	f800283a 	ret

008069f4 <__sfmoreglue>:
  8069f4:	defffc04 	addi	sp,sp,-16
  8069f8:	dc400115 	stw	r17,4(sp)
  8069fc:	2c7fffc4 	addi	r17,r5,-1
  806a00:	8c401a24 	muli	r17,r17,104
  806a04:	dc800215 	stw	r18,8(sp)
  806a08:	2825883a 	mov	r18,r5
  806a0c:	89401d04 	addi	r5,r17,116
  806a10:	dc000015 	stw	r16,0(sp)
  806a14:	dfc00315 	stw	ra,12(sp)
  806a18:	0807a3c0 	call	807a3c <_malloc_r>
  806a1c:	1021883a 	mov	r16,r2
  806a20:	10000726 	beq	r2,zero,806a40 <__sfmoreglue+0x4c>
  806a24:	11000304 	addi	r4,r2,12
  806a28:	10000015 	stw	zero,0(r2)
  806a2c:	14800115 	stw	r18,4(r2)
  806a30:	11000215 	stw	r4,8(r2)
  806a34:	89801a04 	addi	r6,r17,104
  806a38:	000b883a 	mov	r5,zero
  806a3c:	08082480 	call	808248 <memset>
  806a40:	8005883a 	mov	r2,r16
  806a44:	dfc00317 	ldw	ra,12(sp)
  806a48:	dc800217 	ldw	r18,8(sp)
  806a4c:	dc400117 	ldw	r17,4(sp)
  806a50:	dc000017 	ldw	r16,0(sp)
  806a54:	dec00404 	addi	sp,sp,16
  806a58:	f800283a 	ret

00806a5c <__sfp>:
  806a5c:	defffb04 	addi	sp,sp,-20
  806a60:	dc000015 	stw	r16,0(sp)
  806a64:	04002074 	movhi	r16,129
  806a68:	843f1704 	addi	r16,r16,-932
  806a6c:	dcc00315 	stw	r19,12(sp)
  806a70:	2027883a 	mov	r19,r4
  806a74:	81000017 	ldw	r4,0(r16)
  806a78:	dfc00415 	stw	ra,16(sp)
  806a7c:	dc800215 	stw	r18,8(sp)
  806a80:	20800e17 	ldw	r2,56(r4)
  806a84:	dc400115 	stw	r17,4(sp)
  806a88:	1000021e 	bne	r2,zero,806a94 <__sfp+0x38>
  806a8c:	08068500 	call	806850 <__sinit.part.1>
  806a90:	81000017 	ldw	r4,0(r16)
  806a94:	2480b804 	addi	r18,r4,736
  806a98:	047fffc4 	movi	r17,-1
  806a9c:	91000117 	ldw	r4,4(r18)
  806aa0:	94000217 	ldw	r16,8(r18)
  806aa4:	213fffc4 	addi	r4,r4,-1
  806aa8:	20000a16 	blt	r4,zero,806ad4 <__sfp+0x78>
  806aac:	8080030f 	ldh	r2,12(r16)
  806ab0:	10000c26 	beq	r2,zero,806ae4 <__sfp+0x88>
  806ab4:	80c01d04 	addi	r3,r16,116
  806ab8:	00000206 	br	806ac4 <__sfp+0x68>
  806abc:	18bfe60f 	ldh	r2,-104(r3)
  806ac0:	10000826 	beq	r2,zero,806ae4 <__sfp+0x88>
  806ac4:	213fffc4 	addi	r4,r4,-1
  806ac8:	1c3ffd04 	addi	r16,r3,-12
  806acc:	18c01a04 	addi	r3,r3,104
  806ad0:	247ffa1e 	bne	r4,r17,806abc <__alt_mem_onchip_mem+0xff7feabc>
  806ad4:	90800017 	ldw	r2,0(r18)
  806ad8:	10001d26 	beq	r2,zero,806b50 <__sfp+0xf4>
  806adc:	1025883a 	mov	r18,r2
  806ae0:	003fee06 	br	806a9c <__alt_mem_onchip_mem+0xff7fea9c>
  806ae4:	00bfffc4 	movi	r2,-1
  806ae8:	8080038d 	sth	r2,14(r16)
  806aec:	00800044 	movi	r2,1
  806af0:	8080030d 	sth	r2,12(r16)
  806af4:	80001915 	stw	zero,100(r16)
  806af8:	80000015 	stw	zero,0(r16)
  806afc:	80000215 	stw	zero,8(r16)
  806b00:	80000115 	stw	zero,4(r16)
  806b04:	80000415 	stw	zero,16(r16)
  806b08:	80000515 	stw	zero,20(r16)
  806b0c:	80000615 	stw	zero,24(r16)
  806b10:	01800204 	movi	r6,8
  806b14:	000b883a 	mov	r5,zero
  806b18:	81001704 	addi	r4,r16,92
  806b1c:	08082480 	call	808248 <memset>
  806b20:	8005883a 	mov	r2,r16
  806b24:	80000c15 	stw	zero,48(r16)
  806b28:	80000d15 	stw	zero,52(r16)
  806b2c:	80001115 	stw	zero,68(r16)
  806b30:	80001215 	stw	zero,72(r16)
  806b34:	dfc00417 	ldw	ra,16(sp)
  806b38:	dcc00317 	ldw	r19,12(sp)
  806b3c:	dc800217 	ldw	r18,8(sp)
  806b40:	dc400117 	ldw	r17,4(sp)
  806b44:	dc000017 	ldw	r16,0(sp)
  806b48:	dec00504 	addi	sp,sp,20
  806b4c:	f800283a 	ret
  806b50:	01400104 	movi	r5,4
  806b54:	9809883a 	mov	r4,r19
  806b58:	08069f40 	call	8069f4 <__sfmoreglue>
  806b5c:	90800015 	stw	r2,0(r18)
  806b60:	103fde1e 	bne	r2,zero,806adc <__alt_mem_onchip_mem+0xff7feadc>
  806b64:	00800304 	movi	r2,12
  806b68:	98800015 	stw	r2,0(r19)
  806b6c:	0005883a 	mov	r2,zero
  806b70:	003ff006 	br	806b34 <__alt_mem_onchip_mem+0xff7feb34>

00806b74 <_cleanup>:
  806b74:	00802074 	movhi	r2,129
  806b78:	10bf1704 	addi	r2,r2,-932
  806b7c:	11000017 	ldw	r4,0(r2)
  806b80:	01402034 	movhi	r5,128
  806b84:	29592404 	addi	r5,r5,25744
  806b88:	08076bc1 	jmpi	8076bc <_fwalk_reent>

00806b8c <__sinit>:
  806b8c:	20800e17 	ldw	r2,56(r4)
  806b90:	10000126 	beq	r2,zero,806b98 <__sinit+0xc>
  806b94:	f800283a 	ret
  806b98:	08068501 	jmpi	806850 <__sinit.part.1>

00806b9c <__sfp_lock_acquire>:
  806b9c:	f800283a 	ret

00806ba0 <__sfp_lock_release>:
  806ba0:	f800283a 	ret

00806ba4 <__sinit_lock_acquire>:
  806ba4:	f800283a 	ret

00806ba8 <__sinit_lock_release>:
  806ba8:	f800283a 	ret

00806bac <__fp_lock_all>:
  806bac:	00802074 	movhi	r2,129
  806bb0:	10bf1804 	addi	r2,r2,-928
  806bb4:	11000017 	ldw	r4,0(r2)
  806bb8:	01402034 	movhi	r5,128
  806bbc:	295a7b04 	addi	r5,r5,27116
  806bc0:	08075f81 	jmpi	8075f8 <_fwalk>

00806bc4 <__fp_unlock_all>:
  806bc4:	00802074 	movhi	r2,129
  806bc8:	10bf1804 	addi	r2,r2,-928
  806bcc:	11000017 	ldw	r4,0(r2)
  806bd0:	01402034 	movhi	r5,128
  806bd4:	295a0f04 	addi	r5,r5,26684
  806bd8:	08075f81 	jmpi	8075f8 <_fwalk>

00806bdc <_fopen_r>:
  806bdc:	defffa04 	addi	sp,sp,-24
  806be0:	3005883a 	mov	r2,r6
  806be4:	dcc00415 	stw	r19,16(sp)
  806be8:	d80d883a 	mov	r6,sp
  806bec:	2827883a 	mov	r19,r5
  806bf0:	100b883a 	mov	r5,r2
  806bf4:	dc800315 	stw	r18,12(sp)
  806bf8:	dfc00515 	stw	ra,20(sp)
  806bfc:	dc400215 	stw	r17,8(sp)
  806c00:	dc000115 	stw	r16,4(sp)
  806c04:	2025883a 	mov	r18,r4
  806c08:	08088040 	call	808804 <__sflags>
  806c0c:	10002726 	beq	r2,zero,806cac <_fopen_r+0xd0>
  806c10:	9009883a 	mov	r4,r18
  806c14:	1023883a 	mov	r17,r2
  806c18:	0806a5c0 	call	806a5c <__sfp>
  806c1c:	1021883a 	mov	r16,r2
  806c20:	10002226 	beq	r2,zero,806cac <_fopen_r+0xd0>
  806c24:	d9800017 	ldw	r6,0(sp)
  806c28:	01c06d84 	movi	r7,438
  806c2c:	980b883a 	mov	r5,r19
  806c30:	9009883a 	mov	r4,r18
  806c34:	08083700 	call	808370 <_open_r>
  806c38:	10001916 	blt	r2,zero,806ca0 <_fopen_r+0xc4>
  806c3c:	8080038d 	sth	r2,14(r16)
  806c40:	00802074 	movhi	r2,129
  806c44:	10a18504 	addi	r2,r2,-31212
  806c48:	80800815 	stw	r2,32(r16)
  806c4c:	00802074 	movhi	r2,129
  806c50:	10a19c04 	addi	r2,r2,-31120
  806c54:	80800915 	stw	r2,36(r16)
  806c58:	00802074 	movhi	r2,129
  806c5c:	10a1bb04 	addi	r2,r2,-30996
  806c60:	80800a15 	stw	r2,40(r16)
  806c64:	00802074 	movhi	r2,129
  806c68:	10a1d204 	addi	r2,r2,-30904
  806c6c:	8440030d 	sth	r17,12(r16)
  806c70:	84000715 	stw	r16,28(r16)
  806c74:	80800b15 	stw	r2,44(r16)
  806c78:	8c40400c 	andi	r17,r17,256
  806c7c:	88000d1e 	bne	r17,zero,806cb4 <_fopen_r+0xd8>
  806c80:	8005883a 	mov	r2,r16
  806c84:	dfc00517 	ldw	ra,20(sp)
  806c88:	dcc00417 	ldw	r19,16(sp)
  806c8c:	dc800317 	ldw	r18,12(sp)
  806c90:	dc400217 	ldw	r17,8(sp)
  806c94:	dc000117 	ldw	r16,4(sp)
  806c98:	dec00604 	addi	sp,sp,24
  806c9c:	f800283a 	ret
  806ca0:	0806b9c0 	call	806b9c <__sfp_lock_acquire>
  806ca4:	8000030d 	sth	zero,12(r16)
  806ca8:	0806ba00 	call	806ba0 <__sfp_lock_release>
  806cac:	0005883a 	mov	r2,zero
  806cb0:	003ff406 	br	806c84 <__alt_mem_onchip_mem+0xff7fec84>
  806cb4:	01c00084 	movi	r7,2
  806cb8:	000d883a 	mov	r6,zero
  806cbc:	800b883a 	mov	r5,r16
  806cc0:	9009883a 	mov	r4,r18
  806cc4:	080711c0 	call	80711c <_fseek_r>
  806cc8:	8005883a 	mov	r2,r16
  806ccc:	003fed06 	br	806c84 <__alt_mem_onchip_mem+0xff7fec84>

00806cd0 <fopen>:
  806cd0:	00802074 	movhi	r2,129
  806cd4:	10bf1804 	addi	r2,r2,-928
  806cd8:	280d883a 	mov	r6,r5
  806cdc:	200b883a 	mov	r5,r4
  806ce0:	11000017 	ldw	r4,0(r2)
  806ce4:	0806bdc1 	jmpi	806bdc <_fopen_r>

00806ce8 <_malloc_trim_r>:
  806ce8:	defffb04 	addi	sp,sp,-20
  806cec:	dcc00315 	stw	r19,12(sp)
  806cf0:	04c02074 	movhi	r19,129
  806cf4:	dc800215 	stw	r18,8(sp)
  806cf8:	dc400115 	stw	r17,4(sp)
  806cfc:	dc000015 	stw	r16,0(sp)
  806d00:	dfc00415 	stw	ra,16(sp)
  806d04:	2821883a 	mov	r16,r5
  806d08:	9cf91a04 	addi	r19,r19,-7064
  806d0c:	2025883a 	mov	r18,r4
  806d10:	080a11c0 	call	80a11c <__malloc_lock>
  806d14:	98800217 	ldw	r2,8(r19)
  806d18:	14400117 	ldw	r17,4(r2)
  806d1c:	00bfff04 	movi	r2,-4
  806d20:	88a2703a 	and	r17,r17,r2
  806d24:	8c21c83a 	sub	r16,r17,r16
  806d28:	8403fbc4 	addi	r16,r16,4079
  806d2c:	8020d33a 	srli	r16,r16,12
  806d30:	0083ffc4 	movi	r2,4095
  806d34:	843fffc4 	addi	r16,r16,-1
  806d38:	8020933a 	slli	r16,r16,12
  806d3c:	1400060e 	bge	r2,r16,806d58 <_malloc_trim_r+0x70>
  806d40:	000b883a 	mov	r5,zero
  806d44:	9009883a 	mov	r4,r18
  806d48:	08085c00 	call	8085c0 <_sbrk_r>
  806d4c:	98c00217 	ldw	r3,8(r19)
  806d50:	1c47883a 	add	r3,r3,r17
  806d54:	10c00a26 	beq	r2,r3,806d80 <_malloc_trim_r+0x98>
  806d58:	9009883a 	mov	r4,r18
  806d5c:	080a1400 	call	80a140 <__malloc_unlock>
  806d60:	0005883a 	mov	r2,zero
  806d64:	dfc00417 	ldw	ra,16(sp)
  806d68:	dcc00317 	ldw	r19,12(sp)
  806d6c:	dc800217 	ldw	r18,8(sp)
  806d70:	dc400117 	ldw	r17,4(sp)
  806d74:	dc000017 	ldw	r16,0(sp)
  806d78:	dec00504 	addi	sp,sp,20
  806d7c:	f800283a 	ret
  806d80:	040bc83a 	sub	r5,zero,r16
  806d84:	9009883a 	mov	r4,r18
  806d88:	08085c00 	call	8085c0 <_sbrk_r>
  806d8c:	00ffffc4 	movi	r3,-1
  806d90:	10c00d26 	beq	r2,r3,806dc8 <_malloc_trim_r+0xe0>
  806d94:	00c02074 	movhi	r3,129
  806d98:	18c64904 	addi	r3,r3,6436
  806d9c:	18800017 	ldw	r2,0(r3)
  806da0:	99000217 	ldw	r4,8(r19)
  806da4:	8c23c83a 	sub	r17,r17,r16
  806da8:	8c400054 	ori	r17,r17,1
  806dac:	1421c83a 	sub	r16,r2,r16
  806db0:	24400115 	stw	r17,4(r4)
  806db4:	9009883a 	mov	r4,r18
  806db8:	1c000015 	stw	r16,0(r3)
  806dbc:	080a1400 	call	80a140 <__malloc_unlock>
  806dc0:	00800044 	movi	r2,1
  806dc4:	003fe706 	br	806d64 <__alt_mem_onchip_mem+0xff7fed64>
  806dc8:	000b883a 	mov	r5,zero
  806dcc:	9009883a 	mov	r4,r18
  806dd0:	08085c00 	call	8085c0 <_sbrk_r>
  806dd4:	99000217 	ldw	r4,8(r19)
  806dd8:	014003c4 	movi	r5,15
  806ddc:	1107c83a 	sub	r3,r2,r4
  806de0:	28ffdd0e 	bge	r5,r3,806d58 <__alt_mem_onchip_mem+0xff7fed58>
  806de4:	01402074 	movhi	r5,129
  806de8:	297f1904 	addi	r5,r5,-924
  806dec:	29400017 	ldw	r5,0(r5)
  806df0:	18c00054 	ori	r3,r3,1
  806df4:	20c00115 	stw	r3,4(r4)
  806df8:	00c02074 	movhi	r3,129
  806dfc:	1145c83a 	sub	r2,r2,r5
  806e00:	18c64904 	addi	r3,r3,6436
  806e04:	18800015 	stw	r2,0(r3)
  806e08:	003fd306 	br	806d58 <__alt_mem_onchip_mem+0xff7fed58>

00806e0c <_free_r>:
  806e0c:	28004126 	beq	r5,zero,806f14 <_free_r+0x108>
  806e10:	defffd04 	addi	sp,sp,-12
  806e14:	dc400115 	stw	r17,4(sp)
  806e18:	dc000015 	stw	r16,0(sp)
  806e1c:	2023883a 	mov	r17,r4
  806e20:	2821883a 	mov	r16,r5
  806e24:	dfc00215 	stw	ra,8(sp)
  806e28:	080a11c0 	call	80a11c <__malloc_lock>
  806e2c:	81ffff17 	ldw	r7,-4(r16)
  806e30:	00bfff84 	movi	r2,-2
  806e34:	01002074 	movhi	r4,129
  806e38:	81bffe04 	addi	r6,r16,-8
  806e3c:	3884703a 	and	r2,r7,r2
  806e40:	21391a04 	addi	r4,r4,-7064
  806e44:	308b883a 	add	r5,r6,r2
  806e48:	2a400117 	ldw	r9,4(r5)
  806e4c:	22000217 	ldw	r8,8(r4)
  806e50:	00ffff04 	movi	r3,-4
  806e54:	48c6703a 	and	r3,r9,r3
  806e58:	2a005726 	beq	r5,r8,806fb8 <_free_r+0x1ac>
  806e5c:	28c00115 	stw	r3,4(r5)
  806e60:	39c0004c 	andi	r7,r7,1
  806e64:	3800091e 	bne	r7,zero,806e8c <_free_r+0x80>
  806e68:	823ffe17 	ldw	r8,-8(r16)
  806e6c:	22400204 	addi	r9,r4,8
  806e70:	320dc83a 	sub	r6,r6,r8
  806e74:	31c00217 	ldw	r7,8(r6)
  806e78:	1205883a 	add	r2,r2,r8
  806e7c:	3a406526 	beq	r7,r9,807014 <_free_r+0x208>
  806e80:	32000317 	ldw	r8,12(r6)
  806e84:	3a000315 	stw	r8,12(r7)
  806e88:	41c00215 	stw	r7,8(r8)
  806e8c:	28cf883a 	add	r7,r5,r3
  806e90:	39c00117 	ldw	r7,4(r7)
  806e94:	39c0004c 	andi	r7,r7,1
  806e98:	38003a26 	beq	r7,zero,806f84 <_free_r+0x178>
  806e9c:	10c00054 	ori	r3,r2,1
  806ea0:	30c00115 	stw	r3,4(r6)
  806ea4:	3087883a 	add	r3,r6,r2
  806ea8:	18800015 	stw	r2,0(r3)
  806eac:	00c07fc4 	movi	r3,511
  806eb0:	18801936 	bltu	r3,r2,806f18 <_free_r+0x10c>
  806eb4:	1004d0fa 	srli	r2,r2,3
  806eb8:	01c00044 	movi	r7,1
  806ebc:	21400117 	ldw	r5,4(r4)
  806ec0:	10c00044 	addi	r3,r2,1
  806ec4:	18c7883a 	add	r3,r3,r3
  806ec8:	1005d0ba 	srai	r2,r2,2
  806ecc:	18c7883a 	add	r3,r3,r3
  806ed0:	18c7883a 	add	r3,r3,r3
  806ed4:	1907883a 	add	r3,r3,r4
  806ed8:	3884983a 	sll	r2,r7,r2
  806edc:	19c00017 	ldw	r7,0(r3)
  806ee0:	1a3ffe04 	addi	r8,r3,-8
  806ee4:	1144b03a 	or	r2,r2,r5
  806ee8:	32000315 	stw	r8,12(r6)
  806eec:	31c00215 	stw	r7,8(r6)
  806ef0:	20800115 	stw	r2,4(r4)
  806ef4:	19800015 	stw	r6,0(r3)
  806ef8:	39800315 	stw	r6,12(r7)
  806efc:	8809883a 	mov	r4,r17
  806f00:	dfc00217 	ldw	ra,8(sp)
  806f04:	dc400117 	ldw	r17,4(sp)
  806f08:	dc000017 	ldw	r16,0(sp)
  806f0c:	dec00304 	addi	sp,sp,12
  806f10:	080a1401 	jmpi	80a140 <__malloc_unlock>
  806f14:	f800283a 	ret
  806f18:	100ad27a 	srli	r5,r2,9
  806f1c:	00c00104 	movi	r3,4
  806f20:	19404a36 	bltu	r3,r5,80704c <_free_r+0x240>
  806f24:	100ad1ba 	srli	r5,r2,6
  806f28:	28c00e44 	addi	r3,r5,57
  806f2c:	18c7883a 	add	r3,r3,r3
  806f30:	29400e04 	addi	r5,r5,56
  806f34:	18c7883a 	add	r3,r3,r3
  806f38:	18c7883a 	add	r3,r3,r3
  806f3c:	1909883a 	add	r4,r3,r4
  806f40:	20c00017 	ldw	r3,0(r4)
  806f44:	01c02074 	movhi	r7,129
  806f48:	213ffe04 	addi	r4,r4,-8
  806f4c:	39f91a04 	addi	r7,r7,-7064
  806f50:	20c04426 	beq	r4,r3,807064 <_free_r+0x258>
  806f54:	01ffff04 	movi	r7,-4
  806f58:	19400117 	ldw	r5,4(r3)
  806f5c:	29ca703a 	and	r5,r5,r7
  806f60:	1140022e 	bgeu	r2,r5,806f6c <_free_r+0x160>
  806f64:	18c00217 	ldw	r3,8(r3)
  806f68:	20fffb1e 	bne	r4,r3,806f58 <__alt_mem_onchip_mem+0xff7fef58>
  806f6c:	19000317 	ldw	r4,12(r3)
  806f70:	31000315 	stw	r4,12(r6)
  806f74:	30c00215 	stw	r3,8(r6)
  806f78:	21800215 	stw	r6,8(r4)
  806f7c:	19800315 	stw	r6,12(r3)
  806f80:	003fde06 	br	806efc <__alt_mem_onchip_mem+0xff7feefc>
  806f84:	29c00217 	ldw	r7,8(r5)
  806f88:	10c5883a 	add	r2,r2,r3
  806f8c:	00c02074 	movhi	r3,129
  806f90:	18f91c04 	addi	r3,r3,-7056
  806f94:	38c03b26 	beq	r7,r3,807084 <_free_r+0x278>
  806f98:	2a000317 	ldw	r8,12(r5)
  806f9c:	11400054 	ori	r5,r2,1
  806fa0:	3087883a 	add	r3,r6,r2
  806fa4:	3a000315 	stw	r8,12(r7)
  806fa8:	41c00215 	stw	r7,8(r8)
  806fac:	31400115 	stw	r5,4(r6)
  806fb0:	18800015 	stw	r2,0(r3)
  806fb4:	003fbd06 	br	806eac <__alt_mem_onchip_mem+0xff7feeac>
  806fb8:	39c0004c 	andi	r7,r7,1
  806fbc:	10c5883a 	add	r2,r2,r3
  806fc0:	3800071e 	bne	r7,zero,806fe0 <_free_r+0x1d4>
  806fc4:	81fffe17 	ldw	r7,-8(r16)
  806fc8:	31cdc83a 	sub	r6,r6,r7
  806fcc:	30c00317 	ldw	r3,12(r6)
  806fd0:	31400217 	ldw	r5,8(r6)
  806fd4:	11c5883a 	add	r2,r2,r7
  806fd8:	28c00315 	stw	r3,12(r5)
  806fdc:	19400215 	stw	r5,8(r3)
  806fe0:	10c00054 	ori	r3,r2,1
  806fe4:	30c00115 	stw	r3,4(r6)
  806fe8:	00c02074 	movhi	r3,129
  806fec:	18ff1a04 	addi	r3,r3,-920
  806ff0:	18c00017 	ldw	r3,0(r3)
  806ff4:	21800215 	stw	r6,8(r4)
  806ff8:	10ffc036 	bltu	r2,r3,806efc <__alt_mem_onchip_mem+0xff7feefc>
  806ffc:	00802074 	movhi	r2,129
  807000:	10864104 	addi	r2,r2,6404
  807004:	11400017 	ldw	r5,0(r2)
  807008:	8809883a 	mov	r4,r17
  80700c:	0806ce80 	call	806ce8 <_malloc_trim_r>
  807010:	003fba06 	br	806efc <__alt_mem_onchip_mem+0xff7feefc>
  807014:	28c9883a 	add	r4,r5,r3
  807018:	21000117 	ldw	r4,4(r4)
  80701c:	2100004c 	andi	r4,r4,1
  807020:	2000391e 	bne	r4,zero,807108 <_free_r+0x2fc>
  807024:	29c00217 	ldw	r7,8(r5)
  807028:	29000317 	ldw	r4,12(r5)
  80702c:	1885883a 	add	r2,r3,r2
  807030:	10c00054 	ori	r3,r2,1
  807034:	39000315 	stw	r4,12(r7)
  807038:	21c00215 	stw	r7,8(r4)
  80703c:	30c00115 	stw	r3,4(r6)
  807040:	308d883a 	add	r6,r6,r2
  807044:	30800015 	stw	r2,0(r6)
  807048:	003fac06 	br	806efc <__alt_mem_onchip_mem+0xff7feefc>
  80704c:	00c00504 	movi	r3,20
  807050:	19401536 	bltu	r3,r5,8070a8 <_free_r+0x29c>
  807054:	28c01704 	addi	r3,r5,92
  807058:	18c7883a 	add	r3,r3,r3
  80705c:	294016c4 	addi	r5,r5,91
  807060:	003fb406 	br	806f34 <__alt_mem_onchip_mem+0xff7fef34>
  807064:	280bd0ba 	srai	r5,r5,2
  807068:	00c00044 	movi	r3,1
  80706c:	38800117 	ldw	r2,4(r7)
  807070:	194a983a 	sll	r5,r3,r5
  807074:	2007883a 	mov	r3,r4
  807078:	2884b03a 	or	r2,r5,r2
  80707c:	38800115 	stw	r2,4(r7)
  807080:	003fbb06 	br	806f70 <__alt_mem_onchip_mem+0xff7fef70>
  807084:	21800515 	stw	r6,20(r4)
  807088:	21800415 	stw	r6,16(r4)
  80708c:	10c00054 	ori	r3,r2,1
  807090:	31c00315 	stw	r7,12(r6)
  807094:	31c00215 	stw	r7,8(r6)
  807098:	30c00115 	stw	r3,4(r6)
  80709c:	308d883a 	add	r6,r6,r2
  8070a0:	30800015 	stw	r2,0(r6)
  8070a4:	003f9506 	br	806efc <__alt_mem_onchip_mem+0xff7feefc>
  8070a8:	00c01504 	movi	r3,84
  8070ac:	19400536 	bltu	r3,r5,8070c4 <_free_r+0x2b8>
  8070b0:	100ad33a 	srli	r5,r2,12
  8070b4:	28c01bc4 	addi	r3,r5,111
  8070b8:	18c7883a 	add	r3,r3,r3
  8070bc:	29401b84 	addi	r5,r5,110
  8070c0:	003f9c06 	br	806f34 <__alt_mem_onchip_mem+0xff7fef34>
  8070c4:	00c05504 	movi	r3,340
  8070c8:	19400536 	bltu	r3,r5,8070e0 <_free_r+0x2d4>
  8070cc:	100ad3fa 	srli	r5,r2,15
  8070d0:	28c01e04 	addi	r3,r5,120
  8070d4:	18c7883a 	add	r3,r3,r3
  8070d8:	29401dc4 	addi	r5,r5,119
  8070dc:	003f9506 	br	806f34 <__alt_mem_onchip_mem+0xff7fef34>
  8070e0:	00c15504 	movi	r3,1364
  8070e4:	19400536 	bltu	r3,r5,8070fc <_free_r+0x2f0>
  8070e8:	100ad4ba 	srli	r5,r2,18
  8070ec:	28c01f44 	addi	r3,r5,125
  8070f0:	18c7883a 	add	r3,r3,r3
  8070f4:	29401f04 	addi	r5,r5,124
  8070f8:	003f8e06 	br	806f34 <__alt_mem_onchip_mem+0xff7fef34>
  8070fc:	00c03f84 	movi	r3,254
  807100:	01401f84 	movi	r5,126
  807104:	003f8b06 	br	806f34 <__alt_mem_onchip_mem+0xff7fef34>
  807108:	10c00054 	ori	r3,r2,1
  80710c:	30c00115 	stw	r3,4(r6)
  807110:	308d883a 	add	r6,r6,r2
  807114:	30800015 	stw	r2,0(r6)
  807118:	003f7806 	br	806efc <__alt_mem_onchip_mem+0xff7feefc>

0080711c <_fseek_r>:
  80711c:	080713c1 	jmpi	80713c <_fseeko_r>

00807120 <fseek>:
  807120:	00802074 	movhi	r2,129
  807124:	10bf1804 	addi	r2,r2,-928
  807128:	300f883a 	mov	r7,r6
  80712c:	280d883a 	mov	r6,r5
  807130:	200b883a 	mov	r5,r4
  807134:	11000017 	ldw	r4,0(r2)
  807138:	080713c1 	jmpi	80713c <_fseeko_r>

0080713c <_fseeko_r>:
  80713c:	deffe804 	addi	sp,sp,-96
  807140:	dd401415 	stw	r21,80(sp)
  807144:	dc801115 	stw	r18,68(sp)
  807148:	dc401015 	stw	r17,64(sp)
  80714c:	dc000f15 	stw	r16,60(sp)
  807150:	dfc01715 	stw	ra,92(sp)
  807154:	ddc01615 	stw	r23,88(sp)
  807158:	dd801515 	stw	r22,84(sp)
  80715c:	dd001315 	stw	r20,76(sp)
  807160:	dcc01215 	stw	r19,72(sp)
  807164:	2023883a 	mov	r17,r4
  807168:	2821883a 	mov	r16,r5
  80716c:	302b883a 	mov	r21,r6
  807170:	3825883a 	mov	r18,r7
  807174:	20000226 	beq	r4,zero,807180 <_fseeko_r+0x44>
  807178:	20800e17 	ldw	r2,56(r4)
  80717c:	10005a26 	beq	r2,zero,8072e8 <_fseeko_r+0x1ac>
  807180:	8080030b 	ldhu	r2,12(r16)
  807184:	00c04204 	movi	r3,264
  807188:	1080420c 	andi	r2,r2,264
  80718c:	10c05b26 	beq	r2,r3,8072fc <_fseeko_r+0x1c0>
  807190:	85000a17 	ldw	r20,40(r16)
  807194:	a000f626 	beq	r20,zero,807570 <_fseeko_r+0x434>
  807198:	00800044 	movi	r2,1
  80719c:	90803e26 	beq	r18,r2,807298 <_fseeko_r+0x15c>
  8071a0:	00800084 	movi	r2,2
  8071a4:	90801026 	beq	r18,r2,8071e8 <_fseeko_r+0xac>
  8071a8:	90000f26 	beq	r18,zero,8071e8 <_fseeko_r+0xac>
  8071ac:	00800584 	movi	r2,22
  8071b0:	88800015 	stw	r2,0(r17)
  8071b4:	04ffffc4 	movi	r19,-1
  8071b8:	9805883a 	mov	r2,r19
  8071bc:	dfc01717 	ldw	ra,92(sp)
  8071c0:	ddc01617 	ldw	r23,88(sp)
  8071c4:	dd801517 	ldw	r22,84(sp)
  8071c8:	dd401417 	ldw	r21,80(sp)
  8071cc:	dd001317 	ldw	r20,76(sp)
  8071d0:	dcc01217 	ldw	r19,72(sp)
  8071d4:	dc801117 	ldw	r18,68(sp)
  8071d8:	dc401017 	ldw	r17,64(sp)
  8071dc:	dc000f17 	ldw	r16,60(sp)
  8071e0:	dec01804 	addi	sp,sp,96
  8071e4:	f800283a 	ret
  8071e8:	80800417 	ldw	r2,16(r16)
  8071ec:	002f883a 	mov	r23,zero
  8071f0:	0027883a 	mov	r19,zero
  8071f4:	1000cb26 	beq	r2,zero,807524 <_fseeko_r+0x3e8>
  8071f8:	8080030b 	ldhu	r2,12(r16)
  8071fc:	10c2068c 	andi	r3,r2,2074
  807200:	1800071e 	bne	r3,zero,807220 <_fseeko_r+0xe4>
  807204:	10c1000c 	andi	r3,r2,1024
  807208:	1800451e 	bne	r3,zero,807320 <_fseeko_r+0x1e4>
  80720c:	00c02074 	movhi	r3,129
  807210:	18e1bb04 	addi	r3,r3,-30996
  807214:	a0c0b726 	beq	r20,r3,8074f4 <_fseeko_r+0x3b8>
  807218:	10820014 	ori	r2,r2,2048
  80721c:	8080030d 	sth	r2,12(r16)
  807220:	800b883a 	mov	r5,r16
  807224:	8809883a 	mov	r4,r17
  807228:	08067b00 	call	8067b0 <_fflush_r>
  80722c:	1027883a 	mov	r19,r2
  807230:	103fe01e 	bne	r2,zero,8071b4 <__alt_mem_onchip_mem+0xff7ff1b4>
  807234:	81400717 	ldw	r5,28(r16)
  807238:	900f883a 	mov	r7,r18
  80723c:	a80d883a 	mov	r6,r21
  807240:	8809883a 	mov	r4,r17
  807244:	a03ee83a 	callr	r20
  807248:	00ffffc4 	movi	r3,-1
  80724c:	10ffd926 	beq	r2,r3,8071b4 <__alt_mem_onchip_mem+0xff7ff1b4>
  807250:	81400c17 	ldw	r5,48(r16)
  807254:	28000526 	beq	r5,zero,80726c <_fseeko_r+0x130>
  807258:	80801004 	addi	r2,r16,64
  80725c:	28800226 	beq	r5,r2,807268 <_fseeko_r+0x12c>
  807260:	8809883a 	mov	r4,r17
  807264:	0806e0c0 	call	806e0c <_free_r>
  807268:	80000c15 	stw	zero,48(r16)
  80726c:	8080030b 	ldhu	r2,12(r16)
  807270:	80c00417 	ldw	r3,16(r16)
  807274:	80000115 	stw	zero,4(r16)
  807278:	10bdf7cc 	andi	r2,r2,63455
  80727c:	80c00015 	stw	r3,0(r16)
  807280:	8080030d 	sth	r2,12(r16)
  807284:	01800204 	movi	r6,8
  807288:	000b883a 	mov	r5,zero
  80728c:	81001704 	addi	r4,r16,92
  807290:	08082480 	call	808248 <memset>
  807294:	003fc806 	br	8071b8 <__alt_mem_onchip_mem+0xff7ff1b8>
  807298:	800b883a 	mov	r5,r16
  80729c:	8809883a 	mov	r4,r17
  8072a0:	08067b00 	call	8067b0 <_fflush_r>
  8072a4:	8080030b 	ldhu	r2,12(r16)
  8072a8:	10c4000c 	andi	r3,r2,4096
  8072ac:	18008726 	beq	r3,zero,8074cc <_fseeko_r+0x390>
  8072b0:	84c01417 	ldw	r19,80(r16)
  8072b4:	10c0010c 	andi	r3,r2,4
  8072b8:	1800431e 	bne	r3,zero,8073c8 <_fseeko_r+0x28c>
  8072bc:	1080020c 	andi	r2,r2,8
  8072c0:	10008026 	beq	r2,zero,8074c4 <_fseeko_r+0x388>
  8072c4:	80c00017 	ldw	r3,0(r16)
  8072c8:	80800417 	ldw	r2,16(r16)
  8072cc:	18000226 	beq	r3,zero,8072d8 <_fseeko_r+0x19c>
  8072d0:	1887c83a 	sub	r3,r3,r2
  8072d4:	98e7883a 	add	r19,r19,r3
  8072d8:	aceb883a 	add	r21,r21,r19
  8072dc:	05c00044 	movi	r23,1
  8072e0:	0025883a 	mov	r18,zero
  8072e4:	003fc306 	br	8071f4 <__alt_mem_onchip_mem+0xff7ff1f4>
  8072e8:	0806b8c0 	call	806b8c <__sinit>
  8072ec:	8080030b 	ldhu	r2,12(r16)
  8072f0:	00c04204 	movi	r3,264
  8072f4:	1080420c 	andi	r2,r2,264
  8072f8:	10ffa51e 	bne	r2,r3,807190 <__alt_mem_onchip_mem+0xff7ff190>
  8072fc:	800b883a 	mov	r5,r16
  807300:	8809883a 	mov	r4,r17
  807304:	08067b00 	call	8067b0 <_fflush_r>
  807308:	003fa106 	br	807190 <__alt_mem_onchip_mem+0xff7ff190>
  80730c:	8080030b 	ldhu	r2,12(r16)
  807310:	00c10004 	movi	r3,1024
  807314:	80c01315 	stw	r3,76(r16)
  807318:	10c4b03a 	or	r2,r2,r3
  80731c:	8080030d 	sth	r2,12(r16)
  807320:	9000311e 	bne	r18,zero,8073e8 <_fseeko_r+0x2ac>
  807324:	a82d883a 	mov	r22,r21
  807328:	b800371e 	bne	r23,zero,807408 <_fseeko_r+0x2cc>
  80732c:	8080030b 	ldhu	r2,12(r16)
  807330:	1084000c 	andi	r2,r2,4096
  807334:	10007f26 	beq	r2,zero,807534 <_fseeko_r+0x3f8>
  807338:	80801417 	ldw	r2,80(r16)
  80733c:	81800117 	ldw	r6,4(r16)
  807340:	81400c17 	ldw	r5,48(r16)
  807344:	11a7c83a 	sub	r19,r2,r6
  807348:	28008226 	beq	r5,zero,807554 <_fseeko_r+0x418>
  80734c:	81c00f17 	ldw	r7,60(r16)
  807350:	99e7c83a 	sub	r19,r19,r7
  807354:	81000e17 	ldw	r4,56(r16)
  807358:	80800417 	ldw	r2,16(r16)
  80735c:	99a7883a 	add	r19,r19,r6
  807360:	2087c83a 	sub	r3,r4,r2
  807364:	98e7c83a 	sub	r19,r19,r3
  807368:	38c7883a 	add	r3,r7,r3
  80736c:	b4c02b16 	blt	r22,r19,80741c <_fseeko_r+0x2e0>
  807370:	98c9883a 	add	r4,r19,r3
  807374:	b100292e 	bgeu	r22,r4,80741c <_fseeko_r+0x2e0>
  807378:	b4e7c83a 	sub	r19,r22,r19
  80737c:	14c5883a 	add	r2,r2,r19
  807380:	1ce7c83a 	sub	r19,r3,r19
  807384:	80800015 	stw	r2,0(r16)
  807388:	84c00115 	stw	r19,4(r16)
  80738c:	28000526 	beq	r5,zero,8073a4 <_fseeko_r+0x268>
  807390:	80801004 	addi	r2,r16,64
  807394:	28800226 	beq	r5,r2,8073a0 <_fseeko_r+0x264>
  807398:	8809883a 	mov	r4,r17
  80739c:	0806e0c0 	call	806e0c <_free_r>
  8073a0:	80000c15 	stw	zero,48(r16)
  8073a4:	8080030b 	ldhu	r2,12(r16)
  8073a8:	01800204 	movi	r6,8
  8073ac:	000b883a 	mov	r5,zero
  8073b0:	10bff7cc 	andi	r2,r2,65503
  8073b4:	8080030d 	sth	r2,12(r16)
  8073b8:	81001704 	addi	r4,r16,92
  8073bc:	08082480 	call	808248 <memset>
  8073c0:	0027883a 	mov	r19,zero
  8073c4:	003f7c06 	br	8071b8 <__alt_mem_onchip_mem+0xff7ff1b8>
  8073c8:	80c00117 	ldw	r3,4(r16)
  8073cc:	80800c17 	ldw	r2,48(r16)
  8073d0:	98e7c83a 	sub	r19,r19,r3
  8073d4:	10003b26 	beq	r2,zero,8074c4 <_fseeko_r+0x388>
  8073d8:	80c00f17 	ldw	r3,60(r16)
  8073dc:	80800417 	ldw	r2,16(r16)
  8073e0:	98e7c83a 	sub	r19,r19,r3
  8073e4:	003fbc06 	br	8072d8 <__alt_mem_onchip_mem+0xff7ff2d8>
  8073e8:	8140038f 	ldh	r5,14(r16)
  8073ec:	d80d883a 	mov	r6,sp
  8073f0:	8809883a 	mov	r4,r17
  8073f4:	080759c0 	call	80759c <_fstat_r>
  8073f8:	103f891e 	bne	r2,zero,807220 <__alt_mem_onchip_mem+0xff7ff220>
  8073fc:	dd800417 	ldw	r22,16(sp)
  807400:	adad883a 	add	r22,r21,r22
  807404:	b83fc926 	beq	r23,zero,80732c <__alt_mem_onchip_mem+0xff7ff32c>
  807408:	81400c17 	ldw	r5,48(r16)
  80740c:	81800117 	ldw	r6,4(r16)
  807410:	28005026 	beq	r5,zero,807554 <_fseeko_r+0x418>
  807414:	81c00f17 	ldw	r7,60(r16)
  807418:	003fce06 	br	807354 <__alt_mem_onchip_mem+0xff7ff354>
  80741c:	84c01317 	ldw	r19,76(r16)
  807420:	81400717 	ldw	r5,28(r16)
  807424:	000f883a 	mov	r7,zero
  807428:	04e7c83a 	sub	r19,zero,r19
  80742c:	9da6703a 	and	r19,r19,r22
  807430:	980d883a 	mov	r6,r19
  807434:	8809883a 	mov	r4,r17
  807438:	a03ee83a 	callr	r20
  80743c:	00ffffc4 	movi	r3,-1
  807440:	10ff7726 	beq	r2,r3,807220 <__alt_mem_onchip_mem+0xff7ff220>
  807444:	80800417 	ldw	r2,16(r16)
  807448:	81400c17 	ldw	r5,48(r16)
  80744c:	80000115 	stw	zero,4(r16)
  807450:	80800015 	stw	r2,0(r16)
  807454:	28000526 	beq	r5,zero,80746c <_fseeko_r+0x330>
  807458:	80801004 	addi	r2,r16,64
  80745c:	28800226 	beq	r5,r2,807468 <_fseeko_r+0x32c>
  807460:	8809883a 	mov	r4,r17
  807464:	0806e0c0 	call	806e0c <_free_r>
  807468:	80000c15 	stw	zero,48(r16)
  80746c:	8080030b 	ldhu	r2,12(r16)
  807470:	b4e7c83a 	sub	r19,r22,r19
  807474:	10bff7cc 	andi	r2,r2,65503
  807478:	8080030d 	sth	r2,12(r16)
  80747c:	98000b26 	beq	r19,zero,8074ac <_fseeko_r+0x370>
  807480:	800b883a 	mov	r5,r16
  807484:	8809883a 	mov	r4,r17
  807488:	08083ec0 	call	8083ec <__srefill_r>
  80748c:	103f641e 	bne	r2,zero,807220 <__alt_mem_onchip_mem+0xff7ff220>
  807490:	80800117 	ldw	r2,4(r16)
  807494:	14ff6236 	bltu	r2,r19,807220 <__alt_mem_onchip_mem+0xff7ff220>
  807498:	80c00017 	ldw	r3,0(r16)
  80749c:	14c5c83a 	sub	r2,r2,r19
  8074a0:	80800115 	stw	r2,4(r16)
  8074a4:	1ce7883a 	add	r19,r3,r19
  8074a8:	84c00015 	stw	r19,0(r16)
  8074ac:	01800204 	movi	r6,8
  8074b0:	000b883a 	mov	r5,zero
  8074b4:	81001704 	addi	r4,r16,92
  8074b8:	08082480 	call	808248 <memset>
  8074bc:	0027883a 	mov	r19,zero
  8074c0:	003f3d06 	br	8071b8 <__alt_mem_onchip_mem+0xff7ff1b8>
  8074c4:	80800417 	ldw	r2,16(r16)
  8074c8:	003f8306 	br	8072d8 <__alt_mem_onchip_mem+0xff7ff2d8>
  8074cc:	81400717 	ldw	r5,28(r16)
  8074d0:	900f883a 	mov	r7,r18
  8074d4:	000d883a 	mov	r6,zero
  8074d8:	8809883a 	mov	r4,r17
  8074dc:	a03ee83a 	callr	r20
  8074e0:	1027883a 	mov	r19,r2
  8074e4:	00bfffc4 	movi	r2,-1
  8074e8:	98bf3226 	beq	r19,r2,8071b4 <__alt_mem_onchip_mem+0xff7ff1b4>
  8074ec:	8080030b 	ldhu	r2,12(r16)
  8074f0:	003f7006 	br	8072b4 <__alt_mem_onchip_mem+0xff7ff2b4>
  8074f4:	8140038f 	ldh	r5,14(r16)
  8074f8:	283f4716 	blt	r5,zero,807218 <__alt_mem_onchip_mem+0xff7ff218>
  8074fc:	d80d883a 	mov	r6,sp
  807500:	8809883a 	mov	r4,r17
  807504:	080759c0 	call	80759c <_fstat_r>
  807508:	1000041e 	bne	r2,zero,80751c <_fseeko_r+0x3e0>
  80750c:	d8800117 	ldw	r2,4(sp)
  807510:	00e00014 	movui	r3,32768
  807514:	10bc000c 	andi	r2,r2,61440
  807518:	10ff7c26 	beq	r2,r3,80730c <__alt_mem_onchip_mem+0xff7ff30c>
  80751c:	8080030b 	ldhu	r2,12(r16)
  807520:	003f3d06 	br	807218 <__alt_mem_onchip_mem+0xff7ff218>
  807524:	800b883a 	mov	r5,r16
  807528:	8809883a 	mov	r4,r17
  80752c:	08078800 	call	807880 <__smakebuf_r>
  807530:	003f3106 	br	8071f8 <__alt_mem_onchip_mem+0xff7ff1f8>
  807534:	81400717 	ldw	r5,28(r16)
  807538:	01c00044 	movi	r7,1
  80753c:	000d883a 	mov	r6,zero
  807540:	8809883a 	mov	r4,r17
  807544:	a03ee83a 	callr	r20
  807548:	00ffffc4 	movi	r3,-1
  80754c:	10ff7b1e 	bne	r2,r3,80733c <__alt_mem_onchip_mem+0xff7ff33c>
  807550:	003f3306 	br	807220 <__alt_mem_onchip_mem+0xff7ff220>
  807554:	80c00017 	ldw	r3,0(r16)
  807558:	80800417 	ldw	r2,16(r16)
  80755c:	000b883a 	mov	r5,zero
  807560:	1887c83a 	sub	r3,r3,r2
  807564:	98e7c83a 	sub	r19,r19,r3
  807568:	30c7883a 	add	r3,r6,r3
  80756c:	003f7f06 	br	80736c <__alt_mem_onchip_mem+0xff7ff36c>
  807570:	00800744 	movi	r2,29
  807574:	88800015 	stw	r2,0(r17)
  807578:	04ffffc4 	movi	r19,-1
  80757c:	003f0e06 	br	8071b8 <__alt_mem_onchip_mem+0xff7ff1b8>

00807580 <fseeko>:
  807580:	00802074 	movhi	r2,129
  807584:	10bf1804 	addi	r2,r2,-928
  807588:	300f883a 	mov	r7,r6
  80758c:	280d883a 	mov	r6,r5
  807590:	200b883a 	mov	r5,r4
  807594:	11000017 	ldw	r4,0(r2)
  807598:	080713c1 	jmpi	80713c <_fseeko_r>

0080759c <_fstat_r>:
  80759c:	defffd04 	addi	sp,sp,-12
  8075a0:	2805883a 	mov	r2,r5
  8075a4:	dc000015 	stw	r16,0(sp)
  8075a8:	04002074 	movhi	r16,129
  8075ac:	dc400115 	stw	r17,4(sp)
  8075b0:	84063e04 	addi	r16,r16,6392
  8075b4:	2023883a 	mov	r17,r4
  8075b8:	300b883a 	mov	r5,r6
  8075bc:	1009883a 	mov	r4,r2
  8075c0:	dfc00215 	stw	ra,8(sp)
  8075c4:	80000015 	stw	zero,0(r16)
  8075c8:	0809d140 	call	809d14 <fstat>
  8075cc:	00ffffc4 	movi	r3,-1
  8075d0:	10c00526 	beq	r2,r3,8075e8 <_fstat_r+0x4c>
  8075d4:	dfc00217 	ldw	ra,8(sp)
  8075d8:	dc400117 	ldw	r17,4(sp)
  8075dc:	dc000017 	ldw	r16,0(sp)
  8075e0:	dec00304 	addi	sp,sp,12
  8075e4:	f800283a 	ret
  8075e8:	80c00017 	ldw	r3,0(r16)
  8075ec:	183ff926 	beq	r3,zero,8075d4 <__alt_mem_onchip_mem+0xff7ff5d4>
  8075f0:	88c00015 	stw	r3,0(r17)
  8075f4:	003ff706 	br	8075d4 <__alt_mem_onchip_mem+0xff7ff5d4>

008075f8 <_fwalk>:
  8075f8:	defff704 	addi	sp,sp,-36
  8075fc:	dd000415 	stw	r20,16(sp)
  807600:	dfc00815 	stw	ra,32(sp)
  807604:	ddc00715 	stw	r23,28(sp)
  807608:	dd800615 	stw	r22,24(sp)
  80760c:	dd400515 	stw	r21,20(sp)
  807610:	dcc00315 	stw	r19,12(sp)
  807614:	dc800215 	stw	r18,8(sp)
  807618:	dc400115 	stw	r17,4(sp)
  80761c:	dc000015 	stw	r16,0(sp)
  807620:	2500b804 	addi	r20,r4,736
  807624:	a0002326 	beq	r20,zero,8076b4 <_fwalk+0xbc>
  807628:	282b883a 	mov	r21,r5
  80762c:	002f883a 	mov	r23,zero
  807630:	05800044 	movi	r22,1
  807634:	04ffffc4 	movi	r19,-1
  807638:	a4400117 	ldw	r17,4(r20)
  80763c:	a4800217 	ldw	r18,8(r20)
  807640:	8c7fffc4 	addi	r17,r17,-1
  807644:	88000d16 	blt	r17,zero,80767c <_fwalk+0x84>
  807648:	94000304 	addi	r16,r18,12
  80764c:	94800384 	addi	r18,r18,14
  807650:	8080000b 	ldhu	r2,0(r16)
  807654:	8c7fffc4 	addi	r17,r17,-1
  807658:	813ffd04 	addi	r4,r16,-12
  80765c:	b080042e 	bgeu	r22,r2,807670 <_fwalk+0x78>
  807660:	9080000f 	ldh	r2,0(r18)
  807664:	14c00226 	beq	r2,r19,807670 <_fwalk+0x78>
  807668:	a83ee83a 	callr	r21
  80766c:	b8aeb03a 	or	r23,r23,r2
  807670:	84001a04 	addi	r16,r16,104
  807674:	94801a04 	addi	r18,r18,104
  807678:	8cfff51e 	bne	r17,r19,807650 <__alt_mem_onchip_mem+0xff7ff650>
  80767c:	a5000017 	ldw	r20,0(r20)
  807680:	a03fed1e 	bne	r20,zero,807638 <__alt_mem_onchip_mem+0xff7ff638>
  807684:	b805883a 	mov	r2,r23
  807688:	dfc00817 	ldw	ra,32(sp)
  80768c:	ddc00717 	ldw	r23,28(sp)
  807690:	dd800617 	ldw	r22,24(sp)
  807694:	dd400517 	ldw	r21,20(sp)
  807698:	dd000417 	ldw	r20,16(sp)
  80769c:	dcc00317 	ldw	r19,12(sp)
  8076a0:	dc800217 	ldw	r18,8(sp)
  8076a4:	dc400117 	ldw	r17,4(sp)
  8076a8:	dc000017 	ldw	r16,0(sp)
  8076ac:	dec00904 	addi	sp,sp,36
  8076b0:	f800283a 	ret
  8076b4:	002f883a 	mov	r23,zero
  8076b8:	003ff206 	br	807684 <__alt_mem_onchip_mem+0xff7ff684>

008076bc <_fwalk_reent>:
  8076bc:	defff704 	addi	sp,sp,-36
  8076c0:	dd000415 	stw	r20,16(sp)
  8076c4:	dfc00815 	stw	ra,32(sp)
  8076c8:	ddc00715 	stw	r23,28(sp)
  8076cc:	dd800615 	stw	r22,24(sp)
  8076d0:	dd400515 	stw	r21,20(sp)
  8076d4:	dcc00315 	stw	r19,12(sp)
  8076d8:	dc800215 	stw	r18,8(sp)
  8076dc:	dc400115 	stw	r17,4(sp)
  8076e0:	dc000015 	stw	r16,0(sp)
  8076e4:	2500b804 	addi	r20,r4,736
  8076e8:	a0002326 	beq	r20,zero,807778 <_fwalk_reent+0xbc>
  8076ec:	282b883a 	mov	r21,r5
  8076f0:	2027883a 	mov	r19,r4
  8076f4:	002f883a 	mov	r23,zero
  8076f8:	05800044 	movi	r22,1
  8076fc:	04bfffc4 	movi	r18,-1
  807700:	a4400117 	ldw	r17,4(r20)
  807704:	a4000217 	ldw	r16,8(r20)
  807708:	8c7fffc4 	addi	r17,r17,-1
  80770c:	88000c16 	blt	r17,zero,807740 <_fwalk_reent+0x84>
  807710:	84000304 	addi	r16,r16,12
  807714:	8080000b 	ldhu	r2,0(r16)
  807718:	8c7fffc4 	addi	r17,r17,-1
  80771c:	817ffd04 	addi	r5,r16,-12
  807720:	b080052e 	bgeu	r22,r2,807738 <_fwalk_reent+0x7c>
  807724:	8080008f 	ldh	r2,2(r16)
  807728:	9809883a 	mov	r4,r19
  80772c:	14800226 	beq	r2,r18,807738 <_fwalk_reent+0x7c>
  807730:	a83ee83a 	callr	r21
  807734:	b8aeb03a 	or	r23,r23,r2
  807738:	84001a04 	addi	r16,r16,104
  80773c:	8cbff51e 	bne	r17,r18,807714 <__alt_mem_onchip_mem+0xff7ff714>
  807740:	a5000017 	ldw	r20,0(r20)
  807744:	a03fee1e 	bne	r20,zero,807700 <__alt_mem_onchip_mem+0xff7ff700>
  807748:	b805883a 	mov	r2,r23
  80774c:	dfc00817 	ldw	ra,32(sp)
  807750:	ddc00717 	ldw	r23,28(sp)
  807754:	dd800617 	ldw	r22,24(sp)
  807758:	dd400517 	ldw	r21,20(sp)
  80775c:	dd000417 	ldw	r20,16(sp)
  807760:	dcc00317 	ldw	r19,12(sp)
  807764:	dc800217 	ldw	r18,8(sp)
  807768:	dc400117 	ldw	r17,4(sp)
  80776c:	dc000017 	ldw	r16,0(sp)
  807770:	dec00904 	addi	sp,sp,36
  807774:	f800283a 	ret
  807778:	002f883a 	mov	r23,zero
  80777c:	003ff206 	br	807748 <__alt_mem_onchip_mem+0xff7ff748>

00807780 <_fwrite_r>:
  807780:	defff504 	addi	sp,sp,-44
  807784:	dc800815 	stw	r18,32(sp)
  807788:	39a5383a 	mul	r18,r7,r6
  80778c:	d8800304 	addi	r2,sp,12
  807790:	d8800015 	stw	r2,0(sp)
  807794:	00800044 	movi	r2,1
  807798:	dcc00915 	stw	r19,36(sp)
  80779c:	dc400715 	stw	r17,28(sp)
  8077a0:	dc000615 	stw	r16,24(sp)
  8077a4:	d9400315 	stw	r5,12(sp)
  8077a8:	dfc00a15 	stw	ra,40(sp)
  8077ac:	dc800415 	stw	r18,16(sp)
  8077b0:	dc800215 	stw	r18,8(sp)
  8077b4:	d8800115 	stw	r2,4(sp)
  8077b8:	3027883a 	mov	r19,r6
  8077bc:	3821883a 	mov	r16,r7
  8077c0:	2023883a 	mov	r17,r4
  8077c4:	d9400b17 	ldw	r5,44(sp)
  8077c8:	20000226 	beq	r4,zero,8077d4 <_fwrite_r+0x54>
  8077cc:	20800e17 	ldw	r2,56(r4)
  8077d0:	10001a26 	beq	r2,zero,80783c <_fwrite_r+0xbc>
  8077d4:	2880030b 	ldhu	r2,12(r5)
  8077d8:	10c8000c 	andi	r3,r2,8192
  8077dc:	1800061e 	bne	r3,zero,8077f8 <_fwrite_r+0x78>
  8077e0:	29001917 	ldw	r4,100(r5)
  8077e4:	00f7ffc4 	movi	r3,-8193
  8077e8:	10880014 	ori	r2,r2,8192
  8077ec:	20c6703a 	and	r3,r4,r3
  8077f0:	2880030d 	sth	r2,12(r5)
  8077f4:	28c01915 	stw	r3,100(r5)
  8077f8:	d80d883a 	mov	r6,sp
  8077fc:	8809883a 	mov	r4,r17
  807800:	08088b00 	call	8088b0 <__sfvwrite_r>
  807804:	10000b26 	beq	r2,zero,807834 <_fwrite_r+0xb4>
  807808:	d9000217 	ldw	r4,8(sp)
  80780c:	980b883a 	mov	r5,r19
  807810:	9109c83a 	sub	r4,r18,r4
  807814:	08099b80 	call	8099b8 <__udivsi3>
  807818:	dfc00a17 	ldw	ra,40(sp)
  80781c:	dcc00917 	ldw	r19,36(sp)
  807820:	dc800817 	ldw	r18,32(sp)
  807824:	dc400717 	ldw	r17,28(sp)
  807828:	dc000617 	ldw	r16,24(sp)
  80782c:	dec00b04 	addi	sp,sp,44
  807830:	f800283a 	ret
  807834:	8005883a 	mov	r2,r16
  807838:	003ff706 	br	807818 <__alt_mem_onchip_mem+0xff7ff818>
  80783c:	d9400515 	stw	r5,20(sp)
  807840:	0806b8c0 	call	806b8c <__sinit>
  807844:	d9400517 	ldw	r5,20(sp)
  807848:	003fe206 	br	8077d4 <__alt_mem_onchip_mem+0xff7ff7d4>

0080784c <fwrite>:
  80784c:	defffe04 	addi	sp,sp,-8
  807850:	00802074 	movhi	r2,129
  807854:	d9c00015 	stw	r7,0(sp)
  807858:	10bf1804 	addi	r2,r2,-928
  80785c:	300f883a 	mov	r7,r6
  807860:	280d883a 	mov	r6,r5
  807864:	200b883a 	mov	r5,r4
  807868:	11000017 	ldw	r4,0(r2)
  80786c:	dfc00115 	stw	ra,4(sp)
  807870:	08077800 	call	807780 <_fwrite_r>
  807874:	dfc00117 	ldw	ra,4(sp)
  807878:	dec00204 	addi	sp,sp,8
  80787c:	f800283a 	ret

00807880 <__smakebuf_r>:
  807880:	2880030b 	ldhu	r2,12(r5)
  807884:	10c0008c 	andi	r3,r2,2
  807888:	1800411e 	bne	r3,zero,807990 <__smakebuf_r+0x110>
  80788c:	deffec04 	addi	sp,sp,-80
  807890:	dc000f15 	stw	r16,60(sp)
  807894:	2821883a 	mov	r16,r5
  807898:	2940038f 	ldh	r5,14(r5)
  80789c:	dc401015 	stw	r17,64(sp)
  8078a0:	dfc01315 	stw	ra,76(sp)
  8078a4:	dcc01215 	stw	r19,72(sp)
  8078a8:	dc801115 	stw	r18,68(sp)
  8078ac:	2023883a 	mov	r17,r4
  8078b0:	28001c16 	blt	r5,zero,807924 <__smakebuf_r+0xa4>
  8078b4:	d80d883a 	mov	r6,sp
  8078b8:	080759c0 	call	80759c <_fstat_r>
  8078bc:	10001816 	blt	r2,zero,807920 <__smakebuf_r+0xa0>
  8078c0:	d8800117 	ldw	r2,4(sp)
  8078c4:	00e00014 	movui	r3,32768
  8078c8:	10bc000c 	andi	r2,r2,61440
  8078cc:	14c80020 	cmpeqi	r19,r2,8192
  8078d0:	10c03726 	beq	r2,r3,8079b0 <__smakebuf_r+0x130>
  8078d4:	80c0030b 	ldhu	r3,12(r16)
  8078d8:	18c20014 	ori	r3,r3,2048
  8078dc:	80c0030d 	sth	r3,12(r16)
  8078e0:	00c80004 	movi	r3,8192
  8078e4:	10c0521e 	bne	r2,r3,807a30 <__smakebuf_r+0x1b0>
  8078e8:	8140038f 	ldh	r5,14(r16)
  8078ec:	8809883a 	mov	r4,r17
  8078f0:	0808d6c0 	call	808d6c <_isatty_r>
  8078f4:	10004c26 	beq	r2,zero,807a28 <__smakebuf_r+0x1a8>
  8078f8:	8080030b 	ldhu	r2,12(r16)
  8078fc:	80c010c4 	addi	r3,r16,67
  807900:	80c00015 	stw	r3,0(r16)
  807904:	10800054 	ori	r2,r2,1
  807908:	8080030d 	sth	r2,12(r16)
  80790c:	00800044 	movi	r2,1
  807910:	80c00415 	stw	r3,16(r16)
  807914:	80800515 	stw	r2,20(r16)
  807918:	04810004 	movi	r18,1024
  80791c:	00000706 	br	80793c <__smakebuf_r+0xbc>
  807920:	8080030b 	ldhu	r2,12(r16)
  807924:	10c0200c 	andi	r3,r2,128
  807928:	18001f1e 	bne	r3,zero,8079a8 <__smakebuf_r+0x128>
  80792c:	04810004 	movi	r18,1024
  807930:	10820014 	ori	r2,r2,2048
  807934:	8080030d 	sth	r2,12(r16)
  807938:	0027883a 	mov	r19,zero
  80793c:	900b883a 	mov	r5,r18
  807940:	8809883a 	mov	r4,r17
  807944:	0807a3c0 	call	807a3c <_malloc_r>
  807948:	10002c26 	beq	r2,zero,8079fc <__smakebuf_r+0x17c>
  80794c:	80c0030b 	ldhu	r3,12(r16)
  807950:	01002034 	movhi	r4,128
  807954:	211a1104 	addi	r4,r4,26692
  807958:	89000f15 	stw	r4,60(r17)
  80795c:	18c02014 	ori	r3,r3,128
  807960:	80c0030d 	sth	r3,12(r16)
  807964:	80800015 	stw	r2,0(r16)
  807968:	80800415 	stw	r2,16(r16)
  80796c:	84800515 	stw	r18,20(r16)
  807970:	98001a1e 	bne	r19,zero,8079dc <__smakebuf_r+0x15c>
  807974:	dfc01317 	ldw	ra,76(sp)
  807978:	dcc01217 	ldw	r19,72(sp)
  80797c:	dc801117 	ldw	r18,68(sp)
  807980:	dc401017 	ldw	r17,64(sp)
  807984:	dc000f17 	ldw	r16,60(sp)
  807988:	dec01404 	addi	sp,sp,80
  80798c:	f800283a 	ret
  807990:	288010c4 	addi	r2,r5,67
  807994:	28800015 	stw	r2,0(r5)
  807998:	28800415 	stw	r2,16(r5)
  80799c:	00800044 	movi	r2,1
  8079a0:	28800515 	stw	r2,20(r5)
  8079a4:	f800283a 	ret
  8079a8:	04801004 	movi	r18,64
  8079ac:	003fe006 	br	807930 <__alt_mem_onchip_mem+0xff7ff930>
  8079b0:	81000a17 	ldw	r4,40(r16)
  8079b4:	00c02074 	movhi	r3,129
  8079b8:	18e1bb04 	addi	r3,r3,-30996
  8079bc:	20ffc51e 	bne	r4,r3,8078d4 <__alt_mem_onchip_mem+0xff7ff8d4>
  8079c0:	8080030b 	ldhu	r2,12(r16)
  8079c4:	04810004 	movi	r18,1024
  8079c8:	84801315 	stw	r18,76(r16)
  8079cc:	1484b03a 	or	r2,r2,r18
  8079d0:	8080030d 	sth	r2,12(r16)
  8079d4:	0027883a 	mov	r19,zero
  8079d8:	003fd806 	br	80793c <__alt_mem_onchip_mem+0xff7ff93c>
  8079dc:	8140038f 	ldh	r5,14(r16)
  8079e0:	8809883a 	mov	r4,r17
  8079e4:	0808d6c0 	call	808d6c <_isatty_r>
  8079e8:	103fe226 	beq	r2,zero,807974 <__alt_mem_onchip_mem+0xff7ff974>
  8079ec:	8080030b 	ldhu	r2,12(r16)
  8079f0:	10800054 	ori	r2,r2,1
  8079f4:	8080030d 	sth	r2,12(r16)
  8079f8:	003fde06 	br	807974 <__alt_mem_onchip_mem+0xff7ff974>
  8079fc:	8080030b 	ldhu	r2,12(r16)
  807a00:	10c0800c 	andi	r3,r2,512
  807a04:	183fdb1e 	bne	r3,zero,807974 <__alt_mem_onchip_mem+0xff7ff974>
  807a08:	10800094 	ori	r2,r2,2
  807a0c:	80c010c4 	addi	r3,r16,67
  807a10:	8080030d 	sth	r2,12(r16)
  807a14:	00800044 	movi	r2,1
  807a18:	80c00015 	stw	r3,0(r16)
  807a1c:	80c00415 	stw	r3,16(r16)
  807a20:	80800515 	stw	r2,20(r16)
  807a24:	003fd306 	br	807974 <__alt_mem_onchip_mem+0xff7ff974>
  807a28:	04810004 	movi	r18,1024
  807a2c:	003fc306 	br	80793c <__alt_mem_onchip_mem+0xff7ff93c>
  807a30:	0027883a 	mov	r19,zero
  807a34:	04810004 	movi	r18,1024
  807a38:	003fc006 	br	80793c <__alt_mem_onchip_mem+0xff7ff93c>

00807a3c <_malloc_r>:
  807a3c:	defff504 	addi	sp,sp,-44
  807a40:	dc800315 	stw	r18,12(sp)
  807a44:	dfc00a15 	stw	ra,40(sp)
  807a48:	df000915 	stw	fp,36(sp)
  807a4c:	ddc00815 	stw	r23,32(sp)
  807a50:	dd800715 	stw	r22,28(sp)
  807a54:	dd400615 	stw	r21,24(sp)
  807a58:	dd000515 	stw	r20,20(sp)
  807a5c:	dcc00415 	stw	r19,16(sp)
  807a60:	dc400215 	stw	r17,8(sp)
  807a64:	dc000115 	stw	r16,4(sp)
  807a68:	288002c4 	addi	r2,r5,11
  807a6c:	00c00584 	movi	r3,22
  807a70:	2025883a 	mov	r18,r4
  807a74:	18807f2e 	bgeu	r3,r2,807c74 <_malloc_r+0x238>
  807a78:	047ffe04 	movi	r17,-8
  807a7c:	1462703a 	and	r17,r2,r17
  807a80:	8800a316 	blt	r17,zero,807d10 <_malloc_r+0x2d4>
  807a84:	8940a236 	bltu	r17,r5,807d10 <_malloc_r+0x2d4>
  807a88:	080a11c0 	call	80a11c <__malloc_lock>
  807a8c:	00807dc4 	movi	r2,503
  807a90:	1441e92e 	bgeu	r2,r17,808238 <_malloc_r+0x7fc>
  807a94:	8804d27a 	srli	r2,r17,9
  807a98:	1000a126 	beq	r2,zero,807d20 <_malloc_r+0x2e4>
  807a9c:	00c00104 	movi	r3,4
  807aa0:	18811e36 	bltu	r3,r2,807f1c <_malloc_r+0x4e0>
  807aa4:	8804d1ba 	srli	r2,r17,6
  807aa8:	12000e44 	addi	r8,r2,57
  807aac:	11c00e04 	addi	r7,r2,56
  807ab0:	4209883a 	add	r4,r8,r8
  807ab4:	04c02074 	movhi	r19,129
  807ab8:	2109883a 	add	r4,r4,r4
  807abc:	9cf91a04 	addi	r19,r19,-7064
  807ac0:	2109883a 	add	r4,r4,r4
  807ac4:	9909883a 	add	r4,r19,r4
  807ac8:	24000117 	ldw	r16,4(r4)
  807acc:	213ffe04 	addi	r4,r4,-8
  807ad0:	24009726 	beq	r4,r16,807d30 <_malloc_r+0x2f4>
  807ad4:	80800117 	ldw	r2,4(r16)
  807ad8:	01bfff04 	movi	r6,-4
  807adc:	014003c4 	movi	r5,15
  807ae0:	1184703a 	and	r2,r2,r6
  807ae4:	1447c83a 	sub	r3,r2,r17
  807ae8:	28c00716 	blt	r5,r3,807b08 <_malloc_r+0xcc>
  807aec:	1800920e 	bge	r3,zero,807d38 <_malloc_r+0x2fc>
  807af0:	84000317 	ldw	r16,12(r16)
  807af4:	24008e26 	beq	r4,r16,807d30 <_malloc_r+0x2f4>
  807af8:	80800117 	ldw	r2,4(r16)
  807afc:	1184703a 	and	r2,r2,r6
  807b00:	1447c83a 	sub	r3,r2,r17
  807b04:	28fff90e 	bge	r5,r3,807aec <__alt_mem_onchip_mem+0xff7ffaec>
  807b08:	3809883a 	mov	r4,r7
  807b0c:	01802074 	movhi	r6,129
  807b10:	9c000417 	ldw	r16,16(r19)
  807b14:	31b91a04 	addi	r6,r6,-7064
  807b18:	32000204 	addi	r8,r6,8
  807b1c:	82013426 	beq	r16,r8,807ff0 <_malloc_r+0x5b4>
  807b20:	80c00117 	ldw	r3,4(r16)
  807b24:	00bfff04 	movi	r2,-4
  807b28:	188e703a 	and	r7,r3,r2
  807b2c:	3c45c83a 	sub	r2,r7,r17
  807b30:	00c003c4 	movi	r3,15
  807b34:	18811f16 	blt	r3,r2,807fb4 <_malloc_r+0x578>
  807b38:	32000515 	stw	r8,20(r6)
  807b3c:	32000415 	stw	r8,16(r6)
  807b40:	10007f0e 	bge	r2,zero,807d40 <_malloc_r+0x304>
  807b44:	00807fc4 	movi	r2,511
  807b48:	11c0fd36 	bltu	r2,r7,807f40 <_malloc_r+0x504>
  807b4c:	3806d0fa 	srli	r3,r7,3
  807b50:	01c00044 	movi	r7,1
  807b54:	30800117 	ldw	r2,4(r6)
  807b58:	19400044 	addi	r5,r3,1
  807b5c:	294b883a 	add	r5,r5,r5
  807b60:	1807d0ba 	srai	r3,r3,2
  807b64:	294b883a 	add	r5,r5,r5
  807b68:	294b883a 	add	r5,r5,r5
  807b6c:	298b883a 	add	r5,r5,r6
  807b70:	38c6983a 	sll	r3,r7,r3
  807b74:	29c00017 	ldw	r7,0(r5)
  807b78:	2a7ffe04 	addi	r9,r5,-8
  807b7c:	1886b03a 	or	r3,r3,r2
  807b80:	82400315 	stw	r9,12(r16)
  807b84:	81c00215 	stw	r7,8(r16)
  807b88:	30c00115 	stw	r3,4(r6)
  807b8c:	2c000015 	stw	r16,0(r5)
  807b90:	3c000315 	stw	r16,12(r7)
  807b94:	2005d0ba 	srai	r2,r4,2
  807b98:	01400044 	movi	r5,1
  807b9c:	288a983a 	sll	r5,r5,r2
  807ba0:	19406f36 	bltu	r3,r5,807d60 <_malloc_r+0x324>
  807ba4:	28c4703a 	and	r2,r5,r3
  807ba8:	10000a1e 	bne	r2,zero,807bd4 <_malloc_r+0x198>
  807bac:	00bfff04 	movi	r2,-4
  807bb0:	294b883a 	add	r5,r5,r5
  807bb4:	2088703a 	and	r4,r4,r2
  807bb8:	28c4703a 	and	r2,r5,r3
  807bbc:	21000104 	addi	r4,r4,4
  807bc0:	1000041e 	bne	r2,zero,807bd4 <_malloc_r+0x198>
  807bc4:	294b883a 	add	r5,r5,r5
  807bc8:	28c4703a 	and	r2,r5,r3
  807bcc:	21000104 	addi	r4,r4,4
  807bd0:	103ffc26 	beq	r2,zero,807bc4 <__alt_mem_onchip_mem+0xff7ffbc4>
  807bd4:	02bfff04 	movi	r10,-4
  807bd8:	024003c4 	movi	r9,15
  807bdc:	21800044 	addi	r6,r4,1
  807be0:	318d883a 	add	r6,r6,r6
  807be4:	318d883a 	add	r6,r6,r6
  807be8:	318d883a 	add	r6,r6,r6
  807bec:	998d883a 	add	r6,r19,r6
  807bf0:	333ffe04 	addi	r12,r6,-8
  807bf4:	2017883a 	mov	r11,r4
  807bf8:	31800104 	addi	r6,r6,4
  807bfc:	34000017 	ldw	r16,0(r6)
  807c00:	31fffd04 	addi	r7,r6,-12
  807c04:	81c0041e 	bne	r16,r7,807c18 <_malloc_r+0x1dc>
  807c08:	0000fb06 	br	807ff8 <_malloc_r+0x5bc>
  807c0c:	1801030e 	bge	r3,zero,80801c <_malloc_r+0x5e0>
  807c10:	84000317 	ldw	r16,12(r16)
  807c14:	81c0f826 	beq	r16,r7,807ff8 <_malloc_r+0x5bc>
  807c18:	80800117 	ldw	r2,4(r16)
  807c1c:	1284703a 	and	r2,r2,r10
  807c20:	1447c83a 	sub	r3,r2,r17
  807c24:	48fff90e 	bge	r9,r3,807c0c <__alt_mem_onchip_mem+0xff7ffc0c>
  807c28:	80800317 	ldw	r2,12(r16)
  807c2c:	81000217 	ldw	r4,8(r16)
  807c30:	89400054 	ori	r5,r17,1
  807c34:	81400115 	stw	r5,4(r16)
  807c38:	20800315 	stw	r2,12(r4)
  807c3c:	11000215 	stw	r4,8(r2)
  807c40:	8463883a 	add	r17,r16,r17
  807c44:	9c400515 	stw	r17,20(r19)
  807c48:	9c400415 	stw	r17,16(r19)
  807c4c:	18800054 	ori	r2,r3,1
  807c50:	88800115 	stw	r2,4(r17)
  807c54:	8a000315 	stw	r8,12(r17)
  807c58:	8a000215 	stw	r8,8(r17)
  807c5c:	88e3883a 	add	r17,r17,r3
  807c60:	88c00015 	stw	r3,0(r17)
  807c64:	9009883a 	mov	r4,r18
  807c68:	080a1400 	call	80a140 <__malloc_unlock>
  807c6c:	80800204 	addi	r2,r16,8
  807c70:	00001b06 	br	807ce0 <_malloc_r+0x2a4>
  807c74:	04400404 	movi	r17,16
  807c78:	89402536 	bltu	r17,r5,807d10 <_malloc_r+0x2d4>
  807c7c:	080a11c0 	call	80a11c <__malloc_lock>
  807c80:	00800184 	movi	r2,6
  807c84:	01000084 	movi	r4,2
  807c88:	04c02074 	movhi	r19,129
  807c8c:	1085883a 	add	r2,r2,r2
  807c90:	9cf91a04 	addi	r19,r19,-7064
  807c94:	1085883a 	add	r2,r2,r2
  807c98:	9885883a 	add	r2,r19,r2
  807c9c:	14000117 	ldw	r16,4(r2)
  807ca0:	10fffe04 	addi	r3,r2,-8
  807ca4:	80c0d926 	beq	r16,r3,80800c <_malloc_r+0x5d0>
  807ca8:	80c00117 	ldw	r3,4(r16)
  807cac:	81000317 	ldw	r4,12(r16)
  807cb0:	00bfff04 	movi	r2,-4
  807cb4:	1884703a 	and	r2,r3,r2
  807cb8:	81400217 	ldw	r5,8(r16)
  807cbc:	8085883a 	add	r2,r16,r2
  807cc0:	10c00117 	ldw	r3,4(r2)
  807cc4:	29000315 	stw	r4,12(r5)
  807cc8:	21400215 	stw	r5,8(r4)
  807ccc:	18c00054 	ori	r3,r3,1
  807cd0:	10c00115 	stw	r3,4(r2)
  807cd4:	9009883a 	mov	r4,r18
  807cd8:	080a1400 	call	80a140 <__malloc_unlock>
  807cdc:	80800204 	addi	r2,r16,8
  807ce0:	dfc00a17 	ldw	ra,40(sp)
  807ce4:	df000917 	ldw	fp,36(sp)
  807ce8:	ddc00817 	ldw	r23,32(sp)
  807cec:	dd800717 	ldw	r22,28(sp)
  807cf0:	dd400617 	ldw	r21,24(sp)
  807cf4:	dd000517 	ldw	r20,20(sp)
  807cf8:	dcc00417 	ldw	r19,16(sp)
  807cfc:	dc800317 	ldw	r18,12(sp)
  807d00:	dc400217 	ldw	r17,8(sp)
  807d04:	dc000117 	ldw	r16,4(sp)
  807d08:	dec00b04 	addi	sp,sp,44
  807d0c:	f800283a 	ret
  807d10:	00800304 	movi	r2,12
  807d14:	90800015 	stw	r2,0(r18)
  807d18:	0005883a 	mov	r2,zero
  807d1c:	003ff006 	br	807ce0 <__alt_mem_onchip_mem+0xff7ffce0>
  807d20:	01002004 	movi	r4,128
  807d24:	02001004 	movi	r8,64
  807d28:	01c00fc4 	movi	r7,63
  807d2c:	003f6106 	br	807ab4 <__alt_mem_onchip_mem+0xff7ffab4>
  807d30:	4009883a 	mov	r4,r8
  807d34:	003f7506 	br	807b0c <__alt_mem_onchip_mem+0xff7ffb0c>
  807d38:	81000317 	ldw	r4,12(r16)
  807d3c:	003fde06 	br	807cb8 <__alt_mem_onchip_mem+0xff7ffcb8>
  807d40:	81c5883a 	add	r2,r16,r7
  807d44:	11400117 	ldw	r5,4(r2)
  807d48:	9009883a 	mov	r4,r18
  807d4c:	29400054 	ori	r5,r5,1
  807d50:	11400115 	stw	r5,4(r2)
  807d54:	080a1400 	call	80a140 <__malloc_unlock>
  807d58:	80800204 	addi	r2,r16,8
  807d5c:	003fe006 	br	807ce0 <__alt_mem_onchip_mem+0xff7ffce0>
  807d60:	9c000217 	ldw	r16,8(r19)
  807d64:	00bfff04 	movi	r2,-4
  807d68:	85800117 	ldw	r22,4(r16)
  807d6c:	b0ac703a 	and	r22,r22,r2
  807d70:	b4400336 	bltu	r22,r17,807d80 <_malloc_r+0x344>
  807d74:	b445c83a 	sub	r2,r22,r17
  807d78:	00c003c4 	movi	r3,15
  807d7c:	18805d16 	blt	r3,r2,807ef4 <_malloc_r+0x4b8>
  807d80:	05c02074 	movhi	r23,129
  807d84:	00802074 	movhi	r2,129
  807d88:	10864104 	addi	r2,r2,6404
  807d8c:	bdff1904 	addi	r23,r23,-924
  807d90:	15400017 	ldw	r21,0(r2)
  807d94:	b8c00017 	ldw	r3,0(r23)
  807d98:	00bfffc4 	movi	r2,-1
  807d9c:	858d883a 	add	r6,r16,r22
  807da0:	8d6b883a 	add	r21,r17,r21
  807da4:	1880ea26 	beq	r3,r2,808150 <_malloc_r+0x714>
  807da8:	ad4403c4 	addi	r21,r21,4111
  807dac:	00bc0004 	movi	r2,-4096
  807db0:	a8aa703a 	and	r21,r21,r2
  807db4:	a80b883a 	mov	r5,r21
  807db8:	9009883a 	mov	r4,r18
  807dbc:	d9800015 	stw	r6,0(sp)
  807dc0:	08085c00 	call	8085c0 <_sbrk_r>
  807dc4:	1029883a 	mov	r20,r2
  807dc8:	00bfffc4 	movi	r2,-1
  807dcc:	d9800017 	ldw	r6,0(sp)
  807dd0:	a080e826 	beq	r20,r2,808174 <_malloc_r+0x738>
  807dd4:	a180a636 	bltu	r20,r6,808070 <_malloc_r+0x634>
  807dd8:	07002074 	movhi	fp,129
  807ddc:	e7064904 	addi	fp,fp,6436
  807de0:	e0800017 	ldw	r2,0(fp)
  807de4:	a887883a 	add	r3,r21,r2
  807de8:	e0c00015 	stw	r3,0(fp)
  807dec:	3500e626 	beq	r6,r20,808188 <_malloc_r+0x74c>
  807df0:	b9000017 	ldw	r4,0(r23)
  807df4:	00bfffc4 	movi	r2,-1
  807df8:	2080ee26 	beq	r4,r2,8081b4 <_malloc_r+0x778>
  807dfc:	a185c83a 	sub	r2,r20,r6
  807e00:	10c5883a 	add	r2,r2,r3
  807e04:	e0800015 	stw	r2,0(fp)
  807e08:	a0c001cc 	andi	r3,r20,7
  807e0c:	1800bc26 	beq	r3,zero,808100 <_malloc_r+0x6c4>
  807e10:	a0e9c83a 	sub	r20,r20,r3
  807e14:	00840204 	movi	r2,4104
  807e18:	a5000204 	addi	r20,r20,8
  807e1c:	10c7c83a 	sub	r3,r2,r3
  807e20:	a545883a 	add	r2,r20,r21
  807e24:	1083ffcc 	andi	r2,r2,4095
  807e28:	18abc83a 	sub	r21,r3,r2
  807e2c:	a80b883a 	mov	r5,r21
  807e30:	9009883a 	mov	r4,r18
  807e34:	08085c00 	call	8085c0 <_sbrk_r>
  807e38:	00ffffc4 	movi	r3,-1
  807e3c:	10c0e126 	beq	r2,r3,8081c4 <_malloc_r+0x788>
  807e40:	1505c83a 	sub	r2,r2,r20
  807e44:	1545883a 	add	r2,r2,r21
  807e48:	10800054 	ori	r2,r2,1
  807e4c:	e0c00017 	ldw	r3,0(fp)
  807e50:	9d000215 	stw	r20,8(r19)
  807e54:	a0800115 	stw	r2,4(r20)
  807e58:	a8c7883a 	add	r3,r21,r3
  807e5c:	e0c00015 	stw	r3,0(fp)
  807e60:	84c00e26 	beq	r16,r19,807e9c <_malloc_r+0x460>
  807e64:	018003c4 	movi	r6,15
  807e68:	3580a72e 	bgeu	r6,r22,808108 <_malloc_r+0x6cc>
  807e6c:	81400117 	ldw	r5,4(r16)
  807e70:	013ffe04 	movi	r4,-8
  807e74:	b0bffd04 	addi	r2,r22,-12
  807e78:	1104703a 	and	r2,r2,r4
  807e7c:	2900004c 	andi	r4,r5,1
  807e80:	2088b03a 	or	r4,r4,r2
  807e84:	81000115 	stw	r4,4(r16)
  807e88:	01400144 	movi	r5,5
  807e8c:	8089883a 	add	r4,r16,r2
  807e90:	21400115 	stw	r5,4(r4)
  807e94:	21400215 	stw	r5,8(r4)
  807e98:	3080cd36 	bltu	r6,r2,8081d0 <_malloc_r+0x794>
  807e9c:	00802074 	movhi	r2,129
  807ea0:	10864004 	addi	r2,r2,6400
  807ea4:	11000017 	ldw	r4,0(r2)
  807ea8:	20c0012e 	bgeu	r4,r3,807eb0 <_malloc_r+0x474>
  807eac:	10c00015 	stw	r3,0(r2)
  807eb0:	00802074 	movhi	r2,129
  807eb4:	10863f04 	addi	r2,r2,6396
  807eb8:	11000017 	ldw	r4,0(r2)
  807ebc:	9c000217 	ldw	r16,8(r19)
  807ec0:	20c0012e 	bgeu	r4,r3,807ec8 <_malloc_r+0x48c>
  807ec4:	10c00015 	stw	r3,0(r2)
  807ec8:	80c00117 	ldw	r3,4(r16)
  807ecc:	00bfff04 	movi	r2,-4
  807ed0:	1886703a 	and	r3,r3,r2
  807ed4:	1c45c83a 	sub	r2,r3,r17
  807ed8:	1c400236 	bltu	r3,r17,807ee4 <_malloc_r+0x4a8>
  807edc:	00c003c4 	movi	r3,15
  807ee0:	18800416 	blt	r3,r2,807ef4 <_malloc_r+0x4b8>
  807ee4:	9009883a 	mov	r4,r18
  807ee8:	080a1400 	call	80a140 <__malloc_unlock>
  807eec:	0005883a 	mov	r2,zero
  807ef0:	003f7b06 	br	807ce0 <__alt_mem_onchip_mem+0xff7ffce0>
  807ef4:	88c00054 	ori	r3,r17,1
  807ef8:	80c00115 	stw	r3,4(r16)
  807efc:	8463883a 	add	r17,r16,r17
  807f00:	10800054 	ori	r2,r2,1
  807f04:	9c400215 	stw	r17,8(r19)
  807f08:	88800115 	stw	r2,4(r17)
  807f0c:	9009883a 	mov	r4,r18
  807f10:	080a1400 	call	80a140 <__malloc_unlock>
  807f14:	80800204 	addi	r2,r16,8
  807f18:	003f7106 	br	807ce0 <__alt_mem_onchip_mem+0xff7ffce0>
  807f1c:	00c00504 	movi	r3,20
  807f20:	18804a2e 	bgeu	r3,r2,80804c <_malloc_r+0x610>
  807f24:	00c01504 	movi	r3,84
  807f28:	18806e36 	bltu	r3,r2,8080e4 <_malloc_r+0x6a8>
  807f2c:	8804d33a 	srli	r2,r17,12
  807f30:	12001bc4 	addi	r8,r2,111
  807f34:	11c01b84 	addi	r7,r2,110
  807f38:	4209883a 	add	r4,r8,r8
  807f3c:	003edd06 	br	807ab4 <__alt_mem_onchip_mem+0xff7ffab4>
  807f40:	3804d27a 	srli	r2,r7,9
  807f44:	00c00104 	movi	r3,4
  807f48:	1880442e 	bgeu	r3,r2,80805c <_malloc_r+0x620>
  807f4c:	00c00504 	movi	r3,20
  807f50:	18808136 	bltu	r3,r2,808158 <_malloc_r+0x71c>
  807f54:	11401704 	addi	r5,r2,92
  807f58:	10c016c4 	addi	r3,r2,91
  807f5c:	294b883a 	add	r5,r5,r5
  807f60:	294b883a 	add	r5,r5,r5
  807f64:	294b883a 	add	r5,r5,r5
  807f68:	994b883a 	add	r5,r19,r5
  807f6c:	28800017 	ldw	r2,0(r5)
  807f70:	01802074 	movhi	r6,129
  807f74:	297ffe04 	addi	r5,r5,-8
  807f78:	31b91a04 	addi	r6,r6,-7064
  807f7c:	28806526 	beq	r5,r2,808114 <_malloc_r+0x6d8>
  807f80:	01bfff04 	movi	r6,-4
  807f84:	10c00117 	ldw	r3,4(r2)
  807f88:	1986703a 	and	r3,r3,r6
  807f8c:	38c0022e 	bgeu	r7,r3,807f98 <_malloc_r+0x55c>
  807f90:	10800217 	ldw	r2,8(r2)
  807f94:	28bffb1e 	bne	r5,r2,807f84 <__alt_mem_onchip_mem+0xff7fff84>
  807f98:	11400317 	ldw	r5,12(r2)
  807f9c:	98c00117 	ldw	r3,4(r19)
  807fa0:	81400315 	stw	r5,12(r16)
  807fa4:	80800215 	stw	r2,8(r16)
  807fa8:	2c000215 	stw	r16,8(r5)
  807fac:	14000315 	stw	r16,12(r2)
  807fb0:	003ef806 	br	807b94 <__alt_mem_onchip_mem+0xff7ffb94>
  807fb4:	88c00054 	ori	r3,r17,1
  807fb8:	80c00115 	stw	r3,4(r16)
  807fbc:	8463883a 	add	r17,r16,r17
  807fc0:	34400515 	stw	r17,20(r6)
  807fc4:	34400415 	stw	r17,16(r6)
  807fc8:	10c00054 	ori	r3,r2,1
  807fcc:	8a000315 	stw	r8,12(r17)
  807fd0:	8a000215 	stw	r8,8(r17)
  807fd4:	88c00115 	stw	r3,4(r17)
  807fd8:	88a3883a 	add	r17,r17,r2
  807fdc:	88800015 	stw	r2,0(r17)
  807fe0:	9009883a 	mov	r4,r18
  807fe4:	080a1400 	call	80a140 <__malloc_unlock>
  807fe8:	80800204 	addi	r2,r16,8
  807fec:	003f3c06 	br	807ce0 <__alt_mem_onchip_mem+0xff7ffce0>
  807ff0:	30c00117 	ldw	r3,4(r6)
  807ff4:	003ee706 	br	807b94 <__alt_mem_onchip_mem+0xff7ffb94>
  807ff8:	5ac00044 	addi	r11,r11,1
  807ffc:	588000cc 	andi	r2,r11,3
  808000:	31800204 	addi	r6,r6,8
  808004:	103efd1e 	bne	r2,zero,807bfc <__alt_mem_onchip_mem+0xff7ffbfc>
  808008:	00002406 	br	80809c <_malloc_r+0x660>
  80800c:	14000317 	ldw	r16,12(r2)
  808010:	143f251e 	bne	r2,r16,807ca8 <__alt_mem_onchip_mem+0xff7ffca8>
  808014:	21000084 	addi	r4,r4,2
  808018:	003ebc06 	br	807b0c <__alt_mem_onchip_mem+0xff7ffb0c>
  80801c:	8085883a 	add	r2,r16,r2
  808020:	10c00117 	ldw	r3,4(r2)
  808024:	81000317 	ldw	r4,12(r16)
  808028:	81400217 	ldw	r5,8(r16)
  80802c:	18c00054 	ori	r3,r3,1
  808030:	10c00115 	stw	r3,4(r2)
  808034:	29000315 	stw	r4,12(r5)
  808038:	21400215 	stw	r5,8(r4)
  80803c:	9009883a 	mov	r4,r18
  808040:	080a1400 	call	80a140 <__malloc_unlock>
  808044:	80800204 	addi	r2,r16,8
  808048:	003f2506 	br	807ce0 <__alt_mem_onchip_mem+0xff7ffce0>
  80804c:	12001704 	addi	r8,r2,92
  808050:	11c016c4 	addi	r7,r2,91
  808054:	4209883a 	add	r4,r8,r8
  808058:	003e9606 	br	807ab4 <__alt_mem_onchip_mem+0xff7ffab4>
  80805c:	3804d1ba 	srli	r2,r7,6
  808060:	11400e44 	addi	r5,r2,57
  808064:	10c00e04 	addi	r3,r2,56
  808068:	294b883a 	add	r5,r5,r5
  80806c:	003fbc06 	br	807f60 <__alt_mem_onchip_mem+0xff7fff60>
  808070:	84ff5926 	beq	r16,r19,807dd8 <__alt_mem_onchip_mem+0xff7ffdd8>
  808074:	00802074 	movhi	r2,129
  808078:	10b91a04 	addi	r2,r2,-7064
  80807c:	14000217 	ldw	r16,8(r2)
  808080:	00bfff04 	movi	r2,-4
  808084:	80c00117 	ldw	r3,4(r16)
  808088:	1886703a 	and	r3,r3,r2
  80808c:	003f9106 	br	807ed4 <__alt_mem_onchip_mem+0xff7ffed4>
  808090:	60800217 	ldw	r2,8(r12)
  808094:	213fffc4 	addi	r4,r4,-1
  808098:	1300651e 	bne	r2,r12,808230 <_malloc_r+0x7f4>
  80809c:	208000cc 	andi	r2,r4,3
  8080a0:	633ffe04 	addi	r12,r12,-8
  8080a4:	103ffa1e 	bne	r2,zero,808090 <__alt_mem_onchip_mem+0xff800090>
  8080a8:	98800117 	ldw	r2,4(r19)
  8080ac:	0146303a 	nor	r3,zero,r5
  8080b0:	1884703a 	and	r2,r3,r2
  8080b4:	98800115 	stw	r2,4(r19)
  8080b8:	294b883a 	add	r5,r5,r5
  8080bc:	117f2836 	bltu	r2,r5,807d60 <__alt_mem_onchip_mem+0xff7ffd60>
  8080c0:	283f2726 	beq	r5,zero,807d60 <__alt_mem_onchip_mem+0xff7ffd60>
  8080c4:	2886703a 	and	r3,r5,r2
  8080c8:	5809883a 	mov	r4,r11
  8080cc:	183ec31e 	bne	r3,zero,807bdc <__alt_mem_onchip_mem+0xff7ffbdc>
  8080d0:	294b883a 	add	r5,r5,r5
  8080d4:	2886703a 	and	r3,r5,r2
  8080d8:	21000104 	addi	r4,r4,4
  8080dc:	183ffc26 	beq	r3,zero,8080d0 <__alt_mem_onchip_mem+0xff8000d0>
  8080e0:	003ebe06 	br	807bdc <__alt_mem_onchip_mem+0xff7ffbdc>
  8080e4:	00c05504 	movi	r3,340
  8080e8:	18801236 	bltu	r3,r2,808134 <_malloc_r+0x6f8>
  8080ec:	8804d3fa 	srli	r2,r17,15
  8080f0:	12001e04 	addi	r8,r2,120
  8080f4:	11c01dc4 	addi	r7,r2,119
  8080f8:	4209883a 	add	r4,r8,r8
  8080fc:	003e6d06 	br	807ab4 <__alt_mem_onchip_mem+0xff7ffab4>
  808100:	00c40004 	movi	r3,4096
  808104:	003f4606 	br	807e20 <__alt_mem_onchip_mem+0xff7ffe20>
  808108:	00800044 	movi	r2,1
  80810c:	a0800115 	stw	r2,4(r20)
  808110:	003f7406 	br	807ee4 <__alt_mem_onchip_mem+0xff7ffee4>
  808114:	1805d0ba 	srai	r2,r3,2
  808118:	01c00044 	movi	r7,1
  80811c:	30c00117 	ldw	r3,4(r6)
  808120:	388e983a 	sll	r7,r7,r2
  808124:	2805883a 	mov	r2,r5
  808128:	38c6b03a 	or	r3,r7,r3
  80812c:	30c00115 	stw	r3,4(r6)
  808130:	003f9b06 	br	807fa0 <__alt_mem_onchip_mem+0xff7fffa0>
  808134:	00c15504 	movi	r3,1364
  808138:	18801a36 	bltu	r3,r2,8081a4 <_malloc_r+0x768>
  80813c:	8804d4ba 	srli	r2,r17,18
  808140:	12001f44 	addi	r8,r2,125
  808144:	11c01f04 	addi	r7,r2,124
  808148:	4209883a 	add	r4,r8,r8
  80814c:	003e5906 	br	807ab4 <__alt_mem_onchip_mem+0xff7ffab4>
  808150:	ad400404 	addi	r21,r21,16
  808154:	003f1706 	br	807db4 <__alt_mem_onchip_mem+0xff7ffdb4>
  808158:	00c01504 	movi	r3,84
  80815c:	18802336 	bltu	r3,r2,8081ec <_malloc_r+0x7b0>
  808160:	3804d33a 	srli	r2,r7,12
  808164:	11401bc4 	addi	r5,r2,111
  808168:	10c01b84 	addi	r3,r2,110
  80816c:	294b883a 	add	r5,r5,r5
  808170:	003f7b06 	br	807f60 <__alt_mem_onchip_mem+0xff7fff60>
  808174:	9c000217 	ldw	r16,8(r19)
  808178:	00bfff04 	movi	r2,-4
  80817c:	80c00117 	ldw	r3,4(r16)
  808180:	1886703a 	and	r3,r3,r2
  808184:	003f5306 	br	807ed4 <__alt_mem_onchip_mem+0xff7ffed4>
  808188:	3083ffcc 	andi	r2,r6,4095
  80818c:	103f181e 	bne	r2,zero,807df0 <__alt_mem_onchip_mem+0xff7ffdf0>
  808190:	99000217 	ldw	r4,8(r19)
  808194:	b545883a 	add	r2,r22,r21
  808198:	10800054 	ori	r2,r2,1
  80819c:	20800115 	stw	r2,4(r4)
  8081a0:	003f3e06 	br	807e9c <__alt_mem_onchip_mem+0xff7ffe9c>
  8081a4:	01003f84 	movi	r4,254
  8081a8:	02001fc4 	movi	r8,127
  8081ac:	01c01f84 	movi	r7,126
  8081b0:	003e4006 	br	807ab4 <__alt_mem_onchip_mem+0xff7ffab4>
  8081b4:	00802074 	movhi	r2,129
  8081b8:	10bf1904 	addi	r2,r2,-924
  8081bc:	15000015 	stw	r20,0(r2)
  8081c0:	003f1106 	br	807e08 <__alt_mem_onchip_mem+0xff7ffe08>
  8081c4:	00800044 	movi	r2,1
  8081c8:	002b883a 	mov	r21,zero
  8081cc:	003f1f06 	br	807e4c <__alt_mem_onchip_mem+0xff7ffe4c>
  8081d0:	81400204 	addi	r5,r16,8
  8081d4:	9009883a 	mov	r4,r18
  8081d8:	0806e0c0 	call	806e0c <_free_r>
  8081dc:	00802074 	movhi	r2,129
  8081e0:	10864904 	addi	r2,r2,6436
  8081e4:	10c00017 	ldw	r3,0(r2)
  8081e8:	003f2c06 	br	807e9c <__alt_mem_onchip_mem+0xff7ffe9c>
  8081ec:	00c05504 	movi	r3,340
  8081f0:	18800536 	bltu	r3,r2,808208 <_malloc_r+0x7cc>
  8081f4:	3804d3fa 	srli	r2,r7,15
  8081f8:	11401e04 	addi	r5,r2,120
  8081fc:	10c01dc4 	addi	r3,r2,119
  808200:	294b883a 	add	r5,r5,r5
  808204:	003f5606 	br	807f60 <__alt_mem_onchip_mem+0xff7fff60>
  808208:	00c15504 	movi	r3,1364
  80820c:	18800536 	bltu	r3,r2,808224 <_malloc_r+0x7e8>
  808210:	3804d4ba 	srli	r2,r7,18
  808214:	11401f44 	addi	r5,r2,125
  808218:	10c01f04 	addi	r3,r2,124
  80821c:	294b883a 	add	r5,r5,r5
  808220:	003f4f06 	br	807f60 <__alt_mem_onchip_mem+0xff7fff60>
  808224:	01403f84 	movi	r5,254
  808228:	00c01f84 	movi	r3,126
  80822c:	003f4c06 	br	807f60 <__alt_mem_onchip_mem+0xff7fff60>
  808230:	98800117 	ldw	r2,4(r19)
  808234:	003fa006 	br	8080b8 <__alt_mem_onchip_mem+0xff8000b8>
  808238:	8808d0fa 	srli	r4,r17,3
  80823c:	20800044 	addi	r2,r4,1
  808240:	1085883a 	add	r2,r2,r2
  808244:	003e9006 	br	807c88 <__alt_mem_onchip_mem+0xff7ffc88>

00808248 <memset>:
  808248:	20c000cc 	andi	r3,r4,3
  80824c:	2005883a 	mov	r2,r4
  808250:	18004426 	beq	r3,zero,808364 <memset+0x11c>
  808254:	31ffffc4 	addi	r7,r6,-1
  808258:	30004026 	beq	r6,zero,80835c <memset+0x114>
  80825c:	2813883a 	mov	r9,r5
  808260:	200d883a 	mov	r6,r4
  808264:	2007883a 	mov	r3,r4
  808268:	00000406 	br	80827c <memset+0x34>
  80826c:	3a3fffc4 	addi	r8,r7,-1
  808270:	31800044 	addi	r6,r6,1
  808274:	38003926 	beq	r7,zero,80835c <memset+0x114>
  808278:	400f883a 	mov	r7,r8
  80827c:	18c00044 	addi	r3,r3,1
  808280:	32400005 	stb	r9,0(r6)
  808284:	1a0000cc 	andi	r8,r3,3
  808288:	403ff81e 	bne	r8,zero,80826c <__alt_mem_onchip_mem+0xff80026c>
  80828c:	010000c4 	movi	r4,3
  808290:	21c02d2e 	bgeu	r4,r7,808348 <memset+0x100>
  808294:	29003fcc 	andi	r4,r5,255
  808298:	200c923a 	slli	r6,r4,8
  80829c:	3108b03a 	or	r4,r6,r4
  8082a0:	200c943a 	slli	r6,r4,16
  8082a4:	218cb03a 	or	r6,r4,r6
  8082a8:	010003c4 	movi	r4,15
  8082ac:	21c0182e 	bgeu	r4,r7,808310 <memset+0xc8>
  8082b0:	3b3ffc04 	addi	r12,r7,-16
  8082b4:	6018d13a 	srli	r12,r12,4
  8082b8:	1a000104 	addi	r8,r3,4
  8082bc:	1ac00204 	addi	r11,r3,8
  8082c0:	6008913a 	slli	r4,r12,4
  8082c4:	1a800304 	addi	r10,r3,12
  8082c8:	1813883a 	mov	r9,r3
  8082cc:	21000504 	addi	r4,r4,20
  8082d0:	1909883a 	add	r4,r3,r4
  8082d4:	49800015 	stw	r6,0(r9)
  8082d8:	41800015 	stw	r6,0(r8)
  8082dc:	59800015 	stw	r6,0(r11)
  8082e0:	51800015 	stw	r6,0(r10)
  8082e4:	42000404 	addi	r8,r8,16
  8082e8:	4a400404 	addi	r9,r9,16
  8082ec:	5ac00404 	addi	r11,r11,16
  8082f0:	52800404 	addi	r10,r10,16
  8082f4:	413ff71e 	bne	r8,r4,8082d4 <__alt_mem_onchip_mem+0xff8002d4>
  8082f8:	63000044 	addi	r12,r12,1
  8082fc:	6018913a 	slli	r12,r12,4
  808300:	39c003cc 	andi	r7,r7,15
  808304:	010000c4 	movi	r4,3
  808308:	1b07883a 	add	r3,r3,r12
  80830c:	21c00e2e 	bgeu	r4,r7,808348 <memset+0x100>
  808310:	1813883a 	mov	r9,r3
  808314:	3811883a 	mov	r8,r7
  808318:	010000c4 	movi	r4,3
  80831c:	49800015 	stw	r6,0(r9)
  808320:	423fff04 	addi	r8,r8,-4
  808324:	4a400104 	addi	r9,r9,4
  808328:	223ffc36 	bltu	r4,r8,80831c <__alt_mem_onchip_mem+0xff80031c>
  80832c:	393fff04 	addi	r4,r7,-4
  808330:	2008d0ba 	srli	r4,r4,2
  808334:	39c000cc 	andi	r7,r7,3
  808338:	21000044 	addi	r4,r4,1
  80833c:	2109883a 	add	r4,r4,r4
  808340:	2109883a 	add	r4,r4,r4
  808344:	1907883a 	add	r3,r3,r4
  808348:	38000526 	beq	r7,zero,808360 <memset+0x118>
  80834c:	19cf883a 	add	r7,r3,r7
  808350:	19400005 	stb	r5,0(r3)
  808354:	18c00044 	addi	r3,r3,1
  808358:	38fffd1e 	bne	r7,r3,808350 <__alt_mem_onchip_mem+0xff800350>
  80835c:	f800283a 	ret
  808360:	f800283a 	ret
  808364:	2007883a 	mov	r3,r4
  808368:	300f883a 	mov	r7,r6
  80836c:	003fc706 	br	80828c <__alt_mem_onchip_mem+0xff80028c>

00808370 <_open_r>:
  808370:	defffd04 	addi	sp,sp,-12
  808374:	2805883a 	mov	r2,r5
  808378:	dc000015 	stw	r16,0(sp)
  80837c:	04002074 	movhi	r16,129
  808380:	dc400115 	stw	r17,4(sp)
  808384:	300b883a 	mov	r5,r6
  808388:	84063e04 	addi	r16,r16,6392
  80838c:	2023883a 	mov	r17,r4
  808390:	380d883a 	mov	r6,r7
  808394:	1009883a 	mov	r4,r2
  808398:	dfc00215 	stw	ra,8(sp)
  80839c:	80000015 	stw	zero,0(r16)
  8083a0:	080a2640 	call	80a264 <open>
  8083a4:	00ffffc4 	movi	r3,-1
  8083a8:	10c00526 	beq	r2,r3,8083c0 <_open_r+0x50>
  8083ac:	dfc00217 	ldw	ra,8(sp)
  8083b0:	dc400117 	ldw	r17,4(sp)
  8083b4:	dc000017 	ldw	r16,0(sp)
  8083b8:	dec00304 	addi	sp,sp,12
  8083bc:	f800283a 	ret
  8083c0:	80c00017 	ldw	r3,0(r16)
  8083c4:	183ff926 	beq	r3,zero,8083ac <__alt_mem_onchip_mem+0xff8003ac>
  8083c8:	88c00015 	stw	r3,0(r17)
  8083cc:	003ff706 	br	8083ac <__alt_mem_onchip_mem+0xff8003ac>

008083d0 <lflush>:
  8083d0:	2080030b 	ldhu	r2,12(r4)
  8083d4:	00c00244 	movi	r3,9
  8083d8:	1080024c 	andi	r2,r2,9
  8083dc:	10c00226 	beq	r2,r3,8083e8 <lflush+0x18>
  8083e0:	0005883a 	mov	r2,zero
  8083e4:	f800283a 	ret
  8083e8:	080680c1 	jmpi	80680c <fflush>

008083ec <__srefill_r>:
  8083ec:	defffc04 	addi	sp,sp,-16
  8083f0:	dc400115 	stw	r17,4(sp)
  8083f4:	dc000015 	stw	r16,0(sp)
  8083f8:	dfc00315 	stw	ra,12(sp)
  8083fc:	dc800215 	stw	r18,8(sp)
  808400:	2023883a 	mov	r17,r4
  808404:	2821883a 	mov	r16,r5
  808408:	20000226 	beq	r4,zero,808414 <__srefill_r+0x28>
  80840c:	20800e17 	ldw	r2,56(r4)
  808410:	10003c26 	beq	r2,zero,808504 <__srefill_r+0x118>
  808414:	80c0030b 	ldhu	r3,12(r16)
  808418:	1908000c 	andi	r4,r3,8192
  80841c:	1805883a 	mov	r2,r3
  808420:	2000071e 	bne	r4,zero,808440 <__srefill_r+0x54>
  808424:	81001917 	ldw	r4,100(r16)
  808428:	18880014 	ori	r2,r3,8192
  80842c:	00f7ffc4 	movi	r3,-8193
  808430:	20c8703a 	and	r4,r4,r3
  808434:	8080030d 	sth	r2,12(r16)
  808438:	1007883a 	mov	r3,r2
  80843c:	81001915 	stw	r4,100(r16)
  808440:	80000115 	stw	zero,4(r16)
  808444:	1100080c 	andi	r4,r2,32
  808448:	2000571e 	bne	r4,zero,8085a8 <__srefill_r+0x1bc>
  80844c:	1100010c 	andi	r4,r2,4
  808450:	20001f26 	beq	r4,zero,8084d0 <__srefill_r+0xe4>
  808454:	81400c17 	ldw	r5,48(r16)
  808458:	28000826 	beq	r5,zero,80847c <__srefill_r+0x90>
  80845c:	80801004 	addi	r2,r16,64
  808460:	28800226 	beq	r5,r2,80846c <__srefill_r+0x80>
  808464:	8809883a 	mov	r4,r17
  808468:	0806e0c0 	call	806e0c <_free_r>
  80846c:	80800f17 	ldw	r2,60(r16)
  808470:	80000c15 	stw	zero,48(r16)
  808474:	80800115 	stw	r2,4(r16)
  808478:	1000391e 	bne	r2,zero,808560 <__srefill_r+0x174>
  80847c:	80800417 	ldw	r2,16(r16)
  808480:	10004b26 	beq	r2,zero,8085b0 <__srefill_r+0x1c4>
  808484:	8480030b 	ldhu	r18,12(r16)
  808488:	908000cc 	andi	r2,r18,3
  80848c:	10001f1e 	bne	r2,zero,80850c <__srefill_r+0x120>
  808490:	81800417 	ldw	r6,16(r16)
  808494:	80800817 	ldw	r2,32(r16)
  808498:	81c00517 	ldw	r7,20(r16)
  80849c:	81400717 	ldw	r5,28(r16)
  8084a0:	81800015 	stw	r6,0(r16)
  8084a4:	8809883a 	mov	r4,r17
  8084a8:	103ee83a 	callr	r2
  8084ac:	80800115 	stw	r2,4(r16)
  8084b0:	00800e0e 	bge	zero,r2,8084ec <__srefill_r+0x100>
  8084b4:	0005883a 	mov	r2,zero
  8084b8:	dfc00317 	ldw	ra,12(sp)
  8084bc:	dc800217 	ldw	r18,8(sp)
  8084c0:	dc400117 	ldw	r17,4(sp)
  8084c4:	dc000017 	ldw	r16,0(sp)
  8084c8:	dec00404 	addi	sp,sp,16
  8084cc:	f800283a 	ret
  8084d0:	1100040c 	andi	r4,r2,16
  8084d4:	20003026 	beq	r4,zero,808598 <__srefill_r+0x1ac>
  8084d8:	1080020c 	andi	r2,r2,8
  8084dc:	1000241e 	bne	r2,zero,808570 <__srefill_r+0x184>
  8084e0:	18c00114 	ori	r3,r3,4
  8084e4:	80c0030d 	sth	r3,12(r16)
  8084e8:	003fe406 	br	80847c <__alt_mem_onchip_mem+0xff80047c>
  8084ec:	80c0030b 	ldhu	r3,12(r16)
  8084f0:	1000161e 	bne	r2,zero,80854c <__srefill_r+0x160>
  8084f4:	18c00814 	ori	r3,r3,32
  8084f8:	00bfffc4 	movi	r2,-1
  8084fc:	80c0030d 	sth	r3,12(r16)
  808500:	003fed06 	br	8084b8 <__alt_mem_onchip_mem+0xff8004b8>
  808504:	0806b8c0 	call	806b8c <__sinit>
  808508:	003fc206 	br	808414 <__alt_mem_onchip_mem+0xff800414>
  80850c:	00802074 	movhi	r2,129
  808510:	10bf1704 	addi	r2,r2,-932
  808514:	11000017 	ldw	r4,0(r2)
  808518:	01402074 	movhi	r5,129
  80851c:	00800044 	movi	r2,1
  808520:	2960f404 	addi	r5,r5,-31792
  808524:	8080030d 	sth	r2,12(r16)
  808528:	08075f80 	call	8075f8 <_fwalk>
  80852c:	00800244 	movi	r2,9
  808530:	8480030d 	sth	r18,12(r16)
  808534:	9480024c 	andi	r18,r18,9
  808538:	90bfd51e 	bne	r18,r2,808490 <__alt_mem_onchip_mem+0xff800490>
  80853c:	800b883a 	mov	r5,r16
  808540:	8809883a 	mov	r4,r17
  808544:	08065940 	call	806594 <__sflush_r>
  808548:	003fd106 	br	808490 <__alt_mem_onchip_mem+0xff800490>
  80854c:	18c01014 	ori	r3,r3,64
  808550:	80000115 	stw	zero,4(r16)
  808554:	00bfffc4 	movi	r2,-1
  808558:	80c0030d 	sth	r3,12(r16)
  80855c:	003fd606 	br	8084b8 <__alt_mem_onchip_mem+0xff8004b8>
  808560:	80c00e17 	ldw	r3,56(r16)
  808564:	0005883a 	mov	r2,zero
  808568:	80c00015 	stw	r3,0(r16)
  80856c:	003fd206 	br	8084b8 <__alt_mem_onchip_mem+0xff8004b8>
  808570:	800b883a 	mov	r5,r16
  808574:	8809883a 	mov	r4,r17
  808578:	08067b00 	call	8067b0 <_fflush_r>
  80857c:	10000a1e 	bne	r2,zero,8085a8 <__srefill_r+0x1bc>
  808580:	8080030b 	ldhu	r2,12(r16)
  808584:	00fffdc4 	movi	r3,-9
  808588:	80000215 	stw	zero,8(r16)
  80858c:	1886703a 	and	r3,r3,r2
  808590:	80000615 	stw	zero,24(r16)
  808594:	003fd206 	br	8084e0 <__alt_mem_onchip_mem+0xff8004e0>
  808598:	00800244 	movi	r2,9
  80859c:	88800015 	stw	r2,0(r17)
  8085a0:	18c01014 	ori	r3,r3,64
  8085a4:	80c0030d 	sth	r3,12(r16)
  8085a8:	00bfffc4 	movi	r2,-1
  8085ac:	003fc206 	br	8084b8 <__alt_mem_onchip_mem+0xff8004b8>
  8085b0:	800b883a 	mov	r5,r16
  8085b4:	8809883a 	mov	r4,r17
  8085b8:	08078800 	call	807880 <__smakebuf_r>
  8085bc:	003fb106 	br	808484 <__alt_mem_onchip_mem+0xff800484>

008085c0 <_sbrk_r>:
  8085c0:	defffd04 	addi	sp,sp,-12
  8085c4:	dc000015 	stw	r16,0(sp)
  8085c8:	04002074 	movhi	r16,129
  8085cc:	dc400115 	stw	r17,4(sp)
  8085d0:	84063e04 	addi	r16,r16,6392
  8085d4:	2023883a 	mov	r17,r4
  8085d8:	2809883a 	mov	r4,r5
  8085dc:	dfc00215 	stw	ra,8(sp)
  8085e0:	80000015 	stw	zero,0(r16)
  8085e4:	080a5540 	call	80a554 <sbrk>
  8085e8:	00ffffc4 	movi	r3,-1
  8085ec:	10c00526 	beq	r2,r3,808604 <_sbrk_r+0x44>
  8085f0:	dfc00217 	ldw	ra,8(sp)
  8085f4:	dc400117 	ldw	r17,4(sp)
  8085f8:	dc000017 	ldw	r16,0(sp)
  8085fc:	dec00304 	addi	sp,sp,12
  808600:	f800283a 	ret
  808604:	80c00017 	ldw	r3,0(r16)
  808608:	183ff926 	beq	r3,zero,8085f0 <__alt_mem_onchip_mem+0xff8005f0>
  80860c:	88c00015 	stw	r3,0(r17)
  808610:	003ff706 	br	8085f0 <__alt_mem_onchip_mem+0xff8005f0>

00808614 <__sread>:
  808614:	defffe04 	addi	sp,sp,-8
  808618:	dc000015 	stw	r16,0(sp)
  80861c:	2821883a 	mov	r16,r5
  808620:	2940038f 	ldh	r5,14(r5)
  808624:	dfc00115 	stw	ra,4(sp)
  808628:	08091a80 	call	8091a8 <_read_r>
  80862c:	10000716 	blt	r2,zero,80864c <__sread+0x38>
  808630:	80c01417 	ldw	r3,80(r16)
  808634:	1887883a 	add	r3,r3,r2
  808638:	80c01415 	stw	r3,80(r16)
  80863c:	dfc00117 	ldw	ra,4(sp)
  808640:	dc000017 	ldw	r16,0(sp)
  808644:	dec00204 	addi	sp,sp,8
  808648:	f800283a 	ret
  80864c:	80c0030b 	ldhu	r3,12(r16)
  808650:	18fbffcc 	andi	r3,r3,61439
  808654:	80c0030d 	sth	r3,12(r16)
  808658:	dfc00117 	ldw	ra,4(sp)
  80865c:	dc000017 	ldw	r16,0(sp)
  808660:	dec00204 	addi	sp,sp,8
  808664:	f800283a 	ret

00808668 <__seofread>:
  808668:	0005883a 	mov	r2,zero
  80866c:	f800283a 	ret

00808670 <__swrite>:
  808670:	2880030b 	ldhu	r2,12(r5)
  808674:	defffb04 	addi	sp,sp,-20
  808678:	dcc00315 	stw	r19,12(sp)
  80867c:	dc800215 	stw	r18,8(sp)
  808680:	dc400115 	stw	r17,4(sp)
  808684:	dc000015 	stw	r16,0(sp)
  808688:	dfc00415 	stw	ra,16(sp)
  80868c:	10c0400c 	andi	r3,r2,256
  808690:	2821883a 	mov	r16,r5
  808694:	2023883a 	mov	r17,r4
  808698:	3025883a 	mov	r18,r6
  80869c:	3827883a 	mov	r19,r7
  8086a0:	18000526 	beq	r3,zero,8086b8 <__swrite+0x48>
  8086a4:	2940038f 	ldh	r5,14(r5)
  8086a8:	01c00084 	movi	r7,2
  8086ac:	000d883a 	mov	r6,zero
  8086b0:	0808dc00 	call	808dc0 <_lseek_r>
  8086b4:	8080030b 	ldhu	r2,12(r16)
  8086b8:	8140038f 	ldh	r5,14(r16)
  8086bc:	10bbffcc 	andi	r2,r2,61439
  8086c0:	980f883a 	mov	r7,r19
  8086c4:	900d883a 	mov	r6,r18
  8086c8:	8809883a 	mov	r4,r17
  8086cc:	8080030d 	sth	r2,12(r16)
  8086d0:	dfc00417 	ldw	ra,16(sp)
  8086d4:	dcc00317 	ldw	r19,12(sp)
  8086d8:	dc800217 	ldw	r18,8(sp)
  8086dc:	dc400117 	ldw	r17,4(sp)
  8086e0:	dc000017 	ldw	r16,0(sp)
  8086e4:	dec00504 	addi	sp,sp,20
  8086e8:	08087501 	jmpi	808750 <_write_r>

008086ec <__sseek>:
  8086ec:	defffe04 	addi	sp,sp,-8
  8086f0:	dc000015 	stw	r16,0(sp)
  8086f4:	2821883a 	mov	r16,r5
  8086f8:	2940038f 	ldh	r5,14(r5)
  8086fc:	dfc00115 	stw	ra,4(sp)
  808700:	0808dc00 	call	808dc0 <_lseek_r>
  808704:	00ffffc4 	movi	r3,-1
  808708:	10c00826 	beq	r2,r3,80872c <__sseek+0x40>
  80870c:	80c0030b 	ldhu	r3,12(r16)
  808710:	80801415 	stw	r2,80(r16)
  808714:	18c40014 	ori	r3,r3,4096
  808718:	80c0030d 	sth	r3,12(r16)
  80871c:	dfc00117 	ldw	ra,4(sp)
  808720:	dc000017 	ldw	r16,0(sp)
  808724:	dec00204 	addi	sp,sp,8
  808728:	f800283a 	ret
  80872c:	80c0030b 	ldhu	r3,12(r16)
  808730:	18fbffcc 	andi	r3,r3,61439
  808734:	80c0030d 	sth	r3,12(r16)
  808738:	dfc00117 	ldw	ra,4(sp)
  80873c:	dc000017 	ldw	r16,0(sp)
  808740:	dec00204 	addi	sp,sp,8
  808744:	f800283a 	ret

00808748 <__sclose>:
  808748:	2940038f 	ldh	r5,14(r5)
  80874c:	08087b01 	jmpi	8087b0 <_close_r>

00808750 <_write_r>:
  808750:	defffd04 	addi	sp,sp,-12
  808754:	2805883a 	mov	r2,r5
  808758:	dc000015 	stw	r16,0(sp)
  80875c:	04002074 	movhi	r16,129
  808760:	dc400115 	stw	r17,4(sp)
  808764:	300b883a 	mov	r5,r6
  808768:	84063e04 	addi	r16,r16,6392
  80876c:	2023883a 	mov	r17,r4
  808770:	380d883a 	mov	r6,r7
  808774:	1009883a 	mov	r4,r2
  808778:	dfc00215 	stw	ra,8(sp)
  80877c:	80000015 	stw	zero,0(r16)
  808780:	080a7e40 	call	80a7e4 <write>
  808784:	00ffffc4 	movi	r3,-1
  808788:	10c00526 	beq	r2,r3,8087a0 <_write_r+0x50>
  80878c:	dfc00217 	ldw	ra,8(sp)
  808790:	dc400117 	ldw	r17,4(sp)
  808794:	dc000017 	ldw	r16,0(sp)
  808798:	dec00304 	addi	sp,sp,12
  80879c:	f800283a 	ret
  8087a0:	80c00017 	ldw	r3,0(r16)
  8087a4:	183ff926 	beq	r3,zero,80878c <__alt_mem_onchip_mem+0xff80078c>
  8087a8:	88c00015 	stw	r3,0(r17)
  8087ac:	003ff706 	br	80878c <__alt_mem_onchip_mem+0xff80078c>

008087b0 <_close_r>:
  8087b0:	defffd04 	addi	sp,sp,-12
  8087b4:	dc000015 	stw	r16,0(sp)
  8087b8:	04002074 	movhi	r16,129
  8087bc:	dc400115 	stw	r17,4(sp)
  8087c0:	84063e04 	addi	r16,r16,6392
  8087c4:	2023883a 	mov	r17,r4
  8087c8:	2809883a 	mov	r4,r5
  8087cc:	dfc00215 	stw	ra,8(sp)
  8087d0:	80000015 	stw	zero,0(r16)
  8087d4:	0809bdc0 	call	809bdc <close>
  8087d8:	00ffffc4 	movi	r3,-1
  8087dc:	10c00526 	beq	r2,r3,8087f4 <_close_r+0x44>
  8087e0:	dfc00217 	ldw	ra,8(sp)
  8087e4:	dc400117 	ldw	r17,4(sp)
  8087e8:	dc000017 	ldw	r16,0(sp)
  8087ec:	dec00304 	addi	sp,sp,12
  8087f0:	f800283a 	ret
  8087f4:	80c00017 	ldw	r3,0(r16)
  8087f8:	183ff926 	beq	r3,zero,8087e0 <__alt_mem_onchip_mem+0xff8007e0>
  8087fc:	88c00015 	stw	r3,0(r17)
  808800:	003ff706 	br	8087e0 <__alt_mem_onchip_mem+0xff8007e0>

00808804 <__sflags>:
  808804:	28800007 	ldb	r2,0(r5)
  808808:	00c01c84 	movi	r3,114
  80880c:	10c02426 	beq	r2,r3,8088a0 <__sflags+0x9c>
  808810:	00c01dc4 	movi	r3,119
  808814:	10c01e26 	beq	r2,r3,808890 <__sflags+0x8c>
  808818:	00c01844 	movi	r3,97
  80881c:	10c00426 	beq	r2,r3,808830 <__sflags+0x2c>
  808820:	00800584 	movi	r2,22
  808824:	20800015 	stw	r2,0(r4)
  808828:	0005883a 	mov	r2,zero
  80882c:	f800283a 	ret
  808830:	02c08204 	movi	r11,520
  808834:	01000044 	movi	r4,1
  808838:	00804204 	movi	r2,264
  80883c:	01c00ac4 	movi	r7,43
  808840:	02bff8c4 	movi	r10,-29
  808844:	027fff04 	movi	r9,-4
  808848:	02001e04 	movi	r8,120
  80884c:	29400044 	addi	r5,r5,1
  808850:	28c00007 	ldb	r3,0(r5)
  808854:	18000626 	beq	r3,zero,808870 <__sflags+0x6c>
  808858:	19c00826 	beq	r3,r7,80887c <__sflags+0x78>
  80885c:	1a3ffb1e 	bne	r3,r8,80884c <__alt_mem_onchip_mem+0xff80084c>
  808860:	29400044 	addi	r5,r5,1
  808864:	28c00007 	ldb	r3,0(r5)
  808868:	21020014 	ori	r4,r4,2048
  80886c:	183ffa1e 	bne	r3,zero,808858 <__alt_mem_onchip_mem+0xff800858>
  808870:	22c8b03a 	or	r4,r4,r11
  808874:	31000015 	stw	r4,0(r6)
  808878:	f800283a 	ret
  80887c:	1284703a 	and	r2,r2,r10
  808880:	2248703a 	and	r4,r4,r9
  808884:	10800414 	ori	r2,r2,16
  808888:	21000094 	ori	r4,r4,2
  80888c:	003fef06 	br	80884c <__alt_mem_onchip_mem+0xff80084c>
  808890:	02c18004 	movi	r11,1536
  808894:	01000044 	movi	r4,1
  808898:	00800204 	movi	r2,8
  80889c:	003fe706 	br	80883c <__alt_mem_onchip_mem+0xff80083c>
  8088a0:	0017883a 	mov	r11,zero
  8088a4:	0009883a 	mov	r4,zero
  8088a8:	00800104 	movi	r2,4
  8088ac:	003fe306 	br	80883c <__alt_mem_onchip_mem+0xff80083c>

008088b0 <__sfvwrite_r>:
  8088b0:	30800217 	ldw	r2,8(r6)
  8088b4:	10006726 	beq	r2,zero,808a54 <__sfvwrite_r+0x1a4>
  8088b8:	28c0030b 	ldhu	r3,12(r5)
  8088bc:	defff404 	addi	sp,sp,-48
  8088c0:	dd400715 	stw	r21,28(sp)
  8088c4:	dd000615 	stw	r20,24(sp)
  8088c8:	dc000215 	stw	r16,8(sp)
  8088cc:	dfc00b15 	stw	ra,44(sp)
  8088d0:	df000a15 	stw	fp,40(sp)
  8088d4:	ddc00915 	stw	r23,36(sp)
  8088d8:	dd800815 	stw	r22,32(sp)
  8088dc:	dcc00515 	stw	r19,20(sp)
  8088e0:	dc800415 	stw	r18,16(sp)
  8088e4:	dc400315 	stw	r17,12(sp)
  8088e8:	1880020c 	andi	r2,r3,8
  8088ec:	2821883a 	mov	r16,r5
  8088f0:	202b883a 	mov	r21,r4
  8088f4:	3029883a 	mov	r20,r6
  8088f8:	10002726 	beq	r2,zero,808998 <__sfvwrite_r+0xe8>
  8088fc:	28800417 	ldw	r2,16(r5)
  808900:	10002526 	beq	r2,zero,808998 <__sfvwrite_r+0xe8>
  808904:	1880008c 	andi	r2,r3,2
  808908:	a4400017 	ldw	r17,0(r20)
  80890c:	10002a26 	beq	r2,zero,8089b8 <__sfvwrite_r+0x108>
  808910:	05a00034 	movhi	r22,32768
  808914:	0027883a 	mov	r19,zero
  808918:	0025883a 	mov	r18,zero
  80891c:	b5bf0004 	addi	r22,r22,-1024
  808920:	980d883a 	mov	r6,r19
  808924:	a809883a 	mov	r4,r21
  808928:	90004626 	beq	r18,zero,808a44 <__sfvwrite_r+0x194>
  80892c:	900f883a 	mov	r7,r18
  808930:	b480022e 	bgeu	r22,r18,80893c <__sfvwrite_r+0x8c>
  808934:	01e00034 	movhi	r7,32768
  808938:	39ff0004 	addi	r7,r7,-1024
  80893c:	80800917 	ldw	r2,36(r16)
  808940:	81400717 	ldw	r5,28(r16)
  808944:	103ee83a 	callr	r2
  808948:	0080570e 	bge	zero,r2,808aa8 <__sfvwrite_r+0x1f8>
  80894c:	a0c00217 	ldw	r3,8(r20)
  808950:	98a7883a 	add	r19,r19,r2
  808954:	90a5c83a 	sub	r18,r18,r2
  808958:	1885c83a 	sub	r2,r3,r2
  80895c:	a0800215 	stw	r2,8(r20)
  808960:	103fef1e 	bne	r2,zero,808920 <__alt_mem_onchip_mem+0xff800920>
  808964:	0005883a 	mov	r2,zero
  808968:	dfc00b17 	ldw	ra,44(sp)
  80896c:	df000a17 	ldw	fp,40(sp)
  808970:	ddc00917 	ldw	r23,36(sp)
  808974:	dd800817 	ldw	r22,32(sp)
  808978:	dd400717 	ldw	r21,28(sp)
  80897c:	dd000617 	ldw	r20,24(sp)
  808980:	dcc00517 	ldw	r19,20(sp)
  808984:	dc800417 	ldw	r18,16(sp)
  808988:	dc400317 	ldw	r17,12(sp)
  80898c:	dc000217 	ldw	r16,8(sp)
  808990:	dec00c04 	addi	sp,sp,48
  808994:	f800283a 	ret
  808998:	800b883a 	mov	r5,r16
  80899c:	a809883a 	mov	r4,r21
  8089a0:	080976c0 	call	80976c <__swsetup_r>
  8089a4:	1000eb1e 	bne	r2,zero,808d54 <__sfvwrite_r+0x4a4>
  8089a8:	80c0030b 	ldhu	r3,12(r16)
  8089ac:	a4400017 	ldw	r17,0(r20)
  8089b0:	1880008c 	andi	r2,r3,2
  8089b4:	103fd61e 	bne	r2,zero,808910 <__alt_mem_onchip_mem+0xff800910>
  8089b8:	1880004c 	andi	r2,r3,1
  8089bc:	10003f1e 	bne	r2,zero,808abc <__sfvwrite_r+0x20c>
  8089c0:	0039883a 	mov	fp,zero
  8089c4:	0025883a 	mov	r18,zero
  8089c8:	90001a26 	beq	r18,zero,808a34 <__sfvwrite_r+0x184>
  8089cc:	1880800c 	andi	r2,r3,512
  8089d0:	84c00217 	ldw	r19,8(r16)
  8089d4:	10002126 	beq	r2,zero,808a5c <__sfvwrite_r+0x1ac>
  8089d8:	982f883a 	mov	r23,r19
  8089dc:	94c09336 	bltu	r18,r19,808c2c <__sfvwrite_r+0x37c>
  8089e0:	1881200c 	andi	r2,r3,1152
  8089e4:	10009e1e 	bne	r2,zero,808c60 <__sfvwrite_r+0x3b0>
  8089e8:	81000017 	ldw	r4,0(r16)
  8089ec:	b80d883a 	mov	r6,r23
  8089f0:	e00b883a 	mov	r5,fp
  8089f4:	080904c0 	call	80904c <memmove>
  8089f8:	80c00217 	ldw	r3,8(r16)
  8089fc:	81000017 	ldw	r4,0(r16)
  808a00:	9005883a 	mov	r2,r18
  808a04:	1ce7c83a 	sub	r19,r3,r19
  808a08:	25cf883a 	add	r7,r4,r23
  808a0c:	84c00215 	stw	r19,8(r16)
  808a10:	81c00015 	stw	r7,0(r16)
  808a14:	a0c00217 	ldw	r3,8(r20)
  808a18:	e0b9883a 	add	fp,fp,r2
  808a1c:	90a5c83a 	sub	r18,r18,r2
  808a20:	18a7c83a 	sub	r19,r3,r2
  808a24:	a4c00215 	stw	r19,8(r20)
  808a28:	983fce26 	beq	r19,zero,808964 <__alt_mem_onchip_mem+0xff800964>
  808a2c:	80c0030b 	ldhu	r3,12(r16)
  808a30:	903fe61e 	bne	r18,zero,8089cc <__alt_mem_onchip_mem+0xff8009cc>
  808a34:	8f000017 	ldw	fp,0(r17)
  808a38:	8c800117 	ldw	r18,4(r17)
  808a3c:	8c400204 	addi	r17,r17,8
  808a40:	003fe106 	br	8089c8 <__alt_mem_onchip_mem+0xff8009c8>
  808a44:	8cc00017 	ldw	r19,0(r17)
  808a48:	8c800117 	ldw	r18,4(r17)
  808a4c:	8c400204 	addi	r17,r17,8
  808a50:	003fb306 	br	808920 <__alt_mem_onchip_mem+0xff800920>
  808a54:	0005883a 	mov	r2,zero
  808a58:	f800283a 	ret
  808a5c:	81000017 	ldw	r4,0(r16)
  808a60:	80800417 	ldw	r2,16(r16)
  808a64:	11005736 	bltu	r2,r4,808bc4 <__sfvwrite_r+0x314>
  808a68:	85c00517 	ldw	r23,20(r16)
  808a6c:	95c05536 	bltu	r18,r23,808bc4 <__sfvwrite_r+0x314>
  808a70:	00a00034 	movhi	r2,32768
  808a74:	10bfffc4 	addi	r2,r2,-1
  808a78:	9009883a 	mov	r4,r18
  808a7c:	1480012e 	bgeu	r2,r18,808a84 <__sfvwrite_r+0x1d4>
  808a80:	1009883a 	mov	r4,r2
  808a84:	b80b883a 	mov	r5,r23
  808a88:	08098c00 	call	8098c0 <__divsi3>
  808a8c:	15cf383a 	mul	r7,r2,r23
  808a90:	81400717 	ldw	r5,28(r16)
  808a94:	80800917 	ldw	r2,36(r16)
  808a98:	e00d883a 	mov	r6,fp
  808a9c:	a809883a 	mov	r4,r21
  808aa0:	103ee83a 	callr	r2
  808aa4:	00bfdb16 	blt	zero,r2,808a14 <__alt_mem_onchip_mem+0xff800a14>
  808aa8:	8080030b 	ldhu	r2,12(r16)
  808aac:	10801014 	ori	r2,r2,64
  808ab0:	8080030d 	sth	r2,12(r16)
  808ab4:	00bfffc4 	movi	r2,-1
  808ab8:	003fab06 	br	808968 <__alt_mem_onchip_mem+0xff800968>
  808abc:	0027883a 	mov	r19,zero
  808ac0:	0011883a 	mov	r8,zero
  808ac4:	0039883a 	mov	fp,zero
  808ac8:	0025883a 	mov	r18,zero
  808acc:	90001f26 	beq	r18,zero,808b4c <__sfvwrite_r+0x29c>
  808ad0:	40005a26 	beq	r8,zero,808c3c <__sfvwrite_r+0x38c>
  808ad4:	982d883a 	mov	r22,r19
  808ad8:	94c0012e 	bgeu	r18,r19,808ae0 <__sfvwrite_r+0x230>
  808adc:	902d883a 	mov	r22,r18
  808ae0:	81000017 	ldw	r4,0(r16)
  808ae4:	80800417 	ldw	r2,16(r16)
  808ae8:	b02f883a 	mov	r23,r22
  808aec:	81c00517 	ldw	r7,20(r16)
  808af0:	1100032e 	bgeu	r2,r4,808b00 <__sfvwrite_r+0x250>
  808af4:	80c00217 	ldw	r3,8(r16)
  808af8:	38c7883a 	add	r3,r7,r3
  808afc:	1d801816 	blt	r3,r22,808b60 <__sfvwrite_r+0x2b0>
  808b00:	b1c03e16 	blt	r22,r7,808bfc <__sfvwrite_r+0x34c>
  808b04:	80800917 	ldw	r2,36(r16)
  808b08:	81400717 	ldw	r5,28(r16)
  808b0c:	e00d883a 	mov	r6,fp
  808b10:	da000115 	stw	r8,4(sp)
  808b14:	a809883a 	mov	r4,r21
  808b18:	103ee83a 	callr	r2
  808b1c:	102f883a 	mov	r23,r2
  808b20:	da000117 	ldw	r8,4(sp)
  808b24:	00bfe00e 	bge	zero,r2,808aa8 <__alt_mem_onchip_mem+0xff800aa8>
  808b28:	9de7c83a 	sub	r19,r19,r23
  808b2c:	98001f26 	beq	r19,zero,808bac <__sfvwrite_r+0x2fc>
  808b30:	a0800217 	ldw	r2,8(r20)
  808b34:	e5f9883a 	add	fp,fp,r23
  808b38:	95e5c83a 	sub	r18,r18,r23
  808b3c:	15efc83a 	sub	r23,r2,r23
  808b40:	a5c00215 	stw	r23,8(r20)
  808b44:	b83f8726 	beq	r23,zero,808964 <__alt_mem_onchip_mem+0xff800964>
  808b48:	903fe11e 	bne	r18,zero,808ad0 <__alt_mem_onchip_mem+0xff800ad0>
  808b4c:	8f000017 	ldw	fp,0(r17)
  808b50:	8c800117 	ldw	r18,4(r17)
  808b54:	0011883a 	mov	r8,zero
  808b58:	8c400204 	addi	r17,r17,8
  808b5c:	003fdb06 	br	808acc <__alt_mem_onchip_mem+0xff800acc>
  808b60:	180d883a 	mov	r6,r3
  808b64:	e00b883a 	mov	r5,fp
  808b68:	da000115 	stw	r8,4(sp)
  808b6c:	d8c00015 	stw	r3,0(sp)
  808b70:	080904c0 	call	80904c <memmove>
  808b74:	d8c00017 	ldw	r3,0(sp)
  808b78:	80800017 	ldw	r2,0(r16)
  808b7c:	800b883a 	mov	r5,r16
  808b80:	a809883a 	mov	r4,r21
  808b84:	10c5883a 	add	r2,r2,r3
  808b88:	80800015 	stw	r2,0(r16)
  808b8c:	d8c00015 	stw	r3,0(sp)
  808b90:	08067b00 	call	8067b0 <_fflush_r>
  808b94:	d8c00017 	ldw	r3,0(sp)
  808b98:	da000117 	ldw	r8,4(sp)
  808b9c:	103fc21e 	bne	r2,zero,808aa8 <__alt_mem_onchip_mem+0xff800aa8>
  808ba0:	182f883a 	mov	r23,r3
  808ba4:	9de7c83a 	sub	r19,r19,r23
  808ba8:	983fe11e 	bne	r19,zero,808b30 <__alt_mem_onchip_mem+0xff800b30>
  808bac:	800b883a 	mov	r5,r16
  808bb0:	a809883a 	mov	r4,r21
  808bb4:	08067b00 	call	8067b0 <_fflush_r>
  808bb8:	103fbb1e 	bne	r2,zero,808aa8 <__alt_mem_onchip_mem+0xff800aa8>
  808bbc:	0011883a 	mov	r8,zero
  808bc0:	003fdb06 	br	808b30 <__alt_mem_onchip_mem+0xff800b30>
  808bc4:	94c0012e 	bgeu	r18,r19,808bcc <__sfvwrite_r+0x31c>
  808bc8:	9027883a 	mov	r19,r18
  808bcc:	980d883a 	mov	r6,r19
  808bd0:	e00b883a 	mov	r5,fp
  808bd4:	080904c0 	call	80904c <memmove>
  808bd8:	80800217 	ldw	r2,8(r16)
  808bdc:	80c00017 	ldw	r3,0(r16)
  808be0:	14c5c83a 	sub	r2,r2,r19
  808be4:	1cc7883a 	add	r3,r3,r19
  808be8:	80800215 	stw	r2,8(r16)
  808bec:	80c00015 	stw	r3,0(r16)
  808bf0:	10004326 	beq	r2,zero,808d00 <__sfvwrite_r+0x450>
  808bf4:	9805883a 	mov	r2,r19
  808bf8:	003f8606 	br	808a14 <__alt_mem_onchip_mem+0xff800a14>
  808bfc:	b00d883a 	mov	r6,r22
  808c00:	e00b883a 	mov	r5,fp
  808c04:	da000115 	stw	r8,4(sp)
  808c08:	080904c0 	call	80904c <memmove>
  808c0c:	80800217 	ldw	r2,8(r16)
  808c10:	80c00017 	ldw	r3,0(r16)
  808c14:	da000117 	ldw	r8,4(sp)
  808c18:	1585c83a 	sub	r2,r2,r22
  808c1c:	1dad883a 	add	r22,r3,r22
  808c20:	80800215 	stw	r2,8(r16)
  808c24:	85800015 	stw	r22,0(r16)
  808c28:	003fbf06 	br	808b28 <__alt_mem_onchip_mem+0xff800b28>
  808c2c:	81000017 	ldw	r4,0(r16)
  808c30:	9027883a 	mov	r19,r18
  808c34:	902f883a 	mov	r23,r18
  808c38:	003f6c06 	br	8089ec <__alt_mem_onchip_mem+0xff8009ec>
  808c3c:	900d883a 	mov	r6,r18
  808c40:	01400284 	movi	r5,10
  808c44:	e009883a 	mov	r4,fp
  808c48:	0808e200 	call	808e20 <memchr>
  808c4c:	10003e26 	beq	r2,zero,808d48 <__sfvwrite_r+0x498>
  808c50:	10800044 	addi	r2,r2,1
  808c54:	1727c83a 	sub	r19,r2,fp
  808c58:	02000044 	movi	r8,1
  808c5c:	003f9d06 	br	808ad4 <__alt_mem_onchip_mem+0xff800ad4>
  808c60:	80800517 	ldw	r2,20(r16)
  808c64:	81400417 	ldw	r5,16(r16)
  808c68:	81c00017 	ldw	r7,0(r16)
  808c6c:	10a7883a 	add	r19,r2,r2
  808c70:	9885883a 	add	r2,r19,r2
  808c74:	1026d7fa 	srli	r19,r2,31
  808c78:	396dc83a 	sub	r22,r7,r5
  808c7c:	b1000044 	addi	r4,r22,1
  808c80:	9885883a 	add	r2,r19,r2
  808c84:	1027d07a 	srai	r19,r2,1
  808c88:	2485883a 	add	r2,r4,r18
  808c8c:	980d883a 	mov	r6,r19
  808c90:	9880022e 	bgeu	r19,r2,808c9c <__sfvwrite_r+0x3ec>
  808c94:	1027883a 	mov	r19,r2
  808c98:	100d883a 	mov	r6,r2
  808c9c:	18c1000c 	andi	r3,r3,1024
  808ca0:	18001c26 	beq	r3,zero,808d14 <__sfvwrite_r+0x464>
  808ca4:	300b883a 	mov	r5,r6
  808ca8:	a809883a 	mov	r4,r21
  808cac:	0807a3c0 	call	807a3c <_malloc_r>
  808cb0:	102f883a 	mov	r23,r2
  808cb4:	10002926 	beq	r2,zero,808d5c <__sfvwrite_r+0x4ac>
  808cb8:	81400417 	ldw	r5,16(r16)
  808cbc:	b00d883a 	mov	r6,r22
  808cc0:	1009883a 	mov	r4,r2
  808cc4:	0808f040 	call	808f04 <memcpy>
  808cc8:	8080030b 	ldhu	r2,12(r16)
  808ccc:	00fedfc4 	movi	r3,-1153
  808cd0:	10c4703a 	and	r2,r2,r3
  808cd4:	10802014 	ori	r2,r2,128
  808cd8:	8080030d 	sth	r2,12(r16)
  808cdc:	bd89883a 	add	r4,r23,r22
  808ce0:	9d8fc83a 	sub	r7,r19,r22
  808ce4:	85c00415 	stw	r23,16(r16)
  808ce8:	84c00515 	stw	r19,20(r16)
  808cec:	81000015 	stw	r4,0(r16)
  808cf0:	9027883a 	mov	r19,r18
  808cf4:	81c00215 	stw	r7,8(r16)
  808cf8:	902f883a 	mov	r23,r18
  808cfc:	003f3b06 	br	8089ec <__alt_mem_onchip_mem+0xff8009ec>
  808d00:	800b883a 	mov	r5,r16
  808d04:	a809883a 	mov	r4,r21
  808d08:	08067b00 	call	8067b0 <_fflush_r>
  808d0c:	103fb926 	beq	r2,zero,808bf4 <__alt_mem_onchip_mem+0xff800bf4>
  808d10:	003f6506 	br	808aa8 <__alt_mem_onchip_mem+0xff800aa8>
  808d14:	a809883a 	mov	r4,r21
  808d18:	08092080 	call	809208 <_realloc_r>
  808d1c:	102f883a 	mov	r23,r2
  808d20:	103fee1e 	bne	r2,zero,808cdc <__alt_mem_onchip_mem+0xff800cdc>
  808d24:	81400417 	ldw	r5,16(r16)
  808d28:	a809883a 	mov	r4,r21
  808d2c:	0806e0c0 	call	806e0c <_free_r>
  808d30:	8080030b 	ldhu	r2,12(r16)
  808d34:	00ffdfc4 	movi	r3,-129
  808d38:	1884703a 	and	r2,r3,r2
  808d3c:	00c00304 	movi	r3,12
  808d40:	a8c00015 	stw	r3,0(r21)
  808d44:	003f5906 	br	808aac <__alt_mem_onchip_mem+0xff800aac>
  808d48:	94c00044 	addi	r19,r18,1
  808d4c:	02000044 	movi	r8,1
  808d50:	003f6006 	br	808ad4 <__alt_mem_onchip_mem+0xff800ad4>
  808d54:	00bfffc4 	movi	r2,-1
  808d58:	003f0306 	br	808968 <__alt_mem_onchip_mem+0xff800968>
  808d5c:	00800304 	movi	r2,12
  808d60:	a8800015 	stw	r2,0(r21)
  808d64:	8080030b 	ldhu	r2,12(r16)
  808d68:	003f5006 	br	808aac <__alt_mem_onchip_mem+0xff800aac>

00808d6c <_isatty_r>:
  808d6c:	defffd04 	addi	sp,sp,-12
  808d70:	dc000015 	stw	r16,0(sp)
  808d74:	04002074 	movhi	r16,129
  808d78:	dc400115 	stw	r17,4(sp)
  808d7c:	84063e04 	addi	r16,r16,6392
  808d80:	2023883a 	mov	r17,r4
  808d84:	2809883a 	mov	r4,r5
  808d88:	dfc00215 	stw	ra,8(sp)
  808d8c:	80000015 	stw	zero,0(r16)
  808d90:	0809e000 	call	809e00 <isatty>
  808d94:	00ffffc4 	movi	r3,-1
  808d98:	10c00526 	beq	r2,r3,808db0 <_isatty_r+0x44>
  808d9c:	dfc00217 	ldw	ra,8(sp)
  808da0:	dc400117 	ldw	r17,4(sp)
  808da4:	dc000017 	ldw	r16,0(sp)
  808da8:	dec00304 	addi	sp,sp,12
  808dac:	f800283a 	ret
  808db0:	80c00017 	ldw	r3,0(r16)
  808db4:	183ff926 	beq	r3,zero,808d9c <__alt_mem_onchip_mem+0xff800d9c>
  808db8:	88c00015 	stw	r3,0(r17)
  808dbc:	003ff706 	br	808d9c <__alt_mem_onchip_mem+0xff800d9c>

00808dc0 <_lseek_r>:
  808dc0:	defffd04 	addi	sp,sp,-12
  808dc4:	2805883a 	mov	r2,r5
  808dc8:	dc000015 	stw	r16,0(sp)
  808dcc:	04002074 	movhi	r16,129
  808dd0:	dc400115 	stw	r17,4(sp)
  808dd4:	300b883a 	mov	r5,r6
  808dd8:	84063e04 	addi	r16,r16,6392
  808ddc:	2023883a 	mov	r17,r4
  808de0:	380d883a 	mov	r6,r7
  808de4:	1009883a 	mov	r4,r2
  808de8:	dfc00215 	stw	ra,8(sp)
  808dec:	80000015 	stw	zero,0(r16)
  808df0:	0809fcc0 	call	809fcc <lseek>
  808df4:	00ffffc4 	movi	r3,-1
  808df8:	10c00526 	beq	r2,r3,808e10 <_lseek_r+0x50>
  808dfc:	dfc00217 	ldw	ra,8(sp)
  808e00:	dc400117 	ldw	r17,4(sp)
  808e04:	dc000017 	ldw	r16,0(sp)
  808e08:	dec00304 	addi	sp,sp,12
  808e0c:	f800283a 	ret
  808e10:	80c00017 	ldw	r3,0(r16)
  808e14:	183ff926 	beq	r3,zero,808dfc <__alt_mem_onchip_mem+0xff800dfc>
  808e18:	88c00015 	stw	r3,0(r17)
  808e1c:	003ff706 	br	808dfc <__alt_mem_onchip_mem+0xff800dfc>

00808e20 <memchr>:
  808e20:	208000cc 	andi	r2,r4,3
  808e24:	280f883a 	mov	r7,r5
  808e28:	10003426 	beq	r2,zero,808efc <memchr+0xdc>
  808e2c:	30bfffc4 	addi	r2,r6,-1
  808e30:	30001a26 	beq	r6,zero,808e9c <memchr+0x7c>
  808e34:	20c00003 	ldbu	r3,0(r4)
  808e38:	29803fcc 	andi	r6,r5,255
  808e3c:	30c0051e 	bne	r6,r3,808e54 <memchr+0x34>
  808e40:	00001806 	br	808ea4 <memchr+0x84>
  808e44:	10001526 	beq	r2,zero,808e9c <memchr+0x7c>
  808e48:	20c00003 	ldbu	r3,0(r4)
  808e4c:	10bfffc4 	addi	r2,r2,-1
  808e50:	30c01426 	beq	r6,r3,808ea4 <memchr+0x84>
  808e54:	21000044 	addi	r4,r4,1
  808e58:	20c000cc 	andi	r3,r4,3
  808e5c:	183ff91e 	bne	r3,zero,808e44 <__alt_mem_onchip_mem+0xff800e44>
  808e60:	020000c4 	movi	r8,3
  808e64:	40801136 	bltu	r8,r2,808eac <memchr+0x8c>
  808e68:	10000c26 	beq	r2,zero,808e9c <memchr+0x7c>
  808e6c:	20c00003 	ldbu	r3,0(r4)
  808e70:	29403fcc 	andi	r5,r5,255
  808e74:	28c00b26 	beq	r5,r3,808ea4 <memchr+0x84>
  808e78:	20c00044 	addi	r3,r4,1
  808e7c:	39803fcc 	andi	r6,r7,255
  808e80:	2089883a 	add	r4,r4,r2
  808e84:	00000306 	br	808e94 <memchr+0x74>
  808e88:	18c00044 	addi	r3,r3,1
  808e8c:	197fffc3 	ldbu	r5,-1(r3)
  808e90:	31400526 	beq	r6,r5,808ea8 <memchr+0x88>
  808e94:	1805883a 	mov	r2,r3
  808e98:	20fffb1e 	bne	r4,r3,808e88 <__alt_mem_onchip_mem+0xff800e88>
  808e9c:	0005883a 	mov	r2,zero
  808ea0:	f800283a 	ret
  808ea4:	2005883a 	mov	r2,r4
  808ea8:	f800283a 	ret
  808eac:	28c03fcc 	andi	r3,r5,255
  808eb0:	1812923a 	slli	r9,r3,8
  808eb4:	02ffbff4 	movhi	r11,65279
  808eb8:	02a02074 	movhi	r10,32897
  808ebc:	48d2b03a 	or	r9,r9,r3
  808ec0:	4806943a 	slli	r3,r9,16
  808ec4:	5affbfc4 	addi	r11,r11,-257
  808ec8:	52a02004 	addi	r10,r10,-32640
  808ecc:	48d2b03a 	or	r9,r9,r3
  808ed0:	20c00017 	ldw	r3,0(r4)
  808ed4:	48c6f03a 	xor	r3,r9,r3
  808ed8:	1acd883a 	add	r6,r3,r11
  808edc:	00c6303a 	nor	r3,zero,r3
  808ee0:	30c6703a 	and	r3,r6,r3
  808ee4:	1a86703a 	and	r3,r3,r10
  808ee8:	183fe01e 	bne	r3,zero,808e6c <__alt_mem_onchip_mem+0xff800e6c>
  808eec:	10bfff04 	addi	r2,r2,-4
  808ef0:	21000104 	addi	r4,r4,4
  808ef4:	40bff636 	bltu	r8,r2,808ed0 <__alt_mem_onchip_mem+0xff800ed0>
  808ef8:	003fdb06 	br	808e68 <__alt_mem_onchip_mem+0xff800e68>
  808efc:	3005883a 	mov	r2,r6
  808f00:	003fd706 	br	808e60 <__alt_mem_onchip_mem+0xff800e60>

00808f04 <memcpy>:
  808f04:	defffd04 	addi	sp,sp,-12
  808f08:	dfc00215 	stw	ra,8(sp)
  808f0c:	dc400115 	stw	r17,4(sp)
  808f10:	dc000015 	stw	r16,0(sp)
  808f14:	00c003c4 	movi	r3,15
  808f18:	2005883a 	mov	r2,r4
  808f1c:	1980452e 	bgeu	r3,r6,809034 <memcpy+0x130>
  808f20:	2906b03a 	or	r3,r5,r4
  808f24:	18c000cc 	andi	r3,r3,3
  808f28:	1800441e 	bne	r3,zero,80903c <memcpy+0x138>
  808f2c:	347ffc04 	addi	r17,r6,-16
  808f30:	8822d13a 	srli	r17,r17,4
  808f34:	28c00104 	addi	r3,r5,4
  808f38:	23400104 	addi	r13,r4,4
  808f3c:	8820913a 	slli	r16,r17,4
  808f40:	2b000204 	addi	r12,r5,8
  808f44:	22c00204 	addi	r11,r4,8
  808f48:	84000504 	addi	r16,r16,20
  808f4c:	2a800304 	addi	r10,r5,12
  808f50:	22400304 	addi	r9,r4,12
  808f54:	2c21883a 	add	r16,r5,r16
  808f58:	2811883a 	mov	r8,r5
  808f5c:	200f883a 	mov	r7,r4
  808f60:	41000017 	ldw	r4,0(r8)
  808f64:	1fc00017 	ldw	ra,0(r3)
  808f68:	63c00017 	ldw	r15,0(r12)
  808f6c:	39000015 	stw	r4,0(r7)
  808f70:	53800017 	ldw	r14,0(r10)
  808f74:	6fc00015 	stw	ra,0(r13)
  808f78:	5bc00015 	stw	r15,0(r11)
  808f7c:	4b800015 	stw	r14,0(r9)
  808f80:	18c00404 	addi	r3,r3,16
  808f84:	39c00404 	addi	r7,r7,16
  808f88:	42000404 	addi	r8,r8,16
  808f8c:	6b400404 	addi	r13,r13,16
  808f90:	63000404 	addi	r12,r12,16
  808f94:	5ac00404 	addi	r11,r11,16
  808f98:	52800404 	addi	r10,r10,16
  808f9c:	4a400404 	addi	r9,r9,16
  808fa0:	1c3fef1e 	bne	r3,r16,808f60 <__alt_mem_onchip_mem+0xff800f60>
  808fa4:	89c00044 	addi	r7,r17,1
  808fa8:	380e913a 	slli	r7,r7,4
  808fac:	310003cc 	andi	r4,r6,15
  808fb0:	02c000c4 	movi	r11,3
  808fb4:	11c7883a 	add	r3,r2,r7
  808fb8:	29cb883a 	add	r5,r5,r7
  808fbc:	5900212e 	bgeu	r11,r4,809044 <memcpy+0x140>
  808fc0:	1813883a 	mov	r9,r3
  808fc4:	2811883a 	mov	r8,r5
  808fc8:	200f883a 	mov	r7,r4
  808fcc:	42800017 	ldw	r10,0(r8)
  808fd0:	4a400104 	addi	r9,r9,4
  808fd4:	39ffff04 	addi	r7,r7,-4
  808fd8:	4abfff15 	stw	r10,-4(r9)
  808fdc:	42000104 	addi	r8,r8,4
  808fe0:	59fffa36 	bltu	r11,r7,808fcc <__alt_mem_onchip_mem+0xff800fcc>
  808fe4:	213fff04 	addi	r4,r4,-4
  808fe8:	2008d0ba 	srli	r4,r4,2
  808fec:	318000cc 	andi	r6,r6,3
  808ff0:	21000044 	addi	r4,r4,1
  808ff4:	2109883a 	add	r4,r4,r4
  808ff8:	2109883a 	add	r4,r4,r4
  808ffc:	1907883a 	add	r3,r3,r4
  809000:	290b883a 	add	r5,r5,r4
  809004:	30000626 	beq	r6,zero,809020 <memcpy+0x11c>
  809008:	198d883a 	add	r6,r3,r6
  80900c:	29c00003 	ldbu	r7,0(r5)
  809010:	18c00044 	addi	r3,r3,1
  809014:	29400044 	addi	r5,r5,1
  809018:	19ffffc5 	stb	r7,-1(r3)
  80901c:	19bffb1e 	bne	r3,r6,80900c <__alt_mem_onchip_mem+0xff80100c>
  809020:	dfc00217 	ldw	ra,8(sp)
  809024:	dc400117 	ldw	r17,4(sp)
  809028:	dc000017 	ldw	r16,0(sp)
  80902c:	dec00304 	addi	sp,sp,12
  809030:	f800283a 	ret
  809034:	2007883a 	mov	r3,r4
  809038:	003ff206 	br	809004 <__alt_mem_onchip_mem+0xff801004>
  80903c:	2007883a 	mov	r3,r4
  809040:	003ff106 	br	809008 <__alt_mem_onchip_mem+0xff801008>
  809044:	200d883a 	mov	r6,r4
  809048:	003fee06 	br	809004 <__alt_mem_onchip_mem+0xff801004>

0080904c <memmove>:
  80904c:	2005883a 	mov	r2,r4
  809050:	29000b2e 	bgeu	r5,r4,809080 <memmove+0x34>
  809054:	298f883a 	add	r7,r5,r6
  809058:	21c0092e 	bgeu	r4,r7,809080 <memmove+0x34>
  80905c:	2187883a 	add	r3,r4,r6
  809060:	198bc83a 	sub	r5,r3,r6
  809064:	30004826 	beq	r6,zero,809188 <memmove+0x13c>
  809068:	39ffffc4 	addi	r7,r7,-1
  80906c:	39000003 	ldbu	r4,0(r7)
  809070:	18ffffc4 	addi	r3,r3,-1
  809074:	19000005 	stb	r4,0(r3)
  809078:	28fffb1e 	bne	r5,r3,809068 <__alt_mem_onchip_mem+0xff801068>
  80907c:	f800283a 	ret
  809080:	00c003c4 	movi	r3,15
  809084:	1980412e 	bgeu	r3,r6,80918c <memmove+0x140>
  809088:	2886b03a 	or	r3,r5,r2
  80908c:	18c000cc 	andi	r3,r3,3
  809090:	1800401e 	bne	r3,zero,809194 <memmove+0x148>
  809094:	33fffc04 	addi	r15,r6,-16
  809098:	781ed13a 	srli	r15,r15,4
  80909c:	28c00104 	addi	r3,r5,4
  8090a0:	13400104 	addi	r13,r2,4
  8090a4:	781c913a 	slli	r14,r15,4
  8090a8:	2b000204 	addi	r12,r5,8
  8090ac:	12c00204 	addi	r11,r2,8
  8090b0:	73800504 	addi	r14,r14,20
  8090b4:	2a800304 	addi	r10,r5,12
  8090b8:	12400304 	addi	r9,r2,12
  8090bc:	2b9d883a 	add	r14,r5,r14
  8090c0:	2811883a 	mov	r8,r5
  8090c4:	100f883a 	mov	r7,r2
  8090c8:	41000017 	ldw	r4,0(r8)
  8090cc:	39c00404 	addi	r7,r7,16
  8090d0:	18c00404 	addi	r3,r3,16
  8090d4:	393ffc15 	stw	r4,-16(r7)
  8090d8:	193ffc17 	ldw	r4,-16(r3)
  8090dc:	6b400404 	addi	r13,r13,16
  8090e0:	5ac00404 	addi	r11,r11,16
  8090e4:	693ffc15 	stw	r4,-16(r13)
  8090e8:	61000017 	ldw	r4,0(r12)
  8090ec:	4a400404 	addi	r9,r9,16
  8090f0:	42000404 	addi	r8,r8,16
  8090f4:	593ffc15 	stw	r4,-16(r11)
  8090f8:	51000017 	ldw	r4,0(r10)
  8090fc:	63000404 	addi	r12,r12,16
  809100:	52800404 	addi	r10,r10,16
  809104:	493ffc15 	stw	r4,-16(r9)
  809108:	1bbfef1e 	bne	r3,r14,8090c8 <__alt_mem_onchip_mem+0xff8010c8>
  80910c:	79000044 	addi	r4,r15,1
  809110:	2008913a 	slli	r4,r4,4
  809114:	328003cc 	andi	r10,r6,15
  809118:	02c000c4 	movi	r11,3
  80911c:	1107883a 	add	r3,r2,r4
  809120:	290b883a 	add	r5,r5,r4
  809124:	5a801e2e 	bgeu	r11,r10,8091a0 <memmove+0x154>
  809128:	1813883a 	mov	r9,r3
  80912c:	2811883a 	mov	r8,r5
  809130:	500f883a 	mov	r7,r10
  809134:	41000017 	ldw	r4,0(r8)
  809138:	4a400104 	addi	r9,r9,4
  80913c:	39ffff04 	addi	r7,r7,-4
  809140:	493fff15 	stw	r4,-4(r9)
  809144:	42000104 	addi	r8,r8,4
  809148:	59fffa36 	bltu	r11,r7,809134 <__alt_mem_onchip_mem+0xff801134>
  80914c:	513fff04 	addi	r4,r10,-4
  809150:	2008d0ba 	srli	r4,r4,2
  809154:	318000cc 	andi	r6,r6,3
  809158:	21000044 	addi	r4,r4,1
  80915c:	2109883a 	add	r4,r4,r4
  809160:	2109883a 	add	r4,r4,r4
  809164:	1907883a 	add	r3,r3,r4
  809168:	290b883a 	add	r5,r5,r4
  80916c:	30000b26 	beq	r6,zero,80919c <memmove+0x150>
  809170:	198d883a 	add	r6,r3,r6
  809174:	29c00003 	ldbu	r7,0(r5)
  809178:	18c00044 	addi	r3,r3,1
  80917c:	29400044 	addi	r5,r5,1
  809180:	19ffffc5 	stb	r7,-1(r3)
  809184:	19bffb1e 	bne	r3,r6,809174 <__alt_mem_onchip_mem+0xff801174>
  809188:	f800283a 	ret
  80918c:	1007883a 	mov	r3,r2
  809190:	003ff606 	br	80916c <__alt_mem_onchip_mem+0xff80116c>
  809194:	1007883a 	mov	r3,r2
  809198:	003ff506 	br	809170 <__alt_mem_onchip_mem+0xff801170>
  80919c:	f800283a 	ret
  8091a0:	500d883a 	mov	r6,r10
  8091a4:	003ff106 	br	80916c <__alt_mem_onchip_mem+0xff80116c>

008091a8 <_read_r>:
  8091a8:	defffd04 	addi	sp,sp,-12
  8091ac:	2805883a 	mov	r2,r5
  8091b0:	dc000015 	stw	r16,0(sp)
  8091b4:	04002074 	movhi	r16,129
  8091b8:	dc400115 	stw	r17,4(sp)
  8091bc:	300b883a 	mov	r5,r6
  8091c0:	84063e04 	addi	r16,r16,6392
  8091c4:	2023883a 	mov	r17,r4
  8091c8:	380d883a 	mov	r6,r7
  8091cc:	1009883a 	mov	r4,r2
  8091d0:	dfc00215 	stw	ra,8(sp)
  8091d4:	80000015 	stw	zero,0(r16)
  8091d8:	080a3f40 	call	80a3f4 <read>
  8091dc:	00ffffc4 	movi	r3,-1
  8091e0:	10c00526 	beq	r2,r3,8091f8 <_read_r+0x50>
  8091e4:	dfc00217 	ldw	ra,8(sp)
  8091e8:	dc400117 	ldw	r17,4(sp)
  8091ec:	dc000017 	ldw	r16,0(sp)
  8091f0:	dec00304 	addi	sp,sp,12
  8091f4:	f800283a 	ret
  8091f8:	80c00017 	ldw	r3,0(r16)
  8091fc:	183ff926 	beq	r3,zero,8091e4 <__alt_mem_onchip_mem+0xff8011e4>
  809200:	88c00015 	stw	r3,0(r17)
  809204:	003ff706 	br	8091e4 <__alt_mem_onchip_mem+0xff8011e4>

00809208 <_realloc_r>:
  809208:	defff604 	addi	sp,sp,-40
  80920c:	dc800215 	stw	r18,8(sp)
  809210:	dfc00915 	stw	ra,36(sp)
  809214:	df000815 	stw	fp,32(sp)
  809218:	ddc00715 	stw	r23,28(sp)
  80921c:	dd800615 	stw	r22,24(sp)
  809220:	dd400515 	stw	r21,20(sp)
  809224:	dd000415 	stw	r20,16(sp)
  809228:	dcc00315 	stw	r19,12(sp)
  80922c:	dc400115 	stw	r17,4(sp)
  809230:	dc000015 	stw	r16,0(sp)
  809234:	3025883a 	mov	r18,r6
  809238:	2800b726 	beq	r5,zero,809518 <_realloc_r+0x310>
  80923c:	282b883a 	mov	r21,r5
  809240:	2029883a 	mov	r20,r4
  809244:	080a11c0 	call	80a11c <__malloc_lock>
  809248:	a8bfff17 	ldw	r2,-4(r21)
  80924c:	043fff04 	movi	r16,-4
  809250:	90c002c4 	addi	r3,r18,11
  809254:	01000584 	movi	r4,22
  809258:	acfffe04 	addi	r19,r21,-8
  80925c:	1420703a 	and	r16,r2,r16
  809260:	20c0332e 	bgeu	r4,r3,809330 <_realloc_r+0x128>
  809264:	047ffe04 	movi	r17,-8
  809268:	1c62703a 	and	r17,r3,r17
  80926c:	8807883a 	mov	r3,r17
  809270:	88005816 	blt	r17,zero,8093d4 <_realloc_r+0x1cc>
  809274:	8c805736 	bltu	r17,r18,8093d4 <_realloc_r+0x1cc>
  809278:	80c0300e 	bge	r16,r3,80933c <_realloc_r+0x134>
  80927c:	07002074 	movhi	fp,129
  809280:	e7391a04 	addi	fp,fp,-7064
  809284:	e1c00217 	ldw	r7,8(fp)
  809288:	9c09883a 	add	r4,r19,r16
  80928c:	22000117 	ldw	r8,4(r4)
  809290:	21c06326 	beq	r4,r7,809420 <_realloc_r+0x218>
  809294:	017fff84 	movi	r5,-2
  809298:	414a703a 	and	r5,r8,r5
  80929c:	214b883a 	add	r5,r4,r5
  8092a0:	29800117 	ldw	r6,4(r5)
  8092a4:	3180004c 	andi	r6,r6,1
  8092a8:	30003f26 	beq	r6,zero,8093a8 <_realloc_r+0x1a0>
  8092ac:	1080004c 	andi	r2,r2,1
  8092b0:	10008326 	beq	r2,zero,8094c0 <_realloc_r+0x2b8>
  8092b4:	900b883a 	mov	r5,r18
  8092b8:	a009883a 	mov	r4,r20
  8092bc:	0807a3c0 	call	807a3c <_malloc_r>
  8092c0:	1025883a 	mov	r18,r2
  8092c4:	10011e26 	beq	r2,zero,809740 <_realloc_r+0x538>
  8092c8:	a93fff17 	ldw	r4,-4(r21)
  8092cc:	10fffe04 	addi	r3,r2,-8
  8092d0:	00bfff84 	movi	r2,-2
  8092d4:	2084703a 	and	r2,r4,r2
  8092d8:	9885883a 	add	r2,r19,r2
  8092dc:	1880ee26 	beq	r3,r2,809698 <_realloc_r+0x490>
  8092e0:	81bfff04 	addi	r6,r16,-4
  8092e4:	00800904 	movi	r2,36
  8092e8:	1180b836 	bltu	r2,r6,8095cc <_realloc_r+0x3c4>
  8092ec:	00c004c4 	movi	r3,19
  8092f0:	19809636 	bltu	r3,r6,80954c <_realloc_r+0x344>
  8092f4:	9005883a 	mov	r2,r18
  8092f8:	a807883a 	mov	r3,r21
  8092fc:	19000017 	ldw	r4,0(r3)
  809300:	11000015 	stw	r4,0(r2)
  809304:	19000117 	ldw	r4,4(r3)
  809308:	11000115 	stw	r4,4(r2)
  80930c:	18c00217 	ldw	r3,8(r3)
  809310:	10c00215 	stw	r3,8(r2)
  809314:	a80b883a 	mov	r5,r21
  809318:	a009883a 	mov	r4,r20
  80931c:	0806e0c0 	call	806e0c <_free_r>
  809320:	a009883a 	mov	r4,r20
  809324:	080a1400 	call	80a140 <__malloc_unlock>
  809328:	9005883a 	mov	r2,r18
  80932c:	00001206 	br	809378 <_realloc_r+0x170>
  809330:	00c00404 	movi	r3,16
  809334:	1823883a 	mov	r17,r3
  809338:	003fce06 	br	809274 <__alt_mem_onchip_mem+0xff801274>
  80933c:	a825883a 	mov	r18,r21
  809340:	8445c83a 	sub	r2,r16,r17
  809344:	00c003c4 	movi	r3,15
  809348:	18802636 	bltu	r3,r2,8093e4 <_realloc_r+0x1dc>
  80934c:	99800117 	ldw	r6,4(r19)
  809350:	9c07883a 	add	r3,r19,r16
  809354:	3180004c 	andi	r6,r6,1
  809358:	3420b03a 	or	r16,r6,r16
  80935c:	9c000115 	stw	r16,4(r19)
  809360:	18800117 	ldw	r2,4(r3)
  809364:	10800054 	ori	r2,r2,1
  809368:	18800115 	stw	r2,4(r3)
  80936c:	a009883a 	mov	r4,r20
  809370:	080a1400 	call	80a140 <__malloc_unlock>
  809374:	9005883a 	mov	r2,r18
  809378:	dfc00917 	ldw	ra,36(sp)
  80937c:	df000817 	ldw	fp,32(sp)
  809380:	ddc00717 	ldw	r23,28(sp)
  809384:	dd800617 	ldw	r22,24(sp)
  809388:	dd400517 	ldw	r21,20(sp)
  80938c:	dd000417 	ldw	r20,16(sp)
  809390:	dcc00317 	ldw	r19,12(sp)
  809394:	dc800217 	ldw	r18,8(sp)
  809398:	dc400117 	ldw	r17,4(sp)
  80939c:	dc000017 	ldw	r16,0(sp)
  8093a0:	dec00a04 	addi	sp,sp,40
  8093a4:	f800283a 	ret
  8093a8:	017fff04 	movi	r5,-4
  8093ac:	414a703a 	and	r5,r8,r5
  8093b0:	814d883a 	add	r6,r16,r5
  8093b4:	30c01f16 	blt	r6,r3,809434 <_realloc_r+0x22c>
  8093b8:	20800317 	ldw	r2,12(r4)
  8093bc:	20c00217 	ldw	r3,8(r4)
  8093c0:	a825883a 	mov	r18,r21
  8093c4:	3021883a 	mov	r16,r6
  8093c8:	18800315 	stw	r2,12(r3)
  8093cc:	10c00215 	stw	r3,8(r2)
  8093d0:	003fdb06 	br	809340 <__alt_mem_onchip_mem+0xff801340>
  8093d4:	00800304 	movi	r2,12
  8093d8:	a0800015 	stw	r2,0(r20)
  8093dc:	0005883a 	mov	r2,zero
  8093e0:	003fe506 	br	809378 <__alt_mem_onchip_mem+0xff801378>
  8093e4:	98c00117 	ldw	r3,4(r19)
  8093e8:	9c4b883a 	add	r5,r19,r17
  8093ec:	11000054 	ori	r4,r2,1
  8093f0:	18c0004c 	andi	r3,r3,1
  8093f4:	1c62b03a 	or	r17,r3,r17
  8093f8:	9c400115 	stw	r17,4(r19)
  8093fc:	29000115 	stw	r4,4(r5)
  809400:	2885883a 	add	r2,r5,r2
  809404:	10c00117 	ldw	r3,4(r2)
  809408:	29400204 	addi	r5,r5,8
  80940c:	a009883a 	mov	r4,r20
  809410:	18c00054 	ori	r3,r3,1
  809414:	10c00115 	stw	r3,4(r2)
  809418:	0806e0c0 	call	806e0c <_free_r>
  80941c:	003fd306 	br	80936c <__alt_mem_onchip_mem+0xff80136c>
  809420:	017fff04 	movi	r5,-4
  809424:	414a703a 	and	r5,r8,r5
  809428:	89800404 	addi	r6,r17,16
  80942c:	8151883a 	add	r8,r16,r5
  809430:	4180590e 	bge	r8,r6,809598 <_realloc_r+0x390>
  809434:	1080004c 	andi	r2,r2,1
  809438:	103f9e1e 	bne	r2,zero,8092b4 <__alt_mem_onchip_mem+0xff8012b4>
  80943c:	adbffe17 	ldw	r22,-8(r21)
  809440:	00bfff04 	movi	r2,-4
  809444:	9dadc83a 	sub	r22,r19,r22
  809448:	b1800117 	ldw	r6,4(r22)
  80944c:	3084703a 	and	r2,r6,r2
  809450:	20002026 	beq	r4,zero,8094d4 <_realloc_r+0x2cc>
  809454:	80af883a 	add	r23,r16,r2
  809458:	b96f883a 	add	r23,r23,r5
  80945c:	21c05f26 	beq	r4,r7,8095dc <_realloc_r+0x3d4>
  809460:	b8c01c16 	blt	r23,r3,8094d4 <_realloc_r+0x2cc>
  809464:	20800317 	ldw	r2,12(r4)
  809468:	20c00217 	ldw	r3,8(r4)
  80946c:	81bfff04 	addi	r6,r16,-4
  809470:	01000904 	movi	r4,36
  809474:	18800315 	stw	r2,12(r3)
  809478:	10c00215 	stw	r3,8(r2)
  80947c:	b0c00217 	ldw	r3,8(r22)
  809480:	b0800317 	ldw	r2,12(r22)
  809484:	b4800204 	addi	r18,r22,8
  809488:	18800315 	stw	r2,12(r3)
  80948c:	10c00215 	stw	r3,8(r2)
  809490:	21801b36 	bltu	r4,r6,809500 <_realloc_r+0x2f8>
  809494:	008004c4 	movi	r2,19
  809498:	1180352e 	bgeu	r2,r6,809570 <_realloc_r+0x368>
  80949c:	a8800017 	ldw	r2,0(r21)
  8094a0:	b0800215 	stw	r2,8(r22)
  8094a4:	a8800117 	ldw	r2,4(r21)
  8094a8:	b0800315 	stw	r2,12(r22)
  8094ac:	008006c4 	movi	r2,27
  8094b0:	11807f36 	bltu	r2,r6,8096b0 <_realloc_r+0x4a8>
  8094b4:	b0800404 	addi	r2,r22,16
  8094b8:	ad400204 	addi	r21,r21,8
  8094bc:	00002d06 	br	809574 <_realloc_r+0x36c>
  8094c0:	adbffe17 	ldw	r22,-8(r21)
  8094c4:	00bfff04 	movi	r2,-4
  8094c8:	9dadc83a 	sub	r22,r19,r22
  8094cc:	b1000117 	ldw	r4,4(r22)
  8094d0:	2084703a 	and	r2,r4,r2
  8094d4:	b03f7726 	beq	r22,zero,8092b4 <__alt_mem_onchip_mem+0xff8012b4>
  8094d8:	80af883a 	add	r23,r16,r2
  8094dc:	b8ff7516 	blt	r23,r3,8092b4 <__alt_mem_onchip_mem+0xff8012b4>
  8094e0:	b0800317 	ldw	r2,12(r22)
  8094e4:	b0c00217 	ldw	r3,8(r22)
  8094e8:	81bfff04 	addi	r6,r16,-4
  8094ec:	01000904 	movi	r4,36
  8094f0:	18800315 	stw	r2,12(r3)
  8094f4:	10c00215 	stw	r3,8(r2)
  8094f8:	b4800204 	addi	r18,r22,8
  8094fc:	21bfe52e 	bgeu	r4,r6,809494 <__alt_mem_onchip_mem+0xff801494>
  809500:	a80b883a 	mov	r5,r21
  809504:	9009883a 	mov	r4,r18
  809508:	080904c0 	call	80904c <memmove>
  80950c:	b821883a 	mov	r16,r23
  809510:	b027883a 	mov	r19,r22
  809514:	003f8a06 	br	809340 <__alt_mem_onchip_mem+0xff801340>
  809518:	300b883a 	mov	r5,r6
  80951c:	dfc00917 	ldw	ra,36(sp)
  809520:	df000817 	ldw	fp,32(sp)
  809524:	ddc00717 	ldw	r23,28(sp)
  809528:	dd800617 	ldw	r22,24(sp)
  80952c:	dd400517 	ldw	r21,20(sp)
  809530:	dd000417 	ldw	r20,16(sp)
  809534:	dcc00317 	ldw	r19,12(sp)
  809538:	dc800217 	ldw	r18,8(sp)
  80953c:	dc400117 	ldw	r17,4(sp)
  809540:	dc000017 	ldw	r16,0(sp)
  809544:	dec00a04 	addi	sp,sp,40
  809548:	0807a3c1 	jmpi	807a3c <_malloc_r>
  80954c:	a8c00017 	ldw	r3,0(r21)
  809550:	90c00015 	stw	r3,0(r18)
  809554:	a8c00117 	ldw	r3,4(r21)
  809558:	90c00115 	stw	r3,4(r18)
  80955c:	00c006c4 	movi	r3,27
  809560:	19804536 	bltu	r3,r6,809678 <_realloc_r+0x470>
  809564:	90800204 	addi	r2,r18,8
  809568:	a8c00204 	addi	r3,r21,8
  80956c:	003f6306 	br	8092fc <__alt_mem_onchip_mem+0xff8012fc>
  809570:	9005883a 	mov	r2,r18
  809574:	a8c00017 	ldw	r3,0(r21)
  809578:	b821883a 	mov	r16,r23
  80957c:	b027883a 	mov	r19,r22
  809580:	10c00015 	stw	r3,0(r2)
  809584:	a8c00117 	ldw	r3,4(r21)
  809588:	10c00115 	stw	r3,4(r2)
  80958c:	a8c00217 	ldw	r3,8(r21)
  809590:	10c00215 	stw	r3,8(r2)
  809594:	003f6a06 	br	809340 <__alt_mem_onchip_mem+0xff801340>
  809598:	9c67883a 	add	r19,r19,r17
  80959c:	4445c83a 	sub	r2,r8,r17
  8095a0:	e4c00215 	stw	r19,8(fp)
  8095a4:	10800054 	ori	r2,r2,1
  8095a8:	98800115 	stw	r2,4(r19)
  8095ac:	a8bfff17 	ldw	r2,-4(r21)
  8095b0:	a009883a 	mov	r4,r20
  8095b4:	1080004c 	andi	r2,r2,1
  8095b8:	1462b03a 	or	r17,r2,r17
  8095bc:	ac7fff15 	stw	r17,-4(r21)
  8095c0:	080a1400 	call	80a140 <__malloc_unlock>
  8095c4:	a805883a 	mov	r2,r21
  8095c8:	003f6b06 	br	809378 <__alt_mem_onchip_mem+0xff801378>
  8095cc:	a80b883a 	mov	r5,r21
  8095d0:	9009883a 	mov	r4,r18
  8095d4:	080904c0 	call	80904c <memmove>
  8095d8:	003f4e06 	br	809314 <__alt_mem_onchip_mem+0xff801314>
  8095dc:	89000404 	addi	r4,r17,16
  8095e0:	b93fbc16 	blt	r23,r4,8094d4 <__alt_mem_onchip_mem+0xff8014d4>
  8095e4:	b0800317 	ldw	r2,12(r22)
  8095e8:	b0c00217 	ldw	r3,8(r22)
  8095ec:	81bfff04 	addi	r6,r16,-4
  8095f0:	01000904 	movi	r4,36
  8095f4:	18800315 	stw	r2,12(r3)
  8095f8:	10c00215 	stw	r3,8(r2)
  8095fc:	b4800204 	addi	r18,r22,8
  809600:	21804336 	bltu	r4,r6,809710 <_realloc_r+0x508>
  809604:	008004c4 	movi	r2,19
  809608:	11803f2e 	bgeu	r2,r6,809708 <_realloc_r+0x500>
  80960c:	a8800017 	ldw	r2,0(r21)
  809610:	b0800215 	stw	r2,8(r22)
  809614:	a8800117 	ldw	r2,4(r21)
  809618:	b0800315 	stw	r2,12(r22)
  80961c:	008006c4 	movi	r2,27
  809620:	11803f36 	bltu	r2,r6,809720 <_realloc_r+0x518>
  809624:	b0800404 	addi	r2,r22,16
  809628:	ad400204 	addi	r21,r21,8
  80962c:	a8c00017 	ldw	r3,0(r21)
  809630:	10c00015 	stw	r3,0(r2)
  809634:	a8c00117 	ldw	r3,4(r21)
  809638:	10c00115 	stw	r3,4(r2)
  80963c:	a8c00217 	ldw	r3,8(r21)
  809640:	10c00215 	stw	r3,8(r2)
  809644:	b447883a 	add	r3,r22,r17
  809648:	bc45c83a 	sub	r2,r23,r17
  80964c:	e0c00215 	stw	r3,8(fp)
  809650:	10800054 	ori	r2,r2,1
  809654:	18800115 	stw	r2,4(r3)
  809658:	b0800117 	ldw	r2,4(r22)
  80965c:	a009883a 	mov	r4,r20
  809660:	1080004c 	andi	r2,r2,1
  809664:	1462b03a 	or	r17,r2,r17
  809668:	b4400115 	stw	r17,4(r22)
  80966c:	080a1400 	call	80a140 <__malloc_unlock>
  809670:	9005883a 	mov	r2,r18
  809674:	003f4006 	br	809378 <__alt_mem_onchip_mem+0xff801378>
  809678:	a8c00217 	ldw	r3,8(r21)
  80967c:	90c00215 	stw	r3,8(r18)
  809680:	a8c00317 	ldw	r3,12(r21)
  809684:	90c00315 	stw	r3,12(r18)
  809688:	30801126 	beq	r6,r2,8096d0 <_realloc_r+0x4c8>
  80968c:	90800404 	addi	r2,r18,16
  809690:	a8c00404 	addi	r3,r21,16
  809694:	003f1906 	br	8092fc <__alt_mem_onchip_mem+0xff8012fc>
  809698:	90ffff17 	ldw	r3,-4(r18)
  80969c:	00bfff04 	movi	r2,-4
  8096a0:	a825883a 	mov	r18,r21
  8096a4:	1884703a 	and	r2,r3,r2
  8096a8:	80a1883a 	add	r16,r16,r2
  8096ac:	003f2406 	br	809340 <__alt_mem_onchip_mem+0xff801340>
  8096b0:	a8800217 	ldw	r2,8(r21)
  8096b4:	b0800415 	stw	r2,16(r22)
  8096b8:	a8800317 	ldw	r2,12(r21)
  8096bc:	b0800515 	stw	r2,20(r22)
  8096c0:	31000a26 	beq	r6,r4,8096ec <_realloc_r+0x4e4>
  8096c4:	b0800604 	addi	r2,r22,24
  8096c8:	ad400404 	addi	r21,r21,16
  8096cc:	003fa906 	br	809574 <__alt_mem_onchip_mem+0xff801574>
  8096d0:	a9000417 	ldw	r4,16(r21)
  8096d4:	90800604 	addi	r2,r18,24
  8096d8:	a8c00604 	addi	r3,r21,24
  8096dc:	91000415 	stw	r4,16(r18)
  8096e0:	a9000517 	ldw	r4,20(r21)
  8096e4:	91000515 	stw	r4,20(r18)
  8096e8:	003f0406 	br	8092fc <__alt_mem_onchip_mem+0xff8012fc>
  8096ec:	a8c00417 	ldw	r3,16(r21)
  8096f0:	ad400604 	addi	r21,r21,24
  8096f4:	b0800804 	addi	r2,r22,32
  8096f8:	b0c00615 	stw	r3,24(r22)
  8096fc:	a8ffff17 	ldw	r3,-4(r21)
  809700:	b0c00715 	stw	r3,28(r22)
  809704:	003f9b06 	br	809574 <__alt_mem_onchip_mem+0xff801574>
  809708:	9005883a 	mov	r2,r18
  80970c:	003fc706 	br	80962c <__alt_mem_onchip_mem+0xff80162c>
  809710:	a80b883a 	mov	r5,r21
  809714:	9009883a 	mov	r4,r18
  809718:	080904c0 	call	80904c <memmove>
  80971c:	003fc906 	br	809644 <__alt_mem_onchip_mem+0xff801644>
  809720:	a8800217 	ldw	r2,8(r21)
  809724:	b0800415 	stw	r2,16(r22)
  809728:	a8800317 	ldw	r2,12(r21)
  80972c:	b0800515 	stw	r2,20(r22)
  809730:	31000726 	beq	r6,r4,809750 <_realloc_r+0x548>
  809734:	b0800604 	addi	r2,r22,24
  809738:	ad400404 	addi	r21,r21,16
  80973c:	003fbb06 	br	80962c <__alt_mem_onchip_mem+0xff80162c>
  809740:	a009883a 	mov	r4,r20
  809744:	080a1400 	call	80a140 <__malloc_unlock>
  809748:	0005883a 	mov	r2,zero
  80974c:	003f0a06 	br	809378 <__alt_mem_onchip_mem+0xff801378>
  809750:	a8c00417 	ldw	r3,16(r21)
  809754:	ad400604 	addi	r21,r21,24
  809758:	b0800804 	addi	r2,r22,32
  80975c:	b0c00615 	stw	r3,24(r22)
  809760:	a8ffff17 	ldw	r3,-4(r21)
  809764:	b0c00715 	stw	r3,28(r22)
  809768:	003fb006 	br	80962c <__alt_mem_onchip_mem+0xff80162c>

0080976c <__swsetup_r>:
  80976c:	00802074 	movhi	r2,129
  809770:	defffd04 	addi	sp,sp,-12
  809774:	10bf1804 	addi	r2,r2,-928
  809778:	dc400115 	stw	r17,4(sp)
  80977c:	2023883a 	mov	r17,r4
  809780:	11000017 	ldw	r4,0(r2)
  809784:	dc000015 	stw	r16,0(sp)
  809788:	dfc00215 	stw	ra,8(sp)
  80978c:	2821883a 	mov	r16,r5
  809790:	20000226 	beq	r4,zero,80979c <__swsetup_r+0x30>
  809794:	20800e17 	ldw	r2,56(r4)
  809798:	10003126 	beq	r2,zero,809860 <__swsetup_r+0xf4>
  80979c:	8080030b 	ldhu	r2,12(r16)
  8097a0:	10c0020c 	andi	r3,r2,8
  8097a4:	1009883a 	mov	r4,r2
  8097a8:	18000f26 	beq	r3,zero,8097e8 <__swsetup_r+0x7c>
  8097ac:	80c00417 	ldw	r3,16(r16)
  8097b0:	18001526 	beq	r3,zero,809808 <__swsetup_r+0x9c>
  8097b4:	1100004c 	andi	r4,r2,1
  8097b8:	20001c1e 	bne	r4,zero,80982c <__swsetup_r+0xc0>
  8097bc:	1080008c 	andi	r2,r2,2
  8097c0:	1000291e 	bne	r2,zero,809868 <__swsetup_r+0xfc>
  8097c4:	80800517 	ldw	r2,20(r16)
  8097c8:	80800215 	stw	r2,8(r16)
  8097cc:	18001c26 	beq	r3,zero,809840 <__swsetup_r+0xd4>
  8097d0:	0005883a 	mov	r2,zero
  8097d4:	dfc00217 	ldw	ra,8(sp)
  8097d8:	dc400117 	ldw	r17,4(sp)
  8097dc:	dc000017 	ldw	r16,0(sp)
  8097e0:	dec00304 	addi	sp,sp,12
  8097e4:	f800283a 	ret
  8097e8:	2080040c 	andi	r2,r4,16
  8097ec:	10002e26 	beq	r2,zero,8098a8 <__swsetup_r+0x13c>
  8097f0:	2080010c 	andi	r2,r4,4
  8097f4:	10001e1e 	bne	r2,zero,809870 <__swsetup_r+0x104>
  8097f8:	80c00417 	ldw	r3,16(r16)
  8097fc:	20800214 	ori	r2,r4,8
  809800:	8080030d 	sth	r2,12(r16)
  809804:	183feb1e 	bne	r3,zero,8097b4 <__alt_mem_onchip_mem+0xff8017b4>
  809808:	1100a00c 	andi	r4,r2,640
  80980c:	01408004 	movi	r5,512
  809810:	217fe826 	beq	r4,r5,8097b4 <__alt_mem_onchip_mem+0xff8017b4>
  809814:	800b883a 	mov	r5,r16
  809818:	8809883a 	mov	r4,r17
  80981c:	08078800 	call	807880 <__smakebuf_r>
  809820:	8080030b 	ldhu	r2,12(r16)
  809824:	80c00417 	ldw	r3,16(r16)
  809828:	003fe206 	br	8097b4 <__alt_mem_onchip_mem+0xff8017b4>
  80982c:	80800517 	ldw	r2,20(r16)
  809830:	80000215 	stw	zero,8(r16)
  809834:	0085c83a 	sub	r2,zero,r2
  809838:	80800615 	stw	r2,24(r16)
  80983c:	183fe41e 	bne	r3,zero,8097d0 <__alt_mem_onchip_mem+0xff8017d0>
  809840:	80c0030b 	ldhu	r3,12(r16)
  809844:	0005883a 	mov	r2,zero
  809848:	1900200c 	andi	r4,r3,128
  80984c:	203fe126 	beq	r4,zero,8097d4 <__alt_mem_onchip_mem+0xff8017d4>
  809850:	18c01014 	ori	r3,r3,64
  809854:	80c0030d 	sth	r3,12(r16)
  809858:	00bfffc4 	movi	r2,-1
  80985c:	003fdd06 	br	8097d4 <__alt_mem_onchip_mem+0xff8017d4>
  809860:	0806b8c0 	call	806b8c <__sinit>
  809864:	003fcd06 	br	80979c <__alt_mem_onchip_mem+0xff80179c>
  809868:	0005883a 	mov	r2,zero
  80986c:	003fd606 	br	8097c8 <__alt_mem_onchip_mem+0xff8017c8>
  809870:	81400c17 	ldw	r5,48(r16)
  809874:	28000626 	beq	r5,zero,809890 <__swsetup_r+0x124>
  809878:	80801004 	addi	r2,r16,64
  80987c:	28800326 	beq	r5,r2,80988c <__swsetup_r+0x120>
  809880:	8809883a 	mov	r4,r17
  809884:	0806e0c0 	call	806e0c <_free_r>
  809888:	8100030b 	ldhu	r4,12(r16)
  80988c:	80000c15 	stw	zero,48(r16)
  809890:	80c00417 	ldw	r3,16(r16)
  809894:	00bff6c4 	movi	r2,-37
  809898:	1108703a 	and	r4,r2,r4
  80989c:	80000115 	stw	zero,4(r16)
  8098a0:	80c00015 	stw	r3,0(r16)
  8098a4:	003fd506 	br	8097fc <__alt_mem_onchip_mem+0xff8017fc>
  8098a8:	00800244 	movi	r2,9
  8098ac:	88800015 	stw	r2,0(r17)
  8098b0:	20801014 	ori	r2,r4,64
  8098b4:	8080030d 	sth	r2,12(r16)
  8098b8:	00bfffc4 	movi	r2,-1
  8098bc:	003fc506 	br	8097d4 <__alt_mem_onchip_mem+0xff8017d4>

008098c0 <__divsi3>:
  8098c0:	20001b16 	blt	r4,zero,809930 <__divsi3+0x70>
  8098c4:	000f883a 	mov	r7,zero
  8098c8:	28001616 	blt	r5,zero,809924 <__divsi3+0x64>
  8098cc:	200d883a 	mov	r6,r4
  8098d0:	29001a2e 	bgeu	r5,r4,80993c <__divsi3+0x7c>
  8098d4:	00800804 	movi	r2,32
  8098d8:	00c00044 	movi	r3,1
  8098dc:	00000106 	br	8098e4 <__divsi3+0x24>
  8098e0:	10000d26 	beq	r2,zero,809918 <__divsi3+0x58>
  8098e4:	294b883a 	add	r5,r5,r5
  8098e8:	10bfffc4 	addi	r2,r2,-1
  8098ec:	18c7883a 	add	r3,r3,r3
  8098f0:	293ffb36 	bltu	r5,r4,8098e0 <__alt_mem_onchip_mem+0xff8018e0>
  8098f4:	0005883a 	mov	r2,zero
  8098f8:	18000726 	beq	r3,zero,809918 <__divsi3+0x58>
  8098fc:	0005883a 	mov	r2,zero
  809900:	31400236 	bltu	r6,r5,80990c <__divsi3+0x4c>
  809904:	314dc83a 	sub	r6,r6,r5
  809908:	10c4b03a 	or	r2,r2,r3
  80990c:	1806d07a 	srli	r3,r3,1
  809910:	280ad07a 	srli	r5,r5,1
  809914:	183ffa1e 	bne	r3,zero,809900 <__alt_mem_onchip_mem+0xff801900>
  809918:	38000126 	beq	r7,zero,809920 <__divsi3+0x60>
  80991c:	0085c83a 	sub	r2,zero,r2
  809920:	f800283a 	ret
  809924:	014bc83a 	sub	r5,zero,r5
  809928:	39c0005c 	xori	r7,r7,1
  80992c:	003fe706 	br	8098cc <__alt_mem_onchip_mem+0xff8018cc>
  809930:	0109c83a 	sub	r4,zero,r4
  809934:	01c00044 	movi	r7,1
  809938:	003fe306 	br	8098c8 <__alt_mem_onchip_mem+0xff8018c8>
  80993c:	00c00044 	movi	r3,1
  809940:	003fee06 	br	8098fc <__alt_mem_onchip_mem+0xff8018fc>

00809944 <__modsi3>:
  809944:	20001716 	blt	r4,zero,8099a4 <__modsi3+0x60>
  809948:	000f883a 	mov	r7,zero
  80994c:	2005883a 	mov	r2,r4
  809950:	28001216 	blt	r5,zero,80999c <__modsi3+0x58>
  809954:	2900162e 	bgeu	r5,r4,8099b0 <__modsi3+0x6c>
  809958:	01800804 	movi	r6,32
  80995c:	00c00044 	movi	r3,1
  809960:	00000106 	br	809968 <__modsi3+0x24>
  809964:	30000a26 	beq	r6,zero,809990 <__modsi3+0x4c>
  809968:	294b883a 	add	r5,r5,r5
  80996c:	31bfffc4 	addi	r6,r6,-1
  809970:	18c7883a 	add	r3,r3,r3
  809974:	293ffb36 	bltu	r5,r4,809964 <__alt_mem_onchip_mem+0xff801964>
  809978:	18000526 	beq	r3,zero,809990 <__modsi3+0x4c>
  80997c:	1806d07a 	srli	r3,r3,1
  809980:	11400136 	bltu	r2,r5,809988 <__modsi3+0x44>
  809984:	1145c83a 	sub	r2,r2,r5
  809988:	280ad07a 	srli	r5,r5,1
  80998c:	183ffb1e 	bne	r3,zero,80997c <__alt_mem_onchip_mem+0xff80197c>
  809990:	38000126 	beq	r7,zero,809998 <__modsi3+0x54>
  809994:	0085c83a 	sub	r2,zero,r2
  809998:	f800283a 	ret
  80999c:	014bc83a 	sub	r5,zero,r5
  8099a0:	003fec06 	br	809954 <__alt_mem_onchip_mem+0xff801954>
  8099a4:	0109c83a 	sub	r4,zero,r4
  8099a8:	01c00044 	movi	r7,1
  8099ac:	003fe706 	br	80994c <__alt_mem_onchip_mem+0xff80194c>
  8099b0:	00c00044 	movi	r3,1
  8099b4:	003ff106 	br	80997c <__alt_mem_onchip_mem+0xff80197c>

008099b8 <__udivsi3>:
  8099b8:	200d883a 	mov	r6,r4
  8099bc:	2900152e 	bgeu	r5,r4,809a14 <__udivsi3+0x5c>
  8099c0:	28001416 	blt	r5,zero,809a14 <__udivsi3+0x5c>
  8099c4:	00800804 	movi	r2,32
  8099c8:	00c00044 	movi	r3,1
  8099cc:	00000206 	br	8099d8 <__udivsi3+0x20>
  8099d0:	10000e26 	beq	r2,zero,809a0c <__udivsi3+0x54>
  8099d4:	28000516 	blt	r5,zero,8099ec <__udivsi3+0x34>
  8099d8:	294b883a 	add	r5,r5,r5
  8099dc:	10bfffc4 	addi	r2,r2,-1
  8099e0:	18c7883a 	add	r3,r3,r3
  8099e4:	293ffa36 	bltu	r5,r4,8099d0 <__alt_mem_onchip_mem+0xff8019d0>
  8099e8:	18000826 	beq	r3,zero,809a0c <__udivsi3+0x54>
  8099ec:	0005883a 	mov	r2,zero
  8099f0:	31400236 	bltu	r6,r5,8099fc <__udivsi3+0x44>
  8099f4:	314dc83a 	sub	r6,r6,r5
  8099f8:	10c4b03a 	or	r2,r2,r3
  8099fc:	1806d07a 	srli	r3,r3,1
  809a00:	280ad07a 	srli	r5,r5,1
  809a04:	183ffa1e 	bne	r3,zero,8099f0 <__alt_mem_onchip_mem+0xff8019f0>
  809a08:	f800283a 	ret
  809a0c:	0005883a 	mov	r2,zero
  809a10:	f800283a 	ret
  809a14:	00c00044 	movi	r3,1
  809a18:	003ff406 	br	8099ec <__alt_mem_onchip_mem+0xff8019ec>

00809a1c <__umodsi3>:
  809a1c:	2005883a 	mov	r2,r4
  809a20:	2900122e 	bgeu	r5,r4,809a6c <__umodsi3+0x50>
  809a24:	28001116 	blt	r5,zero,809a6c <__umodsi3+0x50>
  809a28:	01800804 	movi	r6,32
  809a2c:	00c00044 	movi	r3,1
  809a30:	00000206 	br	809a3c <__umodsi3+0x20>
  809a34:	30000c26 	beq	r6,zero,809a68 <__umodsi3+0x4c>
  809a38:	28000516 	blt	r5,zero,809a50 <__umodsi3+0x34>
  809a3c:	294b883a 	add	r5,r5,r5
  809a40:	31bfffc4 	addi	r6,r6,-1
  809a44:	18c7883a 	add	r3,r3,r3
  809a48:	293ffa36 	bltu	r5,r4,809a34 <__alt_mem_onchip_mem+0xff801a34>
  809a4c:	18000626 	beq	r3,zero,809a68 <__umodsi3+0x4c>
  809a50:	1806d07a 	srli	r3,r3,1
  809a54:	11400136 	bltu	r2,r5,809a5c <__umodsi3+0x40>
  809a58:	1145c83a 	sub	r2,r2,r5
  809a5c:	280ad07a 	srli	r5,r5,1
  809a60:	183ffb1e 	bne	r3,zero,809a50 <__alt_mem_onchip_mem+0xff801a50>
  809a64:	f800283a 	ret
  809a68:	f800283a 	ret
  809a6c:	00c00044 	movi	r3,1
  809a70:	003ff706 	br	809a50 <__alt_mem_onchip_mem+0xff801a50>

00809a74 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  809a74:	defff504 	addi	sp,sp,-44
  809a78:	df000a15 	stw	fp,40(sp)
  809a7c:	df000a04 	addi	fp,sp,40
  809a80:	e13ffc15 	stw	r4,-16(fp)
  809a84:	e17ffd15 	stw	r5,-12(fp)
  809a88:	e1bffe15 	stw	r6,-8(fp)
  809a8c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  809a90:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  809a94:	d0a72e17 	ldw	r2,-25416(gp)
  
  if (alt_ticks_per_second ())
  809a98:	10003c26 	beq	r2,zero,809b8c <alt_alarm_start+0x118>
  {
    if (alarm)
  809a9c:	e0bffc17 	ldw	r2,-16(fp)
  809aa0:	10003826 	beq	r2,zero,809b84 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  809aa4:	e0bffc17 	ldw	r2,-16(fp)
  809aa8:	e0fffe17 	ldw	r3,-8(fp)
  809aac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  809ab0:	e0bffc17 	ldw	r2,-16(fp)
  809ab4:	e0ffff17 	ldw	r3,-4(fp)
  809ab8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809abc:	0005303a 	rdctl	r2,status
  809ac0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809ac4:	e0fff917 	ldw	r3,-28(fp)
  809ac8:	00bfff84 	movi	r2,-2
  809acc:	1884703a 	and	r2,r3,r2
  809ad0:	1001703a 	wrctl	status,r2
  
  return context;
  809ad4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  809ad8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  809adc:	d0a72f17 	ldw	r2,-25412(gp)
      
      current_nticks = alt_nticks();
  809ae0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  809ae4:	e0fffd17 	ldw	r3,-12(fp)
  809ae8:	e0bff617 	ldw	r2,-40(fp)
  809aec:	1885883a 	add	r2,r3,r2
  809af0:	10c00044 	addi	r3,r2,1
  809af4:	e0bffc17 	ldw	r2,-16(fp)
  809af8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  809afc:	e0bffc17 	ldw	r2,-16(fp)
  809b00:	10c00217 	ldw	r3,8(r2)
  809b04:	e0bff617 	ldw	r2,-40(fp)
  809b08:	1880042e 	bgeu	r3,r2,809b1c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  809b0c:	e0bffc17 	ldw	r2,-16(fp)
  809b10:	00c00044 	movi	r3,1
  809b14:	10c00405 	stb	r3,16(r2)
  809b18:	00000206 	br	809b24 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  809b1c:	e0bffc17 	ldw	r2,-16(fp)
  809b20:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  809b24:	e0bffc17 	ldw	r2,-16(fp)
  809b28:	d0e00b04 	addi	r3,gp,-32724
  809b2c:	e0fffa15 	stw	r3,-24(fp)
  809b30:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  809b34:	e0bffb17 	ldw	r2,-20(fp)
  809b38:	e0fffa17 	ldw	r3,-24(fp)
  809b3c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  809b40:	e0bffa17 	ldw	r2,-24(fp)
  809b44:	10c00017 	ldw	r3,0(r2)
  809b48:	e0bffb17 	ldw	r2,-20(fp)
  809b4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  809b50:	e0bffa17 	ldw	r2,-24(fp)
  809b54:	10800017 	ldw	r2,0(r2)
  809b58:	e0fffb17 	ldw	r3,-20(fp)
  809b5c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  809b60:	e0bffa17 	ldw	r2,-24(fp)
  809b64:	e0fffb17 	ldw	r3,-20(fp)
  809b68:	10c00015 	stw	r3,0(r2)
  809b6c:	e0bff817 	ldw	r2,-32(fp)
  809b70:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809b74:	e0bff717 	ldw	r2,-36(fp)
  809b78:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  809b7c:	0005883a 	mov	r2,zero
  809b80:	00000306 	br	809b90 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  809b84:	00bffa84 	movi	r2,-22
  809b88:	00000106 	br	809b90 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  809b8c:	00bfde84 	movi	r2,-134
  }
}
  809b90:	e037883a 	mov	sp,fp
  809b94:	df000017 	ldw	fp,0(sp)
  809b98:	dec00104 	addi	sp,sp,4
  809b9c:	f800283a 	ret

00809ba0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809ba0:	defffe04 	addi	sp,sp,-8
  809ba4:	dfc00115 	stw	ra,4(sp)
  809ba8:	df000015 	stw	fp,0(sp)
  809bac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809bb0:	d0a00917 	ldw	r2,-32732(gp)
  809bb4:	10000326 	beq	r2,zero,809bc4 <alt_get_errno+0x24>
  809bb8:	d0a00917 	ldw	r2,-32732(gp)
  809bbc:	103ee83a 	callr	r2
  809bc0:	00000106 	br	809bc8 <alt_get_errno+0x28>
  809bc4:	d0a72704 	addi	r2,gp,-25444
}
  809bc8:	e037883a 	mov	sp,fp
  809bcc:	dfc00117 	ldw	ra,4(sp)
  809bd0:	df000017 	ldw	fp,0(sp)
  809bd4:	dec00204 	addi	sp,sp,8
  809bd8:	f800283a 	ret

00809bdc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  809bdc:	defffb04 	addi	sp,sp,-20
  809be0:	dfc00415 	stw	ra,16(sp)
  809be4:	df000315 	stw	fp,12(sp)
  809be8:	df000304 	addi	fp,sp,12
  809bec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  809bf0:	e0bfff17 	ldw	r2,-4(fp)
  809bf4:	10000616 	blt	r2,zero,809c10 <close+0x34>
  809bf8:	e0bfff17 	ldw	r2,-4(fp)
  809bfc:	10c00324 	muli	r3,r2,12
  809c00:	00802074 	movhi	r2,129
  809c04:	10ba2604 	addi	r2,r2,-5992
  809c08:	1885883a 	add	r2,r3,r2
  809c0c:	00000106 	br	809c14 <close+0x38>
  809c10:	0005883a 	mov	r2,zero
  809c14:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  809c18:	e0bffd17 	ldw	r2,-12(fp)
  809c1c:	10001926 	beq	r2,zero,809c84 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  809c20:	e0bffd17 	ldw	r2,-12(fp)
  809c24:	10800017 	ldw	r2,0(r2)
  809c28:	10800417 	ldw	r2,16(r2)
  809c2c:	10000626 	beq	r2,zero,809c48 <close+0x6c>
  809c30:	e0bffd17 	ldw	r2,-12(fp)
  809c34:	10800017 	ldw	r2,0(r2)
  809c38:	10800417 	ldw	r2,16(r2)
  809c3c:	e13ffd17 	ldw	r4,-12(fp)
  809c40:	103ee83a 	callr	r2
  809c44:	00000106 	br	809c4c <close+0x70>
  809c48:	0005883a 	mov	r2,zero
  809c4c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  809c50:	e13fff17 	ldw	r4,-4(fp)
  809c54:	080a4f00 	call	80a4f0 <alt_release_fd>
    if (rval < 0)
  809c58:	e0bffe17 	ldw	r2,-8(fp)
  809c5c:	1000070e 	bge	r2,zero,809c7c <close+0xa0>
    {
      ALT_ERRNO = -rval;
  809c60:	0809ba00 	call	809ba0 <alt_get_errno>
  809c64:	1007883a 	mov	r3,r2
  809c68:	e0bffe17 	ldw	r2,-8(fp)
  809c6c:	0085c83a 	sub	r2,zero,r2
  809c70:	18800015 	stw	r2,0(r3)
      return -1;
  809c74:	00bfffc4 	movi	r2,-1
  809c78:	00000706 	br	809c98 <close+0xbc>
    }
    return 0;
  809c7c:	0005883a 	mov	r2,zero
  809c80:	00000506 	br	809c98 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809c84:	0809ba00 	call	809ba0 <alt_get_errno>
  809c88:	1007883a 	mov	r3,r2
  809c8c:	00801444 	movi	r2,81
  809c90:	18800015 	stw	r2,0(r3)
    return -1;
  809c94:	00bfffc4 	movi	r2,-1
  }
}
  809c98:	e037883a 	mov	sp,fp
  809c9c:	dfc00117 	ldw	ra,4(sp)
  809ca0:	df000017 	ldw	fp,0(sp)
  809ca4:	dec00204 	addi	sp,sp,8
  809ca8:	f800283a 	ret

00809cac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  809cac:	defffc04 	addi	sp,sp,-16
  809cb0:	df000315 	stw	fp,12(sp)
  809cb4:	df000304 	addi	fp,sp,12
  809cb8:	e13ffd15 	stw	r4,-12(fp)
  809cbc:	e17ffe15 	stw	r5,-8(fp)
  809cc0:	e1bfff15 	stw	r6,-4(fp)
  return len;
  809cc4:	e0bfff17 	ldw	r2,-4(fp)
}
  809cc8:	e037883a 	mov	sp,fp
  809ccc:	df000017 	ldw	fp,0(sp)
  809cd0:	dec00104 	addi	sp,sp,4
  809cd4:	f800283a 	ret

00809cd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809cd8:	defffe04 	addi	sp,sp,-8
  809cdc:	dfc00115 	stw	ra,4(sp)
  809ce0:	df000015 	stw	fp,0(sp)
  809ce4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809ce8:	d0a00917 	ldw	r2,-32732(gp)
  809cec:	10000326 	beq	r2,zero,809cfc <alt_get_errno+0x24>
  809cf0:	d0a00917 	ldw	r2,-32732(gp)
  809cf4:	103ee83a 	callr	r2
  809cf8:	00000106 	br	809d00 <alt_get_errno+0x28>
  809cfc:	d0a72704 	addi	r2,gp,-25444
}
  809d00:	e037883a 	mov	sp,fp
  809d04:	dfc00117 	ldw	ra,4(sp)
  809d08:	df000017 	ldw	fp,0(sp)
  809d0c:	dec00204 	addi	sp,sp,8
  809d10:	f800283a 	ret

00809d14 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  809d14:	defffb04 	addi	sp,sp,-20
  809d18:	dfc00415 	stw	ra,16(sp)
  809d1c:	df000315 	stw	fp,12(sp)
  809d20:	df000304 	addi	fp,sp,12
  809d24:	e13ffe15 	stw	r4,-8(fp)
  809d28:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809d2c:	e0bffe17 	ldw	r2,-8(fp)
  809d30:	10000616 	blt	r2,zero,809d4c <fstat+0x38>
  809d34:	e0bffe17 	ldw	r2,-8(fp)
  809d38:	10c00324 	muli	r3,r2,12
  809d3c:	00802074 	movhi	r2,129
  809d40:	10ba2604 	addi	r2,r2,-5992
  809d44:	1885883a 	add	r2,r3,r2
  809d48:	00000106 	br	809d50 <fstat+0x3c>
  809d4c:	0005883a 	mov	r2,zero
  809d50:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  809d54:	e0bffd17 	ldw	r2,-12(fp)
  809d58:	10001026 	beq	r2,zero,809d9c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  809d5c:	e0bffd17 	ldw	r2,-12(fp)
  809d60:	10800017 	ldw	r2,0(r2)
  809d64:	10800817 	ldw	r2,32(r2)
  809d68:	10000726 	beq	r2,zero,809d88 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  809d6c:	e0bffd17 	ldw	r2,-12(fp)
  809d70:	10800017 	ldw	r2,0(r2)
  809d74:	10800817 	ldw	r2,32(r2)
  809d78:	e17fff17 	ldw	r5,-4(fp)
  809d7c:	e13ffd17 	ldw	r4,-12(fp)
  809d80:	103ee83a 	callr	r2
  809d84:	00000a06 	br	809db0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809d88:	e0bfff17 	ldw	r2,-4(fp)
  809d8c:	00c80004 	movi	r3,8192
  809d90:	10c00115 	stw	r3,4(r2)
      return 0;
  809d94:	0005883a 	mov	r2,zero
  809d98:	00000506 	br	809db0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809d9c:	0809cd80 	call	809cd8 <alt_get_errno>
  809da0:	1007883a 	mov	r3,r2
  809da4:	00801444 	movi	r2,81
  809da8:	18800015 	stw	r2,0(r3)
    return -1;
  809dac:	00bfffc4 	movi	r2,-1
  }
}
  809db0:	e037883a 	mov	sp,fp
  809db4:	dfc00117 	ldw	ra,4(sp)
  809db8:	df000017 	ldw	fp,0(sp)
  809dbc:	dec00204 	addi	sp,sp,8
  809dc0:	f800283a 	ret

00809dc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809dc4:	defffe04 	addi	sp,sp,-8
  809dc8:	dfc00115 	stw	ra,4(sp)
  809dcc:	df000015 	stw	fp,0(sp)
  809dd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809dd4:	d0a00917 	ldw	r2,-32732(gp)
  809dd8:	10000326 	beq	r2,zero,809de8 <alt_get_errno+0x24>
  809ddc:	d0a00917 	ldw	r2,-32732(gp)
  809de0:	103ee83a 	callr	r2
  809de4:	00000106 	br	809dec <alt_get_errno+0x28>
  809de8:	d0a72704 	addi	r2,gp,-25444
}
  809dec:	e037883a 	mov	sp,fp
  809df0:	dfc00117 	ldw	ra,4(sp)
  809df4:	df000017 	ldw	fp,0(sp)
  809df8:	dec00204 	addi	sp,sp,8
  809dfc:	f800283a 	ret

00809e00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  809e00:	deffed04 	addi	sp,sp,-76
  809e04:	dfc01215 	stw	ra,72(sp)
  809e08:	df001115 	stw	fp,68(sp)
  809e0c:	df001104 	addi	fp,sp,68
  809e10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809e14:	e0bfff17 	ldw	r2,-4(fp)
  809e18:	10000616 	blt	r2,zero,809e34 <isatty+0x34>
  809e1c:	e0bfff17 	ldw	r2,-4(fp)
  809e20:	10c00324 	muli	r3,r2,12
  809e24:	00802074 	movhi	r2,129
  809e28:	10ba2604 	addi	r2,r2,-5992
  809e2c:	1885883a 	add	r2,r3,r2
  809e30:	00000106 	br	809e38 <isatty+0x38>
  809e34:	0005883a 	mov	r2,zero
  809e38:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  809e3c:	e0bfef17 	ldw	r2,-68(fp)
  809e40:	10000e26 	beq	r2,zero,809e7c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  809e44:	e0bfef17 	ldw	r2,-68(fp)
  809e48:	10800017 	ldw	r2,0(r2)
  809e4c:	10800817 	ldw	r2,32(r2)
  809e50:	1000021e 	bne	r2,zero,809e5c <isatty+0x5c>
    {
      return 1;
  809e54:	00800044 	movi	r2,1
  809e58:	00000d06 	br	809e90 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  809e5c:	e0bff004 	addi	r2,fp,-64
  809e60:	100b883a 	mov	r5,r2
  809e64:	e13fff17 	ldw	r4,-4(fp)
  809e68:	0809d140 	call	809d14 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  809e6c:	e0bff117 	ldw	r2,-60(fp)
  809e70:	10880020 	cmpeqi	r2,r2,8192
  809e74:	10803fcc 	andi	r2,r2,255
  809e78:	00000506 	br	809e90 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809e7c:	0809dc40 	call	809dc4 <alt_get_errno>
  809e80:	1007883a 	mov	r3,r2
  809e84:	00801444 	movi	r2,81
  809e88:	18800015 	stw	r2,0(r3)
    return 0;
  809e8c:	0005883a 	mov	r2,zero
  }
}
  809e90:	e037883a 	mov	sp,fp
  809e94:	dfc00117 	ldw	ra,4(sp)
  809e98:	df000017 	ldw	fp,0(sp)
  809e9c:	dec00204 	addi	sp,sp,8
  809ea0:	f800283a 	ret

00809ea4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  809ea4:	defffc04 	addi	sp,sp,-16
  809ea8:	df000315 	stw	fp,12(sp)
  809eac:	df000304 	addi	fp,sp,12
  809eb0:	e13ffd15 	stw	r4,-12(fp)
  809eb4:	e17ffe15 	stw	r5,-8(fp)
  809eb8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  809ebc:	e0fffe17 	ldw	r3,-8(fp)
  809ec0:	e0bffd17 	ldw	r2,-12(fp)
  809ec4:	18800c26 	beq	r3,r2,809ef8 <alt_load_section+0x54>
  {
    while( to != end )
  809ec8:	00000806 	br	809eec <alt_load_section+0x48>
    {
      *to++ = *from++;
  809ecc:	e0bffe17 	ldw	r2,-8(fp)
  809ed0:	10c00104 	addi	r3,r2,4
  809ed4:	e0fffe15 	stw	r3,-8(fp)
  809ed8:	e0fffd17 	ldw	r3,-12(fp)
  809edc:	19000104 	addi	r4,r3,4
  809ee0:	e13ffd15 	stw	r4,-12(fp)
  809ee4:	18c00017 	ldw	r3,0(r3)
  809ee8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  809eec:	e0fffe17 	ldw	r3,-8(fp)
  809ef0:	e0bfff17 	ldw	r2,-4(fp)
  809ef4:	18bff51e 	bne	r3,r2,809ecc <__alt_mem_onchip_mem+0xff801ecc>
    {
      *to++ = *from++;
    }
  }
}
  809ef8:	0001883a 	nop
  809efc:	e037883a 	mov	sp,fp
  809f00:	df000017 	ldw	fp,0(sp)
  809f04:	dec00104 	addi	sp,sp,4
  809f08:	f800283a 	ret

00809f0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  809f0c:	defffe04 	addi	sp,sp,-8
  809f10:	dfc00115 	stw	ra,4(sp)
  809f14:	df000015 	stw	fp,0(sp)
  809f18:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  809f1c:	01802074 	movhi	r6,129
  809f20:	31bf2704 	addi	r6,r6,-868
  809f24:	01402074 	movhi	r5,129
  809f28:	29781104 	addi	r5,r5,-8124
  809f2c:	01002074 	movhi	r4,129
  809f30:	213f2704 	addi	r4,r4,-868
  809f34:	0809ea40 	call	809ea4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  809f38:	01802034 	movhi	r6,128
  809f3c:	31809104 	addi	r6,r6,580
  809f40:	01402034 	movhi	r5,128
  809f44:	29400804 	addi	r5,r5,32
  809f48:	01002034 	movhi	r4,128
  809f4c:	21000804 	addi	r4,r4,32
  809f50:	0809ea40 	call	809ea4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  809f54:	01802074 	movhi	r6,129
  809f58:	31b81104 	addi	r6,r6,-8124
  809f5c:	01402074 	movhi	r5,129
  809f60:	29770b04 	addi	r5,r5,-9172
  809f64:	01002074 	movhi	r4,129
  809f68:	21370b04 	addi	r4,r4,-9172
  809f6c:	0809ea40 	call	809ea4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  809f70:	080ccf00 	call	80ccf0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  809f74:	080d1140 	call	80d114 <alt_icache_flush_all>
}
  809f78:	0001883a 	nop
  809f7c:	e037883a 	mov	sp,fp
  809f80:	dfc00117 	ldw	ra,4(sp)
  809f84:	df000017 	ldw	fp,0(sp)
  809f88:	dec00204 	addi	sp,sp,8
  809f8c:	f800283a 	ret

00809f90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809f90:	defffe04 	addi	sp,sp,-8
  809f94:	dfc00115 	stw	ra,4(sp)
  809f98:	df000015 	stw	fp,0(sp)
  809f9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809fa0:	d0a00917 	ldw	r2,-32732(gp)
  809fa4:	10000326 	beq	r2,zero,809fb4 <alt_get_errno+0x24>
  809fa8:	d0a00917 	ldw	r2,-32732(gp)
  809fac:	103ee83a 	callr	r2
  809fb0:	00000106 	br	809fb8 <alt_get_errno+0x28>
  809fb4:	d0a72704 	addi	r2,gp,-25444
}
  809fb8:	e037883a 	mov	sp,fp
  809fbc:	dfc00117 	ldw	ra,4(sp)
  809fc0:	df000017 	ldw	fp,0(sp)
  809fc4:	dec00204 	addi	sp,sp,8
  809fc8:	f800283a 	ret

00809fcc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  809fcc:	defff904 	addi	sp,sp,-28
  809fd0:	dfc00615 	stw	ra,24(sp)
  809fd4:	df000515 	stw	fp,20(sp)
  809fd8:	df000504 	addi	fp,sp,20
  809fdc:	e13ffd15 	stw	r4,-12(fp)
  809fe0:	e17ffe15 	stw	r5,-8(fp)
  809fe4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  809fe8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809fec:	e0bffd17 	ldw	r2,-12(fp)
  809ff0:	10000616 	blt	r2,zero,80a00c <lseek+0x40>
  809ff4:	e0bffd17 	ldw	r2,-12(fp)
  809ff8:	10c00324 	muli	r3,r2,12
  809ffc:	00802074 	movhi	r2,129
  80a000:	10ba2604 	addi	r2,r2,-5992
  80a004:	1885883a 	add	r2,r3,r2
  80a008:	00000106 	br	80a010 <lseek+0x44>
  80a00c:	0005883a 	mov	r2,zero
  80a010:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80a014:	e0bffc17 	ldw	r2,-16(fp)
  80a018:	10001026 	beq	r2,zero,80a05c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80a01c:	e0bffc17 	ldw	r2,-16(fp)
  80a020:	10800017 	ldw	r2,0(r2)
  80a024:	10800717 	ldw	r2,28(r2)
  80a028:	10000926 	beq	r2,zero,80a050 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80a02c:	e0bffc17 	ldw	r2,-16(fp)
  80a030:	10800017 	ldw	r2,0(r2)
  80a034:	10800717 	ldw	r2,28(r2)
  80a038:	e1bfff17 	ldw	r6,-4(fp)
  80a03c:	e17ffe17 	ldw	r5,-8(fp)
  80a040:	e13ffc17 	ldw	r4,-16(fp)
  80a044:	103ee83a 	callr	r2
  80a048:	e0bffb15 	stw	r2,-20(fp)
  80a04c:	00000506 	br	80a064 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80a050:	00bfde84 	movi	r2,-134
  80a054:	e0bffb15 	stw	r2,-20(fp)
  80a058:	00000206 	br	80a064 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80a05c:	00bfebc4 	movi	r2,-81
  80a060:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80a064:	e0bffb17 	ldw	r2,-20(fp)
  80a068:	1000070e 	bge	r2,zero,80a088 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80a06c:	0809f900 	call	809f90 <alt_get_errno>
  80a070:	1007883a 	mov	r3,r2
  80a074:	e0bffb17 	ldw	r2,-20(fp)
  80a078:	0085c83a 	sub	r2,zero,r2
  80a07c:	18800015 	stw	r2,0(r3)
    rc = -1;
  80a080:	00bfffc4 	movi	r2,-1
  80a084:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80a088:	e0bffb17 	ldw	r2,-20(fp)
}
  80a08c:	e037883a 	mov	sp,fp
  80a090:	dfc00117 	ldw	ra,4(sp)
  80a094:	df000017 	ldw	fp,0(sp)
  80a098:	dec00204 	addi	sp,sp,8
  80a09c:	f800283a 	ret

0080a0a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80a0a0:	defffd04 	addi	sp,sp,-12
  80a0a4:	dfc00215 	stw	ra,8(sp)
  80a0a8:	df000115 	stw	fp,4(sp)
  80a0ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80a0b0:	0009883a 	mov	r4,zero
  80a0b4:	080a9100 	call	80a910 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80a0b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80a0bc:	080a9480 	call	80a948 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80a0c0:	01802074 	movhi	r6,129
  80a0c4:	31b76304 	addi	r6,r6,-8820
  80a0c8:	01402074 	movhi	r5,129
  80a0cc:	29776304 	addi	r5,r5,-8820
  80a0d0:	01002074 	movhi	r4,129
  80a0d4:	21376304 	addi	r4,r4,-8820
  80a0d8:	080d4ac0 	call	80d4ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80a0dc:	080ce180 	call	80ce18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80a0e0:	01002074 	movhi	r4,129
  80a0e4:	21339e04 	addi	r4,r4,-12680
  80a0e8:	080d8000 	call	80d800 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80a0ec:	d0a72b17 	ldw	r2,-25428(gp)
  80a0f0:	d0e72c17 	ldw	r3,-25424(gp)
  80a0f4:	d1272d17 	ldw	r4,-25420(gp)
  80a0f8:	200d883a 	mov	r6,r4
  80a0fc:	180b883a 	mov	r5,r3
  80a100:	1009883a 	mov	r4,r2
  80a104:	08042900 	call	804290 <main>
  80a108:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80a10c:	01000044 	movi	r4,1
  80a110:	0809bdc0 	call	809bdc <close>
  exit (result);
  80a114:	e13fff17 	ldw	r4,-4(fp)
  80a118:	080d8140 	call	80d814 <exit>

0080a11c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80a11c:	defffe04 	addi	sp,sp,-8
  80a120:	df000115 	stw	fp,4(sp)
  80a124:	df000104 	addi	fp,sp,4
  80a128:	e13fff15 	stw	r4,-4(fp)
}
  80a12c:	0001883a 	nop
  80a130:	e037883a 	mov	sp,fp
  80a134:	df000017 	ldw	fp,0(sp)
  80a138:	dec00104 	addi	sp,sp,4
  80a13c:	f800283a 	ret

0080a140 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80a140:	defffe04 	addi	sp,sp,-8
  80a144:	df000115 	stw	fp,4(sp)
  80a148:	df000104 	addi	fp,sp,4
  80a14c:	e13fff15 	stw	r4,-4(fp)
}
  80a150:	0001883a 	nop
  80a154:	e037883a 	mov	sp,fp
  80a158:	df000017 	ldw	fp,0(sp)
  80a15c:	dec00104 	addi	sp,sp,4
  80a160:	f800283a 	ret

0080a164 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a164:	defffe04 	addi	sp,sp,-8
  80a168:	dfc00115 	stw	ra,4(sp)
  80a16c:	df000015 	stw	fp,0(sp)
  80a170:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a174:	d0a00917 	ldw	r2,-32732(gp)
  80a178:	10000326 	beq	r2,zero,80a188 <alt_get_errno+0x24>
  80a17c:	d0a00917 	ldw	r2,-32732(gp)
  80a180:	103ee83a 	callr	r2
  80a184:	00000106 	br	80a18c <alt_get_errno+0x28>
  80a188:	d0a72704 	addi	r2,gp,-25444
}
  80a18c:	e037883a 	mov	sp,fp
  80a190:	dfc00117 	ldw	ra,4(sp)
  80a194:	df000017 	ldw	fp,0(sp)
  80a198:	dec00204 	addi	sp,sp,8
  80a19c:	f800283a 	ret

0080a1a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80a1a0:	defffd04 	addi	sp,sp,-12
  80a1a4:	df000215 	stw	fp,8(sp)
  80a1a8:	df000204 	addi	fp,sp,8
  80a1ac:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80a1b0:	e0bfff17 	ldw	r2,-4(fp)
  80a1b4:	10800217 	ldw	r2,8(r2)
  80a1b8:	10d00034 	orhi	r3,r2,16384
  80a1bc:	e0bfff17 	ldw	r2,-4(fp)
  80a1c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80a1c4:	e03ffe15 	stw	zero,-8(fp)
  80a1c8:	00001d06 	br	80a240 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80a1cc:	00802074 	movhi	r2,129
  80a1d0:	10ba2604 	addi	r2,r2,-5992
  80a1d4:	e0fffe17 	ldw	r3,-8(fp)
  80a1d8:	18c00324 	muli	r3,r3,12
  80a1dc:	10c5883a 	add	r2,r2,r3
  80a1e0:	10c00017 	ldw	r3,0(r2)
  80a1e4:	e0bfff17 	ldw	r2,-4(fp)
  80a1e8:	10800017 	ldw	r2,0(r2)
  80a1ec:	1880111e 	bne	r3,r2,80a234 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80a1f0:	00802074 	movhi	r2,129
  80a1f4:	10ba2604 	addi	r2,r2,-5992
  80a1f8:	e0fffe17 	ldw	r3,-8(fp)
  80a1fc:	18c00324 	muli	r3,r3,12
  80a200:	10c5883a 	add	r2,r2,r3
  80a204:	10800204 	addi	r2,r2,8
  80a208:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80a20c:	1000090e 	bge	r2,zero,80a234 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80a210:	e0bffe17 	ldw	r2,-8(fp)
  80a214:	10c00324 	muli	r3,r2,12
  80a218:	00802074 	movhi	r2,129
  80a21c:	10ba2604 	addi	r2,r2,-5992
  80a220:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80a224:	e0bfff17 	ldw	r2,-4(fp)
  80a228:	18800226 	beq	r3,r2,80a234 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80a22c:	00bffcc4 	movi	r2,-13
  80a230:	00000806 	br	80a254 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80a234:	e0bffe17 	ldw	r2,-8(fp)
  80a238:	10800044 	addi	r2,r2,1
  80a23c:	e0bffe15 	stw	r2,-8(fp)
  80a240:	d0a00817 	ldw	r2,-32736(gp)
  80a244:	1007883a 	mov	r3,r2
  80a248:	e0bffe17 	ldw	r2,-8(fp)
  80a24c:	18bfdf2e 	bgeu	r3,r2,80a1cc <__alt_mem_onchip_mem+0xff8021cc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80a250:	0005883a 	mov	r2,zero
}
  80a254:	e037883a 	mov	sp,fp
  80a258:	df000017 	ldw	fp,0(sp)
  80a25c:	dec00104 	addi	sp,sp,4
  80a260:	f800283a 	ret

0080a264 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80a264:	defff604 	addi	sp,sp,-40
  80a268:	dfc00915 	stw	ra,36(sp)
  80a26c:	df000815 	stw	fp,32(sp)
  80a270:	df000804 	addi	fp,sp,32
  80a274:	e13ffd15 	stw	r4,-12(fp)
  80a278:	e17ffe15 	stw	r5,-8(fp)
  80a27c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80a280:	00bfffc4 	movi	r2,-1
  80a284:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80a288:	00bffb44 	movi	r2,-19
  80a28c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80a290:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80a294:	d1600604 	addi	r5,gp,-32744
  80a298:	e13ffd17 	ldw	r4,-12(fp)
  80a29c:	080ced80 	call	80ced8 <alt_find_dev>
  80a2a0:	e0bff815 	stw	r2,-32(fp)
  80a2a4:	e0bff817 	ldw	r2,-32(fp)
  80a2a8:	1000051e 	bne	r2,zero,80a2c0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80a2ac:	e13ffd17 	ldw	r4,-12(fp)
  80a2b0:	080cf680 	call	80cf68 <alt_find_file>
  80a2b4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80a2b8:	00800044 	movi	r2,1
  80a2bc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80a2c0:	e0bff817 	ldw	r2,-32(fp)
  80a2c4:	10002926 	beq	r2,zero,80a36c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80a2c8:	e13ff817 	ldw	r4,-32(fp)
  80a2cc:	080d0700 	call	80d070 <alt_get_fd>
  80a2d0:	e0bff915 	stw	r2,-28(fp)
  80a2d4:	e0bff917 	ldw	r2,-28(fp)
  80a2d8:	1000030e 	bge	r2,zero,80a2e8 <open+0x84>
    {
      status = index;
  80a2dc:	e0bff917 	ldw	r2,-28(fp)
  80a2e0:	e0bffa15 	stw	r2,-24(fp)
  80a2e4:	00002306 	br	80a374 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80a2e8:	e0bff917 	ldw	r2,-28(fp)
  80a2ec:	10c00324 	muli	r3,r2,12
  80a2f0:	00802074 	movhi	r2,129
  80a2f4:	10ba2604 	addi	r2,r2,-5992
  80a2f8:	1885883a 	add	r2,r3,r2
  80a2fc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80a300:	e0fffe17 	ldw	r3,-8(fp)
  80a304:	00900034 	movhi	r2,16384
  80a308:	10bfffc4 	addi	r2,r2,-1
  80a30c:	1886703a 	and	r3,r3,r2
  80a310:	e0bffc17 	ldw	r2,-16(fp)
  80a314:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80a318:	e0bffb17 	ldw	r2,-20(fp)
  80a31c:	1000051e 	bne	r2,zero,80a334 <open+0xd0>
  80a320:	e13ffc17 	ldw	r4,-16(fp)
  80a324:	080a1a00 	call	80a1a0 <alt_file_locked>
  80a328:	e0bffa15 	stw	r2,-24(fp)
  80a32c:	e0bffa17 	ldw	r2,-24(fp)
  80a330:	10001016 	blt	r2,zero,80a374 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80a334:	e0bff817 	ldw	r2,-32(fp)
  80a338:	10800317 	ldw	r2,12(r2)
  80a33c:	10000826 	beq	r2,zero,80a360 <open+0xfc>
  80a340:	e0bff817 	ldw	r2,-32(fp)
  80a344:	10800317 	ldw	r2,12(r2)
  80a348:	e1ffff17 	ldw	r7,-4(fp)
  80a34c:	e1bffe17 	ldw	r6,-8(fp)
  80a350:	e17ffd17 	ldw	r5,-12(fp)
  80a354:	e13ffc17 	ldw	r4,-16(fp)
  80a358:	103ee83a 	callr	r2
  80a35c:	00000106 	br	80a364 <open+0x100>
  80a360:	0005883a 	mov	r2,zero
  80a364:	e0bffa15 	stw	r2,-24(fp)
  80a368:	00000206 	br	80a374 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80a36c:	00bffb44 	movi	r2,-19
  80a370:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80a374:	e0bffa17 	ldw	r2,-24(fp)
  80a378:	1000090e 	bge	r2,zero,80a3a0 <open+0x13c>
  {
    alt_release_fd (index);  
  80a37c:	e13ff917 	ldw	r4,-28(fp)
  80a380:	080a4f00 	call	80a4f0 <alt_release_fd>
    ALT_ERRNO = -status;
  80a384:	080a1640 	call	80a164 <alt_get_errno>
  80a388:	1007883a 	mov	r3,r2
  80a38c:	e0bffa17 	ldw	r2,-24(fp)
  80a390:	0085c83a 	sub	r2,zero,r2
  80a394:	18800015 	stw	r2,0(r3)
    return -1;
  80a398:	00bfffc4 	movi	r2,-1
  80a39c:	00000106 	br	80a3a4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80a3a0:	e0bff917 	ldw	r2,-28(fp)
}
  80a3a4:	e037883a 	mov	sp,fp
  80a3a8:	dfc00117 	ldw	ra,4(sp)
  80a3ac:	df000017 	ldw	fp,0(sp)
  80a3b0:	dec00204 	addi	sp,sp,8
  80a3b4:	f800283a 	ret

0080a3b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a3b8:	defffe04 	addi	sp,sp,-8
  80a3bc:	dfc00115 	stw	ra,4(sp)
  80a3c0:	df000015 	stw	fp,0(sp)
  80a3c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a3c8:	d0a00917 	ldw	r2,-32732(gp)
  80a3cc:	10000326 	beq	r2,zero,80a3dc <alt_get_errno+0x24>
  80a3d0:	d0a00917 	ldw	r2,-32732(gp)
  80a3d4:	103ee83a 	callr	r2
  80a3d8:	00000106 	br	80a3e0 <alt_get_errno+0x28>
  80a3dc:	d0a72704 	addi	r2,gp,-25444
}
  80a3e0:	e037883a 	mov	sp,fp
  80a3e4:	dfc00117 	ldw	ra,4(sp)
  80a3e8:	df000017 	ldw	fp,0(sp)
  80a3ec:	dec00204 	addi	sp,sp,8
  80a3f0:	f800283a 	ret

0080a3f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80a3f4:	defff904 	addi	sp,sp,-28
  80a3f8:	dfc00615 	stw	ra,24(sp)
  80a3fc:	df000515 	stw	fp,20(sp)
  80a400:	df000504 	addi	fp,sp,20
  80a404:	e13ffd15 	stw	r4,-12(fp)
  80a408:	e17ffe15 	stw	r5,-8(fp)
  80a40c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a410:	e0bffd17 	ldw	r2,-12(fp)
  80a414:	10000616 	blt	r2,zero,80a430 <read+0x3c>
  80a418:	e0bffd17 	ldw	r2,-12(fp)
  80a41c:	10c00324 	muli	r3,r2,12
  80a420:	00802074 	movhi	r2,129
  80a424:	10ba2604 	addi	r2,r2,-5992
  80a428:	1885883a 	add	r2,r3,r2
  80a42c:	00000106 	br	80a434 <read+0x40>
  80a430:	0005883a 	mov	r2,zero
  80a434:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a438:	e0bffb17 	ldw	r2,-20(fp)
  80a43c:	10002226 	beq	r2,zero,80a4c8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80a440:	e0bffb17 	ldw	r2,-20(fp)
  80a444:	10800217 	ldw	r2,8(r2)
  80a448:	108000cc 	andi	r2,r2,3
  80a44c:	10800060 	cmpeqi	r2,r2,1
  80a450:	1000181e 	bne	r2,zero,80a4b4 <read+0xc0>
        (fd->dev->read))
  80a454:	e0bffb17 	ldw	r2,-20(fp)
  80a458:	10800017 	ldw	r2,0(r2)
  80a45c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80a460:	10001426 	beq	r2,zero,80a4b4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80a464:	e0bffb17 	ldw	r2,-20(fp)
  80a468:	10800017 	ldw	r2,0(r2)
  80a46c:	10800517 	ldw	r2,20(r2)
  80a470:	e0ffff17 	ldw	r3,-4(fp)
  80a474:	180d883a 	mov	r6,r3
  80a478:	e17ffe17 	ldw	r5,-8(fp)
  80a47c:	e13ffb17 	ldw	r4,-20(fp)
  80a480:	103ee83a 	callr	r2
  80a484:	e0bffc15 	stw	r2,-16(fp)
  80a488:	e0bffc17 	ldw	r2,-16(fp)
  80a48c:	1000070e 	bge	r2,zero,80a4ac <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80a490:	080a3b80 	call	80a3b8 <alt_get_errno>
  80a494:	1007883a 	mov	r3,r2
  80a498:	e0bffc17 	ldw	r2,-16(fp)
  80a49c:	0085c83a 	sub	r2,zero,r2
  80a4a0:	18800015 	stw	r2,0(r3)
          return -1;
  80a4a4:	00bfffc4 	movi	r2,-1
  80a4a8:	00000c06 	br	80a4dc <read+0xe8>
        }
        return rval;
  80a4ac:	e0bffc17 	ldw	r2,-16(fp)
  80a4b0:	00000a06 	br	80a4dc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80a4b4:	080a3b80 	call	80a3b8 <alt_get_errno>
  80a4b8:	1007883a 	mov	r3,r2
  80a4bc:	00800344 	movi	r2,13
  80a4c0:	18800015 	stw	r2,0(r3)
  80a4c4:	00000406 	br	80a4d8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80a4c8:	080a3b80 	call	80a3b8 <alt_get_errno>
  80a4cc:	1007883a 	mov	r3,r2
  80a4d0:	00801444 	movi	r2,81
  80a4d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a4d8:	00bfffc4 	movi	r2,-1
}
  80a4dc:	e037883a 	mov	sp,fp
  80a4e0:	dfc00117 	ldw	ra,4(sp)
  80a4e4:	df000017 	ldw	fp,0(sp)
  80a4e8:	dec00204 	addi	sp,sp,8
  80a4ec:	f800283a 	ret

0080a4f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80a4f0:	defffe04 	addi	sp,sp,-8
  80a4f4:	df000115 	stw	fp,4(sp)
  80a4f8:	df000104 	addi	fp,sp,4
  80a4fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80a500:	e0bfff17 	ldw	r2,-4(fp)
  80a504:	108000d0 	cmplti	r2,r2,3
  80a508:	10000d1e 	bne	r2,zero,80a540 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80a50c:	00802074 	movhi	r2,129
  80a510:	10ba2604 	addi	r2,r2,-5992
  80a514:	e0ffff17 	ldw	r3,-4(fp)
  80a518:	18c00324 	muli	r3,r3,12
  80a51c:	10c5883a 	add	r2,r2,r3
  80a520:	10800204 	addi	r2,r2,8
  80a524:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80a528:	00802074 	movhi	r2,129
  80a52c:	10ba2604 	addi	r2,r2,-5992
  80a530:	e0ffff17 	ldw	r3,-4(fp)
  80a534:	18c00324 	muli	r3,r3,12
  80a538:	10c5883a 	add	r2,r2,r3
  80a53c:	10000015 	stw	zero,0(r2)
  }
}
  80a540:	0001883a 	nop
  80a544:	e037883a 	mov	sp,fp
  80a548:	df000017 	ldw	fp,0(sp)
  80a54c:	dec00104 	addi	sp,sp,4
  80a550:	f800283a 	ret

0080a554 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80a554:	defff904 	addi	sp,sp,-28
  80a558:	df000615 	stw	fp,24(sp)
  80a55c:	df000604 	addi	fp,sp,24
  80a560:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a564:	0005303a 	rdctl	r2,status
  80a568:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a56c:	e0fffe17 	ldw	r3,-8(fp)
  80a570:	00bfff84 	movi	r2,-2
  80a574:	1884703a 	and	r2,r3,r2
  80a578:	1001703a 	wrctl	status,r2
  
  return context;
  80a57c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80a580:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80a584:	d0a00a17 	ldw	r2,-32728(gp)
  80a588:	10c000c4 	addi	r3,r2,3
  80a58c:	00bfff04 	movi	r2,-4
  80a590:	1884703a 	and	r2,r3,r2
  80a594:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80a598:	d0e00a17 	ldw	r3,-32728(gp)
  80a59c:	e0bfff17 	ldw	r2,-4(fp)
  80a5a0:	1887883a 	add	r3,r3,r2
  80a5a4:	00804034 	movhi	r2,256
  80a5a8:	10800004 	addi	r2,r2,0
  80a5ac:	10c0062e 	bgeu	r2,r3,80a5c8 <sbrk+0x74>
  80a5b0:	e0bffb17 	ldw	r2,-20(fp)
  80a5b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a5b8:	e0bffa17 	ldw	r2,-24(fp)
  80a5bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80a5c0:	00bfffc4 	movi	r2,-1
  80a5c4:	00000b06 	br	80a5f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80a5c8:	d0a00a17 	ldw	r2,-32728(gp)
  80a5cc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80a5d0:	d0e00a17 	ldw	r3,-32728(gp)
  80a5d4:	e0bfff17 	ldw	r2,-4(fp)
  80a5d8:	1885883a 	add	r2,r3,r2
  80a5dc:	d0a00a15 	stw	r2,-32728(gp)
  80a5e0:	e0bffb17 	ldw	r2,-20(fp)
  80a5e4:	e0bffc15 	stw	r2,-16(fp)
  80a5e8:	e0bffc17 	ldw	r2,-16(fp)
  80a5ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80a5f0:	e0bffd17 	ldw	r2,-12(fp)
} 
  80a5f4:	e037883a 	mov	sp,fp
  80a5f8:	df000017 	ldw	fp,0(sp)
  80a5fc:	dec00104 	addi	sp,sp,4
  80a600:	f800283a 	ret

0080a604 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80a604:	defffa04 	addi	sp,sp,-24
  80a608:	df000515 	stw	fp,20(sp)
  80a60c:	df000504 	addi	fp,sp,20
  80a610:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a614:	0005303a 	rdctl	r2,status
  80a618:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a61c:	e0fffc17 	ldw	r3,-16(fp)
  80a620:	00bfff84 	movi	r2,-2
  80a624:	1884703a 	and	r2,r3,r2
  80a628:	1001703a 	wrctl	status,r2
  
  return context;
  80a62c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80a630:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80a634:	e0bfff17 	ldw	r2,-4(fp)
  80a638:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80a63c:	e0bffd17 	ldw	r2,-12(fp)
  80a640:	10800017 	ldw	r2,0(r2)
  80a644:	e0fffd17 	ldw	r3,-12(fp)
  80a648:	18c00117 	ldw	r3,4(r3)
  80a64c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80a650:	e0bffd17 	ldw	r2,-12(fp)
  80a654:	10800117 	ldw	r2,4(r2)
  80a658:	e0fffd17 	ldw	r3,-12(fp)
  80a65c:	18c00017 	ldw	r3,0(r3)
  80a660:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80a664:	e0bffd17 	ldw	r2,-12(fp)
  80a668:	e0fffd17 	ldw	r3,-12(fp)
  80a66c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80a670:	e0bffd17 	ldw	r2,-12(fp)
  80a674:	e0fffd17 	ldw	r3,-12(fp)
  80a678:	10c00015 	stw	r3,0(r2)
  80a67c:	e0bffb17 	ldw	r2,-20(fp)
  80a680:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a684:	e0bffe17 	ldw	r2,-8(fp)
  80a688:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80a68c:	0001883a 	nop
  80a690:	e037883a 	mov	sp,fp
  80a694:	df000017 	ldw	fp,0(sp)
  80a698:	dec00104 	addi	sp,sp,4
  80a69c:	f800283a 	ret

0080a6a0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80a6a0:	defffb04 	addi	sp,sp,-20
  80a6a4:	dfc00415 	stw	ra,16(sp)
  80a6a8:	df000315 	stw	fp,12(sp)
  80a6ac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80a6b0:	d0a00b17 	ldw	r2,-32724(gp)
  80a6b4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80a6b8:	d0a72f17 	ldw	r2,-25412(gp)
  80a6bc:	10800044 	addi	r2,r2,1
  80a6c0:	d0a72f15 	stw	r2,-25412(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80a6c4:	00002e06 	br	80a780 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80a6c8:	e0bffd17 	ldw	r2,-12(fp)
  80a6cc:	10800017 	ldw	r2,0(r2)
  80a6d0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80a6d4:	e0bffd17 	ldw	r2,-12(fp)
  80a6d8:	10800403 	ldbu	r2,16(r2)
  80a6dc:	10803fcc 	andi	r2,r2,255
  80a6e0:	10000426 	beq	r2,zero,80a6f4 <alt_tick+0x54>
  80a6e4:	d0a72f17 	ldw	r2,-25412(gp)
  80a6e8:	1000021e 	bne	r2,zero,80a6f4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80a6ec:	e0bffd17 	ldw	r2,-12(fp)
  80a6f0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80a6f4:	e0bffd17 	ldw	r2,-12(fp)
  80a6f8:	10800217 	ldw	r2,8(r2)
  80a6fc:	d0e72f17 	ldw	r3,-25412(gp)
  80a700:	18801d36 	bltu	r3,r2,80a778 <alt_tick+0xd8>
  80a704:	e0bffd17 	ldw	r2,-12(fp)
  80a708:	10800403 	ldbu	r2,16(r2)
  80a70c:	10803fcc 	andi	r2,r2,255
  80a710:	1000191e 	bne	r2,zero,80a778 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80a714:	e0bffd17 	ldw	r2,-12(fp)
  80a718:	10800317 	ldw	r2,12(r2)
  80a71c:	e0fffd17 	ldw	r3,-12(fp)
  80a720:	18c00517 	ldw	r3,20(r3)
  80a724:	1809883a 	mov	r4,r3
  80a728:	103ee83a 	callr	r2
  80a72c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80a730:	e0bfff17 	ldw	r2,-4(fp)
  80a734:	1000031e 	bne	r2,zero,80a744 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80a738:	e13ffd17 	ldw	r4,-12(fp)
  80a73c:	080a6040 	call	80a604 <alt_alarm_stop>
  80a740:	00000d06 	br	80a778 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80a744:	e0bffd17 	ldw	r2,-12(fp)
  80a748:	10c00217 	ldw	r3,8(r2)
  80a74c:	e0bfff17 	ldw	r2,-4(fp)
  80a750:	1887883a 	add	r3,r3,r2
  80a754:	e0bffd17 	ldw	r2,-12(fp)
  80a758:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80a75c:	e0bffd17 	ldw	r2,-12(fp)
  80a760:	10c00217 	ldw	r3,8(r2)
  80a764:	d0a72f17 	ldw	r2,-25412(gp)
  80a768:	1880032e 	bgeu	r3,r2,80a778 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80a76c:	e0bffd17 	ldw	r2,-12(fp)
  80a770:	00c00044 	movi	r3,1
  80a774:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80a778:	e0bffe17 	ldw	r2,-8(fp)
  80a77c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80a780:	e0fffd17 	ldw	r3,-12(fp)
  80a784:	d0a00b04 	addi	r2,gp,-32724
  80a788:	18bfcf1e 	bne	r3,r2,80a6c8 <__alt_mem_onchip_mem+0xff8026c8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80a78c:	0001883a 	nop
}
  80a790:	0001883a 	nop
  80a794:	e037883a 	mov	sp,fp
  80a798:	dfc00117 	ldw	ra,4(sp)
  80a79c:	df000017 	ldw	fp,0(sp)
  80a7a0:	dec00204 	addi	sp,sp,8
  80a7a4:	f800283a 	ret

0080a7a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a7a8:	defffe04 	addi	sp,sp,-8
  80a7ac:	dfc00115 	stw	ra,4(sp)
  80a7b0:	df000015 	stw	fp,0(sp)
  80a7b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80a7b8:	d0a00917 	ldw	r2,-32732(gp)
  80a7bc:	10000326 	beq	r2,zero,80a7cc <alt_get_errno+0x24>
  80a7c0:	d0a00917 	ldw	r2,-32732(gp)
  80a7c4:	103ee83a 	callr	r2
  80a7c8:	00000106 	br	80a7d0 <alt_get_errno+0x28>
  80a7cc:	d0a72704 	addi	r2,gp,-25444
}
  80a7d0:	e037883a 	mov	sp,fp
  80a7d4:	dfc00117 	ldw	ra,4(sp)
  80a7d8:	df000017 	ldw	fp,0(sp)
  80a7dc:	dec00204 	addi	sp,sp,8
  80a7e0:	f800283a 	ret

0080a7e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80a7e4:	defff904 	addi	sp,sp,-28
  80a7e8:	dfc00615 	stw	ra,24(sp)
  80a7ec:	df000515 	stw	fp,20(sp)
  80a7f0:	df000504 	addi	fp,sp,20
  80a7f4:	e13ffd15 	stw	r4,-12(fp)
  80a7f8:	e17ffe15 	stw	r5,-8(fp)
  80a7fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a800:	e0bffd17 	ldw	r2,-12(fp)
  80a804:	10000616 	blt	r2,zero,80a820 <write+0x3c>
  80a808:	e0bffd17 	ldw	r2,-12(fp)
  80a80c:	10c00324 	muli	r3,r2,12
  80a810:	00802074 	movhi	r2,129
  80a814:	10ba2604 	addi	r2,r2,-5992
  80a818:	1885883a 	add	r2,r3,r2
  80a81c:	00000106 	br	80a824 <write+0x40>
  80a820:	0005883a 	mov	r2,zero
  80a824:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a828:	e0bffb17 	ldw	r2,-20(fp)
  80a82c:	10002126 	beq	r2,zero,80a8b4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80a830:	e0bffb17 	ldw	r2,-20(fp)
  80a834:	10800217 	ldw	r2,8(r2)
  80a838:	108000cc 	andi	r2,r2,3
  80a83c:	10001826 	beq	r2,zero,80a8a0 <write+0xbc>
  80a840:	e0bffb17 	ldw	r2,-20(fp)
  80a844:	10800017 	ldw	r2,0(r2)
  80a848:	10800617 	ldw	r2,24(r2)
  80a84c:	10001426 	beq	r2,zero,80a8a0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80a850:	e0bffb17 	ldw	r2,-20(fp)
  80a854:	10800017 	ldw	r2,0(r2)
  80a858:	10800617 	ldw	r2,24(r2)
  80a85c:	e0ffff17 	ldw	r3,-4(fp)
  80a860:	180d883a 	mov	r6,r3
  80a864:	e17ffe17 	ldw	r5,-8(fp)
  80a868:	e13ffb17 	ldw	r4,-20(fp)
  80a86c:	103ee83a 	callr	r2
  80a870:	e0bffc15 	stw	r2,-16(fp)
  80a874:	e0bffc17 	ldw	r2,-16(fp)
  80a878:	1000070e 	bge	r2,zero,80a898 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80a87c:	080a7a80 	call	80a7a8 <alt_get_errno>
  80a880:	1007883a 	mov	r3,r2
  80a884:	e0bffc17 	ldw	r2,-16(fp)
  80a888:	0085c83a 	sub	r2,zero,r2
  80a88c:	18800015 	stw	r2,0(r3)
        return -1;
  80a890:	00bfffc4 	movi	r2,-1
  80a894:	00000c06 	br	80a8c8 <write+0xe4>
      }
      return rval;
  80a898:	e0bffc17 	ldw	r2,-16(fp)
  80a89c:	00000a06 	br	80a8c8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80a8a0:	080a7a80 	call	80a7a8 <alt_get_errno>
  80a8a4:	1007883a 	mov	r3,r2
  80a8a8:	00800344 	movi	r2,13
  80a8ac:	18800015 	stw	r2,0(r3)
  80a8b0:	00000406 	br	80a8c4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80a8b4:	080a7a80 	call	80a7a8 <alt_get_errno>
  80a8b8:	1007883a 	mov	r3,r2
  80a8bc:	00801444 	movi	r2,81
  80a8c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a8c4:	00bfffc4 	movi	r2,-1
}
  80a8c8:	e037883a 	mov	sp,fp
  80a8cc:	dfc00117 	ldw	ra,4(sp)
  80a8d0:	df000017 	ldw	fp,0(sp)
  80a8d4:	dec00204 	addi	sp,sp,8
  80a8d8:	f800283a 	ret

0080a8dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80a8dc:	defffd04 	addi	sp,sp,-12
  80a8e0:	dfc00215 	stw	ra,8(sp)
  80a8e4:	df000115 	stw	fp,4(sp)
  80a8e8:	df000104 	addi	fp,sp,4
  80a8ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80a8f0:	d1600604 	addi	r5,gp,-32744
  80a8f4:	e13fff17 	ldw	r4,-4(fp)
  80a8f8:	080cd740 	call	80cd74 <alt_dev_llist_insert>
}
  80a8fc:	e037883a 	mov	sp,fp
  80a900:	dfc00117 	ldw	ra,4(sp)
  80a904:	df000017 	ldw	fp,0(sp)
  80a908:	dec00204 	addi	sp,sp,8
  80a90c:	f800283a 	ret

0080a910 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80a910:	defffd04 	addi	sp,sp,-12
  80a914:	dfc00215 	stw	ra,8(sp)
  80a918:	df000115 	stw	fp,4(sp)
  80a91c:	df000104 	addi	fp,sp,4
  80a920:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80a924:	080d5580 	call	80d558 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80a928:	00800044 	movi	r2,1
  80a92c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80a930:	0001883a 	nop
  80a934:	e037883a 	mov	sp,fp
  80a938:	dfc00117 	ldw	ra,4(sp)
  80a93c:	df000017 	ldw	fp,0(sp)
  80a940:	dec00204 	addi	sp,sp,8
  80a944:	f800283a 	ret

0080a948 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80a948:	defffe04 	addi	sp,sp,-8
  80a94c:	dfc00115 	stw	ra,4(sp)
  80a950:	df000015 	stw	fp,0(sp)
  80a954:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80a958:	01c0fa04 	movi	r7,1000
  80a95c:	01800084 	movi	r6,2
  80a960:	000b883a 	mov	r5,zero
  80a964:	01004074 	movhi	r4,257
  80a968:	21040804 	addi	r4,r4,4128
  80a96c:	080c39c0 	call	80c39c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80a970:	01800044 	movi	r6,1
  80a974:	000b883a 	mov	r5,zero
  80a978:	01002074 	movhi	r4,129
  80a97c:	213a9004 	addi	r4,r4,-5568
  80a980:	080ab440 	call	80ab44 <altera_avalon_jtag_uart_init>
  80a984:	01002074 	movhi	r4,129
  80a988:	213a8604 	addi	r4,r4,-5608
  80a98c:	080a8dc0 	call	80a8dc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80a990:	01002074 	movhi	r4,129
  80a994:	213ea804 	addi	r4,r4,-1376
  80a998:	080c1900 	call	80c190 <altera_avalon_lcd_16207_init>
  80a99c:	01002074 	movhi	r4,129
  80a9a0:	213e9e04 	addi	r4,r4,-1416
  80a9a4:	080a8dc0 	call	80a8dc <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80a9a8:	000d883a 	mov	r6,zero
  80a9ac:	000b883a 	mov	r5,zero
  80a9b0:	01002074 	movhi	r4,129
  80a9b4:	213ef004 	addi	r4,r4,-1088
  80a9b8:	080c5280 	call	80c528 <altera_avalon_uart_init>
  80a9bc:	01002074 	movhi	r4,129
  80a9c0:	213ee604 	addi	r4,r4,-1128
  80a9c4:	080a8dc0 	call	80a8dc <alt_dev_reg>
}
  80a9c8:	0001883a 	nop
  80a9cc:	e037883a 	mov	sp,fp
  80a9d0:	dfc00117 	ldw	ra,4(sp)
  80a9d4:	df000017 	ldw	fp,0(sp)
  80a9d8:	dec00204 	addi	sp,sp,8
  80a9dc:	f800283a 	ret

0080a9e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80a9e0:	defffa04 	addi	sp,sp,-24
  80a9e4:	dfc00515 	stw	ra,20(sp)
  80a9e8:	df000415 	stw	fp,16(sp)
  80a9ec:	df000404 	addi	fp,sp,16
  80a9f0:	e13ffd15 	stw	r4,-12(fp)
  80a9f4:	e17ffe15 	stw	r5,-8(fp)
  80a9f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80a9fc:	e0bffd17 	ldw	r2,-12(fp)
  80aa00:	10800017 	ldw	r2,0(r2)
  80aa04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80aa08:	e0bffc17 	ldw	r2,-16(fp)
  80aa0c:	10c00a04 	addi	r3,r2,40
  80aa10:	e0bffd17 	ldw	r2,-12(fp)
  80aa14:	10800217 	ldw	r2,8(r2)
  80aa18:	100f883a 	mov	r7,r2
  80aa1c:	e1bfff17 	ldw	r6,-4(fp)
  80aa20:	e17ffe17 	ldw	r5,-8(fp)
  80aa24:	1809883a 	mov	r4,r3
  80aa28:	080b0080 	call	80b008 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80aa2c:	e037883a 	mov	sp,fp
  80aa30:	dfc00117 	ldw	ra,4(sp)
  80aa34:	df000017 	ldw	fp,0(sp)
  80aa38:	dec00204 	addi	sp,sp,8
  80aa3c:	f800283a 	ret

0080aa40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80aa40:	defffa04 	addi	sp,sp,-24
  80aa44:	dfc00515 	stw	ra,20(sp)
  80aa48:	df000415 	stw	fp,16(sp)
  80aa4c:	df000404 	addi	fp,sp,16
  80aa50:	e13ffd15 	stw	r4,-12(fp)
  80aa54:	e17ffe15 	stw	r5,-8(fp)
  80aa58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80aa5c:	e0bffd17 	ldw	r2,-12(fp)
  80aa60:	10800017 	ldw	r2,0(r2)
  80aa64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80aa68:	e0bffc17 	ldw	r2,-16(fp)
  80aa6c:	10c00a04 	addi	r3,r2,40
  80aa70:	e0bffd17 	ldw	r2,-12(fp)
  80aa74:	10800217 	ldw	r2,8(r2)
  80aa78:	100f883a 	mov	r7,r2
  80aa7c:	e1bfff17 	ldw	r6,-4(fp)
  80aa80:	e17ffe17 	ldw	r5,-8(fp)
  80aa84:	1809883a 	mov	r4,r3
  80aa88:	080b2240 	call	80b224 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80aa8c:	e037883a 	mov	sp,fp
  80aa90:	dfc00117 	ldw	ra,4(sp)
  80aa94:	df000017 	ldw	fp,0(sp)
  80aa98:	dec00204 	addi	sp,sp,8
  80aa9c:	f800283a 	ret

0080aaa0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80aaa0:	defffc04 	addi	sp,sp,-16
  80aaa4:	dfc00315 	stw	ra,12(sp)
  80aaa8:	df000215 	stw	fp,8(sp)
  80aaac:	df000204 	addi	fp,sp,8
  80aab0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80aab4:	e0bfff17 	ldw	r2,-4(fp)
  80aab8:	10800017 	ldw	r2,0(r2)
  80aabc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80aac0:	e0bffe17 	ldw	r2,-8(fp)
  80aac4:	10c00a04 	addi	r3,r2,40
  80aac8:	e0bfff17 	ldw	r2,-4(fp)
  80aacc:	10800217 	ldw	r2,8(r2)
  80aad0:	100b883a 	mov	r5,r2
  80aad4:	1809883a 	mov	r4,r3
  80aad8:	080aeb00 	call	80aeb0 <altera_avalon_jtag_uart_close>
}
  80aadc:	e037883a 	mov	sp,fp
  80aae0:	dfc00117 	ldw	ra,4(sp)
  80aae4:	df000017 	ldw	fp,0(sp)
  80aae8:	dec00204 	addi	sp,sp,8
  80aaec:	f800283a 	ret

0080aaf0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80aaf0:	defffa04 	addi	sp,sp,-24
  80aaf4:	dfc00515 	stw	ra,20(sp)
  80aaf8:	df000415 	stw	fp,16(sp)
  80aafc:	df000404 	addi	fp,sp,16
  80ab00:	e13ffd15 	stw	r4,-12(fp)
  80ab04:	e17ffe15 	stw	r5,-8(fp)
  80ab08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80ab0c:	e0bffd17 	ldw	r2,-12(fp)
  80ab10:	10800017 	ldw	r2,0(r2)
  80ab14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80ab18:	e0bffc17 	ldw	r2,-16(fp)
  80ab1c:	10800a04 	addi	r2,r2,40
  80ab20:	e1bfff17 	ldw	r6,-4(fp)
  80ab24:	e17ffe17 	ldw	r5,-8(fp)
  80ab28:	1009883a 	mov	r4,r2
  80ab2c:	080af180 	call	80af18 <altera_avalon_jtag_uart_ioctl>
}
  80ab30:	e037883a 	mov	sp,fp
  80ab34:	dfc00117 	ldw	ra,4(sp)
  80ab38:	df000017 	ldw	fp,0(sp)
  80ab3c:	dec00204 	addi	sp,sp,8
  80ab40:	f800283a 	ret

0080ab44 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80ab44:	defffa04 	addi	sp,sp,-24
  80ab48:	dfc00515 	stw	ra,20(sp)
  80ab4c:	df000415 	stw	fp,16(sp)
  80ab50:	df000404 	addi	fp,sp,16
  80ab54:	e13ffd15 	stw	r4,-12(fp)
  80ab58:	e17ffe15 	stw	r5,-8(fp)
  80ab5c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ab60:	e0bffd17 	ldw	r2,-12(fp)
  80ab64:	00c00044 	movi	r3,1
  80ab68:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80ab6c:	e0bffd17 	ldw	r2,-12(fp)
  80ab70:	10800017 	ldw	r2,0(r2)
  80ab74:	10800104 	addi	r2,r2,4
  80ab78:	1007883a 	mov	r3,r2
  80ab7c:	e0bffd17 	ldw	r2,-12(fp)
  80ab80:	10800817 	ldw	r2,32(r2)
  80ab84:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80ab88:	e0bffe17 	ldw	r2,-8(fp)
  80ab8c:	e0ffff17 	ldw	r3,-4(fp)
  80ab90:	d8000015 	stw	zero,0(sp)
  80ab94:	e1fffd17 	ldw	r7,-12(fp)
  80ab98:	01802074 	movhi	r6,129
  80ab9c:	31ab0104 	addi	r6,r6,-21500
  80aba0:	180b883a 	mov	r5,r3
  80aba4:	1009883a 	mov	r4,r2
  80aba8:	080d1480 	call	80d148 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80abac:	e0bffd17 	ldw	r2,-12(fp)
  80abb0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80abb4:	e0bffd17 	ldw	r2,-12(fp)
  80abb8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80abbc:	d0e72e17 	ldw	r3,-25416(gp)
  80abc0:	e1fffd17 	ldw	r7,-12(fp)
  80abc4:	01802074 	movhi	r6,129
  80abc8:	31ab8404 	addi	r6,r6,-20976
  80abcc:	180b883a 	mov	r5,r3
  80abd0:	1009883a 	mov	r4,r2
  80abd4:	0809a740 	call	809a74 <alt_alarm_start>
  80abd8:	1000040e 	bge	r2,zero,80abec <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80abdc:	e0fffd17 	ldw	r3,-12(fp)
  80abe0:	00a00034 	movhi	r2,32768
  80abe4:	10bfffc4 	addi	r2,r2,-1
  80abe8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80abec:	0001883a 	nop
  80abf0:	e037883a 	mov	sp,fp
  80abf4:	dfc00117 	ldw	ra,4(sp)
  80abf8:	df000017 	ldw	fp,0(sp)
  80abfc:	dec00204 	addi	sp,sp,8
  80ac00:	f800283a 	ret

0080ac04 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80ac04:	defff804 	addi	sp,sp,-32
  80ac08:	df000715 	stw	fp,28(sp)
  80ac0c:	df000704 	addi	fp,sp,28
  80ac10:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ac14:	e0bfff17 	ldw	r2,-4(fp)
  80ac18:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80ac1c:	e0bffb17 	ldw	r2,-20(fp)
  80ac20:	10800017 	ldw	r2,0(r2)
  80ac24:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ac28:	e0bffc17 	ldw	r2,-16(fp)
  80ac2c:	10800104 	addi	r2,r2,4
  80ac30:	10800037 	ldwio	r2,0(r2)
  80ac34:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ac38:	e0bffd17 	ldw	r2,-12(fp)
  80ac3c:	1080c00c 	andi	r2,r2,768
  80ac40:	10006d26 	beq	r2,zero,80adf8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ac44:	e0bffd17 	ldw	r2,-12(fp)
  80ac48:	1080400c 	andi	r2,r2,256
  80ac4c:	10003526 	beq	r2,zero,80ad24 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ac50:	00800074 	movhi	r2,1
  80ac54:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ac58:	e0bffb17 	ldw	r2,-20(fp)
  80ac5c:	10800a17 	ldw	r2,40(r2)
  80ac60:	10800044 	addi	r2,r2,1
  80ac64:	1081ffcc 	andi	r2,r2,2047
  80ac68:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80ac6c:	e0bffb17 	ldw	r2,-20(fp)
  80ac70:	10c00b17 	ldw	r3,44(r2)
  80ac74:	e0bffe17 	ldw	r2,-8(fp)
  80ac78:	18801526 	beq	r3,r2,80acd0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80ac7c:	e0bffc17 	ldw	r2,-16(fp)
  80ac80:	10800037 	ldwio	r2,0(r2)
  80ac84:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80ac88:	e0bff917 	ldw	r2,-28(fp)
  80ac8c:	10a0000c 	andi	r2,r2,32768
  80ac90:	10001126 	beq	r2,zero,80acd8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ac94:	e0bffb17 	ldw	r2,-20(fp)
  80ac98:	10800a17 	ldw	r2,40(r2)
  80ac9c:	e0fff917 	ldw	r3,-28(fp)
  80aca0:	1809883a 	mov	r4,r3
  80aca4:	e0fffb17 	ldw	r3,-20(fp)
  80aca8:	1885883a 	add	r2,r3,r2
  80acac:	10800e04 	addi	r2,r2,56
  80acb0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80acb4:	e0bffb17 	ldw	r2,-20(fp)
  80acb8:	10800a17 	ldw	r2,40(r2)
  80acbc:	10800044 	addi	r2,r2,1
  80acc0:	10c1ffcc 	andi	r3,r2,2047
  80acc4:	e0bffb17 	ldw	r2,-20(fp)
  80acc8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80accc:	003fe206 	br	80ac58 <__alt_mem_onchip_mem+0xff802c58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80acd0:	0001883a 	nop
  80acd4:	00000106 	br	80acdc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80acd8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80acdc:	e0bff917 	ldw	r2,-28(fp)
  80ace0:	10bfffec 	andhi	r2,r2,65535
  80ace4:	10000f26 	beq	r2,zero,80ad24 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ace8:	e0bffb17 	ldw	r2,-20(fp)
  80acec:	10c00817 	ldw	r3,32(r2)
  80acf0:	00bfff84 	movi	r2,-2
  80acf4:	1886703a 	and	r3,r3,r2
  80acf8:	e0bffb17 	ldw	r2,-20(fp)
  80acfc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80ad00:	e0bffc17 	ldw	r2,-16(fp)
  80ad04:	10800104 	addi	r2,r2,4
  80ad08:	1007883a 	mov	r3,r2
  80ad0c:	e0bffb17 	ldw	r2,-20(fp)
  80ad10:	10800817 	ldw	r2,32(r2)
  80ad14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ad18:	e0bffc17 	ldw	r2,-16(fp)
  80ad1c:	10800104 	addi	r2,r2,4
  80ad20:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80ad24:	e0bffd17 	ldw	r2,-12(fp)
  80ad28:	1080800c 	andi	r2,r2,512
  80ad2c:	103fbe26 	beq	r2,zero,80ac28 <__alt_mem_onchip_mem+0xff802c28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80ad30:	e0bffd17 	ldw	r2,-12(fp)
  80ad34:	1004d43a 	srli	r2,r2,16
  80ad38:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ad3c:	00001406 	br	80ad90 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80ad40:	e0bffc17 	ldw	r2,-16(fp)
  80ad44:	e0fffb17 	ldw	r3,-20(fp)
  80ad48:	18c00d17 	ldw	r3,52(r3)
  80ad4c:	e13ffb17 	ldw	r4,-20(fp)
  80ad50:	20c7883a 	add	r3,r4,r3
  80ad54:	18c20e04 	addi	r3,r3,2104
  80ad58:	18c00003 	ldbu	r3,0(r3)
  80ad5c:	18c03fcc 	andi	r3,r3,255
  80ad60:	18c0201c 	xori	r3,r3,128
  80ad64:	18ffe004 	addi	r3,r3,-128
  80ad68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ad6c:	e0bffb17 	ldw	r2,-20(fp)
  80ad70:	10800d17 	ldw	r2,52(r2)
  80ad74:	10800044 	addi	r2,r2,1
  80ad78:	10c1ffcc 	andi	r3,r2,2047
  80ad7c:	e0bffb17 	ldw	r2,-20(fp)
  80ad80:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80ad84:	e0bffa17 	ldw	r2,-24(fp)
  80ad88:	10bfffc4 	addi	r2,r2,-1
  80ad8c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ad90:	e0bffa17 	ldw	r2,-24(fp)
  80ad94:	10000526 	beq	r2,zero,80adac <altera_avalon_jtag_uart_irq+0x1a8>
  80ad98:	e0bffb17 	ldw	r2,-20(fp)
  80ad9c:	10c00d17 	ldw	r3,52(r2)
  80ada0:	e0bffb17 	ldw	r2,-20(fp)
  80ada4:	10800c17 	ldw	r2,48(r2)
  80ada8:	18bfe51e 	bne	r3,r2,80ad40 <__alt_mem_onchip_mem+0xff802d40>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80adac:	e0bffa17 	ldw	r2,-24(fp)
  80adb0:	103f9d26 	beq	r2,zero,80ac28 <__alt_mem_onchip_mem+0xff802c28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80adb4:	e0bffb17 	ldw	r2,-20(fp)
  80adb8:	10c00817 	ldw	r3,32(r2)
  80adbc:	00bfff44 	movi	r2,-3
  80adc0:	1886703a 	and	r3,r3,r2
  80adc4:	e0bffb17 	ldw	r2,-20(fp)
  80adc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80adcc:	e0bffb17 	ldw	r2,-20(fp)
  80add0:	10800017 	ldw	r2,0(r2)
  80add4:	10800104 	addi	r2,r2,4
  80add8:	1007883a 	mov	r3,r2
  80addc:	e0bffb17 	ldw	r2,-20(fp)
  80ade0:	10800817 	ldw	r2,32(r2)
  80ade4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ade8:	e0bffc17 	ldw	r2,-16(fp)
  80adec:	10800104 	addi	r2,r2,4
  80adf0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80adf4:	003f8c06 	br	80ac28 <__alt_mem_onchip_mem+0xff802c28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80adf8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80adfc:	0001883a 	nop
  80ae00:	e037883a 	mov	sp,fp
  80ae04:	df000017 	ldw	fp,0(sp)
  80ae08:	dec00104 	addi	sp,sp,4
  80ae0c:	f800283a 	ret

0080ae10 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80ae10:	defff804 	addi	sp,sp,-32
  80ae14:	df000715 	stw	fp,28(sp)
  80ae18:	df000704 	addi	fp,sp,28
  80ae1c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80ae20:	e0bffb17 	ldw	r2,-20(fp)
  80ae24:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80ae28:	e0bff917 	ldw	r2,-28(fp)
  80ae2c:	10800017 	ldw	r2,0(r2)
  80ae30:	10800104 	addi	r2,r2,4
  80ae34:	10800037 	ldwio	r2,0(r2)
  80ae38:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80ae3c:	e0bffa17 	ldw	r2,-24(fp)
  80ae40:	1081000c 	andi	r2,r2,1024
  80ae44:	10000b26 	beq	r2,zero,80ae74 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80ae48:	e0bff917 	ldw	r2,-28(fp)
  80ae4c:	10800017 	ldw	r2,0(r2)
  80ae50:	10800104 	addi	r2,r2,4
  80ae54:	1007883a 	mov	r3,r2
  80ae58:	e0bff917 	ldw	r2,-28(fp)
  80ae5c:	10800817 	ldw	r2,32(r2)
  80ae60:	10810014 	ori	r2,r2,1024
  80ae64:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80ae68:	e0bff917 	ldw	r2,-28(fp)
  80ae6c:	10000915 	stw	zero,36(r2)
  80ae70:	00000a06 	br	80ae9c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ae74:	e0bff917 	ldw	r2,-28(fp)
  80ae78:	10c00917 	ldw	r3,36(r2)
  80ae7c:	00a00034 	movhi	r2,32768
  80ae80:	10bfff04 	addi	r2,r2,-4
  80ae84:	10c00536 	bltu	r2,r3,80ae9c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80ae88:	e0bff917 	ldw	r2,-28(fp)
  80ae8c:	10800917 	ldw	r2,36(r2)
  80ae90:	10c00044 	addi	r3,r2,1
  80ae94:	e0bff917 	ldw	r2,-28(fp)
  80ae98:	10c00915 	stw	r3,36(r2)
  80ae9c:	d0a72e17 	ldw	r2,-25416(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80aea0:	e037883a 	mov	sp,fp
  80aea4:	df000017 	ldw	fp,0(sp)
  80aea8:	dec00104 	addi	sp,sp,4
  80aeac:	f800283a 	ret

0080aeb0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80aeb0:	defffd04 	addi	sp,sp,-12
  80aeb4:	df000215 	stw	fp,8(sp)
  80aeb8:	df000204 	addi	fp,sp,8
  80aebc:	e13ffe15 	stw	r4,-8(fp)
  80aec0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80aec4:	00000506 	br	80aedc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80aec8:	e0bfff17 	ldw	r2,-4(fp)
  80aecc:	1090000c 	andi	r2,r2,16384
  80aed0:	10000226 	beq	r2,zero,80aedc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80aed4:	00bffd44 	movi	r2,-11
  80aed8:	00000b06 	br	80af08 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80aedc:	e0bffe17 	ldw	r2,-8(fp)
  80aee0:	10c00d17 	ldw	r3,52(r2)
  80aee4:	e0bffe17 	ldw	r2,-8(fp)
  80aee8:	10800c17 	ldw	r2,48(r2)
  80aeec:	18800526 	beq	r3,r2,80af04 <altera_avalon_jtag_uart_close+0x54>
  80aef0:	e0bffe17 	ldw	r2,-8(fp)
  80aef4:	10c00917 	ldw	r3,36(r2)
  80aef8:	e0bffe17 	ldw	r2,-8(fp)
  80aefc:	10800117 	ldw	r2,4(r2)
  80af00:	18bff136 	bltu	r3,r2,80aec8 <__alt_mem_onchip_mem+0xff802ec8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80af04:	0005883a 	mov	r2,zero
}
  80af08:	e037883a 	mov	sp,fp
  80af0c:	df000017 	ldw	fp,0(sp)
  80af10:	dec00104 	addi	sp,sp,4
  80af14:	f800283a 	ret

0080af18 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80af18:	defffa04 	addi	sp,sp,-24
  80af1c:	df000515 	stw	fp,20(sp)
  80af20:	df000504 	addi	fp,sp,20
  80af24:	e13ffd15 	stw	r4,-12(fp)
  80af28:	e17ffe15 	stw	r5,-8(fp)
  80af2c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80af30:	00bff9c4 	movi	r2,-25
  80af34:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80af38:	e0bffe17 	ldw	r2,-8(fp)
  80af3c:	10da8060 	cmpeqi	r3,r2,27137
  80af40:	1800031e 	bne	r3,zero,80af50 <altera_avalon_jtag_uart_ioctl+0x38>
  80af44:	109a80a0 	cmpeqi	r2,r2,27138
  80af48:	1000181e 	bne	r2,zero,80afac <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80af4c:	00002906 	br	80aff4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80af50:	e0bffd17 	ldw	r2,-12(fp)
  80af54:	10c00117 	ldw	r3,4(r2)
  80af58:	00a00034 	movhi	r2,32768
  80af5c:	10bfffc4 	addi	r2,r2,-1
  80af60:	18802126 	beq	r3,r2,80afe8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80af64:	e0bfff17 	ldw	r2,-4(fp)
  80af68:	10800017 	ldw	r2,0(r2)
  80af6c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80af70:	e0bffc17 	ldw	r2,-16(fp)
  80af74:	10800090 	cmplti	r2,r2,2
  80af78:	1000061e 	bne	r2,zero,80af94 <altera_avalon_jtag_uart_ioctl+0x7c>
  80af7c:	e0fffc17 	ldw	r3,-16(fp)
  80af80:	00a00034 	movhi	r2,32768
  80af84:	10bfffc4 	addi	r2,r2,-1
  80af88:	18800226 	beq	r3,r2,80af94 <altera_avalon_jtag_uart_ioctl+0x7c>
  80af8c:	e0bffc17 	ldw	r2,-16(fp)
  80af90:	00000206 	br	80af9c <altera_avalon_jtag_uart_ioctl+0x84>
  80af94:	00a00034 	movhi	r2,32768
  80af98:	10bfff84 	addi	r2,r2,-2
  80af9c:	e0fffd17 	ldw	r3,-12(fp)
  80afa0:	18800115 	stw	r2,4(r3)
      rc = 0;
  80afa4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80afa8:	00000f06 	br	80afe8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80afac:	e0bffd17 	ldw	r2,-12(fp)
  80afb0:	10c00117 	ldw	r3,4(r2)
  80afb4:	00a00034 	movhi	r2,32768
  80afb8:	10bfffc4 	addi	r2,r2,-1
  80afbc:	18800c26 	beq	r3,r2,80aff0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80afc0:	e0bffd17 	ldw	r2,-12(fp)
  80afc4:	10c00917 	ldw	r3,36(r2)
  80afc8:	e0bffd17 	ldw	r2,-12(fp)
  80afcc:	10800117 	ldw	r2,4(r2)
  80afd0:	1885803a 	cmpltu	r2,r3,r2
  80afd4:	10c03fcc 	andi	r3,r2,255
  80afd8:	e0bfff17 	ldw	r2,-4(fp)
  80afdc:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80afe0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80afe4:	00000206 	br	80aff0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80afe8:	0001883a 	nop
  80afec:	00000106 	br	80aff4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80aff0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80aff4:	e0bffb17 	ldw	r2,-20(fp)
}
  80aff8:	e037883a 	mov	sp,fp
  80affc:	df000017 	ldw	fp,0(sp)
  80b000:	dec00104 	addi	sp,sp,4
  80b004:	f800283a 	ret

0080b008 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80b008:	defff304 	addi	sp,sp,-52
  80b00c:	dfc00c15 	stw	ra,48(sp)
  80b010:	df000b15 	stw	fp,44(sp)
  80b014:	df000b04 	addi	fp,sp,44
  80b018:	e13ffc15 	stw	r4,-16(fp)
  80b01c:	e17ffd15 	stw	r5,-12(fp)
  80b020:	e1bffe15 	stw	r6,-8(fp)
  80b024:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80b028:	e0bffd17 	ldw	r2,-12(fp)
  80b02c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b030:	00004706 	br	80b150 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80b034:	e0bffc17 	ldw	r2,-16(fp)
  80b038:	10800a17 	ldw	r2,40(r2)
  80b03c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80b040:	e0bffc17 	ldw	r2,-16(fp)
  80b044:	10800b17 	ldw	r2,44(r2)
  80b048:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80b04c:	e0fff717 	ldw	r3,-36(fp)
  80b050:	e0bff817 	ldw	r2,-32(fp)
  80b054:	18800536 	bltu	r3,r2,80b06c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80b058:	e0fff717 	ldw	r3,-36(fp)
  80b05c:	e0bff817 	ldw	r2,-32(fp)
  80b060:	1885c83a 	sub	r2,r3,r2
  80b064:	e0bff615 	stw	r2,-40(fp)
  80b068:	00000406 	br	80b07c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80b06c:	00c20004 	movi	r3,2048
  80b070:	e0bff817 	ldw	r2,-32(fp)
  80b074:	1885c83a 	sub	r2,r3,r2
  80b078:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80b07c:	e0bff617 	ldw	r2,-40(fp)
  80b080:	10001e26 	beq	r2,zero,80b0fc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80b084:	e0fffe17 	ldw	r3,-8(fp)
  80b088:	e0bff617 	ldw	r2,-40(fp)
  80b08c:	1880022e 	bgeu	r3,r2,80b098 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80b090:	e0bffe17 	ldw	r2,-8(fp)
  80b094:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80b098:	e0bffc17 	ldw	r2,-16(fp)
  80b09c:	10c00e04 	addi	r3,r2,56
  80b0a0:	e0bff817 	ldw	r2,-32(fp)
  80b0a4:	1885883a 	add	r2,r3,r2
  80b0a8:	e1bff617 	ldw	r6,-40(fp)
  80b0ac:	100b883a 	mov	r5,r2
  80b0b0:	e13ff517 	ldw	r4,-44(fp)
  80b0b4:	0808f040 	call	808f04 <memcpy>
      ptr   += n;
  80b0b8:	e0fff517 	ldw	r3,-44(fp)
  80b0bc:	e0bff617 	ldw	r2,-40(fp)
  80b0c0:	1885883a 	add	r2,r3,r2
  80b0c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80b0c8:	e0fffe17 	ldw	r3,-8(fp)
  80b0cc:	e0bff617 	ldw	r2,-40(fp)
  80b0d0:	1885c83a 	sub	r2,r3,r2
  80b0d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b0d8:	e0fff817 	ldw	r3,-32(fp)
  80b0dc:	e0bff617 	ldw	r2,-40(fp)
  80b0e0:	1885883a 	add	r2,r3,r2
  80b0e4:	10c1ffcc 	andi	r3,r2,2047
  80b0e8:	e0bffc17 	ldw	r2,-16(fp)
  80b0ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80b0f0:	e0bffe17 	ldw	r2,-8(fp)
  80b0f4:	00bfcf16 	blt	zero,r2,80b034 <__alt_mem_onchip_mem+0xff803034>
  80b0f8:	00000106 	br	80b100 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80b0fc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80b100:	e0fff517 	ldw	r3,-44(fp)
  80b104:	e0bffd17 	ldw	r2,-12(fp)
  80b108:	1880141e 	bne	r3,r2,80b15c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80b10c:	e0bfff17 	ldw	r2,-4(fp)
  80b110:	1090000c 	andi	r2,r2,16384
  80b114:	1000131e 	bne	r2,zero,80b164 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80b118:	0001883a 	nop
  80b11c:	e0bffc17 	ldw	r2,-16(fp)
  80b120:	10c00a17 	ldw	r3,40(r2)
  80b124:	e0bff717 	ldw	r2,-36(fp)
  80b128:	1880051e 	bne	r3,r2,80b140 <altera_avalon_jtag_uart_read+0x138>
  80b12c:	e0bffc17 	ldw	r2,-16(fp)
  80b130:	10c00917 	ldw	r3,36(r2)
  80b134:	e0bffc17 	ldw	r2,-16(fp)
  80b138:	10800117 	ldw	r2,4(r2)
  80b13c:	18bff736 	bltu	r3,r2,80b11c <__alt_mem_onchip_mem+0xff80311c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80b140:	e0bffc17 	ldw	r2,-16(fp)
  80b144:	10c00a17 	ldw	r3,40(r2)
  80b148:	e0bff717 	ldw	r2,-36(fp)
  80b14c:	18800726 	beq	r3,r2,80b16c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b150:	e0bffe17 	ldw	r2,-8(fp)
  80b154:	00bfb716 	blt	zero,r2,80b034 <__alt_mem_onchip_mem+0xff803034>
  80b158:	00000506 	br	80b170 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80b15c:	0001883a 	nop
  80b160:	00000306 	br	80b170 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80b164:	0001883a 	nop
  80b168:	00000106 	br	80b170 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80b16c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80b170:	e0fff517 	ldw	r3,-44(fp)
  80b174:	e0bffd17 	ldw	r2,-12(fp)
  80b178:	18801826 	beq	r3,r2,80b1dc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b17c:	0005303a 	rdctl	r2,status
  80b180:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b184:	e0fffb17 	ldw	r3,-20(fp)
  80b188:	00bfff84 	movi	r2,-2
  80b18c:	1884703a 	and	r2,r3,r2
  80b190:	1001703a 	wrctl	status,r2
  
  return context;
  80b194:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80b198:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b19c:	e0bffc17 	ldw	r2,-16(fp)
  80b1a0:	10800817 	ldw	r2,32(r2)
  80b1a4:	10c00054 	ori	r3,r2,1
  80b1a8:	e0bffc17 	ldw	r2,-16(fp)
  80b1ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b1b0:	e0bffc17 	ldw	r2,-16(fp)
  80b1b4:	10800017 	ldw	r2,0(r2)
  80b1b8:	10800104 	addi	r2,r2,4
  80b1bc:	1007883a 	mov	r3,r2
  80b1c0:	e0bffc17 	ldw	r2,-16(fp)
  80b1c4:	10800817 	ldw	r2,32(r2)
  80b1c8:	18800035 	stwio	r2,0(r3)
  80b1cc:	e0bffa17 	ldw	r2,-24(fp)
  80b1d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b1d4:	e0bff917 	ldw	r2,-28(fp)
  80b1d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80b1dc:	e0fff517 	ldw	r3,-44(fp)
  80b1e0:	e0bffd17 	ldw	r2,-12(fp)
  80b1e4:	18800426 	beq	r3,r2,80b1f8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80b1e8:	e0fff517 	ldw	r3,-44(fp)
  80b1ec:	e0bffd17 	ldw	r2,-12(fp)
  80b1f0:	1885c83a 	sub	r2,r3,r2
  80b1f4:	00000606 	br	80b210 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80b1f8:	e0bfff17 	ldw	r2,-4(fp)
  80b1fc:	1090000c 	andi	r2,r2,16384
  80b200:	10000226 	beq	r2,zero,80b20c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80b204:	00bffd44 	movi	r2,-11
  80b208:	00000106 	br	80b210 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80b20c:	00bffec4 	movi	r2,-5
}
  80b210:	e037883a 	mov	sp,fp
  80b214:	dfc00117 	ldw	ra,4(sp)
  80b218:	df000017 	ldw	fp,0(sp)
  80b21c:	dec00204 	addi	sp,sp,8
  80b220:	f800283a 	ret

0080b224 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80b224:	defff304 	addi	sp,sp,-52
  80b228:	dfc00c15 	stw	ra,48(sp)
  80b22c:	df000b15 	stw	fp,44(sp)
  80b230:	df000b04 	addi	fp,sp,44
  80b234:	e13ffc15 	stw	r4,-16(fp)
  80b238:	e17ffd15 	stw	r5,-12(fp)
  80b23c:	e1bffe15 	stw	r6,-8(fp)
  80b240:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80b244:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80b248:	e0bffd17 	ldw	r2,-12(fp)
  80b24c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b250:	00003706 	br	80b330 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80b254:	e0bffc17 	ldw	r2,-16(fp)
  80b258:	10800c17 	ldw	r2,48(r2)
  80b25c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80b260:	e0bffc17 	ldw	r2,-16(fp)
  80b264:	10800d17 	ldw	r2,52(r2)
  80b268:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80b26c:	e0fff917 	ldw	r3,-28(fp)
  80b270:	e0bff517 	ldw	r2,-44(fp)
  80b274:	1880062e 	bgeu	r3,r2,80b290 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80b278:	e0fff517 	ldw	r3,-44(fp)
  80b27c:	e0bff917 	ldw	r2,-28(fp)
  80b280:	1885c83a 	sub	r2,r3,r2
  80b284:	10bfffc4 	addi	r2,r2,-1
  80b288:	e0bff615 	stw	r2,-40(fp)
  80b28c:	00000b06 	br	80b2bc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80b290:	e0bff517 	ldw	r2,-44(fp)
  80b294:	10000526 	beq	r2,zero,80b2ac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80b298:	00c20004 	movi	r3,2048
  80b29c:	e0bff917 	ldw	r2,-28(fp)
  80b2a0:	1885c83a 	sub	r2,r3,r2
  80b2a4:	e0bff615 	stw	r2,-40(fp)
  80b2a8:	00000406 	br	80b2bc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80b2ac:	00c1ffc4 	movi	r3,2047
  80b2b0:	e0bff917 	ldw	r2,-28(fp)
  80b2b4:	1885c83a 	sub	r2,r3,r2
  80b2b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80b2bc:	e0bff617 	ldw	r2,-40(fp)
  80b2c0:	10001e26 	beq	r2,zero,80b33c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80b2c4:	e0fffe17 	ldw	r3,-8(fp)
  80b2c8:	e0bff617 	ldw	r2,-40(fp)
  80b2cc:	1880022e 	bgeu	r3,r2,80b2d8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80b2d0:	e0bffe17 	ldw	r2,-8(fp)
  80b2d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80b2d8:	e0bffc17 	ldw	r2,-16(fp)
  80b2dc:	10c20e04 	addi	r3,r2,2104
  80b2e0:	e0bff917 	ldw	r2,-28(fp)
  80b2e4:	1885883a 	add	r2,r3,r2
  80b2e8:	e1bff617 	ldw	r6,-40(fp)
  80b2ec:	e17ffd17 	ldw	r5,-12(fp)
  80b2f0:	1009883a 	mov	r4,r2
  80b2f4:	0808f040 	call	808f04 <memcpy>
      ptr   += n;
  80b2f8:	e0fffd17 	ldw	r3,-12(fp)
  80b2fc:	e0bff617 	ldw	r2,-40(fp)
  80b300:	1885883a 	add	r2,r3,r2
  80b304:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80b308:	e0fffe17 	ldw	r3,-8(fp)
  80b30c:	e0bff617 	ldw	r2,-40(fp)
  80b310:	1885c83a 	sub	r2,r3,r2
  80b314:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b318:	e0fff917 	ldw	r3,-28(fp)
  80b31c:	e0bff617 	ldw	r2,-40(fp)
  80b320:	1885883a 	add	r2,r3,r2
  80b324:	10c1ffcc 	andi	r3,r2,2047
  80b328:	e0bffc17 	ldw	r2,-16(fp)
  80b32c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b330:	e0bffe17 	ldw	r2,-8(fp)
  80b334:	00bfc716 	blt	zero,r2,80b254 <__alt_mem_onchip_mem+0xff803254>
  80b338:	00000106 	br	80b340 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80b33c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b340:	0005303a 	rdctl	r2,status
  80b344:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b348:	e0fffb17 	ldw	r3,-20(fp)
  80b34c:	00bfff84 	movi	r2,-2
  80b350:	1884703a 	and	r2,r3,r2
  80b354:	1001703a 	wrctl	status,r2
  
  return context;
  80b358:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80b35c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b360:	e0bffc17 	ldw	r2,-16(fp)
  80b364:	10800817 	ldw	r2,32(r2)
  80b368:	10c00094 	ori	r3,r2,2
  80b36c:	e0bffc17 	ldw	r2,-16(fp)
  80b370:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b374:	e0bffc17 	ldw	r2,-16(fp)
  80b378:	10800017 	ldw	r2,0(r2)
  80b37c:	10800104 	addi	r2,r2,4
  80b380:	1007883a 	mov	r3,r2
  80b384:	e0bffc17 	ldw	r2,-16(fp)
  80b388:	10800817 	ldw	r2,32(r2)
  80b38c:	18800035 	stwio	r2,0(r3)
  80b390:	e0bffa17 	ldw	r2,-24(fp)
  80b394:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b398:	e0bff817 	ldw	r2,-32(fp)
  80b39c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80b3a0:	e0bffe17 	ldw	r2,-8(fp)
  80b3a4:	0080100e 	bge	zero,r2,80b3e8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80b3a8:	e0bfff17 	ldw	r2,-4(fp)
  80b3ac:	1090000c 	andi	r2,r2,16384
  80b3b0:	1000101e 	bne	r2,zero,80b3f4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80b3b4:	0001883a 	nop
  80b3b8:	e0bffc17 	ldw	r2,-16(fp)
  80b3bc:	10c00d17 	ldw	r3,52(r2)
  80b3c0:	e0bff517 	ldw	r2,-44(fp)
  80b3c4:	1880051e 	bne	r3,r2,80b3dc <altera_avalon_jtag_uart_write+0x1b8>
  80b3c8:	e0bffc17 	ldw	r2,-16(fp)
  80b3cc:	10c00917 	ldw	r3,36(r2)
  80b3d0:	e0bffc17 	ldw	r2,-16(fp)
  80b3d4:	10800117 	ldw	r2,4(r2)
  80b3d8:	18bff736 	bltu	r3,r2,80b3b8 <__alt_mem_onchip_mem+0xff8033b8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80b3dc:	e0bffc17 	ldw	r2,-16(fp)
  80b3e0:	10800917 	ldw	r2,36(r2)
  80b3e4:	1000051e 	bne	r2,zero,80b3fc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80b3e8:	e0bffe17 	ldw	r2,-8(fp)
  80b3ec:	00bfd016 	blt	zero,r2,80b330 <__alt_mem_onchip_mem+0xff803330>
  80b3f0:	00000306 	br	80b400 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80b3f4:	0001883a 	nop
  80b3f8:	00000106 	br	80b400 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80b3fc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80b400:	e0fffd17 	ldw	r3,-12(fp)
  80b404:	e0bff717 	ldw	r2,-36(fp)
  80b408:	18800426 	beq	r3,r2,80b41c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80b40c:	e0fffd17 	ldw	r3,-12(fp)
  80b410:	e0bff717 	ldw	r2,-36(fp)
  80b414:	1885c83a 	sub	r2,r3,r2
  80b418:	00000606 	br	80b434 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80b41c:	e0bfff17 	ldw	r2,-4(fp)
  80b420:	1090000c 	andi	r2,r2,16384
  80b424:	10000226 	beq	r2,zero,80b430 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80b428:	00bffd44 	movi	r2,-11
  80b42c:	00000106 	br	80b434 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80b430:	00bffec4 	movi	r2,-5
}
  80b434:	e037883a 	mov	sp,fp
  80b438:	dfc00117 	ldw	ra,4(sp)
  80b43c:	df000017 	ldw	fp,0(sp)
  80b440:	dec00204 	addi	sp,sp,8
  80b444:	f800283a 	ret

0080b448 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80b448:	defffa04 	addi	sp,sp,-24
  80b44c:	dfc00515 	stw	ra,20(sp)
  80b450:	df000415 	stw	fp,16(sp)
  80b454:	df000404 	addi	fp,sp,16
  80b458:	e13ffe15 	stw	r4,-8(fp)
  80b45c:	2805883a 	mov	r2,r5
  80b460:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80b464:	e0bffe17 	ldw	r2,-8(fp)
  80b468:	10800017 	ldw	r2,0(r2)
  80b46c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80b470:	008003f4 	movhi	r2,15
  80b474:	10909004 	addi	r2,r2,16960
  80b478:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80b47c:	e0bffe17 	ldw	r2,-8(fp)
  80b480:	10800803 	ldbu	r2,32(r2)
  80b484:	10803fcc 	andi	r2,r2,255
  80b488:	1080201c 	xori	r2,r2,128
  80b48c:	10bfe004 	addi	r2,r2,-128
  80b490:	1000151e 	bne	r2,zero,80b4e8 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80b494:	00000906 	br	80b4bc <lcd_write_command+0x74>
    if (--i == 0)
  80b498:	e0bffc17 	ldw	r2,-16(fp)
  80b49c:	10bfffc4 	addi	r2,r2,-1
  80b4a0:	e0bffc15 	stw	r2,-16(fp)
  80b4a4:	e0bffc17 	ldw	r2,-16(fp)
  80b4a8:	1000041e 	bne	r2,zero,80b4bc <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80b4ac:	e0bffe17 	ldw	r2,-8(fp)
  80b4b0:	00c00044 	movi	r3,1
  80b4b4:	10c00805 	stb	r3,32(r2)
      return;
  80b4b8:	00000c06 	br	80b4ec <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80b4bc:	e0bffd17 	ldw	r2,-12(fp)
  80b4c0:	10800104 	addi	r2,r2,4
  80b4c4:	10800037 	ldwio	r2,0(r2)
  80b4c8:	1080200c 	andi	r2,r2,128
  80b4cc:	103ff21e 	bne	r2,zero,80b498 <__alt_mem_onchip_mem+0xff803498>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80b4d0:	01001904 	movi	r4,100
  80b4d4:	080d5280 	call	80d528 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80b4d8:	e0bffd17 	ldw	r2,-12(fp)
  80b4dc:	e0ffff03 	ldbu	r3,-4(fp)
  80b4e0:	10c00035 	stwio	r3,0(r2)
  80b4e4:	00000106 	br	80b4ec <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80b4e8:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80b4ec:	e037883a 	mov	sp,fp
  80b4f0:	dfc00117 	ldw	ra,4(sp)
  80b4f4:	df000017 	ldw	fp,0(sp)
  80b4f8:	dec00204 	addi	sp,sp,8
  80b4fc:	f800283a 	ret

0080b500 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80b500:	defffa04 	addi	sp,sp,-24
  80b504:	dfc00515 	stw	ra,20(sp)
  80b508:	df000415 	stw	fp,16(sp)
  80b50c:	df000404 	addi	fp,sp,16
  80b510:	e13ffe15 	stw	r4,-8(fp)
  80b514:	2805883a 	mov	r2,r5
  80b518:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80b51c:	e0bffe17 	ldw	r2,-8(fp)
  80b520:	10800017 	ldw	r2,0(r2)
  80b524:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80b528:	008003f4 	movhi	r2,15
  80b52c:	10909004 	addi	r2,r2,16960
  80b530:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80b534:	e0bffe17 	ldw	r2,-8(fp)
  80b538:	10800803 	ldbu	r2,32(r2)
  80b53c:	10803fcc 	andi	r2,r2,255
  80b540:	1080201c 	xori	r2,r2,128
  80b544:	10bfe004 	addi	r2,r2,-128
  80b548:	10001d1e 	bne	r2,zero,80b5c0 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80b54c:	00000906 	br	80b574 <lcd_write_data+0x74>
    if (--i == 0)
  80b550:	e0bffc17 	ldw	r2,-16(fp)
  80b554:	10bfffc4 	addi	r2,r2,-1
  80b558:	e0bffc15 	stw	r2,-16(fp)
  80b55c:	e0bffc17 	ldw	r2,-16(fp)
  80b560:	1000041e 	bne	r2,zero,80b574 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80b564:	e0bffe17 	ldw	r2,-8(fp)
  80b568:	00c00044 	movi	r3,1
  80b56c:	10c00805 	stb	r3,32(r2)
      return;
  80b570:	00001406 	br	80b5c4 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80b574:	e0bffd17 	ldw	r2,-12(fp)
  80b578:	10800104 	addi	r2,r2,4
  80b57c:	10800037 	ldwio	r2,0(r2)
  80b580:	1080200c 	andi	r2,r2,128
  80b584:	103ff21e 	bne	r2,zero,80b550 <__alt_mem_onchip_mem+0xff803550>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80b588:	01001904 	movi	r4,100
  80b58c:	080d5280 	call	80d528 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80b590:	e0bffd17 	ldw	r2,-12(fp)
  80b594:	10800204 	addi	r2,r2,8
  80b598:	1007883a 	mov	r3,r2
  80b59c:	e0bfff03 	ldbu	r2,-4(fp)
  80b5a0:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80b5a4:	e0bffe17 	ldw	r2,-8(fp)
  80b5a8:	108008c3 	ldbu	r2,35(r2)
  80b5ac:	10800044 	addi	r2,r2,1
  80b5b0:	1007883a 	mov	r3,r2
  80b5b4:	e0bffe17 	ldw	r2,-8(fp)
  80b5b8:	10c008c5 	stb	r3,35(r2)
  80b5bc:	00000106 	br	80b5c4 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80b5c0:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80b5c4:	e037883a 	mov	sp,fp
  80b5c8:	dfc00117 	ldw	ra,4(sp)
  80b5cc:	df000017 	ldw	fp,0(sp)
  80b5d0:	dec00204 	addi	sp,sp,8
  80b5d4:	f800283a 	ret

0080b5d8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80b5d8:	defffc04 	addi	sp,sp,-16
  80b5dc:	dfc00315 	stw	ra,12(sp)
  80b5e0:	df000215 	stw	fp,8(sp)
  80b5e4:	df000204 	addi	fp,sp,8
  80b5e8:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80b5ec:	01400044 	movi	r5,1
  80b5f0:	e13fff17 	ldw	r4,-4(fp)
  80b5f4:	080b4480 	call	80b448 <lcd_write_command>

  sp->x = 0;
  80b5f8:	e0bfff17 	ldw	r2,-4(fp)
  80b5fc:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80b600:	e0bfff17 	ldw	r2,-4(fp)
  80b604:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80b608:	e0bfff17 	ldw	r2,-4(fp)
  80b60c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b610:	e03ffe15 	stw	zero,-8(fp)
  80b614:	00001b06 	br	80b684 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80b618:	e0bffe17 	ldw	r2,-8(fp)
  80b61c:	108018e4 	muli	r2,r2,99
  80b620:	10801004 	addi	r2,r2,64
  80b624:	e0ffff17 	ldw	r3,-4(fp)
  80b628:	1885883a 	add	r2,r3,r2
  80b62c:	01801444 	movi	r6,81
  80b630:	01400804 	movi	r5,32
  80b634:	1009883a 	mov	r4,r2
  80b638:	08082480 	call	808248 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80b63c:	e0bffe17 	ldw	r2,-8(fp)
  80b640:	108018e4 	muli	r2,r2,99
  80b644:	10800c04 	addi	r2,r2,48
  80b648:	e0ffff17 	ldw	r3,-4(fp)
  80b64c:	1885883a 	add	r2,r3,r2
  80b650:	01800404 	movi	r6,16
  80b654:	01400804 	movi	r5,32
  80b658:	1009883a 	mov	r4,r2
  80b65c:	08082480 	call	808248 <memset>
    sp->line[y].width = 0;
  80b660:	e0ffff17 	ldw	r3,-4(fp)
  80b664:	e0bffe17 	ldw	r2,-8(fp)
  80b668:	108018e4 	muli	r2,r2,99
  80b66c:	1885883a 	add	r2,r3,r2
  80b670:	10802444 	addi	r2,r2,145
  80b674:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b678:	e0bffe17 	ldw	r2,-8(fp)
  80b67c:	10800044 	addi	r2,r2,1
  80b680:	e0bffe15 	stw	r2,-8(fp)
  80b684:	e0bffe17 	ldw	r2,-8(fp)
  80b688:	10800090 	cmplti	r2,r2,2
  80b68c:	103fe21e 	bne	r2,zero,80b618 <__alt_mem_onchip_mem+0xff803618>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80b690:	0001883a 	nop
  80b694:	e037883a 	mov	sp,fp
  80b698:	dfc00117 	ldw	ra,4(sp)
  80b69c:	df000017 	ldw	fp,0(sp)
  80b6a0:	dec00204 	addi	sp,sp,8
  80b6a4:	f800283a 	ret

0080b6a8 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80b6a8:	defff704 	addi	sp,sp,-36
  80b6ac:	dfc00815 	stw	ra,32(sp)
  80b6b0:	df000715 	stw	fp,28(sp)
  80b6b4:	df000704 	addi	fp,sp,28
  80b6b8:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80b6bc:	e0bfff17 	ldw	r2,-4(fp)
  80b6c0:	10800943 	ldbu	r2,37(r2)
  80b6c4:	10803fcc 	andi	r2,r2,255
  80b6c8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b6cc:	e03ff915 	stw	zero,-28(fp)
  80b6d0:	00006706 	br	80b870 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80b6d4:	e0ffff17 	ldw	r3,-4(fp)
  80b6d8:	e0bff917 	ldw	r2,-28(fp)
  80b6dc:	108018e4 	muli	r2,r2,99
  80b6e0:	1885883a 	add	r2,r3,r2
  80b6e4:	10802444 	addi	r2,r2,145
  80b6e8:	10800003 	ldbu	r2,0(r2)
  80b6ec:	10803fcc 	andi	r2,r2,255
  80b6f0:	1080201c 	xori	r2,r2,128
  80b6f4:	10bfe004 	addi	r2,r2,-128
  80b6f8:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80b6fc:	e0ffff17 	ldw	r3,-4(fp)
  80b700:	e0bff917 	ldw	r2,-28(fp)
  80b704:	108018e4 	muli	r2,r2,99
  80b708:	1885883a 	add	r2,r3,r2
  80b70c:	10802484 	addi	r2,r2,146
  80b710:	10800003 	ldbu	r2,0(r2)
  80b714:	10c03fcc 	andi	r3,r2,255
  80b718:	e0bffc17 	ldw	r2,-16(fp)
  80b71c:	1885383a 	mul	r2,r3,r2
  80b720:	1005d23a 	srai	r2,r2,8
  80b724:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80b728:	e0fffb17 	ldw	r3,-20(fp)
  80b72c:	e0bffd17 	ldw	r2,-12(fp)
  80b730:	18800116 	blt	r3,r2,80b738 <lcd_repaint_screen+0x90>
      offset = 0;
  80b734:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80b738:	e03ffa15 	stw	zero,-24(fp)
  80b73c:	00004606 	br	80b858 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80b740:	e0fffa17 	ldw	r3,-24(fp)
  80b744:	e0bffb17 	ldw	r2,-20(fp)
  80b748:	1885883a 	add	r2,r3,r2
  80b74c:	e17ffd17 	ldw	r5,-12(fp)
  80b750:	1009883a 	mov	r4,r2
  80b754:	08099440 	call	809944 <__modsi3>
  80b758:	1009883a 	mov	r4,r2
  80b75c:	e0ffff17 	ldw	r3,-4(fp)
  80b760:	e0bff917 	ldw	r2,-28(fp)
  80b764:	108018e4 	muli	r2,r2,99
  80b768:	1885883a 	add	r2,r3,r2
  80b76c:	1105883a 	add	r2,r2,r4
  80b770:	10801004 	addi	r2,r2,64
  80b774:	10800003 	ldbu	r2,0(r2)
  80b778:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80b77c:	e0ffff17 	ldw	r3,-4(fp)
  80b780:	e0bff917 	ldw	r2,-28(fp)
  80b784:	108018e4 	muli	r2,r2,99
  80b788:	1887883a 	add	r3,r3,r2
  80b78c:	e0bffa17 	ldw	r2,-24(fp)
  80b790:	1885883a 	add	r2,r3,r2
  80b794:	10800c04 	addi	r2,r2,48
  80b798:	10800003 	ldbu	r2,0(r2)
  80b79c:	10c03fcc 	andi	r3,r2,255
  80b7a0:	18c0201c 	xori	r3,r3,128
  80b7a4:	18ffe004 	addi	r3,r3,-128
  80b7a8:	e0bffe07 	ldb	r2,-8(fp)
  80b7ac:	18802726 	beq	r3,r2,80b84c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80b7b0:	e0fff917 	ldw	r3,-28(fp)
  80b7b4:	d0a00d04 	addi	r2,gp,-32716
  80b7b8:	1885883a 	add	r2,r3,r2
  80b7bc:	10800003 	ldbu	r2,0(r2)
  80b7c0:	1007883a 	mov	r3,r2
  80b7c4:	e0bffa17 	ldw	r2,-24(fp)
  80b7c8:	1885883a 	add	r2,r3,r2
  80b7cc:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80b7d0:	e0fffe43 	ldbu	r3,-7(fp)
  80b7d4:	e0bfff17 	ldw	r2,-4(fp)
  80b7d8:	108008c3 	ldbu	r2,35(r2)
  80b7dc:	10803fcc 	andi	r2,r2,255
  80b7e0:	1080201c 	xori	r2,r2,128
  80b7e4:	10bfe004 	addi	r2,r2,-128
  80b7e8:	18800a26 	beq	r3,r2,80b814 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80b7ec:	e0fffe43 	ldbu	r3,-7(fp)
  80b7f0:	00bfe004 	movi	r2,-128
  80b7f4:	1884b03a 	or	r2,r3,r2
  80b7f8:	10803fcc 	andi	r2,r2,255
  80b7fc:	100b883a 	mov	r5,r2
  80b800:	e13fff17 	ldw	r4,-4(fp)
  80b804:	080b4480 	call	80b448 <lcd_write_command>
          sp->address = address;
  80b808:	e0fffe43 	ldbu	r3,-7(fp)
  80b80c:	e0bfff17 	ldw	r2,-4(fp)
  80b810:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80b814:	e0bffe03 	ldbu	r2,-8(fp)
  80b818:	10803fcc 	andi	r2,r2,255
  80b81c:	100b883a 	mov	r5,r2
  80b820:	e13fff17 	ldw	r4,-4(fp)
  80b824:	080b5000 	call	80b500 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80b828:	e0ffff17 	ldw	r3,-4(fp)
  80b82c:	e0bff917 	ldw	r2,-28(fp)
  80b830:	108018e4 	muli	r2,r2,99
  80b834:	1887883a 	add	r3,r3,r2
  80b838:	e0bffa17 	ldw	r2,-24(fp)
  80b83c:	1885883a 	add	r2,r3,r2
  80b840:	10800c04 	addi	r2,r2,48
  80b844:	e0fffe03 	ldbu	r3,-8(fp)
  80b848:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80b84c:	e0bffa17 	ldw	r2,-24(fp)
  80b850:	10800044 	addi	r2,r2,1
  80b854:	e0bffa15 	stw	r2,-24(fp)
  80b858:	e0bffa17 	ldw	r2,-24(fp)
  80b85c:	10800410 	cmplti	r2,r2,16
  80b860:	103fb71e 	bne	r2,zero,80b740 <__alt_mem_onchip_mem+0xff803740>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b864:	e0bff917 	ldw	r2,-28(fp)
  80b868:	10800044 	addi	r2,r2,1
  80b86c:	e0bff915 	stw	r2,-28(fp)
  80b870:	e0bff917 	ldw	r2,-28(fp)
  80b874:	10800090 	cmplti	r2,r2,2
  80b878:	103f961e 	bne	r2,zero,80b6d4 <__alt_mem_onchip_mem+0xff8036d4>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80b87c:	0001883a 	nop
  80b880:	e037883a 	mov	sp,fp
  80b884:	dfc00117 	ldw	ra,4(sp)
  80b888:	df000017 	ldw	fp,0(sp)
  80b88c:	dec00204 	addi	sp,sp,8
  80b890:	f800283a 	ret

0080b894 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80b894:	defffc04 	addi	sp,sp,-16
  80b898:	dfc00315 	stw	ra,12(sp)
  80b89c:	df000215 	stw	fp,8(sp)
  80b8a0:	df000204 	addi	fp,sp,8
  80b8a4:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b8a8:	e03ffe15 	stw	zero,-8(fp)
  80b8ac:	00001d06 	br	80b924 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80b8b0:	e0bffe17 	ldw	r2,-8(fp)
  80b8b4:	00800f16 	blt	zero,r2,80b8f4 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80b8b8:	e0bffe17 	ldw	r2,-8(fp)
  80b8bc:	108018e4 	muli	r2,r2,99
  80b8c0:	10801004 	addi	r2,r2,64
  80b8c4:	e0ffff17 	ldw	r3,-4(fp)
  80b8c8:	1889883a 	add	r4,r3,r2
  80b8cc:	e0bffe17 	ldw	r2,-8(fp)
  80b8d0:	10800044 	addi	r2,r2,1
  80b8d4:	108018e4 	muli	r2,r2,99
  80b8d8:	10801004 	addi	r2,r2,64
  80b8dc:	e0ffff17 	ldw	r3,-4(fp)
  80b8e0:	1885883a 	add	r2,r3,r2
  80b8e4:	01801404 	movi	r6,80
  80b8e8:	100b883a 	mov	r5,r2
  80b8ec:	0808f040 	call	808f04 <memcpy>
  80b8f0:	00000906 	br	80b918 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80b8f4:	e0bffe17 	ldw	r2,-8(fp)
  80b8f8:	108018e4 	muli	r2,r2,99
  80b8fc:	10801004 	addi	r2,r2,64
  80b900:	e0ffff17 	ldw	r3,-4(fp)
  80b904:	1885883a 	add	r2,r3,r2
  80b908:	01801404 	movi	r6,80
  80b90c:	01400804 	movi	r5,32
  80b910:	1009883a 	mov	r4,r2
  80b914:	08082480 	call	808248 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80b918:	e0bffe17 	ldw	r2,-8(fp)
  80b91c:	10800044 	addi	r2,r2,1
  80b920:	e0bffe15 	stw	r2,-8(fp)
  80b924:	e0bffe17 	ldw	r2,-8(fp)
  80b928:	10800090 	cmplti	r2,r2,2
  80b92c:	103fe01e 	bne	r2,zero,80b8b0 <__alt_mem_onchip_mem+0xff8038b0>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80b930:	e0bfff17 	ldw	r2,-4(fp)
  80b934:	10800883 	ldbu	r2,34(r2)
  80b938:	10bfffc4 	addi	r2,r2,-1
  80b93c:	1007883a 	mov	r3,r2
  80b940:	e0bfff17 	ldw	r2,-4(fp)
  80b944:	10c00885 	stb	r3,34(r2)
}
  80b948:	0001883a 	nop
  80b94c:	e037883a 	mov	sp,fp
  80b950:	dfc00117 	ldw	ra,4(sp)
  80b954:	df000017 	ldw	fp,0(sp)
  80b958:	dec00204 	addi	sp,sp,8
  80b95c:	f800283a 	ret

0080b960 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80b960:	defff904 	addi	sp,sp,-28
  80b964:	dfc00615 	stw	ra,24(sp)
  80b968:	df000515 	stw	fp,20(sp)
  80b96c:	df000504 	addi	fp,sp,20
  80b970:	e13ffe15 	stw	r4,-8(fp)
  80b974:	2805883a 	mov	r2,r5
  80b978:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80b97c:	e03ffb15 	stw	zero,-20(fp)
  80b980:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80b984:	e0bffe17 	ldw	r2,-8(fp)
  80b988:	10800a03 	ldbu	r2,40(r2)
  80b98c:	10803fcc 	andi	r2,r2,255
  80b990:	1080201c 	xori	r2,r2,128
  80b994:	10bfe004 	addi	r2,r2,-128
  80b998:	108016d8 	cmpnei	r2,r2,91
  80b99c:	1000411e 	bne	r2,zero,80baa4 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80b9a0:	e0bffe17 	ldw	r2,-8(fp)
  80b9a4:	10800a04 	addi	r2,r2,40
  80b9a8:	10800044 	addi	r2,r2,1
  80b9ac:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80b9b0:	00000c06 	br	80b9e4 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80b9b4:	e0bffb17 	ldw	r2,-20(fp)
  80b9b8:	10c002a4 	muli	r3,r2,10
  80b9bc:	e0bffd17 	ldw	r2,-12(fp)
  80b9c0:	11000044 	addi	r4,r2,1
  80b9c4:	e13ffd15 	stw	r4,-12(fp)
  80b9c8:	10800003 	ldbu	r2,0(r2)
  80b9cc:	10803fcc 	andi	r2,r2,255
  80b9d0:	1080201c 	xori	r2,r2,128
  80b9d4:	10bfe004 	addi	r2,r2,-128
  80b9d8:	10bff404 	addi	r2,r2,-48
  80b9dc:	1885883a 	add	r2,r3,r2
  80b9e0:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80b9e4:	d0e00f17 	ldw	r3,-32708(gp)
  80b9e8:	e0bffd17 	ldw	r2,-12(fp)
  80b9ec:	10800003 	ldbu	r2,0(r2)
  80b9f0:	10803fcc 	andi	r2,r2,255
  80b9f4:	1080201c 	xori	r2,r2,128
  80b9f8:	10bfe004 	addi	r2,r2,-128
  80b9fc:	10800044 	addi	r2,r2,1
  80ba00:	1885883a 	add	r2,r3,r2
  80ba04:	10800003 	ldbu	r2,0(r2)
  80ba08:	10803fcc 	andi	r2,r2,255
  80ba0c:	1080010c 	andi	r2,r2,4
  80ba10:	103fe81e 	bne	r2,zero,80b9b4 <__alt_mem_onchip_mem+0xff8039b4>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80ba14:	e0bffd17 	ldw	r2,-12(fp)
  80ba18:	10800003 	ldbu	r2,0(r2)
  80ba1c:	10803fcc 	andi	r2,r2,255
  80ba20:	1080201c 	xori	r2,r2,128
  80ba24:	10bfe004 	addi	r2,r2,-128
  80ba28:	10800ed8 	cmpnei	r2,r2,59
  80ba2c:	10001f1e 	bne	r2,zero,80baac <lcd_handle_escape+0x14c>
    {
      ptr++;
  80ba30:	e0bffd17 	ldw	r2,-12(fp)
  80ba34:	10800044 	addi	r2,r2,1
  80ba38:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80ba3c:	00000c06 	br	80ba70 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80ba40:	e0bffc17 	ldw	r2,-16(fp)
  80ba44:	10c002a4 	muli	r3,r2,10
  80ba48:	e0bffd17 	ldw	r2,-12(fp)
  80ba4c:	11000044 	addi	r4,r2,1
  80ba50:	e13ffd15 	stw	r4,-12(fp)
  80ba54:	10800003 	ldbu	r2,0(r2)
  80ba58:	10803fcc 	andi	r2,r2,255
  80ba5c:	1080201c 	xori	r2,r2,128
  80ba60:	10bfe004 	addi	r2,r2,-128
  80ba64:	10bff404 	addi	r2,r2,-48
  80ba68:	1885883a 	add	r2,r3,r2
  80ba6c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80ba70:	d0e00f17 	ldw	r3,-32708(gp)
  80ba74:	e0bffd17 	ldw	r2,-12(fp)
  80ba78:	10800003 	ldbu	r2,0(r2)
  80ba7c:	10803fcc 	andi	r2,r2,255
  80ba80:	1080201c 	xori	r2,r2,128
  80ba84:	10bfe004 	addi	r2,r2,-128
  80ba88:	10800044 	addi	r2,r2,1
  80ba8c:	1885883a 	add	r2,r3,r2
  80ba90:	10800003 	ldbu	r2,0(r2)
  80ba94:	10803fcc 	andi	r2,r2,255
  80ba98:	1080010c 	andi	r2,r2,4
  80ba9c:	103fe81e 	bne	r2,zero,80ba40 <__alt_mem_onchip_mem+0xff803a40>
  80baa0:	00000206 	br	80baac <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80baa4:	00bfffc4 	movi	r2,-1
  80baa8:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80baac:	e0bfff07 	ldb	r2,-4(fp)
  80bab0:	10c012a0 	cmpeqi	r3,r2,74
  80bab4:	1800291e 	bne	r3,zero,80bb5c <lcd_handle_escape+0x1fc>
  80bab8:	10c012c8 	cmpgei	r3,r2,75
  80babc:	1800031e 	bne	r3,zero,80bacc <lcd_handle_escape+0x16c>
  80bac0:	10801220 	cmpeqi	r2,r2,72
  80bac4:	1000061e 	bne	r2,zero,80bae0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80bac8:	00004a06 	br	80bbf4 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80bacc:	10c012e0 	cmpeqi	r3,r2,75
  80bad0:	1800281e 	bne	r3,zero,80bb74 <lcd_handle_escape+0x214>
  80bad4:	108019a0 	cmpeqi	r2,r2,102
  80bad8:	1000011e 	bne	r2,zero,80bae0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80badc:	00004506 	br	80bbf4 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80bae0:	e0bffc17 	ldw	r2,-16(fp)
  80bae4:	0080050e 	bge	zero,r2,80bafc <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80bae8:	e0bffc17 	ldw	r2,-16(fp)
  80baec:	10bfffc4 	addi	r2,r2,-1
  80baf0:	1007883a 	mov	r3,r2
  80baf4:	e0bffe17 	ldw	r2,-8(fp)
  80baf8:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80bafc:	e0bffb17 	ldw	r2,-20(fp)
  80bb00:	0080370e 	bge	zero,r2,80bbe0 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80bb04:	e0bffb17 	ldw	r2,-20(fp)
  80bb08:	10bfffc4 	addi	r2,r2,-1
  80bb0c:	1007883a 	mov	r3,r2
  80bb10:	e0bffe17 	ldw	r2,-8(fp)
  80bb14:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80bb18:	e0bffe17 	ldw	r2,-8(fp)
  80bb1c:	10800883 	ldbu	r2,34(r2)
  80bb20:	10803fcc 	andi	r2,r2,255
  80bb24:	10800170 	cmpltui	r2,r2,5
  80bb28:	1000061e 	bne	r2,zero,80bb44 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80bb2c:	e0bffe17 	ldw	r2,-8(fp)
  80bb30:	00c00104 	movi	r3,4
  80bb34:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80bb38:	00000206 	br	80bb44 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80bb3c:	e13ffe17 	ldw	r4,-8(fp)
  80bb40:	080b8940 	call	80b894 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80bb44:	e0bffe17 	ldw	r2,-8(fp)
  80bb48:	10800883 	ldbu	r2,34(r2)
  80bb4c:	10803fcc 	andi	r2,r2,255
  80bb50:	108000e8 	cmpgeui	r2,r2,3
  80bb54:	103ff91e 	bne	r2,zero,80bb3c <__alt_mem_onchip_mem+0xff803b3c>
        lcd_scroll_up(sp);
    }
    break;
  80bb58:	00002106 	br	80bbe0 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80bb5c:	e0bffb17 	ldw	r2,-20(fp)
  80bb60:	10800098 	cmpnei	r2,r2,2
  80bb64:	1000201e 	bne	r2,zero,80bbe8 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80bb68:	e13ffe17 	ldw	r4,-8(fp)
  80bb6c:	080b5d80 	call	80b5d8 <lcd_clear_screen>
    break;
  80bb70:	00001d06 	br	80bbe8 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80bb74:	e0bffb17 	ldw	r2,-20(fp)
  80bb78:	00801d16 	blt	zero,r2,80bbf0 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80bb7c:	e0bffe17 	ldw	r2,-8(fp)
  80bb80:	10800843 	ldbu	r2,33(r2)
  80bb84:	10803fcc 	andi	r2,r2,255
  80bb88:	10801428 	cmpgeui	r2,r2,80
  80bb8c:	1000181e 	bne	r2,zero,80bbf0 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80bb90:	e0bffe17 	ldw	r2,-8(fp)
  80bb94:	10800883 	ldbu	r2,34(r2)
  80bb98:	10803fcc 	andi	r2,r2,255
  80bb9c:	108018e4 	muli	r2,r2,99
  80bba0:	10801004 	addi	r2,r2,64
  80bba4:	e0fffe17 	ldw	r3,-8(fp)
  80bba8:	1887883a 	add	r3,r3,r2
  80bbac:	e0bffe17 	ldw	r2,-8(fp)
  80bbb0:	10800843 	ldbu	r2,33(r2)
  80bbb4:	10803fcc 	andi	r2,r2,255
  80bbb8:	1889883a 	add	r4,r3,r2
  80bbbc:	e0bffe17 	ldw	r2,-8(fp)
  80bbc0:	10800843 	ldbu	r2,33(r2)
  80bbc4:	10803fcc 	andi	r2,r2,255
  80bbc8:	00c01404 	movi	r3,80
  80bbcc:	1885c83a 	sub	r2,r3,r2
  80bbd0:	100d883a 	mov	r6,r2
  80bbd4:	01400804 	movi	r5,32
  80bbd8:	08082480 	call	808248 <memset>
    }
    break;
  80bbdc:	00000406 	br	80bbf0 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80bbe0:	0001883a 	nop
  80bbe4:	00000306 	br	80bbf4 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80bbe8:	0001883a 	nop
  80bbec:	00000106 	br	80bbf4 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80bbf0:	0001883a 	nop
  }
}
  80bbf4:	0001883a 	nop
  80bbf8:	e037883a 	mov	sp,fp
  80bbfc:	dfc00117 	ldw	ra,4(sp)
  80bc00:	df000017 	ldw	fp,0(sp)
  80bc04:	dec00204 	addi	sp,sp,8
  80bc08:	f800283a 	ret

0080bc0c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80bc0c:	defff304 	addi	sp,sp,-52
  80bc10:	dfc00c15 	stw	ra,48(sp)
  80bc14:	df000b15 	stw	fp,44(sp)
  80bc18:	df000b04 	addi	fp,sp,44
  80bc1c:	e13ffc15 	stw	r4,-16(fp)
  80bc20:	e17ffd15 	stw	r5,-12(fp)
  80bc24:	e1bffe15 	stw	r6,-8(fp)
  80bc28:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80bc2c:	e0bffe17 	ldw	r2,-8(fp)
  80bc30:	e0fffd17 	ldw	r3,-12(fp)
  80bc34:	1885883a 	add	r2,r3,r2
  80bc38:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80bc3c:	e0bffc17 	ldw	r2,-16(fp)
  80bc40:	00c00044 	movi	r3,1
  80bc44:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80bc48:	00009906 	br	80beb0 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80bc4c:	e0bffd17 	ldw	r2,-12(fp)
  80bc50:	10800003 	ldbu	r2,0(r2)
  80bc54:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80bc58:	e0bffc17 	ldw	r2,-16(fp)
  80bc5c:	10800903 	ldbu	r2,36(r2)
  80bc60:	10803fcc 	andi	r2,r2,255
  80bc64:	1080201c 	xori	r2,r2,128
  80bc68:	10bfe004 	addi	r2,r2,-128
  80bc6c:	10003716 	blt	r2,zero,80bd4c <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80bc70:	e0bffc17 	ldw	r2,-16(fp)
  80bc74:	10800903 	ldbu	r2,36(r2)
  80bc78:	10803fcc 	andi	r2,r2,255
  80bc7c:	1080201c 	xori	r2,r2,128
  80bc80:	10bfe004 	addi	r2,r2,-128
  80bc84:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80bc88:	e0bffa17 	ldw	r2,-24(fp)
  80bc8c:	1000031e 	bne	r2,zero,80bc9c <altera_avalon_lcd_16207_write+0x90>
  80bc90:	e0bff907 	ldb	r2,-28(fp)
  80bc94:	108016d8 	cmpnei	r2,r2,91
  80bc98:	10000d1e 	bne	r2,zero,80bcd0 <altera_avalon_lcd_16207_write+0xc4>
  80bc9c:	e0bffa17 	ldw	r2,-24(fp)
  80bca0:	10001826 	beq	r2,zero,80bd04 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80bca4:	d0e00f17 	ldw	r3,-32708(gp)
  80bca8:	e0bff907 	ldb	r2,-28(fp)
  80bcac:	10800044 	addi	r2,r2,1
  80bcb0:	1885883a 	add	r2,r3,r2
  80bcb4:	10800003 	ldbu	r2,0(r2)
  80bcb8:	10803fcc 	andi	r2,r2,255
  80bcbc:	1080010c 	andi	r2,r2,4
  80bcc0:	1000101e 	bne	r2,zero,80bd04 <altera_avalon_lcd_16207_write+0xf8>
  80bcc4:	e0bff907 	ldb	r2,-28(fp)
  80bcc8:	10800ee0 	cmpeqi	r2,r2,59
  80bccc:	10000d1e 	bne	r2,zero,80bd04 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80bcd0:	e0fffc17 	ldw	r3,-16(fp)
  80bcd4:	e0bffa17 	ldw	r2,-24(fp)
  80bcd8:	1885883a 	add	r2,r3,r2
  80bcdc:	10800a04 	addi	r2,r2,40
  80bce0:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80bce4:	e0bff907 	ldb	r2,-28(fp)
  80bce8:	100b883a 	mov	r5,r2
  80bcec:	e13ffc17 	ldw	r4,-16(fp)
  80bcf0:	080b9600 	call	80b960 <lcd_handle_escape>

        sp->esccount = -1;
  80bcf4:	e0bffc17 	ldw	r2,-16(fp)
  80bcf8:	00ffffc4 	movi	r3,-1
  80bcfc:	10c00905 	stb	r3,36(r2)
  80bd00:	00006806 	br	80bea4 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80bd04:	e0bffc17 	ldw	r2,-16(fp)
  80bd08:	10800903 	ldbu	r2,36(r2)
  80bd0c:	10803fcc 	andi	r2,r2,255
  80bd10:	108001e8 	cmpgeui	r2,r2,7
  80bd14:	1000631e 	bne	r2,zero,80bea4 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80bd18:	e0fffc17 	ldw	r3,-16(fp)
  80bd1c:	e0bffa17 	ldw	r2,-24(fp)
  80bd20:	1885883a 	add	r2,r3,r2
  80bd24:	10800a04 	addi	r2,r2,40
  80bd28:	e0fff903 	ldbu	r3,-28(fp)
  80bd2c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80bd30:	e0bffc17 	ldw	r2,-16(fp)
  80bd34:	10800903 	ldbu	r2,36(r2)
  80bd38:	10800044 	addi	r2,r2,1
  80bd3c:	1007883a 	mov	r3,r2
  80bd40:	e0bffc17 	ldw	r2,-16(fp)
  80bd44:	10c00905 	stb	r3,36(r2)
  80bd48:	00005606 	br	80bea4 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80bd4c:	e0bff907 	ldb	r2,-28(fp)
  80bd50:	108006d8 	cmpnei	r2,r2,27
  80bd54:	1000031e 	bne	r2,zero,80bd64 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80bd58:	e0bffc17 	ldw	r2,-16(fp)
  80bd5c:	10000905 	stb	zero,36(r2)
  80bd60:	00005006 	br	80bea4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80bd64:	e0bff907 	ldb	r2,-28(fp)
  80bd68:	10800358 	cmpnei	r2,r2,13
  80bd6c:	1000031e 	bne	r2,zero,80bd7c <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80bd70:	e0bffc17 	ldw	r2,-16(fp)
  80bd74:	10000845 	stb	zero,33(r2)
  80bd78:	00004a06 	br	80bea4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80bd7c:	e0bff907 	ldb	r2,-28(fp)
  80bd80:	10800298 	cmpnei	r2,r2,10
  80bd84:	1000101e 	bne	r2,zero,80bdc8 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80bd88:	e0bffc17 	ldw	r2,-16(fp)
  80bd8c:	10000845 	stb	zero,33(r2)
      sp->y++;
  80bd90:	e0bffc17 	ldw	r2,-16(fp)
  80bd94:	10800883 	ldbu	r2,34(r2)
  80bd98:	10800044 	addi	r2,r2,1
  80bd9c:	1007883a 	mov	r3,r2
  80bda0:	e0bffc17 	ldw	r2,-16(fp)
  80bda4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80bda8:	e0bffc17 	ldw	r2,-16(fp)
  80bdac:	10800883 	ldbu	r2,34(r2)
  80bdb0:	10803fcc 	andi	r2,r2,255
  80bdb4:	108000f0 	cmpltui	r2,r2,3
  80bdb8:	10003a1e 	bne	r2,zero,80bea4 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80bdbc:	e13ffc17 	ldw	r4,-16(fp)
  80bdc0:	080b8940 	call	80b894 <lcd_scroll_up>
  80bdc4:	00003706 	br	80bea4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80bdc8:	e0bff907 	ldb	r2,-28(fp)
  80bdcc:	10800218 	cmpnei	r2,r2,8
  80bdd0:	10000b1e 	bne	r2,zero,80be00 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80bdd4:	e0bffc17 	ldw	r2,-16(fp)
  80bdd8:	10800843 	ldbu	r2,33(r2)
  80bddc:	10803fcc 	andi	r2,r2,255
  80bde0:	10003026 	beq	r2,zero,80bea4 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80bde4:	e0bffc17 	ldw	r2,-16(fp)
  80bde8:	10800843 	ldbu	r2,33(r2)
  80bdec:	10bfffc4 	addi	r2,r2,-1
  80bdf0:	1007883a 	mov	r3,r2
  80bdf4:	e0bffc17 	ldw	r2,-16(fp)
  80bdf8:	10c00845 	stb	r3,33(r2)
  80bdfc:	00002906 	br	80bea4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80be00:	d0e00f17 	ldw	r3,-32708(gp)
  80be04:	e0bff907 	ldb	r2,-28(fp)
  80be08:	10800044 	addi	r2,r2,1
  80be0c:	1885883a 	add	r2,r3,r2
  80be10:	10800003 	ldbu	r2,0(r2)
  80be14:	10803fcc 	andi	r2,r2,255
  80be18:	1080201c 	xori	r2,r2,128
  80be1c:	10bfe004 	addi	r2,r2,-128
  80be20:	108025cc 	andi	r2,r2,151
  80be24:	10001f26 	beq	r2,zero,80bea4 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80be28:	e0bffc17 	ldw	r2,-16(fp)
  80be2c:	10800883 	ldbu	r2,34(r2)
  80be30:	10803fcc 	andi	r2,r2,255
  80be34:	108000b0 	cmpltui	r2,r2,2
  80be38:	1000021e 	bne	r2,zero,80be44 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80be3c:	e13ffc17 	ldw	r4,-16(fp)
  80be40:	080b8940 	call	80b894 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80be44:	e0bffc17 	ldw	r2,-16(fp)
  80be48:	10800843 	ldbu	r2,33(r2)
  80be4c:	10803fcc 	andi	r2,r2,255
  80be50:	10801428 	cmpgeui	r2,r2,80
  80be54:	10000d1e 	bne	r2,zero,80be8c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80be58:	e0bffc17 	ldw	r2,-16(fp)
  80be5c:	10800883 	ldbu	r2,34(r2)
  80be60:	10c03fcc 	andi	r3,r2,255
  80be64:	e0bffc17 	ldw	r2,-16(fp)
  80be68:	10800843 	ldbu	r2,33(r2)
  80be6c:	10803fcc 	andi	r2,r2,255
  80be70:	e13ffc17 	ldw	r4,-16(fp)
  80be74:	18c018e4 	muli	r3,r3,99
  80be78:	20c7883a 	add	r3,r4,r3
  80be7c:	1885883a 	add	r2,r3,r2
  80be80:	10801004 	addi	r2,r2,64
  80be84:	e0fff903 	ldbu	r3,-28(fp)
  80be88:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80be8c:	e0bffc17 	ldw	r2,-16(fp)
  80be90:	10800843 	ldbu	r2,33(r2)
  80be94:	10800044 	addi	r2,r2,1
  80be98:	1007883a 	mov	r3,r2
  80be9c:	e0bffc17 	ldw	r2,-16(fp)
  80bea0:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80bea4:	e0bffd17 	ldw	r2,-12(fp)
  80bea8:	10800044 	addi	r2,r2,1
  80beac:	e0bffd15 	stw	r2,-12(fp)
  80beb0:	e0fffd17 	ldw	r3,-12(fp)
  80beb4:	e0bff817 	ldw	r2,-32(fp)
  80beb8:	18bf6436 	bltu	r3,r2,80bc4c <__alt_mem_onchip_mem+0xff803c4c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80bebc:	00800404 	movi	r2,16
  80bec0:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80bec4:	e03ff515 	stw	zero,-44(fp)
  80bec8:	00003706 	br	80bfa8 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80becc:	00801404 	movi	r2,80
  80bed0:	e0bff715 	stw	r2,-36(fp)
  80bed4:	00001106 	br	80bf1c <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80bed8:	e0bff717 	ldw	r2,-36(fp)
  80bedc:	10bfffc4 	addi	r2,r2,-1
  80bee0:	e13ffc17 	ldw	r4,-16(fp)
  80bee4:	e0fff517 	ldw	r3,-44(fp)
  80bee8:	18c018e4 	muli	r3,r3,99
  80beec:	20c7883a 	add	r3,r4,r3
  80bef0:	1885883a 	add	r2,r3,r2
  80bef4:	10801004 	addi	r2,r2,64
  80bef8:	10800003 	ldbu	r2,0(r2)
  80befc:	10803fcc 	andi	r2,r2,255
  80bf00:	1080201c 	xori	r2,r2,128
  80bf04:	10bfe004 	addi	r2,r2,-128
  80bf08:	10800820 	cmpeqi	r2,r2,32
  80bf0c:	10000626 	beq	r2,zero,80bf28 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80bf10:	e0bff717 	ldw	r2,-36(fp)
  80bf14:	10bfffc4 	addi	r2,r2,-1
  80bf18:	e0bff715 	stw	r2,-36(fp)
  80bf1c:	e0bff717 	ldw	r2,-36(fp)
  80bf20:	00bfed16 	blt	zero,r2,80bed8 <__alt_mem_onchip_mem+0xff803ed8>
  80bf24:	00000106 	br	80bf2c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80bf28:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80bf2c:	e0bff717 	ldw	r2,-36(fp)
  80bf30:	10800448 	cmpgei	r2,r2,17
  80bf34:	1000031e 	bne	r2,zero,80bf44 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80bf38:	00800404 	movi	r2,16
  80bf3c:	e0bff715 	stw	r2,-36(fp)
  80bf40:	00000306 	br	80bf50 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  80bf44:	e0bff717 	ldw	r2,-36(fp)
  80bf48:	10800044 	addi	r2,r2,1
  80bf4c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80bf50:	e0bff717 	ldw	r2,-36(fp)
  80bf54:	1009883a 	mov	r4,r2
  80bf58:	e0fffc17 	ldw	r3,-16(fp)
  80bf5c:	e0bff517 	ldw	r2,-44(fp)
  80bf60:	108018e4 	muli	r2,r2,99
  80bf64:	1885883a 	add	r2,r3,r2
  80bf68:	10802444 	addi	r2,r2,145
  80bf6c:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  80bf70:	e0fff617 	ldw	r3,-40(fp)
  80bf74:	e0bff717 	ldw	r2,-36(fp)
  80bf78:	1880020e 	bge	r3,r2,80bf84 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80bf7c:	e0bff717 	ldw	r2,-36(fp)
  80bf80:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80bf84:	e0fffc17 	ldw	r3,-16(fp)
  80bf88:	e0bff517 	ldw	r2,-44(fp)
  80bf8c:	108018e4 	muli	r2,r2,99
  80bf90:	1885883a 	add	r2,r3,r2
  80bf94:	10802484 	addi	r2,r2,146
  80bf98:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80bf9c:	e0bff517 	ldw	r2,-44(fp)
  80bfa0:	10800044 	addi	r2,r2,1
  80bfa4:	e0bff515 	stw	r2,-44(fp)
  80bfa8:	e0bff517 	ldw	r2,-44(fp)
  80bfac:	10800090 	cmplti	r2,r2,2
  80bfb0:	103fc61e 	bne	r2,zero,80becc <__alt_mem_onchip_mem+0xff803ecc>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80bfb4:	e0bff617 	ldw	r2,-40(fp)
  80bfb8:	10800448 	cmpgei	r2,r2,17
  80bfbc:	1000031e 	bne	r2,zero,80bfcc <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80bfc0:	e0bffc17 	ldw	r2,-16(fp)
  80bfc4:	10000985 	stb	zero,38(r2)
  80bfc8:	00002e06 	br	80c084 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  80bfcc:	e0bff617 	ldw	r2,-40(fp)
  80bfd0:	1085883a 	add	r2,r2,r2
  80bfd4:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80bfd8:	e0bff617 	ldw	r2,-40(fp)
  80bfdc:	1007883a 	mov	r3,r2
  80bfe0:	e0bffc17 	ldw	r2,-16(fp)
  80bfe4:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80bfe8:	e03ff515 	stw	zero,-44(fp)
  80bfec:	00002206 	br	80c078 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80bff0:	e0fffc17 	ldw	r3,-16(fp)
  80bff4:	e0bff517 	ldw	r2,-44(fp)
  80bff8:	108018e4 	muli	r2,r2,99
  80bffc:	1885883a 	add	r2,r3,r2
  80c000:	10802444 	addi	r2,r2,145
  80c004:	10800003 	ldbu	r2,0(r2)
  80c008:	10803fcc 	andi	r2,r2,255
  80c00c:	1080201c 	xori	r2,r2,128
  80c010:	10bfe004 	addi	r2,r2,-128
  80c014:	10800450 	cmplti	r2,r2,17
  80c018:	1000141e 	bne	r2,zero,80c06c <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80c01c:	e0fffc17 	ldw	r3,-16(fp)
  80c020:	e0bff517 	ldw	r2,-44(fp)
  80c024:	108018e4 	muli	r2,r2,99
  80c028:	1885883a 	add	r2,r3,r2
  80c02c:	10802444 	addi	r2,r2,145
  80c030:	10800003 	ldbu	r2,0(r2)
  80c034:	10803fcc 	andi	r2,r2,255
  80c038:	1080201c 	xori	r2,r2,128
  80c03c:	10bfe004 	addi	r2,r2,-128
  80c040:	1004923a 	slli	r2,r2,8
  80c044:	e17ff617 	ldw	r5,-40(fp)
  80c048:	1009883a 	mov	r4,r2
  80c04c:	08098c00 	call	8098c0 <__divsi3>
  80c050:	1009883a 	mov	r4,r2
  80c054:	e0fffc17 	ldw	r3,-16(fp)
  80c058:	e0bff517 	ldw	r2,-44(fp)
  80c05c:	108018e4 	muli	r2,r2,99
  80c060:	1885883a 	add	r2,r3,r2
  80c064:	10802484 	addi	r2,r2,146
  80c068:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c06c:	e0bff517 	ldw	r2,-44(fp)
  80c070:	10800044 	addi	r2,r2,1
  80c074:	e0bff515 	stw	r2,-44(fp)
  80c078:	e0bff517 	ldw	r2,-44(fp)
  80c07c:	10800090 	cmplti	r2,r2,2
  80c080:	103fdb1e 	bne	r2,zero,80bff0 <__alt_mem_onchip_mem+0xff803ff0>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80c084:	e0bffc17 	ldw	r2,-16(fp)
  80c088:	10800943 	ldbu	r2,37(r2)
  80c08c:	10803fcc 	andi	r2,r2,255
  80c090:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80c094:	e13ffc17 	ldw	r4,-16(fp)
  80c098:	080b6a80 	call	80b6a8 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80c09c:	e0bffc17 	ldw	r2,-16(fp)
  80c0a0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80c0a4:	e0bffc17 	ldw	r2,-16(fp)
  80c0a8:	10800943 	ldbu	r2,37(r2)
  80c0ac:	10c03fcc 	andi	r3,r2,255
  80c0b0:	e0bffb17 	ldw	r2,-20(fp)
  80c0b4:	18800426 	beq	r3,r2,80c0c8 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80c0b8:	e0bffc17 	ldw	r2,-16(fp)
  80c0bc:	00c00044 	movi	r3,1
  80c0c0:	10c009c5 	stb	r3,39(r2)
  }
  80c0c4:	003fef06 	br	80c084 <__alt_mem_onchip_mem+0xff804084>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80c0c8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80c0cc:	e0bffe17 	ldw	r2,-8(fp)
}
  80c0d0:	e037883a 	mov	sp,fp
  80c0d4:	dfc00117 	ldw	ra,4(sp)
  80c0d8:	df000017 	ldw	fp,0(sp)
  80c0dc:	dec00204 	addi	sp,sp,8
  80c0e0:	f800283a 	ret

0080c0e4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80c0e4:	defffc04 	addi	sp,sp,-16
  80c0e8:	dfc00315 	stw	ra,12(sp)
  80c0ec:	df000215 	stw	fp,8(sp)
  80c0f0:	df000204 	addi	fp,sp,8
  80c0f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80c0f8:	e0bfff17 	ldw	r2,-4(fp)
  80c0fc:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80c100:	e0bffe17 	ldw	r2,-8(fp)
  80c104:	10800943 	ldbu	r2,37(r2)
  80c108:	10803fcc 	andi	r2,r2,255
  80c10c:	10c00044 	addi	r3,r2,1
  80c110:	e0bffe17 	ldw	r2,-8(fp)
  80c114:	10800983 	ldbu	r2,38(r2)
  80c118:	10803fcc 	andi	r2,r2,255
  80c11c:	18800316 	blt	r3,r2,80c12c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80c120:	e0bffe17 	ldw	r2,-8(fp)
  80c124:	10000945 	stb	zero,37(r2)
  80c128:	00000606 	br	80c144 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80c12c:	e0bffe17 	ldw	r2,-8(fp)
  80c130:	10800943 	ldbu	r2,37(r2)
  80c134:	10800044 	addi	r2,r2,1
  80c138:	1007883a 	mov	r3,r2
  80c13c:	e0bffe17 	ldw	r2,-8(fp)
  80c140:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80c144:	e0bffe17 	ldw	r2,-8(fp)
  80c148:	10800983 	ldbu	r2,38(r2)
  80c14c:	10803fcc 	andi	r2,r2,255
  80c150:	10000826 	beq	r2,zero,80c174 <alt_lcd_16207_timeout+0x90>
  80c154:	e0bffe17 	ldw	r2,-8(fp)
  80c158:	108009c3 	ldbu	r2,39(r2)
  80c15c:	10803fcc 	andi	r2,r2,255
  80c160:	1080201c 	xori	r2,r2,128
  80c164:	10bfe004 	addi	r2,r2,-128
  80c168:	1000021e 	bne	r2,zero,80c174 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80c16c:	e13ffe17 	ldw	r4,-8(fp)
  80c170:	080b6a80 	call	80b6a8 <lcd_repaint_screen>

  return sp->period;
  80c174:	e0bffe17 	ldw	r2,-8(fp)
  80c178:	10800717 	ldw	r2,28(r2)
}
  80c17c:	e037883a 	mov	sp,fp
  80c180:	dfc00117 	ldw	ra,4(sp)
  80c184:	df000017 	ldw	fp,0(sp)
  80c188:	dec00204 	addi	sp,sp,8
  80c18c:	f800283a 	ret

0080c190 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80c190:	defffc04 	addi	sp,sp,-16
  80c194:	dfc00315 	stw	ra,12(sp)
  80c198:	df000215 	stw	fp,8(sp)
  80c19c:	df000204 	addi	fp,sp,8
  80c1a0:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80c1a4:	e0bfff17 	ldw	r2,-4(fp)
  80c1a8:	10800017 	ldw	r2,0(r2)
  80c1ac:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80c1b0:	e0bfff17 	ldw	r2,-4(fp)
  80c1b4:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80c1b8:	010ea604 	movi	r4,15000
  80c1bc:	080d5280 	call	80d528 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c1c0:	e0bffe17 	ldw	r2,-8(fp)
  80c1c4:	00c00c04 	movi	r3,48
  80c1c8:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80c1cc:	01040104 	movi	r4,4100
  80c1d0:	080d5280 	call	80d528 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c1d4:	e0bffe17 	ldw	r2,-8(fp)
  80c1d8:	00c00c04 	movi	r3,48
  80c1dc:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80c1e0:	0100fa04 	movi	r4,1000
  80c1e4:	080d5280 	call	80d528 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80c1e8:	e0bffe17 	ldw	r2,-8(fp)
  80c1ec:	00c00c04 	movi	r3,48
  80c1f0:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80c1f4:	01400e04 	movi	r5,56
  80c1f8:	e13fff17 	ldw	r4,-4(fp)
  80c1fc:	080b4480 	call	80b448 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80c200:	01400204 	movi	r5,8
  80c204:	e13fff17 	ldw	r4,-4(fp)
  80c208:	080b4480 	call	80b448 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80c20c:	e13fff17 	ldw	r4,-4(fp)
  80c210:	080b5d80 	call	80b5d8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80c214:	01400184 	movi	r5,6
  80c218:	e13fff17 	ldw	r4,-4(fp)
  80c21c:	080b4480 	call	80b448 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80c220:	01400304 	movi	r5,12
  80c224:	e13fff17 	ldw	r4,-4(fp)
  80c228:	080b4480 	call	80b448 <lcd_write_command>

  sp->esccount = -1;
  80c22c:	e0bfff17 	ldw	r2,-4(fp)
  80c230:	00ffffc4 	movi	r3,-1
  80c234:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80c238:	e0bfff17 	ldw	r2,-4(fp)
  80c23c:	10800a04 	addi	r2,r2,40
  80c240:	01800204 	movi	r6,8
  80c244:	000b883a 	mov	r5,zero
  80c248:	1009883a 	mov	r4,r2
  80c24c:	08082480 	call	808248 <memset>

  sp->scrollpos = 0;
  80c250:	e0bfff17 	ldw	r2,-4(fp)
  80c254:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80c258:	e0bfff17 	ldw	r2,-4(fp)
  80c25c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80c260:	e0bfff17 	ldw	r2,-4(fp)
  80c264:	100009c5 	stb	zero,39(r2)
  80c268:	d0a72e17 	ldw	r2,-25416(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80c26c:	01400284 	movi	r5,10
  80c270:	1009883a 	mov	r4,r2
  80c274:	08099b80 	call	8099b8 <__udivsi3>
  80c278:	1007883a 	mov	r3,r2
  80c27c:	e0bfff17 	ldw	r2,-4(fp)
  80c280:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80c284:	e0bfff17 	ldw	r2,-4(fp)
  80c288:	10c00104 	addi	r3,r2,4
  80c28c:	e0bfff17 	ldw	r2,-4(fp)
  80c290:	10800717 	ldw	r2,28(r2)
  80c294:	e1ffff17 	ldw	r7,-4(fp)
  80c298:	01802074 	movhi	r6,129
  80c29c:	31b03904 	addi	r6,r6,-16156
  80c2a0:	100b883a 	mov	r5,r2
  80c2a4:	1809883a 	mov	r4,r3
  80c2a8:	0809a740 	call	809a74 <alt_alarm_start>
}
  80c2ac:	0001883a 	nop
  80c2b0:	e037883a 	mov	sp,fp
  80c2b4:	dfc00117 	ldw	ra,4(sp)
  80c2b8:	df000017 	ldw	fp,0(sp)
  80c2bc:	dec00204 	addi	sp,sp,8
  80c2c0:	f800283a 	ret

0080c2c4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80c2c4:	defffa04 	addi	sp,sp,-24
  80c2c8:	dfc00515 	stw	ra,20(sp)
  80c2cc:	df000415 	stw	fp,16(sp)
  80c2d0:	df000404 	addi	fp,sp,16
  80c2d4:	e13ffd15 	stw	r4,-12(fp)
  80c2d8:	e17ffe15 	stw	r5,-8(fp)
  80c2dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80c2e0:	e0bffd17 	ldw	r2,-12(fp)
  80c2e4:	10800017 	ldw	r2,0(r2)
  80c2e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80c2ec:	e0bffc17 	ldw	r2,-16(fp)
  80c2f0:	10c00a04 	addi	r3,r2,40
  80c2f4:	e0bffd17 	ldw	r2,-12(fp)
  80c2f8:	10800217 	ldw	r2,8(r2)
  80c2fc:	100f883a 	mov	r7,r2
  80c300:	e1bfff17 	ldw	r6,-4(fp)
  80c304:	e17ffe17 	ldw	r5,-8(fp)
  80c308:	1809883a 	mov	r4,r3
  80c30c:	080bc0c0 	call	80bc0c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80c310:	e037883a 	mov	sp,fp
  80c314:	dfc00117 	ldw	ra,4(sp)
  80c318:	df000017 	ldw	fp,0(sp)
  80c31c:	dec00204 	addi	sp,sp,8
  80c320:	f800283a 	ret

0080c324 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80c324:	defffa04 	addi	sp,sp,-24
  80c328:	dfc00515 	stw	ra,20(sp)
  80c32c:	df000415 	stw	fp,16(sp)
  80c330:	df000404 	addi	fp,sp,16
  80c334:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80c338:	0007883a 	mov	r3,zero
  80c33c:	e0bfff17 	ldw	r2,-4(fp)
  80c340:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80c344:	e0bfff17 	ldw	r2,-4(fp)
  80c348:	10800104 	addi	r2,r2,4
  80c34c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c350:	0005303a 	rdctl	r2,status
  80c354:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c358:	e0fffd17 	ldw	r3,-12(fp)
  80c35c:	00bfff84 	movi	r2,-2
  80c360:	1884703a 	and	r2,r3,r2
  80c364:	1001703a 	wrctl	status,r2
  
  return context;
  80c368:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80c36c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80c370:	080a6a00 	call	80a6a0 <alt_tick>
  80c374:	e0bffc17 	ldw	r2,-16(fp)
  80c378:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c37c:	e0bffe17 	ldw	r2,-8(fp)
  80c380:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80c384:	0001883a 	nop
  80c388:	e037883a 	mov	sp,fp
  80c38c:	dfc00117 	ldw	ra,4(sp)
  80c390:	df000017 	ldw	fp,0(sp)
  80c394:	dec00204 	addi	sp,sp,8
  80c398:	f800283a 	ret

0080c39c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80c39c:	defff804 	addi	sp,sp,-32
  80c3a0:	dfc00715 	stw	ra,28(sp)
  80c3a4:	df000615 	stw	fp,24(sp)
  80c3a8:	df000604 	addi	fp,sp,24
  80c3ac:	e13ffc15 	stw	r4,-16(fp)
  80c3b0:	e17ffd15 	stw	r5,-12(fp)
  80c3b4:	e1bffe15 	stw	r6,-8(fp)
  80c3b8:	e1ffff15 	stw	r7,-4(fp)
  80c3bc:	e0bfff17 	ldw	r2,-4(fp)
  80c3c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80c3c4:	d0a72e17 	ldw	r2,-25416(gp)
  80c3c8:	1000021e 	bne	r2,zero,80c3d4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80c3cc:	e0bffb17 	ldw	r2,-20(fp)
  80c3d0:	d0a72e15 	stw	r2,-25416(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80c3d4:	e0bffc17 	ldw	r2,-16(fp)
  80c3d8:	10800104 	addi	r2,r2,4
  80c3dc:	00c001c4 	movi	r3,7
  80c3e0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80c3e4:	d8000015 	stw	zero,0(sp)
  80c3e8:	e1fffc17 	ldw	r7,-16(fp)
  80c3ec:	01802074 	movhi	r6,129
  80c3f0:	31b0c904 	addi	r6,r6,-15580
  80c3f4:	e17ffe17 	ldw	r5,-8(fp)
  80c3f8:	e13ffd17 	ldw	r4,-12(fp)
  80c3fc:	080d1480 	call	80d148 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80c400:	0001883a 	nop
  80c404:	e037883a 	mov	sp,fp
  80c408:	dfc00117 	ldw	ra,4(sp)
  80c40c:	df000017 	ldw	fp,0(sp)
  80c410:	dec00204 	addi	sp,sp,8
  80c414:	f800283a 	ret

0080c418 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80c418:	defffa04 	addi	sp,sp,-24
  80c41c:	dfc00515 	stw	ra,20(sp)
  80c420:	df000415 	stw	fp,16(sp)
  80c424:	df000404 	addi	fp,sp,16
  80c428:	e13ffd15 	stw	r4,-12(fp)
  80c42c:	e17ffe15 	stw	r5,-8(fp)
  80c430:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80c434:	e0bffd17 	ldw	r2,-12(fp)
  80c438:	10800017 	ldw	r2,0(r2)
  80c43c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80c440:	e0bffc17 	ldw	r2,-16(fp)
  80c444:	10c00a04 	addi	r3,r2,40
  80c448:	e0bffd17 	ldw	r2,-12(fp)
  80c44c:	10800217 	ldw	r2,8(r2)
  80c450:	100f883a 	mov	r7,r2
  80c454:	e1bfff17 	ldw	r6,-4(fp)
  80c458:	e17ffe17 	ldw	r5,-8(fp)
  80c45c:	1809883a 	mov	r4,r3
  80c460:	080c92c0 	call	80c92c <altera_avalon_uart_read>
      fd->fd_flags);
}
  80c464:	e037883a 	mov	sp,fp
  80c468:	dfc00117 	ldw	ra,4(sp)
  80c46c:	df000017 	ldw	fp,0(sp)
  80c470:	dec00204 	addi	sp,sp,8
  80c474:	f800283a 	ret

0080c478 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80c478:	defffa04 	addi	sp,sp,-24
  80c47c:	dfc00515 	stw	ra,20(sp)
  80c480:	df000415 	stw	fp,16(sp)
  80c484:	df000404 	addi	fp,sp,16
  80c488:	e13ffd15 	stw	r4,-12(fp)
  80c48c:	e17ffe15 	stw	r5,-8(fp)
  80c490:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80c494:	e0bffd17 	ldw	r2,-12(fp)
  80c498:	10800017 	ldw	r2,0(r2)
  80c49c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80c4a0:	e0bffc17 	ldw	r2,-16(fp)
  80c4a4:	10c00a04 	addi	r3,r2,40
  80c4a8:	e0bffd17 	ldw	r2,-12(fp)
  80c4ac:	10800217 	ldw	r2,8(r2)
  80c4b0:	100f883a 	mov	r7,r2
  80c4b4:	e1bfff17 	ldw	r6,-4(fp)
  80c4b8:	e17ffe17 	ldw	r5,-8(fp)
  80c4bc:	1809883a 	mov	r4,r3
  80c4c0:	080cb440 	call	80cb44 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80c4c4:	e037883a 	mov	sp,fp
  80c4c8:	dfc00117 	ldw	ra,4(sp)
  80c4cc:	df000017 	ldw	fp,0(sp)
  80c4d0:	dec00204 	addi	sp,sp,8
  80c4d4:	f800283a 	ret

0080c4d8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80c4d8:	defffc04 	addi	sp,sp,-16
  80c4dc:	dfc00315 	stw	ra,12(sp)
  80c4e0:	df000215 	stw	fp,8(sp)
  80c4e4:	df000204 	addi	fp,sp,8
  80c4e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80c4ec:	e0bfff17 	ldw	r2,-4(fp)
  80c4f0:	10800017 	ldw	r2,0(r2)
  80c4f4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80c4f8:	e0bffe17 	ldw	r2,-8(fp)
  80c4fc:	10c00a04 	addi	r3,r2,40
  80c500:	e0bfff17 	ldw	r2,-4(fp)
  80c504:	10800217 	ldw	r2,8(r2)
  80c508:	100b883a 	mov	r5,r2
  80c50c:	1809883a 	mov	r4,r3
  80c510:	080c89c0 	call	80c89c <altera_avalon_uart_close>
}
  80c514:	e037883a 	mov	sp,fp
  80c518:	dfc00117 	ldw	ra,4(sp)
  80c51c:	df000017 	ldw	fp,0(sp)
  80c520:	dec00204 	addi	sp,sp,8
  80c524:	f800283a 	ret

0080c528 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80c528:	defff804 	addi	sp,sp,-32
  80c52c:	dfc00715 	stw	ra,28(sp)
  80c530:	df000615 	stw	fp,24(sp)
  80c534:	df000604 	addi	fp,sp,24
  80c538:	e13ffd15 	stw	r4,-12(fp)
  80c53c:	e17ffe15 	stw	r5,-8(fp)
  80c540:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80c544:	e0bffd17 	ldw	r2,-12(fp)
  80c548:	10800017 	ldw	r2,0(r2)
  80c54c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80c550:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80c554:	1000041e 	bne	r2,zero,80c568 <altera_avalon_uart_init+0x40>
  80c558:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80c55c:	1000021e 	bne	r2,zero,80c568 <altera_avalon_uart_init+0x40>
  80c560:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80c564:	10000226 	beq	r2,zero,80c570 <altera_avalon_uart_init+0x48>
  80c568:	00800044 	movi	r2,1
  80c56c:	00000106 	br	80c574 <altera_avalon_uart_init+0x4c>
  80c570:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80c574:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80c578:	e0bffc17 	ldw	r2,-16(fp)
  80c57c:	10000f1e 	bne	r2,zero,80c5bc <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80c580:	e0bffd17 	ldw	r2,-12(fp)
  80c584:	00c32004 	movi	r3,3200
  80c588:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80c58c:	e0bffb17 	ldw	r2,-20(fp)
  80c590:	10800304 	addi	r2,r2,12
  80c594:	e0fffd17 	ldw	r3,-12(fp)
  80c598:	18c00117 	ldw	r3,4(r3)
  80c59c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80c5a0:	d8000015 	stw	zero,0(sp)
  80c5a4:	e1fffd17 	ldw	r7,-12(fp)
  80c5a8:	01802074 	movhi	r6,129
  80c5ac:	31b17504 	addi	r6,r6,-14892
  80c5b0:	e17fff17 	ldw	r5,-4(fp)
  80c5b4:	e13ffe17 	ldw	r4,-8(fp)
  80c5b8:	080d1480 	call	80d148 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80c5bc:	0001883a 	nop
  80c5c0:	e037883a 	mov	sp,fp
  80c5c4:	dfc00117 	ldw	ra,4(sp)
  80c5c8:	df000017 	ldw	fp,0(sp)
  80c5cc:	dec00204 	addi	sp,sp,8
  80c5d0:	f800283a 	ret

0080c5d4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80c5d4:	defffa04 	addi	sp,sp,-24
  80c5d8:	dfc00515 	stw	ra,20(sp)
  80c5dc:	df000415 	stw	fp,16(sp)
  80c5e0:	df000404 	addi	fp,sp,16
  80c5e4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80c5e8:	e0bfff17 	ldw	r2,-4(fp)
  80c5ec:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80c5f0:	e0bffc17 	ldw	r2,-16(fp)
  80c5f4:	10800017 	ldw	r2,0(r2)
  80c5f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80c5fc:	e0bffd17 	ldw	r2,-12(fp)
  80c600:	10800204 	addi	r2,r2,8
  80c604:	10800037 	ldwio	r2,0(r2)
  80c608:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80c60c:	e0bffd17 	ldw	r2,-12(fp)
  80c610:	10800204 	addi	r2,r2,8
  80c614:	0007883a 	mov	r3,zero
  80c618:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80c61c:	e0bffd17 	ldw	r2,-12(fp)
  80c620:	10800204 	addi	r2,r2,8
  80c624:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80c628:	e0bffe17 	ldw	r2,-8(fp)
  80c62c:	1080200c 	andi	r2,r2,128
  80c630:	10000326 	beq	r2,zero,80c640 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80c634:	e17ffe17 	ldw	r5,-8(fp)
  80c638:	e13ffc17 	ldw	r4,-16(fp)
  80c63c:	080c6700 	call	80c670 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80c640:	e0bffe17 	ldw	r2,-8(fp)
  80c644:	1081100c 	andi	r2,r2,1088
  80c648:	10000326 	beq	r2,zero,80c658 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80c64c:	e17ffe17 	ldw	r5,-8(fp)
  80c650:	e13ffc17 	ldw	r4,-16(fp)
  80c654:	080c7540 	call	80c754 <altera_avalon_uart_txirq>
  }
  

}
  80c658:	0001883a 	nop
  80c65c:	e037883a 	mov	sp,fp
  80c660:	dfc00117 	ldw	ra,4(sp)
  80c664:	df000017 	ldw	fp,0(sp)
  80c668:	dec00204 	addi	sp,sp,8
  80c66c:	f800283a 	ret

0080c670 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80c670:	defffc04 	addi	sp,sp,-16
  80c674:	df000315 	stw	fp,12(sp)
  80c678:	df000304 	addi	fp,sp,12
  80c67c:	e13ffe15 	stw	r4,-8(fp)
  80c680:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80c684:	e0bfff17 	ldw	r2,-4(fp)
  80c688:	108000cc 	andi	r2,r2,3
  80c68c:	10002c1e 	bne	r2,zero,80c740 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80c690:	e0bffe17 	ldw	r2,-8(fp)
  80c694:	10800317 	ldw	r2,12(r2)
  80c698:	e0bffe17 	ldw	r2,-8(fp)
  80c69c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80c6a0:	e0bffe17 	ldw	r2,-8(fp)
  80c6a4:	10800317 	ldw	r2,12(r2)
  80c6a8:	10800044 	addi	r2,r2,1
  80c6ac:	10800fcc 	andi	r2,r2,63
  80c6b0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80c6b4:	e0bffe17 	ldw	r2,-8(fp)
  80c6b8:	10800317 	ldw	r2,12(r2)
  80c6bc:	e0fffe17 	ldw	r3,-8(fp)
  80c6c0:	18c00017 	ldw	r3,0(r3)
  80c6c4:	18c00037 	ldwio	r3,0(r3)
  80c6c8:	1809883a 	mov	r4,r3
  80c6cc:	e0fffe17 	ldw	r3,-8(fp)
  80c6d0:	1885883a 	add	r2,r3,r2
  80c6d4:	10800704 	addi	r2,r2,28
  80c6d8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80c6dc:	e0bffe17 	ldw	r2,-8(fp)
  80c6e0:	e0fffd17 	ldw	r3,-12(fp)
  80c6e4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80c6e8:	e0bffe17 	ldw	r2,-8(fp)
  80c6ec:	10800317 	ldw	r2,12(r2)
  80c6f0:	10800044 	addi	r2,r2,1
  80c6f4:	10800fcc 	andi	r2,r2,63
  80c6f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80c6fc:	e0bffe17 	ldw	r2,-8(fp)
  80c700:	10c00217 	ldw	r3,8(r2)
  80c704:	e0bffd17 	ldw	r2,-12(fp)
  80c708:	18800e1e 	bne	r3,r2,80c744 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80c70c:	e0bffe17 	ldw	r2,-8(fp)
  80c710:	10c00117 	ldw	r3,4(r2)
  80c714:	00bfdfc4 	movi	r2,-129
  80c718:	1886703a 	and	r3,r3,r2
  80c71c:	e0bffe17 	ldw	r2,-8(fp)
  80c720:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80c724:	e0bffe17 	ldw	r2,-8(fp)
  80c728:	10800017 	ldw	r2,0(r2)
  80c72c:	10800304 	addi	r2,r2,12
  80c730:	e0fffe17 	ldw	r3,-8(fp)
  80c734:	18c00117 	ldw	r3,4(r3)
  80c738:	10c00035 	stwio	r3,0(r2)
  80c73c:	00000106 	br	80c744 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80c740:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80c744:	e037883a 	mov	sp,fp
  80c748:	df000017 	ldw	fp,0(sp)
  80c74c:	dec00104 	addi	sp,sp,4
  80c750:	f800283a 	ret

0080c754 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80c754:	defffb04 	addi	sp,sp,-20
  80c758:	df000415 	stw	fp,16(sp)
  80c75c:	df000404 	addi	fp,sp,16
  80c760:	e13ffc15 	stw	r4,-16(fp)
  80c764:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80c768:	e0bffc17 	ldw	r2,-16(fp)
  80c76c:	10c00417 	ldw	r3,16(r2)
  80c770:	e0bffc17 	ldw	r2,-16(fp)
  80c774:	10800517 	ldw	r2,20(r2)
  80c778:	18803226 	beq	r3,r2,80c844 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80c77c:	e0bffc17 	ldw	r2,-16(fp)
  80c780:	10800617 	ldw	r2,24(r2)
  80c784:	1080008c 	andi	r2,r2,2
  80c788:	10000326 	beq	r2,zero,80c798 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80c78c:	e0bffd17 	ldw	r2,-12(fp)
  80c790:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80c794:	10001d26 	beq	r2,zero,80c80c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80c798:	e0bffc17 	ldw	r2,-16(fp)
  80c79c:	10800417 	ldw	r2,16(r2)
  80c7a0:	e0bffc17 	ldw	r2,-16(fp)
  80c7a4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80c7a8:	e0bffc17 	ldw	r2,-16(fp)
  80c7ac:	10800017 	ldw	r2,0(r2)
  80c7b0:	10800104 	addi	r2,r2,4
  80c7b4:	e0fffc17 	ldw	r3,-16(fp)
  80c7b8:	18c00417 	ldw	r3,16(r3)
  80c7bc:	e13ffc17 	ldw	r4,-16(fp)
  80c7c0:	20c7883a 	add	r3,r4,r3
  80c7c4:	18c01704 	addi	r3,r3,92
  80c7c8:	18c00003 	ldbu	r3,0(r3)
  80c7cc:	18c03fcc 	andi	r3,r3,255
  80c7d0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80c7d4:	e0bffc17 	ldw	r2,-16(fp)
  80c7d8:	10800417 	ldw	r2,16(r2)
  80c7dc:	10800044 	addi	r2,r2,1
  80c7e0:	e0fffc17 	ldw	r3,-16(fp)
  80c7e4:	18800415 	stw	r2,16(r3)
  80c7e8:	10c00fcc 	andi	r3,r2,63
  80c7ec:	e0bffc17 	ldw	r2,-16(fp)
  80c7f0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80c7f4:	e0bffc17 	ldw	r2,-16(fp)
  80c7f8:	10800117 	ldw	r2,4(r2)
  80c7fc:	10c01014 	ori	r3,r2,64
  80c800:	e0bffc17 	ldw	r2,-16(fp)
  80c804:	10c00115 	stw	r3,4(r2)
  80c808:	00000e06 	br	80c844 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80c80c:	e0bffc17 	ldw	r2,-16(fp)
  80c810:	10800017 	ldw	r2,0(r2)
  80c814:	10800204 	addi	r2,r2,8
  80c818:	10800037 	ldwio	r2,0(r2)
  80c81c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80c820:	e0bffd17 	ldw	r2,-12(fp)
  80c824:	1082000c 	andi	r2,r2,2048
  80c828:	1000061e 	bne	r2,zero,80c844 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80c82c:	e0bffc17 	ldw	r2,-16(fp)
  80c830:	10c00117 	ldw	r3,4(r2)
  80c834:	00bfefc4 	movi	r2,-65
  80c838:	1886703a 	and	r3,r3,r2
  80c83c:	e0bffc17 	ldw	r2,-16(fp)
  80c840:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80c844:	e0bffc17 	ldw	r2,-16(fp)
  80c848:	10c00417 	ldw	r3,16(r2)
  80c84c:	e0bffc17 	ldw	r2,-16(fp)
  80c850:	10800517 	ldw	r2,20(r2)
  80c854:	1880061e 	bne	r3,r2,80c870 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80c858:	e0bffc17 	ldw	r2,-16(fp)
  80c85c:	10c00117 	ldw	r3,4(r2)
  80c860:	00beefc4 	movi	r2,-1089
  80c864:	1886703a 	and	r3,r3,r2
  80c868:	e0bffc17 	ldw	r2,-16(fp)
  80c86c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80c870:	e0bffc17 	ldw	r2,-16(fp)
  80c874:	10800017 	ldw	r2,0(r2)
  80c878:	10800304 	addi	r2,r2,12
  80c87c:	e0fffc17 	ldw	r3,-16(fp)
  80c880:	18c00117 	ldw	r3,4(r3)
  80c884:	10c00035 	stwio	r3,0(r2)
}
  80c888:	0001883a 	nop
  80c88c:	e037883a 	mov	sp,fp
  80c890:	df000017 	ldw	fp,0(sp)
  80c894:	dec00104 	addi	sp,sp,4
  80c898:	f800283a 	ret

0080c89c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80c89c:	defffd04 	addi	sp,sp,-12
  80c8a0:	df000215 	stw	fp,8(sp)
  80c8a4:	df000204 	addi	fp,sp,8
  80c8a8:	e13ffe15 	stw	r4,-8(fp)
  80c8ac:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80c8b0:	00000506 	br	80c8c8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80c8b4:	e0bfff17 	ldw	r2,-4(fp)
  80c8b8:	1090000c 	andi	r2,r2,16384
  80c8bc:	10000226 	beq	r2,zero,80c8c8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80c8c0:	00bffd44 	movi	r2,-11
  80c8c4:	00000606 	br	80c8e0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80c8c8:	e0bffe17 	ldw	r2,-8(fp)
  80c8cc:	10c00417 	ldw	r3,16(r2)
  80c8d0:	e0bffe17 	ldw	r2,-8(fp)
  80c8d4:	10800517 	ldw	r2,20(r2)
  80c8d8:	18bff61e 	bne	r3,r2,80c8b4 <__alt_mem_onchip_mem+0xff8048b4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c8dc:	0005883a 	mov	r2,zero
}
  80c8e0:	e037883a 	mov	sp,fp
  80c8e4:	df000017 	ldw	fp,0(sp)
  80c8e8:	dec00104 	addi	sp,sp,4
  80c8ec:	f800283a 	ret

0080c8f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c8f0:	defffe04 	addi	sp,sp,-8
  80c8f4:	dfc00115 	stw	ra,4(sp)
  80c8f8:	df000015 	stw	fp,0(sp)
  80c8fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c900:	d0a00917 	ldw	r2,-32732(gp)
  80c904:	10000326 	beq	r2,zero,80c914 <alt_get_errno+0x24>
  80c908:	d0a00917 	ldw	r2,-32732(gp)
  80c90c:	103ee83a 	callr	r2
  80c910:	00000106 	br	80c918 <alt_get_errno+0x28>
  80c914:	d0a72704 	addi	r2,gp,-25444
}
  80c918:	e037883a 	mov	sp,fp
  80c91c:	dfc00117 	ldw	ra,4(sp)
  80c920:	df000017 	ldw	fp,0(sp)
  80c924:	dec00204 	addi	sp,sp,8
  80c928:	f800283a 	ret

0080c92c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80c92c:	defff204 	addi	sp,sp,-56
  80c930:	dfc00d15 	stw	ra,52(sp)
  80c934:	df000c15 	stw	fp,48(sp)
  80c938:	df000c04 	addi	fp,sp,48
  80c93c:	e13ffc15 	stw	r4,-16(fp)
  80c940:	e17ffd15 	stw	r5,-12(fp)
  80c944:	e1bffe15 	stw	r6,-8(fp)
  80c948:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80c94c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80c950:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80c954:	e0bfff17 	ldw	r2,-4(fp)
  80c958:	1090000c 	andi	r2,r2,16384
  80c95c:	1005003a 	cmpeq	r2,r2,zero
  80c960:	10803fcc 	andi	r2,r2,255
  80c964:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80c968:	00001306 	br	80c9b8 <altera_avalon_uart_read+0x8c>
    {
      count++;
  80c96c:	e0bff517 	ldw	r2,-44(fp)
  80c970:	10800044 	addi	r2,r2,1
  80c974:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80c978:	e0bffd17 	ldw	r2,-12(fp)
  80c97c:	10c00044 	addi	r3,r2,1
  80c980:	e0fffd15 	stw	r3,-12(fp)
  80c984:	e0fffc17 	ldw	r3,-16(fp)
  80c988:	18c00217 	ldw	r3,8(r3)
  80c98c:	e13ffc17 	ldw	r4,-16(fp)
  80c990:	20c7883a 	add	r3,r4,r3
  80c994:	18c00704 	addi	r3,r3,28
  80c998:	18c00003 	ldbu	r3,0(r3)
  80c99c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80c9a0:	e0bffc17 	ldw	r2,-16(fp)
  80c9a4:	10800217 	ldw	r2,8(r2)
  80c9a8:	10800044 	addi	r2,r2,1
  80c9ac:	10c00fcc 	andi	r3,r2,63
  80c9b0:	e0bffc17 	ldw	r2,-16(fp)
  80c9b4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80c9b8:	e0fff517 	ldw	r3,-44(fp)
  80c9bc:	e0bffe17 	ldw	r2,-8(fp)
  80c9c0:	1880050e 	bge	r3,r2,80c9d8 <altera_avalon_uart_read+0xac>
  80c9c4:	e0bffc17 	ldw	r2,-16(fp)
  80c9c8:	10c00217 	ldw	r3,8(r2)
  80c9cc:	e0bffc17 	ldw	r2,-16(fp)
  80c9d0:	10800317 	ldw	r2,12(r2)
  80c9d4:	18bfe51e 	bne	r3,r2,80c96c <__alt_mem_onchip_mem+0xff80496c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80c9d8:	e0bff517 	ldw	r2,-44(fp)
  80c9dc:	1000251e 	bne	r2,zero,80ca74 <altera_avalon_uart_read+0x148>
  80c9e0:	e0bffc17 	ldw	r2,-16(fp)
  80c9e4:	10c00217 	ldw	r3,8(r2)
  80c9e8:	e0bffc17 	ldw	r2,-16(fp)
  80c9ec:	10800317 	ldw	r2,12(r2)
  80c9f0:	1880201e 	bne	r3,r2,80ca74 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80c9f4:	e0bff617 	ldw	r2,-40(fp)
  80c9f8:	1000071e 	bne	r2,zero,80ca18 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80c9fc:	080c8f00 	call	80c8f0 <alt_get_errno>
  80ca00:	1007883a 	mov	r3,r2
  80ca04:	008002c4 	movi	r2,11
  80ca08:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80ca0c:	00800044 	movi	r2,1
  80ca10:	e0bff405 	stb	r2,-48(fp)
        break;
  80ca14:	00001b06 	br	80ca84 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ca18:	0005303a 	rdctl	r2,status
  80ca1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ca20:	e0fff917 	ldw	r3,-28(fp)
  80ca24:	00bfff84 	movi	r2,-2
  80ca28:	1884703a 	and	r2,r3,r2
  80ca2c:	1001703a 	wrctl	status,r2
  
  return context;
  80ca30:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80ca34:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80ca38:	e0bffc17 	ldw	r2,-16(fp)
  80ca3c:	10800117 	ldw	r2,4(r2)
  80ca40:	10c02014 	ori	r3,r2,128
  80ca44:	e0bffc17 	ldw	r2,-16(fp)
  80ca48:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80ca4c:	e0bffc17 	ldw	r2,-16(fp)
  80ca50:	10800017 	ldw	r2,0(r2)
  80ca54:	10800304 	addi	r2,r2,12
  80ca58:	e0fffc17 	ldw	r3,-16(fp)
  80ca5c:	18c00117 	ldw	r3,4(r3)
  80ca60:	10c00035 	stwio	r3,0(r2)
  80ca64:	e0bff817 	ldw	r2,-32(fp)
  80ca68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ca6c:	e0bffa17 	ldw	r2,-24(fp)
  80ca70:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80ca74:	e0bff517 	ldw	r2,-44(fp)
  80ca78:	1000021e 	bne	r2,zero,80ca84 <altera_avalon_uart_read+0x158>
  80ca7c:	e0bffe17 	ldw	r2,-8(fp)
  80ca80:	103fcd1e 	bne	r2,zero,80c9b8 <__alt_mem_onchip_mem+0xff8049b8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ca84:	0005303a 	rdctl	r2,status
  80ca88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ca8c:	e0fffb17 	ldw	r3,-20(fp)
  80ca90:	00bfff84 	movi	r2,-2
  80ca94:	1884703a 	and	r2,r3,r2
  80ca98:	1001703a 	wrctl	status,r2
  
  return context;
  80ca9c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80caa0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80caa4:	e0bffc17 	ldw	r2,-16(fp)
  80caa8:	10800117 	ldw	r2,4(r2)
  80caac:	10c02014 	ori	r3,r2,128
  80cab0:	e0bffc17 	ldw	r2,-16(fp)
  80cab4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80cab8:	e0bffc17 	ldw	r2,-16(fp)
  80cabc:	10800017 	ldw	r2,0(r2)
  80cac0:	10800304 	addi	r2,r2,12
  80cac4:	e0fffc17 	ldw	r3,-16(fp)
  80cac8:	18c00117 	ldw	r3,4(r3)
  80cacc:	10c00035 	stwio	r3,0(r2)
  80cad0:	e0bff817 	ldw	r2,-32(fp)
  80cad4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cad8:	e0bff717 	ldw	r2,-36(fp)
  80cadc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80cae0:	e0bff403 	ldbu	r2,-48(fp)
  80cae4:	10000226 	beq	r2,zero,80caf0 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80cae8:	00bffd44 	movi	r2,-11
  80caec:	00000106 	br	80caf4 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80caf0:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80caf4:	e037883a 	mov	sp,fp
  80caf8:	dfc00117 	ldw	ra,4(sp)
  80cafc:	df000017 	ldw	fp,0(sp)
  80cb00:	dec00204 	addi	sp,sp,8
  80cb04:	f800283a 	ret

0080cb08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cb08:	defffe04 	addi	sp,sp,-8
  80cb0c:	dfc00115 	stw	ra,4(sp)
  80cb10:	df000015 	stw	fp,0(sp)
  80cb14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80cb18:	d0a00917 	ldw	r2,-32732(gp)
  80cb1c:	10000326 	beq	r2,zero,80cb2c <alt_get_errno+0x24>
  80cb20:	d0a00917 	ldw	r2,-32732(gp)
  80cb24:	103ee83a 	callr	r2
  80cb28:	00000106 	br	80cb30 <alt_get_errno+0x28>
  80cb2c:	d0a72704 	addi	r2,gp,-25444
}
  80cb30:	e037883a 	mov	sp,fp
  80cb34:	dfc00117 	ldw	ra,4(sp)
  80cb38:	df000017 	ldw	fp,0(sp)
  80cb3c:	dec00204 	addi	sp,sp,8
  80cb40:	f800283a 	ret

0080cb44 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80cb44:	defff204 	addi	sp,sp,-56
  80cb48:	dfc00d15 	stw	ra,52(sp)
  80cb4c:	df000c15 	stw	fp,48(sp)
  80cb50:	df000c04 	addi	fp,sp,48
  80cb54:	e13ffc15 	stw	r4,-16(fp)
  80cb58:	e17ffd15 	stw	r5,-12(fp)
  80cb5c:	e1bffe15 	stw	r6,-8(fp)
  80cb60:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80cb64:	e0bffe17 	ldw	r2,-8(fp)
  80cb68:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80cb6c:	e0bfff17 	ldw	r2,-4(fp)
  80cb70:	1090000c 	andi	r2,r2,16384
  80cb74:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80cb78:	00003c06 	br	80cc6c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80cb7c:	e0bffc17 	ldw	r2,-16(fp)
  80cb80:	10800517 	ldw	r2,20(r2)
  80cb84:	10800044 	addi	r2,r2,1
  80cb88:	10800fcc 	andi	r2,r2,63
  80cb8c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80cb90:	e0bffc17 	ldw	r2,-16(fp)
  80cb94:	10c00417 	ldw	r3,16(r2)
  80cb98:	e0bff717 	ldw	r2,-36(fp)
  80cb9c:	1880221e 	bne	r3,r2,80cc28 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80cba0:	e0bff517 	ldw	r2,-44(fp)
  80cba4:	10000526 	beq	r2,zero,80cbbc <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80cba8:	080cb080 	call	80cb08 <alt_get_errno>
  80cbac:	1007883a 	mov	r3,r2
  80cbb0:	008002c4 	movi	r2,11
  80cbb4:	18800015 	stw	r2,0(r3)
        break;
  80cbb8:	00002e06 	br	80cc74 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cbbc:	0005303a 	rdctl	r2,status
  80cbc0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cbc4:	e0fff917 	ldw	r3,-28(fp)
  80cbc8:	00bfff84 	movi	r2,-2
  80cbcc:	1884703a 	and	r2,r3,r2
  80cbd0:	1001703a 	wrctl	status,r2
  
  return context;
  80cbd4:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80cbd8:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80cbdc:	e0bffc17 	ldw	r2,-16(fp)
  80cbe0:	10800117 	ldw	r2,4(r2)
  80cbe4:	10c11014 	ori	r3,r2,1088
  80cbe8:	e0bffc17 	ldw	r2,-16(fp)
  80cbec:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80cbf0:	e0bffc17 	ldw	r2,-16(fp)
  80cbf4:	10800017 	ldw	r2,0(r2)
  80cbf8:	10800304 	addi	r2,r2,12
  80cbfc:	e0fffc17 	ldw	r3,-16(fp)
  80cc00:	18c00117 	ldw	r3,4(r3)
  80cc04:	10c00035 	stwio	r3,0(r2)
  80cc08:	e0bff817 	ldw	r2,-32(fp)
  80cc0c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cc10:	e0bff617 	ldw	r2,-40(fp)
  80cc14:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80cc18:	e0bffc17 	ldw	r2,-16(fp)
  80cc1c:	10c00417 	ldw	r3,16(r2)
  80cc20:	e0bff717 	ldw	r2,-36(fp)
  80cc24:	18bffc26 	beq	r3,r2,80cc18 <__alt_mem_onchip_mem+0xff804c18>
      }
    }

    count--;
  80cc28:	e0bff417 	ldw	r2,-48(fp)
  80cc2c:	10bfffc4 	addi	r2,r2,-1
  80cc30:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80cc34:	e0bffc17 	ldw	r2,-16(fp)
  80cc38:	10c00517 	ldw	r3,20(r2)
  80cc3c:	e0bffd17 	ldw	r2,-12(fp)
  80cc40:	11000044 	addi	r4,r2,1
  80cc44:	e13ffd15 	stw	r4,-12(fp)
  80cc48:	10800003 	ldbu	r2,0(r2)
  80cc4c:	1009883a 	mov	r4,r2
  80cc50:	e0bffc17 	ldw	r2,-16(fp)
  80cc54:	10c5883a 	add	r2,r2,r3
  80cc58:	10801704 	addi	r2,r2,92
  80cc5c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80cc60:	e0bffc17 	ldw	r2,-16(fp)
  80cc64:	e0fff717 	ldw	r3,-36(fp)
  80cc68:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80cc6c:	e0bff417 	ldw	r2,-48(fp)
  80cc70:	103fc21e 	bne	r2,zero,80cb7c <__alt_mem_onchip_mem+0xff804b7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cc74:	0005303a 	rdctl	r2,status
  80cc78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cc7c:	e0fffb17 	ldw	r3,-20(fp)
  80cc80:	00bfff84 	movi	r2,-2
  80cc84:	1884703a 	and	r2,r3,r2
  80cc88:	1001703a 	wrctl	status,r2
  
  return context;
  80cc8c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80cc90:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80cc94:	e0bffc17 	ldw	r2,-16(fp)
  80cc98:	10800117 	ldw	r2,4(r2)
  80cc9c:	10c11014 	ori	r3,r2,1088
  80cca0:	e0bffc17 	ldw	r2,-16(fp)
  80cca4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80cca8:	e0bffc17 	ldw	r2,-16(fp)
  80ccac:	10800017 	ldw	r2,0(r2)
  80ccb0:	10800304 	addi	r2,r2,12
  80ccb4:	e0fffc17 	ldw	r3,-16(fp)
  80ccb8:	18c00117 	ldw	r3,4(r3)
  80ccbc:	10c00035 	stwio	r3,0(r2)
  80ccc0:	e0bff817 	ldw	r2,-32(fp)
  80ccc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ccc8:	e0bffa17 	ldw	r2,-24(fp)
  80cccc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80ccd0:	e0fffe17 	ldw	r3,-8(fp)
  80ccd4:	e0bff417 	ldw	r2,-48(fp)
  80ccd8:	1885c83a 	sub	r2,r3,r2
}
  80ccdc:	e037883a 	mov	sp,fp
  80cce0:	dfc00117 	ldw	ra,4(sp)
  80cce4:	df000017 	ldw	fp,0(sp)
  80cce8:	dec00204 	addi	sp,sp,8
  80ccec:	f800283a 	ret

0080ccf0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80ccf0:	defffe04 	addi	sp,sp,-8
  80ccf4:	df000115 	stw	fp,4(sp)
  80ccf8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80ccfc:	e03fff15 	stw	zero,-4(fp)
  80cd00:	00000506 	br	80cd18 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80cd04:	e0bfff17 	ldw	r2,-4(fp)
  80cd08:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80cd0c:	e0bfff17 	ldw	r2,-4(fp)
  80cd10:	10800804 	addi	r2,r2,32
  80cd14:	e0bfff15 	stw	r2,-4(fp)
  80cd18:	e0bfff17 	ldw	r2,-4(fp)
  80cd1c:	10820030 	cmpltui	r2,r2,2048
  80cd20:	103ff81e 	bne	r2,zero,80cd04 <__alt_mem_onchip_mem+0xff804d04>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80cd24:	0001883a 	nop
  80cd28:	e037883a 	mov	sp,fp
  80cd2c:	df000017 	ldw	fp,0(sp)
  80cd30:	dec00104 	addi	sp,sp,4
  80cd34:	f800283a 	ret

0080cd38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cd38:	defffe04 	addi	sp,sp,-8
  80cd3c:	dfc00115 	stw	ra,4(sp)
  80cd40:	df000015 	stw	fp,0(sp)
  80cd44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80cd48:	d0a00917 	ldw	r2,-32732(gp)
  80cd4c:	10000326 	beq	r2,zero,80cd5c <alt_get_errno+0x24>
  80cd50:	d0a00917 	ldw	r2,-32732(gp)
  80cd54:	103ee83a 	callr	r2
  80cd58:	00000106 	br	80cd60 <alt_get_errno+0x28>
  80cd5c:	d0a72704 	addi	r2,gp,-25444
}
  80cd60:	e037883a 	mov	sp,fp
  80cd64:	dfc00117 	ldw	ra,4(sp)
  80cd68:	df000017 	ldw	fp,0(sp)
  80cd6c:	dec00204 	addi	sp,sp,8
  80cd70:	f800283a 	ret

0080cd74 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80cd74:	defffa04 	addi	sp,sp,-24
  80cd78:	dfc00515 	stw	ra,20(sp)
  80cd7c:	df000415 	stw	fp,16(sp)
  80cd80:	df000404 	addi	fp,sp,16
  80cd84:	e13ffe15 	stw	r4,-8(fp)
  80cd88:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80cd8c:	e0bffe17 	ldw	r2,-8(fp)
  80cd90:	10000326 	beq	r2,zero,80cda0 <alt_dev_llist_insert+0x2c>
  80cd94:	e0bffe17 	ldw	r2,-8(fp)
  80cd98:	10800217 	ldw	r2,8(r2)
  80cd9c:	1000061e 	bne	r2,zero,80cdb8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80cda0:	080cd380 	call	80cd38 <alt_get_errno>
  80cda4:	1007883a 	mov	r3,r2
  80cda8:	00800584 	movi	r2,22
  80cdac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80cdb0:	00bffa84 	movi	r2,-22
  80cdb4:	00001306 	br	80ce04 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80cdb8:	e0bffe17 	ldw	r2,-8(fp)
  80cdbc:	e0ffff17 	ldw	r3,-4(fp)
  80cdc0:	e0fffc15 	stw	r3,-16(fp)
  80cdc4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80cdc8:	e0bffd17 	ldw	r2,-12(fp)
  80cdcc:	e0fffc17 	ldw	r3,-16(fp)
  80cdd0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80cdd4:	e0bffc17 	ldw	r2,-16(fp)
  80cdd8:	10c00017 	ldw	r3,0(r2)
  80cddc:	e0bffd17 	ldw	r2,-12(fp)
  80cde0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80cde4:	e0bffc17 	ldw	r2,-16(fp)
  80cde8:	10800017 	ldw	r2,0(r2)
  80cdec:	e0fffd17 	ldw	r3,-12(fp)
  80cdf0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80cdf4:	e0bffc17 	ldw	r2,-16(fp)
  80cdf8:	e0fffd17 	ldw	r3,-12(fp)
  80cdfc:	10c00015 	stw	r3,0(r2)

  return 0;  
  80ce00:	0005883a 	mov	r2,zero
}
  80ce04:	e037883a 	mov	sp,fp
  80ce08:	dfc00117 	ldw	ra,4(sp)
  80ce0c:	df000017 	ldw	fp,0(sp)
  80ce10:	dec00204 	addi	sp,sp,8
  80ce14:	f800283a 	ret

0080ce18 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80ce18:	defffd04 	addi	sp,sp,-12
  80ce1c:	dfc00215 	stw	ra,8(sp)
  80ce20:	df000115 	stw	fp,4(sp)
  80ce24:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ce28:	00802074 	movhi	r2,129
  80ce2c:	10b70a04 	addi	r2,r2,-9176
  80ce30:	e0bfff15 	stw	r2,-4(fp)
  80ce34:	00000606 	br	80ce50 <_do_ctors+0x38>
        (*ctor) (); 
  80ce38:	e0bfff17 	ldw	r2,-4(fp)
  80ce3c:	10800017 	ldw	r2,0(r2)
  80ce40:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ce44:	e0bfff17 	ldw	r2,-4(fp)
  80ce48:	10bfff04 	addi	r2,r2,-4
  80ce4c:	e0bfff15 	stw	r2,-4(fp)
  80ce50:	e0ffff17 	ldw	r3,-4(fp)
  80ce54:	00802074 	movhi	r2,129
  80ce58:	10b70b04 	addi	r2,r2,-9172
  80ce5c:	18bff62e 	bgeu	r3,r2,80ce38 <__alt_mem_onchip_mem+0xff804e38>
        (*ctor) (); 
}
  80ce60:	0001883a 	nop
  80ce64:	e037883a 	mov	sp,fp
  80ce68:	dfc00117 	ldw	ra,4(sp)
  80ce6c:	df000017 	ldw	fp,0(sp)
  80ce70:	dec00204 	addi	sp,sp,8
  80ce74:	f800283a 	ret

0080ce78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80ce78:	defffd04 	addi	sp,sp,-12
  80ce7c:	dfc00215 	stw	ra,8(sp)
  80ce80:	df000115 	stw	fp,4(sp)
  80ce84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ce88:	00802074 	movhi	r2,129
  80ce8c:	10b70a04 	addi	r2,r2,-9176
  80ce90:	e0bfff15 	stw	r2,-4(fp)
  80ce94:	00000606 	br	80ceb0 <_do_dtors+0x38>
        (*dtor) (); 
  80ce98:	e0bfff17 	ldw	r2,-4(fp)
  80ce9c:	10800017 	ldw	r2,0(r2)
  80cea0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80cea4:	e0bfff17 	ldw	r2,-4(fp)
  80cea8:	10bfff04 	addi	r2,r2,-4
  80ceac:	e0bfff15 	stw	r2,-4(fp)
  80ceb0:	e0ffff17 	ldw	r3,-4(fp)
  80ceb4:	00802074 	movhi	r2,129
  80ceb8:	10b70b04 	addi	r2,r2,-9172
  80cebc:	18bff62e 	bgeu	r3,r2,80ce98 <__alt_mem_onchip_mem+0xff804e98>
        (*dtor) (); 
}
  80cec0:	0001883a 	nop
  80cec4:	e037883a 	mov	sp,fp
  80cec8:	dfc00117 	ldw	ra,4(sp)
  80cecc:	df000017 	ldw	fp,0(sp)
  80ced0:	dec00204 	addi	sp,sp,8
  80ced4:	f800283a 	ret

0080ced8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80ced8:	defffa04 	addi	sp,sp,-24
  80cedc:	dfc00515 	stw	ra,20(sp)
  80cee0:	df000415 	stw	fp,16(sp)
  80cee4:	df000404 	addi	fp,sp,16
  80cee8:	e13ffe15 	stw	r4,-8(fp)
  80ceec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80cef0:	e0bfff17 	ldw	r2,-4(fp)
  80cef4:	10800017 	ldw	r2,0(r2)
  80cef8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80cefc:	e13ffe17 	ldw	r4,-8(fp)
  80cf00:	080d8c80 	call	80d8c8 <strlen>
  80cf04:	10800044 	addi	r2,r2,1
  80cf08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80cf0c:	00000d06 	br	80cf44 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80cf10:	e0bffc17 	ldw	r2,-16(fp)
  80cf14:	10800217 	ldw	r2,8(r2)
  80cf18:	e0fffd17 	ldw	r3,-12(fp)
  80cf1c:	180d883a 	mov	r6,r3
  80cf20:	e17ffe17 	ldw	r5,-8(fp)
  80cf24:	1009883a 	mov	r4,r2
  80cf28:	080d84c0 	call	80d84c <memcmp>
  80cf2c:	1000021e 	bne	r2,zero,80cf38 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80cf30:	e0bffc17 	ldw	r2,-16(fp)
  80cf34:	00000706 	br	80cf54 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80cf38:	e0bffc17 	ldw	r2,-16(fp)
  80cf3c:	10800017 	ldw	r2,0(r2)
  80cf40:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80cf44:	e0fffc17 	ldw	r3,-16(fp)
  80cf48:	e0bfff17 	ldw	r2,-4(fp)
  80cf4c:	18bff01e 	bne	r3,r2,80cf10 <__alt_mem_onchip_mem+0xff804f10>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80cf50:	0005883a 	mov	r2,zero
}
  80cf54:	e037883a 	mov	sp,fp
  80cf58:	dfc00117 	ldw	ra,4(sp)
  80cf5c:	df000017 	ldw	fp,0(sp)
  80cf60:	dec00204 	addi	sp,sp,8
  80cf64:	f800283a 	ret

0080cf68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80cf68:	defffb04 	addi	sp,sp,-20
  80cf6c:	dfc00415 	stw	ra,16(sp)
  80cf70:	df000315 	stw	fp,12(sp)
  80cf74:	df000304 	addi	fp,sp,12
  80cf78:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80cf7c:	d0a00417 	ldw	r2,-32752(gp)
  80cf80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80cf84:	00003106 	br	80d04c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80cf88:	e0bffd17 	ldw	r2,-12(fp)
  80cf8c:	10800217 	ldw	r2,8(r2)
  80cf90:	1009883a 	mov	r4,r2
  80cf94:	080d8c80 	call	80d8c8 <strlen>
  80cf98:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80cf9c:	e0bffd17 	ldw	r2,-12(fp)
  80cfa0:	10c00217 	ldw	r3,8(r2)
  80cfa4:	e0bffe17 	ldw	r2,-8(fp)
  80cfa8:	10bfffc4 	addi	r2,r2,-1
  80cfac:	1885883a 	add	r2,r3,r2
  80cfb0:	10800003 	ldbu	r2,0(r2)
  80cfb4:	10803fcc 	andi	r2,r2,255
  80cfb8:	1080201c 	xori	r2,r2,128
  80cfbc:	10bfe004 	addi	r2,r2,-128
  80cfc0:	10800bd8 	cmpnei	r2,r2,47
  80cfc4:	1000031e 	bne	r2,zero,80cfd4 <alt_find_file+0x6c>
    {
      len -= 1;
  80cfc8:	e0bffe17 	ldw	r2,-8(fp)
  80cfcc:	10bfffc4 	addi	r2,r2,-1
  80cfd0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80cfd4:	e0bffe17 	ldw	r2,-8(fp)
  80cfd8:	e0ffff17 	ldw	r3,-4(fp)
  80cfdc:	1885883a 	add	r2,r3,r2
  80cfe0:	10800003 	ldbu	r2,0(r2)
  80cfe4:	10803fcc 	andi	r2,r2,255
  80cfe8:	1080201c 	xori	r2,r2,128
  80cfec:	10bfe004 	addi	r2,r2,-128
  80cff0:	10800be0 	cmpeqi	r2,r2,47
  80cff4:	1000081e 	bne	r2,zero,80d018 <alt_find_file+0xb0>
  80cff8:	e0bffe17 	ldw	r2,-8(fp)
  80cffc:	e0ffff17 	ldw	r3,-4(fp)
  80d000:	1885883a 	add	r2,r3,r2
  80d004:	10800003 	ldbu	r2,0(r2)
  80d008:	10803fcc 	andi	r2,r2,255
  80d00c:	1080201c 	xori	r2,r2,128
  80d010:	10bfe004 	addi	r2,r2,-128
  80d014:	10000a1e 	bne	r2,zero,80d040 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80d018:	e0bffd17 	ldw	r2,-12(fp)
  80d01c:	10800217 	ldw	r2,8(r2)
  80d020:	e0fffe17 	ldw	r3,-8(fp)
  80d024:	180d883a 	mov	r6,r3
  80d028:	e17fff17 	ldw	r5,-4(fp)
  80d02c:	1009883a 	mov	r4,r2
  80d030:	080d84c0 	call	80d84c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80d034:	1000021e 	bne	r2,zero,80d040 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80d038:	e0bffd17 	ldw	r2,-12(fp)
  80d03c:	00000706 	br	80d05c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80d040:	e0bffd17 	ldw	r2,-12(fp)
  80d044:	10800017 	ldw	r2,0(r2)
  80d048:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80d04c:	e0fffd17 	ldw	r3,-12(fp)
  80d050:	d0a00404 	addi	r2,gp,-32752
  80d054:	18bfcc1e 	bne	r3,r2,80cf88 <__alt_mem_onchip_mem+0xff804f88>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80d058:	0005883a 	mov	r2,zero
}
  80d05c:	e037883a 	mov	sp,fp
  80d060:	dfc00117 	ldw	ra,4(sp)
  80d064:	df000017 	ldw	fp,0(sp)
  80d068:	dec00204 	addi	sp,sp,8
  80d06c:	f800283a 	ret

0080d070 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80d070:	defffc04 	addi	sp,sp,-16
  80d074:	df000315 	stw	fp,12(sp)
  80d078:	df000304 	addi	fp,sp,12
  80d07c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80d080:	00bffa04 	movi	r2,-24
  80d084:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d088:	e03ffd15 	stw	zero,-12(fp)
  80d08c:	00001906 	br	80d0f4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80d090:	00802074 	movhi	r2,129
  80d094:	10ba2604 	addi	r2,r2,-5992
  80d098:	e0fffd17 	ldw	r3,-12(fp)
  80d09c:	18c00324 	muli	r3,r3,12
  80d0a0:	10c5883a 	add	r2,r2,r3
  80d0a4:	10800017 	ldw	r2,0(r2)
  80d0a8:	10000f1e 	bne	r2,zero,80d0e8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80d0ac:	00802074 	movhi	r2,129
  80d0b0:	10ba2604 	addi	r2,r2,-5992
  80d0b4:	e0fffd17 	ldw	r3,-12(fp)
  80d0b8:	18c00324 	muli	r3,r3,12
  80d0bc:	10c5883a 	add	r2,r2,r3
  80d0c0:	e0ffff17 	ldw	r3,-4(fp)
  80d0c4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80d0c8:	d0e00817 	ldw	r3,-32736(gp)
  80d0cc:	e0bffd17 	ldw	r2,-12(fp)
  80d0d0:	1880020e 	bge	r3,r2,80d0dc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80d0d4:	e0bffd17 	ldw	r2,-12(fp)
  80d0d8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  80d0dc:	e0bffd17 	ldw	r2,-12(fp)
  80d0e0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80d0e4:	00000606 	br	80d100 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d0e8:	e0bffd17 	ldw	r2,-12(fp)
  80d0ec:	10800044 	addi	r2,r2,1
  80d0f0:	e0bffd15 	stw	r2,-12(fp)
  80d0f4:	e0bffd17 	ldw	r2,-12(fp)
  80d0f8:	10800810 	cmplti	r2,r2,32
  80d0fc:	103fe41e 	bne	r2,zero,80d090 <__alt_mem_onchip_mem+0xff805090>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80d100:	e0bffe17 	ldw	r2,-8(fp)
}
  80d104:	e037883a 	mov	sp,fp
  80d108:	df000017 	ldw	fp,0(sp)
  80d10c:	dec00104 	addi	sp,sp,4
  80d110:	f800283a 	ret

0080d114 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80d114:	defffe04 	addi	sp,sp,-8
  80d118:	dfc00115 	stw	ra,4(sp)
  80d11c:	df000015 	stw	fp,0(sp)
  80d120:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80d124:	01440004 	movi	r5,4096
  80d128:	0009883a 	mov	r4,zero
  80d12c:	080d6d40 	call	80d6d4 <alt_icache_flush>
#endif
}
  80d130:	0001883a 	nop
  80d134:	e037883a 	mov	sp,fp
  80d138:	dfc00117 	ldw	ra,4(sp)
  80d13c:	df000017 	ldw	fp,0(sp)
  80d140:	dec00204 	addi	sp,sp,8
  80d144:	f800283a 	ret

0080d148 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80d148:	defff904 	addi	sp,sp,-28
  80d14c:	dfc00615 	stw	ra,24(sp)
  80d150:	df000515 	stw	fp,20(sp)
  80d154:	df000504 	addi	fp,sp,20
  80d158:	e13ffc15 	stw	r4,-16(fp)
  80d15c:	e17ffd15 	stw	r5,-12(fp)
  80d160:	e1bffe15 	stw	r6,-8(fp)
  80d164:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80d168:	e0800217 	ldw	r2,8(fp)
  80d16c:	d8800015 	stw	r2,0(sp)
  80d170:	e1ffff17 	ldw	r7,-4(fp)
  80d174:	e1bffe17 	ldw	r6,-8(fp)
  80d178:	e17ffd17 	ldw	r5,-12(fp)
  80d17c:	e13ffc17 	ldw	r4,-16(fp)
  80d180:	080d2f80 	call	80d2f8 <alt_iic_isr_register>
}  
  80d184:	e037883a 	mov	sp,fp
  80d188:	dfc00117 	ldw	ra,4(sp)
  80d18c:	df000017 	ldw	fp,0(sp)
  80d190:	dec00204 	addi	sp,sp,8
  80d194:	f800283a 	ret

0080d198 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80d198:	defff904 	addi	sp,sp,-28
  80d19c:	df000615 	stw	fp,24(sp)
  80d1a0:	df000604 	addi	fp,sp,24
  80d1a4:	e13ffe15 	stw	r4,-8(fp)
  80d1a8:	e17fff15 	stw	r5,-4(fp)
  80d1ac:	e0bfff17 	ldw	r2,-4(fp)
  80d1b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d1b4:	0005303a 	rdctl	r2,status
  80d1b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d1bc:	e0fffb17 	ldw	r3,-20(fp)
  80d1c0:	00bfff84 	movi	r2,-2
  80d1c4:	1884703a 	and	r2,r3,r2
  80d1c8:	1001703a 	wrctl	status,r2
  
  return context;
  80d1cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d1d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80d1d4:	00c00044 	movi	r3,1
  80d1d8:	e0bffa17 	ldw	r2,-24(fp)
  80d1dc:	1884983a 	sll	r2,r3,r2
  80d1e0:	1007883a 	mov	r3,r2
  80d1e4:	d0a73017 	ldw	r2,-25408(gp)
  80d1e8:	1884b03a 	or	r2,r3,r2
  80d1ec:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d1f0:	d0a73017 	ldw	r2,-25408(gp)
  80d1f4:	100170fa 	wrctl	ienable,r2
  80d1f8:	e0bffc17 	ldw	r2,-16(fp)
  80d1fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d200:	e0bffd17 	ldw	r2,-12(fp)
  80d204:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d208:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80d20c:	0001883a 	nop
}
  80d210:	e037883a 	mov	sp,fp
  80d214:	df000017 	ldw	fp,0(sp)
  80d218:	dec00104 	addi	sp,sp,4
  80d21c:	f800283a 	ret

0080d220 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80d220:	defff904 	addi	sp,sp,-28
  80d224:	df000615 	stw	fp,24(sp)
  80d228:	df000604 	addi	fp,sp,24
  80d22c:	e13ffe15 	stw	r4,-8(fp)
  80d230:	e17fff15 	stw	r5,-4(fp)
  80d234:	e0bfff17 	ldw	r2,-4(fp)
  80d238:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d23c:	0005303a 	rdctl	r2,status
  80d240:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d244:	e0fffb17 	ldw	r3,-20(fp)
  80d248:	00bfff84 	movi	r2,-2
  80d24c:	1884703a 	and	r2,r3,r2
  80d250:	1001703a 	wrctl	status,r2
  
  return context;
  80d254:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d258:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80d25c:	00c00044 	movi	r3,1
  80d260:	e0bffa17 	ldw	r2,-24(fp)
  80d264:	1884983a 	sll	r2,r3,r2
  80d268:	0084303a 	nor	r2,zero,r2
  80d26c:	1007883a 	mov	r3,r2
  80d270:	d0a73017 	ldw	r2,-25408(gp)
  80d274:	1884703a 	and	r2,r3,r2
  80d278:	d0a73015 	stw	r2,-25408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d27c:	d0a73017 	ldw	r2,-25408(gp)
  80d280:	100170fa 	wrctl	ienable,r2
  80d284:	e0bffc17 	ldw	r2,-16(fp)
  80d288:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d28c:	e0bffd17 	ldw	r2,-12(fp)
  80d290:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d294:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80d298:	0001883a 	nop
}
  80d29c:	e037883a 	mov	sp,fp
  80d2a0:	df000017 	ldw	fp,0(sp)
  80d2a4:	dec00104 	addi	sp,sp,4
  80d2a8:	f800283a 	ret

0080d2ac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80d2ac:	defffc04 	addi	sp,sp,-16
  80d2b0:	df000315 	stw	fp,12(sp)
  80d2b4:	df000304 	addi	fp,sp,12
  80d2b8:	e13ffe15 	stw	r4,-8(fp)
  80d2bc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80d2c0:	000530fa 	rdctl	r2,ienable
  80d2c4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80d2c8:	00c00044 	movi	r3,1
  80d2cc:	e0bfff17 	ldw	r2,-4(fp)
  80d2d0:	1884983a 	sll	r2,r3,r2
  80d2d4:	1007883a 	mov	r3,r2
  80d2d8:	e0bffd17 	ldw	r2,-12(fp)
  80d2dc:	1884703a 	and	r2,r3,r2
  80d2e0:	1004c03a 	cmpne	r2,r2,zero
  80d2e4:	10803fcc 	andi	r2,r2,255
}
  80d2e8:	e037883a 	mov	sp,fp
  80d2ec:	df000017 	ldw	fp,0(sp)
  80d2f0:	dec00104 	addi	sp,sp,4
  80d2f4:	f800283a 	ret

0080d2f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80d2f8:	defff504 	addi	sp,sp,-44
  80d2fc:	dfc00a15 	stw	ra,40(sp)
  80d300:	df000915 	stw	fp,36(sp)
  80d304:	df000904 	addi	fp,sp,36
  80d308:	e13ffc15 	stw	r4,-16(fp)
  80d30c:	e17ffd15 	stw	r5,-12(fp)
  80d310:	e1bffe15 	stw	r6,-8(fp)
  80d314:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80d318:	00bffa84 	movi	r2,-22
  80d31c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80d320:	e0bffd17 	ldw	r2,-12(fp)
  80d324:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80d328:	e0bff817 	ldw	r2,-32(fp)
  80d32c:	10800808 	cmpgei	r2,r2,32
  80d330:	1000271e 	bne	r2,zero,80d3d0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d334:	0005303a 	rdctl	r2,status
  80d338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d33c:	e0fffb17 	ldw	r3,-20(fp)
  80d340:	00bfff84 	movi	r2,-2
  80d344:	1884703a 	and	r2,r3,r2
  80d348:	1001703a 	wrctl	status,r2
  
  return context;
  80d34c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80d350:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80d354:	00802074 	movhi	r2,129
  80d358:	10865304 	addi	r2,r2,6476
  80d35c:	e0fff817 	ldw	r3,-32(fp)
  80d360:	180690fa 	slli	r3,r3,3
  80d364:	10c5883a 	add	r2,r2,r3
  80d368:	e0fffe17 	ldw	r3,-8(fp)
  80d36c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80d370:	00802074 	movhi	r2,129
  80d374:	10865304 	addi	r2,r2,6476
  80d378:	e0fff817 	ldw	r3,-32(fp)
  80d37c:	180690fa 	slli	r3,r3,3
  80d380:	10c5883a 	add	r2,r2,r3
  80d384:	10800104 	addi	r2,r2,4
  80d388:	e0ffff17 	ldw	r3,-4(fp)
  80d38c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80d390:	e0bffe17 	ldw	r2,-8(fp)
  80d394:	10000526 	beq	r2,zero,80d3ac <alt_iic_isr_register+0xb4>
  80d398:	e0bff817 	ldw	r2,-32(fp)
  80d39c:	100b883a 	mov	r5,r2
  80d3a0:	e13ffc17 	ldw	r4,-16(fp)
  80d3a4:	080d1980 	call	80d198 <alt_ic_irq_enable>
  80d3a8:	00000406 	br	80d3bc <alt_iic_isr_register+0xc4>
  80d3ac:	e0bff817 	ldw	r2,-32(fp)
  80d3b0:	100b883a 	mov	r5,r2
  80d3b4:	e13ffc17 	ldw	r4,-16(fp)
  80d3b8:	080d2200 	call	80d220 <alt_ic_irq_disable>
  80d3bc:	e0bff715 	stw	r2,-36(fp)
  80d3c0:	e0bffa17 	ldw	r2,-24(fp)
  80d3c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d3c8:	e0bff917 	ldw	r2,-28(fp)
  80d3cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80d3d0:	e0bff717 	ldw	r2,-36(fp)
}
  80d3d4:	e037883a 	mov	sp,fp
  80d3d8:	dfc00117 	ldw	ra,4(sp)
  80d3dc:	df000017 	ldw	fp,0(sp)
  80d3e0:	dec00204 	addi	sp,sp,8
  80d3e4:	f800283a 	ret

0080d3e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80d3e8:	defff904 	addi	sp,sp,-28
  80d3ec:	dfc00615 	stw	ra,24(sp)
  80d3f0:	df000515 	stw	fp,20(sp)
  80d3f4:	df000504 	addi	fp,sp,20
  80d3f8:	e13ffc15 	stw	r4,-16(fp)
  80d3fc:	e17ffd15 	stw	r5,-12(fp)
  80d400:	e1bffe15 	stw	r6,-8(fp)
  80d404:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80d408:	e1bfff17 	ldw	r6,-4(fp)
  80d40c:	e17ffe17 	ldw	r5,-8(fp)
  80d410:	e13ffd17 	ldw	r4,-12(fp)
  80d414:	080a2640 	call	80a264 <open>
  80d418:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80d41c:	e0bffb17 	ldw	r2,-20(fp)
  80d420:	10001c16 	blt	r2,zero,80d494 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80d424:	00802074 	movhi	r2,129
  80d428:	10ba2604 	addi	r2,r2,-5992
  80d42c:	e0fffb17 	ldw	r3,-20(fp)
  80d430:	18c00324 	muli	r3,r3,12
  80d434:	10c5883a 	add	r2,r2,r3
  80d438:	10c00017 	ldw	r3,0(r2)
  80d43c:	e0bffc17 	ldw	r2,-16(fp)
  80d440:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80d444:	00802074 	movhi	r2,129
  80d448:	10ba2604 	addi	r2,r2,-5992
  80d44c:	e0fffb17 	ldw	r3,-20(fp)
  80d450:	18c00324 	muli	r3,r3,12
  80d454:	10c5883a 	add	r2,r2,r3
  80d458:	10800104 	addi	r2,r2,4
  80d45c:	10c00017 	ldw	r3,0(r2)
  80d460:	e0bffc17 	ldw	r2,-16(fp)
  80d464:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80d468:	00802074 	movhi	r2,129
  80d46c:	10ba2604 	addi	r2,r2,-5992
  80d470:	e0fffb17 	ldw	r3,-20(fp)
  80d474:	18c00324 	muli	r3,r3,12
  80d478:	10c5883a 	add	r2,r2,r3
  80d47c:	10800204 	addi	r2,r2,8
  80d480:	10c00017 	ldw	r3,0(r2)
  80d484:	e0bffc17 	ldw	r2,-16(fp)
  80d488:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80d48c:	e13ffb17 	ldw	r4,-20(fp)
  80d490:	080a4f00 	call	80a4f0 <alt_release_fd>
  }
} 
  80d494:	0001883a 	nop
  80d498:	e037883a 	mov	sp,fp
  80d49c:	dfc00117 	ldw	ra,4(sp)
  80d4a0:	df000017 	ldw	fp,0(sp)
  80d4a4:	dec00204 	addi	sp,sp,8
  80d4a8:	f800283a 	ret

0080d4ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80d4ac:	defffb04 	addi	sp,sp,-20
  80d4b0:	dfc00415 	stw	ra,16(sp)
  80d4b4:	df000315 	stw	fp,12(sp)
  80d4b8:	df000304 	addi	fp,sp,12
  80d4bc:	e13ffd15 	stw	r4,-12(fp)
  80d4c0:	e17ffe15 	stw	r5,-8(fp)
  80d4c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80d4c8:	01c07fc4 	movi	r7,511
  80d4cc:	01800044 	movi	r6,1
  80d4d0:	e17ffd17 	ldw	r5,-12(fp)
  80d4d4:	01002074 	movhi	r4,129
  80d4d8:	213a2904 	addi	r4,r4,-5980
  80d4dc:	080d3e80 	call	80d3e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80d4e0:	01c07fc4 	movi	r7,511
  80d4e4:	000d883a 	mov	r6,zero
  80d4e8:	e17ffe17 	ldw	r5,-8(fp)
  80d4ec:	01002074 	movhi	r4,129
  80d4f0:	213a2604 	addi	r4,r4,-5992
  80d4f4:	080d3e80 	call	80d3e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80d4f8:	01c07fc4 	movi	r7,511
  80d4fc:	01800044 	movi	r6,1
  80d500:	e17fff17 	ldw	r5,-4(fp)
  80d504:	01002074 	movhi	r4,129
  80d508:	213a2c04 	addi	r4,r4,-5968
  80d50c:	080d3e80 	call	80d3e8 <alt_open_fd>
}  
  80d510:	0001883a 	nop
  80d514:	e037883a 	mov	sp,fp
  80d518:	dfc00117 	ldw	ra,4(sp)
  80d51c:	df000017 	ldw	fp,0(sp)
  80d520:	dec00204 	addi	sp,sp,8
  80d524:	f800283a 	ret

0080d528 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80d528:	defffd04 	addi	sp,sp,-12
  80d52c:	dfc00215 	stw	ra,8(sp)
  80d530:	df000115 	stw	fp,4(sp)
  80d534:	df000104 	addi	fp,sp,4
  80d538:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80d53c:	e13fff17 	ldw	r4,-4(fp)
  80d540:	080d57c0 	call	80d57c <alt_busy_sleep>
}
  80d544:	e037883a 	mov	sp,fp
  80d548:	dfc00117 	ldw	ra,4(sp)
  80d54c:	df000017 	ldw	fp,0(sp)
  80d550:	dec00204 	addi	sp,sp,8
  80d554:	f800283a 	ret

0080d558 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80d558:	deffff04 	addi	sp,sp,-4
  80d55c:	df000015 	stw	fp,0(sp)
  80d560:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80d564:	000170fa 	wrctl	ienable,zero
}
  80d568:	0001883a 	nop
  80d56c:	e037883a 	mov	sp,fp
  80d570:	df000017 	ldw	fp,0(sp)
  80d574:	dec00104 	addi	sp,sp,4
  80d578:	f800283a 	ret

0080d57c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80d57c:	defffa04 	addi	sp,sp,-24
  80d580:	dfc00515 	stw	ra,20(sp)
  80d584:	df000415 	stw	fp,16(sp)
  80d588:	df000404 	addi	fp,sp,16
  80d58c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80d590:	008000c4 	movi	r2,3
  80d594:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80d598:	e0fffd17 	ldw	r3,-12(fp)
  80d59c:	008003f4 	movhi	r2,15
  80d5a0:	10909004 	addi	r2,r2,16960
  80d5a4:	1885383a 	mul	r2,r3,r2
  80d5a8:	100b883a 	mov	r5,r2
  80d5ac:	0100bef4 	movhi	r4,763
  80d5b0:	213c2004 	addi	r4,r4,-3968
  80d5b4:	08099b80 	call	8099b8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80d5b8:	100b883a 	mov	r5,r2
  80d5bc:	01200034 	movhi	r4,32768
  80d5c0:	213fffc4 	addi	r4,r4,-1
  80d5c4:	08099b80 	call	8099b8 <__udivsi3>
  80d5c8:	100b883a 	mov	r5,r2
  80d5cc:	e13fff17 	ldw	r4,-4(fp)
  80d5d0:	08099b80 	call	8099b8 <__udivsi3>
  80d5d4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80d5d8:	e0bffe17 	ldw	r2,-8(fp)
  80d5dc:	10002a26 	beq	r2,zero,80d688 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80d5e0:	e03ffc15 	stw	zero,-16(fp)
  80d5e4:	00001706 	br	80d644 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80d5e8:	00a00034 	movhi	r2,32768
  80d5ec:	10bfffc4 	addi	r2,r2,-1
  80d5f0:	10bfffc4 	addi	r2,r2,-1
  80d5f4:	103ffe1e 	bne	r2,zero,80d5f0 <__alt_mem_onchip_mem+0xff8055f0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80d5f8:	e0fffd17 	ldw	r3,-12(fp)
  80d5fc:	008003f4 	movhi	r2,15
  80d600:	10909004 	addi	r2,r2,16960
  80d604:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80d608:	100b883a 	mov	r5,r2
  80d60c:	0100bef4 	movhi	r4,763
  80d610:	213c2004 	addi	r4,r4,-3968
  80d614:	08099b80 	call	8099b8 <__udivsi3>
  80d618:	100b883a 	mov	r5,r2
  80d61c:	01200034 	movhi	r4,32768
  80d620:	213fffc4 	addi	r4,r4,-1
  80d624:	08099b80 	call	8099b8 <__udivsi3>
  80d628:	1007883a 	mov	r3,r2
  80d62c:	e0bfff17 	ldw	r2,-4(fp)
  80d630:	10c5c83a 	sub	r2,r2,r3
  80d634:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80d638:	e0bffc17 	ldw	r2,-16(fp)
  80d63c:	10800044 	addi	r2,r2,1
  80d640:	e0bffc15 	stw	r2,-16(fp)
  80d644:	e0fffc17 	ldw	r3,-16(fp)
  80d648:	e0bffe17 	ldw	r2,-8(fp)
  80d64c:	18bfe616 	blt	r3,r2,80d5e8 <__alt_mem_onchip_mem+0xff8055e8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80d650:	e0fffd17 	ldw	r3,-12(fp)
  80d654:	008003f4 	movhi	r2,15
  80d658:	10909004 	addi	r2,r2,16960
  80d65c:	1885383a 	mul	r2,r3,r2
  80d660:	100b883a 	mov	r5,r2
  80d664:	0100bef4 	movhi	r4,763
  80d668:	213c2004 	addi	r4,r4,-3968
  80d66c:	08099b80 	call	8099b8 <__udivsi3>
  80d670:	1007883a 	mov	r3,r2
  80d674:	e0bfff17 	ldw	r2,-4(fp)
  80d678:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80d67c:	10bfffc4 	addi	r2,r2,-1
  80d680:	103ffe1e 	bne	r2,zero,80d67c <__alt_mem_onchip_mem+0xff80567c>
  80d684:	00000d06 	br	80d6bc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80d688:	e0fffd17 	ldw	r3,-12(fp)
  80d68c:	008003f4 	movhi	r2,15
  80d690:	10909004 	addi	r2,r2,16960
  80d694:	1885383a 	mul	r2,r3,r2
  80d698:	100b883a 	mov	r5,r2
  80d69c:	0100bef4 	movhi	r4,763
  80d6a0:	213c2004 	addi	r4,r4,-3968
  80d6a4:	08099b80 	call	8099b8 <__udivsi3>
  80d6a8:	1007883a 	mov	r3,r2
  80d6ac:	e0bfff17 	ldw	r2,-4(fp)
  80d6b0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80d6b4:	10bfffc4 	addi	r2,r2,-1
  80d6b8:	00bffe16 	blt	zero,r2,80d6b4 <__alt_mem_onchip_mem+0xff8056b4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80d6bc:	0005883a 	mov	r2,zero
}
  80d6c0:	e037883a 	mov	sp,fp
  80d6c4:	dfc00117 	ldw	ra,4(sp)
  80d6c8:	df000017 	ldw	fp,0(sp)
  80d6cc:	dec00204 	addi	sp,sp,8
  80d6d0:	f800283a 	ret

0080d6d4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80d6d4:	defffb04 	addi	sp,sp,-20
  80d6d8:	df000415 	stw	fp,16(sp)
  80d6dc:	df000404 	addi	fp,sp,16
  80d6e0:	e13ffe15 	stw	r4,-8(fp)
  80d6e4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80d6e8:	e0bfff17 	ldw	r2,-4(fp)
  80d6ec:	10840070 	cmpltui	r2,r2,4097
  80d6f0:	1000021e 	bne	r2,zero,80d6fc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80d6f4:	00840004 	movi	r2,4096
  80d6f8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80d6fc:	e0fffe17 	ldw	r3,-8(fp)
  80d700:	e0bfff17 	ldw	r2,-4(fp)
  80d704:	1885883a 	add	r2,r3,r2
  80d708:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80d70c:	e0bffe17 	ldw	r2,-8(fp)
  80d710:	e0bffc15 	stw	r2,-16(fp)
  80d714:	00000506 	br	80d72c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80d718:	e0bffc17 	ldw	r2,-16(fp)
  80d71c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80d720:	e0bffc17 	ldw	r2,-16(fp)
  80d724:	10800804 	addi	r2,r2,32
  80d728:	e0bffc15 	stw	r2,-16(fp)
  80d72c:	e0fffc17 	ldw	r3,-16(fp)
  80d730:	e0bffd17 	ldw	r2,-12(fp)
  80d734:	18bff836 	bltu	r3,r2,80d718 <__alt_mem_onchip_mem+0xff805718>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80d738:	e0bffe17 	ldw	r2,-8(fp)
  80d73c:	108007cc 	andi	r2,r2,31
  80d740:	10000226 	beq	r2,zero,80d74c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80d744:	e0bffc17 	ldw	r2,-16(fp)
  80d748:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80d74c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80d750:	0001883a 	nop
  80d754:	e037883a 	mov	sp,fp
  80d758:	df000017 	ldw	fp,0(sp)
  80d75c:	dec00104 	addi	sp,sp,4
  80d760:	f800283a 	ret

0080d764 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80d764:	defffe04 	addi	sp,sp,-8
  80d768:	df000115 	stw	fp,4(sp)
  80d76c:	df000104 	addi	fp,sp,4
  80d770:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80d774:	e0bfff17 	ldw	r2,-4(fp)
  80d778:	10bffe84 	addi	r2,r2,-6
  80d77c:	10c00428 	cmpgeui	r3,r2,16
  80d780:	18001a1e 	bne	r3,zero,80d7ec <alt_exception_cause_generated_bad_addr+0x88>
  80d784:	100690ba 	slli	r3,r2,2
  80d788:	00802074 	movhi	r2,129
  80d78c:	10b5e704 	addi	r2,r2,-10340
  80d790:	1885883a 	add	r2,r3,r2
  80d794:	10800017 	ldw	r2,0(r2)
  80d798:	1000683a 	jmp	r2
  80d79c:	0080d7dc 	xori	r2,zero,863
  80d7a0:	0080d7dc 	xori	r2,zero,863
  80d7a4:	0080d7ec 	andhi	r2,zero,863
  80d7a8:	0080d7ec 	andhi	r2,zero,863
  80d7ac:	0080d7ec 	andhi	r2,zero,863
  80d7b0:	0080d7dc 	xori	r2,zero,863
  80d7b4:	0080d7e4 	muli	r2,zero,863
  80d7b8:	0080d7ec 	andhi	r2,zero,863
  80d7bc:	0080d7dc 	xori	r2,zero,863
  80d7c0:	0080d7dc 	xori	r2,zero,863
  80d7c4:	0080d7ec 	andhi	r2,zero,863
  80d7c8:	0080d7dc 	xori	r2,zero,863
  80d7cc:	0080d7e4 	muli	r2,zero,863
  80d7d0:	0080d7ec 	andhi	r2,zero,863
  80d7d4:	0080d7ec 	andhi	r2,zero,863
  80d7d8:	0080d7dc 	xori	r2,zero,863
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80d7dc:	00800044 	movi	r2,1
  80d7e0:	00000306 	br	80d7f0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80d7e4:	0005883a 	mov	r2,zero
  80d7e8:	00000106 	br	80d7f0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80d7ec:	0005883a 	mov	r2,zero
  }
}
  80d7f0:	e037883a 	mov	sp,fp
  80d7f4:	df000017 	ldw	fp,0(sp)
  80d7f8:	dec00104 	addi	sp,sp,4
  80d7fc:	f800283a 	ret

0080d800 <atexit>:
  80d800:	200b883a 	mov	r5,r4
  80d804:	000f883a 	mov	r7,zero
  80d808:	000d883a 	mov	r6,zero
  80d80c:	0009883a 	mov	r4,zero
  80d810:	080d9601 	jmpi	80d960 <__register_exitproc>

0080d814 <exit>:
  80d814:	defffe04 	addi	sp,sp,-8
  80d818:	000b883a 	mov	r5,zero
  80d81c:	dc000015 	stw	r16,0(sp)
  80d820:	dfc00115 	stw	ra,4(sp)
  80d824:	2021883a 	mov	r16,r4
  80d828:	080da780 	call	80da78 <__call_exitprocs>
  80d82c:	00802074 	movhi	r2,129
  80d830:	10bf1704 	addi	r2,r2,-932
  80d834:	11000017 	ldw	r4,0(r2)
  80d838:	20800f17 	ldw	r2,60(r4)
  80d83c:	10000126 	beq	r2,zero,80d844 <exit+0x30>
  80d840:	103ee83a 	callr	r2
  80d844:	8009883a 	mov	r4,r16
  80d848:	080dbf80 	call	80dbf8 <_exit>

0080d84c <memcmp>:
  80d84c:	01c000c4 	movi	r7,3
  80d850:	3980192e 	bgeu	r7,r6,80d8b8 <memcmp+0x6c>
  80d854:	2144b03a 	or	r2,r4,r5
  80d858:	11c4703a 	and	r2,r2,r7
  80d85c:	10000f26 	beq	r2,zero,80d89c <memcmp+0x50>
  80d860:	20800003 	ldbu	r2,0(r4)
  80d864:	28c00003 	ldbu	r3,0(r5)
  80d868:	10c0151e 	bne	r2,r3,80d8c0 <memcmp+0x74>
  80d86c:	31bfff84 	addi	r6,r6,-2
  80d870:	01ffffc4 	movi	r7,-1
  80d874:	00000406 	br	80d888 <memcmp+0x3c>
  80d878:	20800003 	ldbu	r2,0(r4)
  80d87c:	28c00003 	ldbu	r3,0(r5)
  80d880:	31bfffc4 	addi	r6,r6,-1
  80d884:	10c00e1e 	bne	r2,r3,80d8c0 <memcmp+0x74>
  80d888:	21000044 	addi	r4,r4,1
  80d88c:	29400044 	addi	r5,r5,1
  80d890:	31fff91e 	bne	r6,r7,80d878 <__alt_mem_onchip_mem+0xff805878>
  80d894:	0005883a 	mov	r2,zero
  80d898:	f800283a 	ret
  80d89c:	20c00017 	ldw	r3,0(r4)
  80d8a0:	28800017 	ldw	r2,0(r5)
  80d8a4:	18bfee1e 	bne	r3,r2,80d860 <__alt_mem_onchip_mem+0xff805860>
  80d8a8:	31bfff04 	addi	r6,r6,-4
  80d8ac:	21000104 	addi	r4,r4,4
  80d8b0:	29400104 	addi	r5,r5,4
  80d8b4:	39bff936 	bltu	r7,r6,80d89c <__alt_mem_onchip_mem+0xff80589c>
  80d8b8:	303fe91e 	bne	r6,zero,80d860 <__alt_mem_onchip_mem+0xff805860>
  80d8bc:	003ff506 	br	80d894 <__alt_mem_onchip_mem+0xff805894>
  80d8c0:	10c5c83a 	sub	r2,r2,r3
  80d8c4:	f800283a 	ret

0080d8c8 <strlen>:
  80d8c8:	208000cc 	andi	r2,r4,3
  80d8cc:	10002026 	beq	r2,zero,80d950 <strlen+0x88>
  80d8d0:	20800007 	ldb	r2,0(r4)
  80d8d4:	10002026 	beq	r2,zero,80d958 <strlen+0x90>
  80d8d8:	2005883a 	mov	r2,r4
  80d8dc:	00000206 	br	80d8e8 <strlen+0x20>
  80d8e0:	10c00007 	ldb	r3,0(r2)
  80d8e4:	18001826 	beq	r3,zero,80d948 <strlen+0x80>
  80d8e8:	10800044 	addi	r2,r2,1
  80d8ec:	10c000cc 	andi	r3,r2,3
  80d8f0:	183ffb1e 	bne	r3,zero,80d8e0 <__alt_mem_onchip_mem+0xff8058e0>
  80d8f4:	10c00017 	ldw	r3,0(r2)
  80d8f8:	01ffbff4 	movhi	r7,65279
  80d8fc:	39ffbfc4 	addi	r7,r7,-257
  80d900:	00ca303a 	nor	r5,zero,r3
  80d904:	01a02074 	movhi	r6,32897
  80d908:	19c7883a 	add	r3,r3,r7
  80d90c:	31a02004 	addi	r6,r6,-32640
  80d910:	1946703a 	and	r3,r3,r5
  80d914:	1986703a 	and	r3,r3,r6
  80d918:	1800091e 	bne	r3,zero,80d940 <strlen+0x78>
  80d91c:	10800104 	addi	r2,r2,4
  80d920:	10c00017 	ldw	r3,0(r2)
  80d924:	19cb883a 	add	r5,r3,r7
  80d928:	00c6303a 	nor	r3,zero,r3
  80d92c:	28c6703a 	and	r3,r5,r3
  80d930:	1986703a 	and	r3,r3,r6
  80d934:	183ff926 	beq	r3,zero,80d91c <__alt_mem_onchip_mem+0xff80591c>
  80d938:	00000106 	br	80d940 <strlen+0x78>
  80d93c:	10800044 	addi	r2,r2,1
  80d940:	10c00007 	ldb	r3,0(r2)
  80d944:	183ffd1e 	bne	r3,zero,80d93c <__alt_mem_onchip_mem+0xff80593c>
  80d948:	1105c83a 	sub	r2,r2,r4
  80d94c:	f800283a 	ret
  80d950:	2005883a 	mov	r2,r4
  80d954:	003fe706 	br	80d8f4 <__alt_mem_onchip_mem+0xff8058f4>
  80d958:	0005883a 	mov	r2,zero
  80d95c:	f800283a 	ret

0080d960 <__register_exitproc>:
  80d960:	defffa04 	addi	sp,sp,-24
  80d964:	dc000315 	stw	r16,12(sp)
  80d968:	04002074 	movhi	r16,129
  80d96c:	843f1704 	addi	r16,r16,-932
  80d970:	80c00017 	ldw	r3,0(r16)
  80d974:	dc400415 	stw	r17,16(sp)
  80d978:	dfc00515 	stw	ra,20(sp)
  80d97c:	18805217 	ldw	r2,328(r3)
  80d980:	2023883a 	mov	r17,r4
  80d984:	10003726 	beq	r2,zero,80da64 <__register_exitproc+0x104>
  80d988:	10c00117 	ldw	r3,4(r2)
  80d98c:	010007c4 	movi	r4,31
  80d990:	20c00e16 	blt	r4,r3,80d9cc <__register_exitproc+0x6c>
  80d994:	1a000044 	addi	r8,r3,1
  80d998:	8800221e 	bne	r17,zero,80da24 <__register_exitproc+0xc4>
  80d99c:	18c00084 	addi	r3,r3,2
  80d9a0:	18c7883a 	add	r3,r3,r3
  80d9a4:	18c7883a 	add	r3,r3,r3
  80d9a8:	12000115 	stw	r8,4(r2)
  80d9ac:	10c7883a 	add	r3,r2,r3
  80d9b0:	19400015 	stw	r5,0(r3)
  80d9b4:	0005883a 	mov	r2,zero
  80d9b8:	dfc00517 	ldw	ra,20(sp)
  80d9bc:	dc400417 	ldw	r17,16(sp)
  80d9c0:	dc000317 	ldw	r16,12(sp)
  80d9c4:	dec00604 	addi	sp,sp,24
  80d9c8:	f800283a 	ret
  80d9cc:	00800034 	movhi	r2,0
  80d9d0:	10800004 	addi	r2,r2,0
  80d9d4:	10002626 	beq	r2,zero,80da70 <__register_exitproc+0x110>
  80d9d8:	01006404 	movi	r4,400
  80d9dc:	d9400015 	stw	r5,0(sp)
  80d9e0:	d9800115 	stw	r6,4(sp)
  80d9e4:	d9c00215 	stw	r7,8(sp)
  80d9e8:	00000000 	call	0 <__reset-0x800000>
  80d9ec:	d9400017 	ldw	r5,0(sp)
  80d9f0:	d9800117 	ldw	r6,4(sp)
  80d9f4:	d9c00217 	ldw	r7,8(sp)
  80d9f8:	10001d26 	beq	r2,zero,80da70 <__register_exitproc+0x110>
  80d9fc:	81000017 	ldw	r4,0(r16)
  80da00:	10000115 	stw	zero,4(r2)
  80da04:	02000044 	movi	r8,1
  80da08:	22405217 	ldw	r9,328(r4)
  80da0c:	0007883a 	mov	r3,zero
  80da10:	12400015 	stw	r9,0(r2)
  80da14:	20805215 	stw	r2,328(r4)
  80da18:	10006215 	stw	zero,392(r2)
  80da1c:	10006315 	stw	zero,396(r2)
  80da20:	883fde26 	beq	r17,zero,80d99c <__alt_mem_onchip_mem+0xff80599c>
  80da24:	18c9883a 	add	r4,r3,r3
  80da28:	2109883a 	add	r4,r4,r4
  80da2c:	1109883a 	add	r4,r2,r4
  80da30:	21802215 	stw	r6,136(r4)
  80da34:	01800044 	movi	r6,1
  80da38:	12406217 	ldw	r9,392(r2)
  80da3c:	30cc983a 	sll	r6,r6,r3
  80da40:	4992b03a 	or	r9,r9,r6
  80da44:	12406215 	stw	r9,392(r2)
  80da48:	21c04215 	stw	r7,264(r4)
  80da4c:	01000084 	movi	r4,2
  80da50:	893fd21e 	bne	r17,r4,80d99c <__alt_mem_onchip_mem+0xff80599c>
  80da54:	11006317 	ldw	r4,396(r2)
  80da58:	218cb03a 	or	r6,r4,r6
  80da5c:	11806315 	stw	r6,396(r2)
  80da60:	003fce06 	br	80d99c <__alt_mem_onchip_mem+0xff80599c>
  80da64:	18805304 	addi	r2,r3,332
  80da68:	18805215 	stw	r2,328(r3)
  80da6c:	003fc606 	br	80d988 <__alt_mem_onchip_mem+0xff805988>
  80da70:	00bfffc4 	movi	r2,-1
  80da74:	003fd006 	br	80d9b8 <__alt_mem_onchip_mem+0xff8059b8>

0080da78 <__call_exitprocs>:
  80da78:	defff504 	addi	sp,sp,-44
  80da7c:	df000915 	stw	fp,36(sp)
  80da80:	dd400615 	stw	r21,24(sp)
  80da84:	dc800315 	stw	r18,12(sp)
  80da88:	dfc00a15 	stw	ra,40(sp)
  80da8c:	ddc00815 	stw	r23,32(sp)
  80da90:	dd800715 	stw	r22,28(sp)
  80da94:	dd000515 	stw	r20,20(sp)
  80da98:	dcc00415 	stw	r19,16(sp)
  80da9c:	dc400215 	stw	r17,8(sp)
  80daa0:	dc000115 	stw	r16,4(sp)
  80daa4:	d9000015 	stw	r4,0(sp)
  80daa8:	2839883a 	mov	fp,r5
  80daac:	04800044 	movi	r18,1
  80dab0:	057fffc4 	movi	r21,-1
  80dab4:	00802074 	movhi	r2,129
  80dab8:	10bf1704 	addi	r2,r2,-932
  80dabc:	12000017 	ldw	r8,0(r2)
  80dac0:	45005217 	ldw	r20,328(r8)
  80dac4:	44c05204 	addi	r19,r8,328
  80dac8:	a0001c26 	beq	r20,zero,80db3c <__call_exitprocs+0xc4>
  80dacc:	a0800117 	ldw	r2,4(r20)
  80dad0:	15ffffc4 	addi	r23,r2,-1
  80dad4:	b8000d16 	blt	r23,zero,80db0c <__call_exitprocs+0x94>
  80dad8:	14000044 	addi	r16,r2,1
  80dadc:	8421883a 	add	r16,r16,r16
  80dae0:	8421883a 	add	r16,r16,r16
  80dae4:	84402004 	addi	r17,r16,128
  80dae8:	a463883a 	add	r17,r20,r17
  80daec:	a421883a 	add	r16,r20,r16
  80daf0:	e0001e26 	beq	fp,zero,80db6c <__call_exitprocs+0xf4>
  80daf4:	80804017 	ldw	r2,256(r16)
  80daf8:	e0801c26 	beq	fp,r2,80db6c <__call_exitprocs+0xf4>
  80dafc:	bdffffc4 	addi	r23,r23,-1
  80db00:	843fff04 	addi	r16,r16,-4
  80db04:	8c7fff04 	addi	r17,r17,-4
  80db08:	bd7ff91e 	bne	r23,r21,80daf0 <__alt_mem_onchip_mem+0xff805af0>
  80db0c:	00800034 	movhi	r2,0
  80db10:	10800004 	addi	r2,r2,0
  80db14:	10000926 	beq	r2,zero,80db3c <__call_exitprocs+0xc4>
  80db18:	a0800117 	ldw	r2,4(r20)
  80db1c:	1000301e 	bne	r2,zero,80dbe0 <__call_exitprocs+0x168>
  80db20:	a0800017 	ldw	r2,0(r20)
  80db24:	10003226 	beq	r2,zero,80dbf0 <__call_exitprocs+0x178>
  80db28:	a009883a 	mov	r4,r20
  80db2c:	98800015 	stw	r2,0(r19)
  80db30:	00000000 	call	0 <__reset-0x800000>
  80db34:	9d000017 	ldw	r20,0(r19)
  80db38:	a03fe41e 	bne	r20,zero,80dacc <__alt_mem_onchip_mem+0xff805acc>
  80db3c:	dfc00a17 	ldw	ra,40(sp)
  80db40:	df000917 	ldw	fp,36(sp)
  80db44:	ddc00817 	ldw	r23,32(sp)
  80db48:	dd800717 	ldw	r22,28(sp)
  80db4c:	dd400617 	ldw	r21,24(sp)
  80db50:	dd000517 	ldw	r20,20(sp)
  80db54:	dcc00417 	ldw	r19,16(sp)
  80db58:	dc800317 	ldw	r18,12(sp)
  80db5c:	dc400217 	ldw	r17,8(sp)
  80db60:	dc000117 	ldw	r16,4(sp)
  80db64:	dec00b04 	addi	sp,sp,44
  80db68:	f800283a 	ret
  80db6c:	a0800117 	ldw	r2,4(r20)
  80db70:	80c00017 	ldw	r3,0(r16)
  80db74:	10bfffc4 	addi	r2,r2,-1
  80db78:	15c01426 	beq	r2,r23,80dbcc <__call_exitprocs+0x154>
  80db7c:	80000015 	stw	zero,0(r16)
  80db80:	183fde26 	beq	r3,zero,80dafc <__alt_mem_onchip_mem+0xff805afc>
  80db84:	95c8983a 	sll	r4,r18,r23
  80db88:	a0806217 	ldw	r2,392(r20)
  80db8c:	a5800117 	ldw	r22,4(r20)
  80db90:	2084703a 	and	r2,r4,r2
  80db94:	10000b26 	beq	r2,zero,80dbc4 <__call_exitprocs+0x14c>
  80db98:	a0806317 	ldw	r2,396(r20)
  80db9c:	2088703a 	and	r4,r4,r2
  80dba0:	20000c1e 	bne	r4,zero,80dbd4 <__call_exitprocs+0x15c>
  80dba4:	89400017 	ldw	r5,0(r17)
  80dba8:	d9000017 	ldw	r4,0(sp)
  80dbac:	183ee83a 	callr	r3
  80dbb0:	a0800117 	ldw	r2,4(r20)
  80dbb4:	15bfbf1e 	bne	r2,r22,80dab4 <__alt_mem_onchip_mem+0xff805ab4>
  80dbb8:	98800017 	ldw	r2,0(r19)
  80dbbc:	153fcf26 	beq	r2,r20,80dafc <__alt_mem_onchip_mem+0xff805afc>
  80dbc0:	003fbc06 	br	80dab4 <__alt_mem_onchip_mem+0xff805ab4>
  80dbc4:	183ee83a 	callr	r3
  80dbc8:	003ff906 	br	80dbb0 <__alt_mem_onchip_mem+0xff805bb0>
  80dbcc:	a5c00115 	stw	r23,4(r20)
  80dbd0:	003feb06 	br	80db80 <__alt_mem_onchip_mem+0xff805b80>
  80dbd4:	89000017 	ldw	r4,0(r17)
  80dbd8:	183ee83a 	callr	r3
  80dbdc:	003ff406 	br	80dbb0 <__alt_mem_onchip_mem+0xff805bb0>
  80dbe0:	a0800017 	ldw	r2,0(r20)
  80dbe4:	a027883a 	mov	r19,r20
  80dbe8:	1029883a 	mov	r20,r2
  80dbec:	003fb606 	br	80dac8 <__alt_mem_onchip_mem+0xff805ac8>
  80dbf0:	0005883a 	mov	r2,zero
  80dbf4:	003ffb06 	br	80dbe4 <__alt_mem_onchip_mem+0xff805be4>

0080dbf8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80dbf8:	defffd04 	addi	sp,sp,-12
  80dbfc:	df000215 	stw	fp,8(sp)
  80dc00:	df000204 	addi	fp,sp,8
  80dc04:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80dc08:	0001883a 	nop
  80dc0c:	e0bfff17 	ldw	r2,-4(fp)
  80dc10:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80dc14:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80dc18:	10000226 	beq	r2,zero,80dc24 <_exit+0x2c>
    ALT_SIM_FAIL();
  80dc1c:	002af070 	cmpltui	zero,zero,43969
  80dc20:	00000106 	br	80dc28 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80dc24:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80dc28:	003fff06 	br	80dc28 <__alt_mem_onchip_mem+0xff805c28>
