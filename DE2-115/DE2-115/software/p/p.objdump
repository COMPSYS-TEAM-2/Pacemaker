
p.elf:     file format elf32-littlenios2
p.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001563c memsz 0x0001563c flags r-x
    LOAD off    0x0001665c vaddr 0x0081565c paddr 0x00817334 align 2**12
         filesz 0x00001cd8 memsz 0x00001cd8 flags rw-
    LOAD off    0x0001900c vaddr 0x0081900c paddr 0x0081900c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014e70  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005a8  008150b4  008150b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cd8  0081565c  00817334  0001665c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0081900c  0081900c  0001900c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081916c  0081916c  00018334  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  00018334  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00018334  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001030  00000000  00000000  00018358  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002679c  00000000  00000000  00019388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009d7b  00000000  00000000  0003fb24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d54a  00000000  00000000  0004989f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000025ec  00000000  00000000  00056dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042a7  00000000  00000000  000593d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000178a8  00000000  00000000  0005d67f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00074f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d8  00000000  00000000  00074f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00079ef1  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00079ef4  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00079ef7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00079ef8  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00079ef9  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00079f02  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00079f0b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  00079f14  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001d  00000000  00000000  00079f20  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000677b7  00000000  00000000  00079f3d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
008150b4 l    d  .rodata	00000000 .rodata
0081565c l    d  .rwdata	00000000 .rwdata
0081900c l    d  .bss	00000000 .bss
0081916c l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../p_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 chart.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00815212 l     O .rodata	00000010 zeroes.4404
0080847c l     F .text	000000bc __sbprintf
00815222 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080868c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080a1bc l     F .text	00000008 __fp_unlock
0080a1d0 l     F .text	0000019c __sinit.part.1
0080a36c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081565c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00815aa0 l     O .rwdata	00000020 lc_ctype_charset
00815a80 l     O .rwdata	00000020 lc_message_charset
00815ac0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00815254 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080d768 l     F .text	000000fc __sprint_r.part.0
00815388 l     O .rodata	00000010 blanks.4348
00815378 l     O .rodata	00000010 zeroes.4349
0080ecf4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00810f40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0081104c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00811078 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
008112e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008113c4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008114b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00811684 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00817320 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00811a74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00811ba8 l     F .text	00000034 alt_dev_reg
008160a8 l     O .rwdata	00001060 jtag_uart
00817108 l     O .rwdata	00000120 lcd
00817228 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00811ed0 l     F .text	0000020c altera_avalon_jtag_uart_irq
008120dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0081732c l     O .rwdata	00000004 colstart
00812714 l     F .text	000000b8 lcd_write_command
008127cc l     F .text	000000d8 lcd_write_data
008128a4 l     F .text	000000d0 lcd_clear_screen
00812974 l     F .text	000001ec lcd_repaint_screen
00812b60 l     F .text	000000cc lcd_scroll_up
00812c2c l     F .text	000002ac lcd_handle_escape
008133b0 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008135f0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008138a0 l     F .text	0000009c altera_avalon_uart_irq
0081393c l     F .text	000000e4 altera_avalon_uart_rxirq
00813a20 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00813bbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00813dd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00814004 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00814478 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
008145b8 l     F .text	0000003c alt_get_errno
008145f4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008154db l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00819040 g     O .bss	00000004 alt_instruction_exception_handler
0080cdac g     F .text	00000074 _mprec_log10
0080ce98 g     F .text	0000008c __any_on
0080f290 g     F .text	00000054 _isatty_r
00815260 g     O .rodata	00000028 __mprec_tinytens
008115c0 g     F .text	0000007c alt_main
008060fc g     F .text	000000c0 _puts_r
0081906c g     O .bss	00000100 alt_irq
0080f2e4 g     F .text	00000060 _lseek_r
00817334 g       *ABS*	00000000 __flash_rwdata_start
00810c30 g     F .text	00000088 .hidden __eqdf2
0081916c g       *ABS*	00000000 __alt_heap_start
008060c0 g     F .text	0000003c printf
0080f4fc g     F .text	0000009c _wcrtomb_r
0080d628 g     F .text	0000005c __sseek
0080a50c g     F .text	00000010 __sinit
0080f3a4 g     F .text	00000140 __swbuf_r
0080afd4 g     F .text	0000007c _setlocale_r
0080a374 g     F .text	00000068 __sfmoreglue
00811660 g     F .text	00000024 __malloc_unlock
0080bca4 g     F .text	0000015c memmove
0080a4f4 g     F .text	00000018 _cleanup
0080bf28 g     F .text	000000a8 _Balloc
00804da0 g     F .text	000000dc .hidden __gtdf2
0081483c g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080f234 g     F .text	0000005c _fstat_r
00819024 g     O .bss	00000004 errno
0080d5a4 g     F .text	00000008 __seofread
00819030 g     O .bss	00000004 alt_argv
0081f2ec g       *ABS*	00000000 _gp
0081480c g     F .text	00000030 usleep
00803fe4 g     F .text	00000100 reset
00815f28 g     O .rwdata	00000180 alt_fd_list
008149b8 g     F .text	00000090 alt_find_dev
0080bb5c g     F .text	00000148 memcpy
0080a1c4 g     F .text	0000000c _cleanup_r
00810d38 g     F .text	000000dc .hidden __floatsidf
0081453c g     F .text	0000007c alt_io_redirect
00804e7c g     F .text	000000f4 .hidden __ltdf2
008150b4 g       *ABS*	00000000 __DTOR_END__
008061bc g     F .text	00000014 puts
00814c84 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080d488 g     F .text	00000074 __fpclassifyd
0080cd08 g     F .text	000000a4 __ratio
0080ecd8 g     F .text	0000001c __vfiprintf_internal
008122d4 g     F .text	0000021c altera_avalon_jtag_uart_read
00806090 g     F .text	00000030 _printf_r
0081028c g     F .text	00000064 .hidden __udivsi3
00811320 g     F .text	000000a4 isatty
008152b0 g     O .rodata	000000c8 __mprec_tens
0080b050 g     F .text	0000000c __locale_charset
00814bf4 g     F .text	00000090 alt_icache_flush
00819020 g     O .bss	00000004 __malloc_top_pad
008172f4 g     O .rwdata	00000004 __mb_cur_max
0080b080 g     F .text	0000000c _localeconv_r
0080c334 g     F .text	0000003c __i2b
0080a990 g     F .text	000004bc __sfvwrite_r
0080d4fc g     F .text	00000054 _sbrk_r
0080f344 g     F .text	00000060 _read_r
00817314 g     O .rwdata	00000004 alt_max_fd
0080ef28 g     F .text	000000f0 _fclose_r
0080a18c g     F .text	00000030 fflush
0081901c g     O .bss	00000004 __malloc_max_sbrked_mem
00811164 g     F .text	00000180 alt_irq_register
008044f4 g     F .text	000008ac .hidden __adddf3
0080cab0 g     F .text	0000010c __b2d
0080fc5c g     F .text	00000538 .hidden __umoddi3
008114ec g     F .text	000000d4 lseek
008172ec g     O .rwdata	00000004 _global_impure_ptr
0080cf24 g     F .text	00000564 _realloc_r
0081916c g       *ABS*	00000000 __bss_end
00814388 g     F .text	000000f0 alt_iic_isr_register
0081196c g     F .text	00000108 alt_tick
0080f6e4 g     F .text	00000578 .hidden __udivdi3
0080f190 g     F .text	00000024 _fputwc_r
00815288 g     O .rodata	00000028 __mprec_bigtens
0080c118 g     F .text	00000104 __s2b
00805f84 g     F .text	000000a8 .hidden __floatunsidf
0080c7f0 g     F .text	00000060 __mcmp
008137f4 g     F .text	000000ac altera_avalon_uart_init
0080a52c g     F .text	00000018 __fp_lock_all
0081433c g     F .text	0000004c alt_ic_irq_enabled
008118d0 g     F .text	0000009c alt_alarm_stop
00819028 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00815f00 g     O .rwdata	00000028 alt_dev_null
00813fbc g     F .text	00000048 alt_dcache_flush_all
0080c21c g     F .text	00000068 __hi0bits
00810cb8 g     F .text	00000080 .hidden __fixdfsi
00817334 g       *ABS*	00000000 __ram_rwdata_end
0081730c g     O .rwdata	00000008 alt_dev_list
00811ab0 g     F .text	000000f8 write
0081565c g       *ABS*	00000000 __ram_rodata_end
008110b4 g     F .text	000000b0 fstat
00804e7c g     F .text	000000f4 .hidden __ledf2
0080c568 g     F .text	00000140 __pow5mult
0080d87c g     F .text	0000145c ___vfiprintf_internal_r
00819014 g     O .bss	00000004 __nlocale_changed
008102f0 g     F .text	00000058 .hidden __umodsi3
0081916c g       *ABS*	00000000 end
00812ed8 g     F .text	000004d8 altera_avalon_lcd_16207_write
00813e10 g     F .text	000001ac altera_avalon_uart_write
00811e10 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
008150b4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813668 g     F .text	0000007c alt_avalon_timer_sc_init
00813744 g     F .text	00000060 altera_avalon_uart_write_fd
0080602c g     F .text	00000064 .hidden __clzsi2
008137a4 g     F .text	00000050 altera_avalon_uart_close_fd
008124f0 g     F .text	00000224 altera_avalon_jtag_uart_write
0080a51c g     F .text	00000004 __sfp_lock_acquire
0080ba78 g     F .text	000000e4 memchr
00806268 g     F .text	000021f8 ___vfprintf_internal_r
0080a680 g     F .text	00000310 _free_r
0080b05c g     F .text	00000010 __locale_mb_cur_max
00814f00 g     F .text	00000180 __call_exitprocs
00819010 g     O .bss	00000004 __mlocale_changed
008172f8 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00819038 g     O .bss	00000004 _alt_tick_rate
00804484 g     F .text	00000070 .hidden __floatundidf
0080c6a8 g     F .text	00000148 __lshift
0081903c g     O .bss	00000004 _alt_nticks
008116c0 g     F .text	000000fc read
00811c14 g     F .text	00000098 alt_sys_init
00814de8 g     F .text	00000118 __register_exitproc
0080c370 g     F .text	000001f8 __multiply
0081217c g     F .text	00000068 altera_avalon_jtag_uart_close
0081565c g       *ABS*	00000000 __ram_rwdata_start
008150b4 g       *ABS*	00000000 __ram_rodata_start
00819044 g     O .bss	00000028 __malloc_current_mallinfo
0080cbbc g     F .text	0000014c __d2b
00811cac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00814b50 g     F .text	000000a4 alt_get_fd
00814860 g     F .text	00000158 alt_busy_sleep
0080ee10 g     F .text	00000054 _close_r
00814d6c g     F .text	0000007c memcmp
00811d6c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081916c g       *ABS*	00000000 __alt_stack_base
00811dbc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00808538 g     F .text	00000154 __swsetup_r
008040e4 g     F .text	0000016c tick
00810348 g     F .text	000008e8 .hidden __divdf3
0080a3dc g     F .text	00000118 __sfp
0080ce20 g     F .text	00000078 __copybits
00815af8 g     O .rwdata	00000408 __malloc_av_
0080a528 g     F .text	00000004 __sinit_lock_release
00804f70 g     F .text	00000718 .hidden __muldf3
0080d550 g     F .text	00000054 __sread
00814a48 g     F .text	00000108 alt_find_file
00814040 g     F .text	000000a4 alt_dev_llist_insert
0081163c g     F .text	00000024 __malloc_lock
00811820 g     F .text	000000b0 sbrk
0080a130 g     F .text	0000005c _fflush_r
0080ee64 g     F .text	000000c4 _calloc_r
0081900c g       *ABS*	00000000 __bss_start
0080be00 g     F .text	00000128 memset
00804290 g     F .text	00000074 keyISR
00804304 g     F .text	00000180 main
00819034 g     O .bss	00000004 alt_envp
00819018 g     O .bss	00000004 __malloc_max_total_mem
00811d0c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080f4e4 g     F .text	00000018 __swbuf
0081345c g     F .text	00000134 altera_avalon_lcd_16207_init
0080d684 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080f018 g     F .text	00000014 fclose
0080888c g     F .text	00001688 _dtoa_r
0080b26c g     F .text	0000080c _malloc_r
0080f658 g     F .text	00000030 __ascii_wctomb
00817318 g     O .rwdata	00000004 alt_errno
0080ae4c g     F .text	000000c4 _fwalk
00810194 g     F .text	00000084 .hidden __divsi3
0080a55c g     F .text	00000124 _malloc_trim_r
008150b4 g       *ABS*	00000000 __CTOR_END__
0080d68c g     F .text	000000dc strcmp
008150b4 g       *ABS*	00000000 __flash_rodata_start
008150b4 g       *ABS*	00000000 __DTOR_LIST__
00810c30 g     F .text	00000088 .hidden __nedf2
00811bdc g     F .text	00000038 alt_irq_init
008117bc g     F .text	00000064 alt_release_fd
008150ca g     O .rodata	00000100 .hidden __clz_tab
0081900c g     O .bss	00000004 _PathLocale
00814d20 g     F .text	00000014 atexit
0080edb0 g     F .text	00000060 _write_r
0080b08c g     F .text	00000018 setlocale
008172f0 g     O .rwdata	00000004 _impure_ptr
0081902c g     O .bss	00000004 alt_argc
00809f14 g     F .text	0000021c __sflush_r
00814144 g     F .text	00000060 _do_dtors
0080b078 g     F .text	00000008 __locale_cjk_lang
00800020 g       .exceptions	00000000 alt_irq_entry
0080ca4c g     F .text	00000064 __ulp
0080a544 g     F .text	00000018 __fp_unlock_all
00813590 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00817304 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080b0a4 g     F .text	0000000c localeconv
00804250 g     F .text	00000040 timerISR
008141d8 g     F .text	00000050 alt_ic_isr_register
00817334 g       *ABS*	00000000 _edata
008136e4 g     F .text	00000060 altera_avalon_uart_read_fd
0081916c g       *ABS*	00000000 _end
0080f02c g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
008121e4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008142b0 g     F .text	0000008c alt_ic_irq_disable
0080d5ac g     F .text	0000007c __swrite
008172fc g     O .rwdata	00000004 __malloc_trim_threshold
0080b06c g     F .text	0000000c __locale_msgcharset
00814d34 g     F .text	00000038 exit
0080af10 g     F .text	000000c4 _fwalk_reent
0080c850 g     F .text	000001fc __mdiff
00810218 g     F .text	00000074 .hidden __modsi3
00800290 g     F .text	00003d54 logic
00817330 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080a520 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
008153da g     O .rodata	00000101 _ctype_
00813b68 g     F .text	00000054 altera_avalon_uart_close
00815080 g     F .text	00000034 _exit
00810e14 g     F .text	0000012c alt_alarm_start
0080b0b0 g     F .text	000001bc __smakebuf_r
008061d0 g     F .text	00000098 strlen
008146b8 g     F .text	00000154 open
00804da0 g     F .text	000000dc .hidden __gedf2
00817300 g     O .rwdata	00000004 __wctomb
0080d864 g     F .text	00000018 __sprint_r
008141a4 g     F .text	00000034 alt_icache_flush_all
0081731c g     O .rwdata	00000004 alt_priority_mask
00814228 g     F .text	00000088 alt_ic_irq_enable
00808460 g     F .text	0000001c __vfprintf_internal
00813bf8 g     F .text	000001dc altera_avalon_uart_read
0080f688 g     F .text	0000005c _wctomb_r
00805688 g     F .text	000008fc .hidden __subdf3
0080c284 g     F .text	000000b0 __lo0bits
00817324 g     O .rwdata	00000008 alt_alarm_list
008140e4 g     F .text	00000060 _do_ctors
0080f598 g     F .text	000000c0 wcrtomb
00810f7c g     F .text	000000d0 close
0081142c g     F .text	00000084 alt_load
0080f1b4 g     F .text	00000080 fputwc
0080a524 g     F .text	00000004 __sinit_lock_acquire
0080bff8 g     F .text	00000120 __multadd
0080bfd0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10a41b04 	addi	r2,r2,-28564
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10a41b04 	addi	r2,r2,-28564
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a75517 	ldw	r2,-25260(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a75517 	ldw	r2,-25260(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6bcbb14 	ori	gp,gp,62188
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10a40314 	ori	r2,r2,36876

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18e45b14 	ori	r3,r3,37228

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	081142c0 	call	81142c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08115c00 	call	8115c0 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <logic>:
#include "../inc/timing.h"
#include "../inc/chart.h"



void logic(TickData* d) {
  800290:	defffb04 	addi	sp,sp,-20
  800294:	dfc00415 	stw	ra,16(sp)
  800298:	df000315 	stw	fp,12(sp)
  80029c:	dc400215 	stw	r17,8(sp)
  8002a0:	dc000115 	stw	r16,4(sp)
  8002a4:	df000304 	addi	fp,sp,12
  8002a8:	e13ffd15 	stw	r4,-12(fp)
  d->_g45 = d->_pg36;
  8002ac:	e0bffd17 	ldw	r2,-12(fp)
  8002b0:	10c02b43 	ldbu	r3,173(r2)
  8002b4:	e0bffd17 	ldw	r2,-12(fp)
  8002b8:	10c01145 	stb	r3,69(r2)
  if (d->_g45) {
  8002bc:	e0bffd17 	ldw	r2,-12(fp)
  8002c0:	10801143 	ldbu	r2,69(r2)
  8002c4:	10803fcc 	andi	r2,r2,255
  8002c8:	1080201c 	xori	r2,r2,128
  8002cc:	10bfe004 	addi	r2,r2,-128
  8002d0:	10001226 	beq	r2,zero,80031c <logic+0x8c>
    d->_region0_Atrium_VentricleTimer += d->deltaT;
  8002d4:	e13ffd17 	ldw	r4,-12(fp)
  8002d8:	20800017 	ldw	r2,0(r4)
  8002dc:	20c00117 	ldw	r3,4(r4)
  8002e0:	e1bffd17 	ldw	r6,-12(fp)
  8002e4:	31000417 	ldw	r4,16(r6)
  8002e8:	31400517 	ldw	r5,20(r6)
  8002ec:	200d883a 	mov	r6,r4
  8002f0:	280f883a 	mov	r7,r5
  8002f4:	1009883a 	mov	r4,r2
  8002f8:	180b883a 	mov	r5,r3
  8002fc:	08044f40 	call	8044f4 <__adddf3>
  800300:	1009883a 	mov	r4,r2
  800304:	180b883a 	mov	r5,r3
  800308:	2005883a 	mov	r2,r4
  80030c:	2807883a 	mov	r3,r5
  800310:	e13ffd17 	ldw	r4,-12(fp)
  800314:	20800015 	stw	r2,0(r4)
  800318:	20c00115 	stw	r3,4(r4)
  }
  d->_g46_e1 = !d->_g45;
  80031c:	e0bffd17 	ldw	r2,-12(fp)
  800320:	10801143 	ldbu	r2,69(r2)
  800324:	10803fcc 	andi	r2,r2,255
  800328:	1080201c 	xori	r2,r2,128
  80032c:	10bfe004 	addi	r2,r2,-128
  800330:	1005003a 	cmpeq	r2,r2,zero
  800334:	1007883a 	mov	r3,r2
  800338:	e0bffd17 	ldw	r2,-12(fp)
  80033c:	10c02945 	stb	r3,165(r2)
  d->_g97 = d->_pg59;
  800340:	e0bffd17 	ldw	r2,-12(fp)
  800344:	10c02b83 	ldbu	r3,174(r2)
  800348:	e0bffd17 	ldw	r2,-12(fp)
  80034c:	10c01785 	stb	r3,94(r2)
  d->_cg97 = d->_region0_Atrium_VentricleTimer >= VRP_VALUE && d->VS;
  800350:	e13ffd17 	ldw	r4,-12(fp)
  800354:	20800017 	ldw	r2,0(r4)
  800358:	20c00117 	ldw	r3,4(r4)
  80035c:	000d883a 	mov	r6,zero
  800360:	01d018f4 	movhi	r7,16483
  800364:	39f00004 	addi	r7,r7,-16384
  800368:	1009883a 	mov	r4,r2
  80036c:	180b883a 	mov	r5,r3
  800370:	0804da00 	call	804da0 <__gedf2>
  800374:	10000816 	blt	r2,zero,800398 <logic+0x108>
  800378:	e0bffd17 	ldw	r2,-12(fp)
  80037c:	10800843 	ldbu	r2,33(r2)
  800380:	10803fcc 	andi	r2,r2,255
  800384:	1080201c 	xori	r2,r2,128
  800388:	10bfe004 	addi	r2,r2,-128
  80038c:	10000226 	beq	r2,zero,800398 <logic+0x108>
  800390:	00800044 	movi	r2,1
  800394:	00000106 	br	80039c <logic+0x10c>
  800398:	0005883a 	mov	r2,zero
  80039c:	1007883a 	mov	r3,r2
  8003a0:	e0bffd17 	ldw	r2,-12(fp)
  8003a4:	10c02705 	stb	r3,156(r2)
  d->_g98 = d->_g97 && d->_cg97;
  8003a8:	e0bffd17 	ldw	r2,-12(fp)
  8003ac:	10801783 	ldbu	r2,94(r2)
  8003b0:	10803fcc 	andi	r2,r2,255
  8003b4:	1080201c 	xori	r2,r2,128
  8003b8:	10bfe004 	addi	r2,r2,-128
  8003bc:	10000826 	beq	r2,zero,8003e0 <logic+0x150>
  8003c0:	e0bffd17 	ldw	r2,-12(fp)
  8003c4:	10802703 	ldbu	r2,156(r2)
  8003c8:	10803fcc 	andi	r2,r2,255
  8003cc:	1080201c 	xori	r2,r2,128
  8003d0:	10bfe004 	addi	r2,r2,-128
  8003d4:	10000226 	beq	r2,zero,8003e0 <logic+0x150>
  8003d8:	00800044 	movi	r2,1
  8003dc:	00000106 	br	8003e4 <logic+0x154>
  8003e0:	0005883a 	mov	r2,zero
  8003e4:	1007883a 	mov	r3,r2
  8003e8:	e0bffd17 	ldw	r2,-12(fp)
  8003ec:	10c017c5 	stb	r3,95(r2)
  if (d->_g98) {
  8003f0:	e0bffd17 	ldw	r2,-12(fp)
  8003f4:	108017c3 	ldbu	r2,95(r2)
  8003f8:	10803fcc 	andi	r2,r2,255
  8003fc:	1080201c 	xori	r2,r2,128
  800400:	10bfe004 	addi	r2,r2,-128
  800404:	10000326 	beq	r2,zero,800414 <logic+0x184>
    d->_Pacemaker_local__Atrig2 = 1;
  800408:	e0bffd17 	ldw	r2,-12(fp)
  80040c:	00c00044 	movi	r3,1
  800410:	10c00985 	stb	r3,38(r2)
  }
  d->_g82 = d->_pg45;
  800414:	e0bffd17 	ldw	r2,-12(fp)
  800418:	10c02bc3 	ldbu	r3,175(r2)
  80041c:	e0bffd17 	ldw	r2,-12(fp)
  800420:	10c01605 	stb	r3,88(r2)
  if (d->_g82) {
  800424:	e0bffd17 	ldw	r2,-12(fp)
  800428:	10801603 	ldbu	r2,88(r2)
  80042c:	10803fcc 	andi	r2,r2,255
  800430:	1080201c 	xori	r2,r2,128
  800434:	10bfe004 	addi	r2,r2,-128
  800438:	10001226 	beq	r2,zero,800484 <logic+0x1f4>
    d->_region0_Atrium_AtriumTimer += d->deltaT;
  80043c:	e13ffd17 	ldw	r4,-12(fp)
  800440:	20800217 	ldw	r2,8(r4)
  800444:	20c00317 	ldw	r3,12(r4)
  800448:	e1bffd17 	ldw	r6,-12(fp)
  80044c:	31000417 	ldw	r4,16(r6)
  800450:	31400517 	ldw	r5,20(r6)
  800454:	200d883a 	mov	r6,r4
  800458:	280f883a 	mov	r7,r5
  80045c:	1009883a 	mov	r4,r2
  800460:	180b883a 	mov	r5,r3
  800464:	08044f40 	call	8044f4 <__adddf3>
  800468:	1009883a 	mov	r4,r2
  80046c:	180b883a 	mov	r5,r3
  800470:	2005883a 	mov	r2,r4
  800474:	2807883a 	mov	r3,r5
  800478:	e13ffd17 	ldw	r4,-12(fp)
  80047c:	20800215 	stw	r2,8(r4)
  800480:	20c00315 	stw	r3,12(r4)
  }
  d->_g100 = d->_g97 && !d->_cg97;
  800484:	e0bffd17 	ldw	r2,-12(fp)
  800488:	10801783 	ldbu	r2,94(r2)
  80048c:	10803fcc 	andi	r2,r2,255
  800490:	1080201c 	xori	r2,r2,128
  800494:	10bfe004 	addi	r2,r2,-128
  800498:	10000826 	beq	r2,zero,8004bc <logic+0x22c>
  80049c:	e0bffd17 	ldw	r2,-12(fp)
  8004a0:	10802703 	ldbu	r2,156(r2)
  8004a4:	10803fcc 	andi	r2,r2,255
  8004a8:	1080201c 	xori	r2,r2,128
  8004ac:	10bfe004 	addi	r2,r2,-128
  8004b0:	1000021e 	bne	r2,zero,8004bc <logic+0x22c>
  8004b4:	00800044 	movi	r2,1
  8004b8:	00000106 	br	8004c0 <logic+0x230>
  8004bc:	0005883a 	mov	r2,zero
  8004c0:	1007883a 	mov	r3,r2
  8004c4:	e0bffd17 	ldw	r2,-12(fp)
  8004c8:	10c01845 	stb	r3,97(r2)
  d->_cg100 = d->_region0_Atrium_VentricleTimer >= URI_VALUE && d->_region0_Atrium_AtriumTimer >= AVI_VALUE;
  8004cc:	e13ffd17 	ldw	r4,-12(fp)
  8004d0:	20800017 	ldw	r2,0(r4)
  8004d4:	20c00117 	ldw	r3,4(r4)
  8004d8:	000d883a 	mov	r6,zero
  8004dc:	01d02334 	movhi	r7,16524
  8004e0:	39c80004 	addi	r7,r7,8192
  8004e4:	1009883a 	mov	r4,r2
  8004e8:	180b883a 	mov	r5,r3
  8004ec:	0804da00 	call	804da0 <__gedf2>
  8004f0:	10000c16 	blt	r2,zero,800524 <logic+0x294>
  8004f4:	e13ffd17 	ldw	r4,-12(fp)
  8004f8:	20800217 	ldw	r2,8(r4)
  8004fc:	20c00317 	ldw	r3,12(r4)
  800500:	000d883a 	mov	r6,zero
  800504:	01d01cf4 	movhi	r7,16499
  800508:	39f00004 	addi	r7,r7,-16384
  80050c:	1009883a 	mov	r4,r2
  800510:	180b883a 	mov	r5,r3
  800514:	0804da00 	call	804da0 <__gedf2>
  800518:	10000216 	blt	r2,zero,800524 <logic+0x294>
  80051c:	00800044 	movi	r2,1
  800520:	00000106 	br	800528 <logic+0x298>
  800524:	0005883a 	mov	r2,zero
  800528:	1007883a 	mov	r3,r2
  80052c:	e0bffd17 	ldw	r2,-12(fp)
  800530:	10c02745 	stb	r3,157(r2)
  d->_g101 = d->_g100 && d->_cg100;
  800534:	e0bffd17 	ldw	r2,-12(fp)
  800538:	10801843 	ldbu	r2,97(r2)
  80053c:	10803fcc 	andi	r2,r2,255
  800540:	1080201c 	xori	r2,r2,128
  800544:	10bfe004 	addi	r2,r2,-128
  800548:	10000826 	beq	r2,zero,80056c <logic+0x2dc>
  80054c:	e0bffd17 	ldw	r2,-12(fp)
  800550:	10802743 	ldbu	r2,157(r2)
  800554:	10803fcc 	andi	r2,r2,255
  800558:	1080201c 	xori	r2,r2,128
  80055c:	10bfe004 	addi	r2,r2,-128
  800560:	10000226 	beq	r2,zero,80056c <logic+0x2dc>
  800564:	00800044 	movi	r2,1
  800568:	00000106 	br	800570 <logic+0x2e0>
  80056c:	0005883a 	mov	r2,zero
  800570:	1007883a 	mov	r3,r2
  800574:	e0bffd17 	ldw	r2,-12(fp)
  800578:	10c01885 	stb	r3,98(r2)
  if (d->_g101) {
  80057c:	e0bffd17 	ldw	r2,-12(fp)
  800580:	10801883 	ldbu	r2,98(r2)
  800584:	10803fcc 	andi	r2,r2,255
  800588:	1080201c 	xori	r2,r2,128
  80058c:	10bfe004 	addi	r2,r2,-128
  800590:	10000326 	beq	r2,zero,8005a0 <logic+0x310>
    d->_Pacemaker_local__Atrig3 = 1;
  800594:	e0bffd17 	ldw	r2,-12(fp)
  800598:	00c00044 	movi	r3,1
  80059c:	10c009c5 	stb	r3,39(r2)
  }
  d->_g100 = d->_g100 && !d->_cg100;
  8005a0:	e0bffd17 	ldw	r2,-12(fp)
  8005a4:	10801843 	ldbu	r2,97(r2)
  8005a8:	10803fcc 	andi	r2,r2,255
  8005ac:	1080201c 	xori	r2,r2,128
  8005b0:	10bfe004 	addi	r2,r2,-128
  8005b4:	10000826 	beq	r2,zero,8005d8 <logic+0x348>
  8005b8:	e0bffd17 	ldw	r2,-12(fp)
  8005bc:	10802743 	ldbu	r2,157(r2)
  8005c0:	10803fcc 	andi	r2,r2,255
  8005c4:	1080201c 	xori	r2,r2,128
  8005c8:	10bfe004 	addi	r2,r2,-128
  8005cc:	1000021e 	bne	r2,zero,8005d8 <logic+0x348>
  8005d0:	00800044 	movi	r2,1
  8005d4:	00000106 	br	8005dc <logic+0x34c>
  8005d8:	0005883a 	mov	r2,zero
  8005dc:	1007883a 	mov	r3,r2
  8005e0:	e0bffd17 	ldw	r2,-12(fp)
  8005e4:	10c01845 	stb	r3,97(r2)
  d->_cg102 = d->_region0_Atrium_VentricleTimer >= LRI_VALUE;
  8005e8:	e13ffd17 	ldw	r4,-12(fp)
  8005ec:	20800017 	ldw	r2,0(r4)
  8005f0:	20c00117 	ldw	r3,4(r4)
  8005f4:	04000044 	movi	r16,1
  8005f8:	000d883a 	mov	r6,zero
  8005fc:	01d023b4 	movhi	r7,16526
  800600:	39ec0004 	addi	r7,r7,-20480
  800604:	1009883a 	mov	r4,r2
  800608:	180b883a 	mov	r5,r3
  80060c:	0804da00 	call	804da0 <__gedf2>
  800610:	1000010e 	bge	r2,zero,800618 <logic+0x388>
  800614:	0021883a 	mov	r16,zero
  800618:	8007883a 	mov	r3,r16
  80061c:	e0bffd17 	ldw	r2,-12(fp)
  800620:	10c026c5 	stb	r3,155(r2)
  d->_g103 = d->_g100 && d->_cg102;
  800624:	e0bffd17 	ldw	r2,-12(fp)
  800628:	10801843 	ldbu	r2,97(r2)
  80062c:	10803fcc 	andi	r2,r2,255
  800630:	1080201c 	xori	r2,r2,128
  800634:	10bfe004 	addi	r2,r2,-128
  800638:	10000826 	beq	r2,zero,80065c <logic+0x3cc>
  80063c:	e0bffd17 	ldw	r2,-12(fp)
  800640:	108026c3 	ldbu	r2,155(r2)
  800644:	10803fcc 	andi	r2,r2,255
  800648:	1080201c 	xori	r2,r2,128
  80064c:	10bfe004 	addi	r2,r2,-128
  800650:	10000226 	beq	r2,zero,80065c <logic+0x3cc>
  800654:	00800044 	movi	r2,1
  800658:	00000106 	br	800660 <logic+0x3d0>
  80065c:	0005883a 	mov	r2,zero
  800660:	1007883a 	mov	r3,r2
  800664:	e0bffd17 	ldw	r2,-12(fp)
  800668:	10c018c5 	stb	r3,99(r2)
  if (d->_g103) {
  80066c:	e0bffd17 	ldw	r2,-12(fp)
  800670:	108018c3 	ldbu	r2,99(r2)
  800674:	10803fcc 	andi	r2,r2,255
  800678:	1080201c 	xori	r2,r2,128
  80067c:	10bfe004 	addi	r2,r2,-128
  800680:	10000326 	beq	r2,zero,800690 <logic+0x400>
    d->_Pacemaker_local__Atrig4 = 1;
  800684:	e0bffd17 	ldw	r2,-12(fp)
  800688:	00c00044 	movi	r3,1
  80068c:	10c00a05 	stb	r3,40(r2)
  }
  d->_cg45 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  800690:	e0bffd17 	ldw	r2,-12(fp)
  800694:	10800983 	ldbu	r2,38(r2)
  800698:	10803fcc 	andi	r2,r2,255
  80069c:	1080201c 	xori	r2,r2,128
  8006a0:	10bfe004 	addi	r2,r2,-128
  8006a4:	10000c1e 	bne	r2,zero,8006d8 <logic+0x448>
  8006a8:	e0bffd17 	ldw	r2,-12(fp)
  8006ac:	108009c3 	ldbu	r2,39(r2)
  8006b0:	10803fcc 	andi	r2,r2,255
  8006b4:	1080201c 	xori	r2,r2,128
  8006b8:	10bfe004 	addi	r2,r2,-128
  8006bc:	1000061e 	bne	r2,zero,8006d8 <logic+0x448>
  8006c0:	e0bffd17 	ldw	r2,-12(fp)
  8006c4:	10800a03 	ldbu	r2,40(r2)
  8006c8:	10803fcc 	andi	r2,r2,255
  8006cc:	1080201c 	xori	r2,r2,128
  8006d0:	10bfe004 	addi	r2,r2,-128
  8006d4:	10000226 	beq	r2,zero,8006e0 <logic+0x450>
  8006d8:	00800044 	movi	r2,1
  8006dc:	00000106 	br	8006e4 <logic+0x454>
  8006e0:	0005883a 	mov	r2,zero
  8006e4:	1007883a 	mov	r3,r2
  8006e8:	e0bffd17 	ldw	r2,-12(fp)
  8006ec:	10c02005 	stb	r3,128(r2)
  d->_g46 = d->_g45 && d->_cg45;
  8006f0:	e0bffd17 	ldw	r2,-12(fp)
  8006f4:	10801143 	ldbu	r2,69(r2)
  8006f8:	10803fcc 	andi	r2,r2,255
  8006fc:	1080201c 	xori	r2,r2,128
  800700:	10bfe004 	addi	r2,r2,-128
  800704:	10000826 	beq	r2,zero,800728 <logic+0x498>
  800708:	e0bffd17 	ldw	r2,-12(fp)
  80070c:	10802003 	ldbu	r2,128(r2)
  800710:	10803fcc 	andi	r2,r2,255
  800714:	1080201c 	xori	r2,r2,128
  800718:	10bfe004 	addi	r2,r2,-128
  80071c:	10000226 	beq	r2,zero,800728 <logic+0x498>
  800720:	00800044 	movi	r2,1
  800724:	00000106 	br	80072c <logic+0x49c>
  800728:	0005883a 	mov	r2,zero
  80072c:	1007883a 	mov	r3,r2
  800730:	e0bffd17 	ldw	r2,-12(fp)
  800734:	10c01185 	stb	r3,70(r2)
  d->_g56 = d->_pg14;
  800738:	e0bffd17 	ldw	r2,-12(fp)
  80073c:	10c02c03 	ldbu	r3,176(r2)
  800740:	e0bffd17 	ldw	r2,-12(fp)
  800744:	10c01345 	stb	r3,77(r2)
  d->_g50 = d->_pg33;
  800748:	e0bffd17 	ldw	r2,-12(fp)
  80074c:	10c02c43 	ldbu	r3,177(r2)
  800750:	e0bffd17 	ldw	r2,-12(fp)
  800754:	10c01205 	stb	r3,72(r2)
  d->_g53_e2 = !(d->_g56 || d->_g50);
  800758:	e0bffd17 	ldw	r2,-12(fp)
  80075c:	10801343 	ldbu	r2,77(r2)
  800760:	10803fcc 	andi	r2,r2,255
  800764:	1080201c 	xori	r2,r2,128
  800768:	10bfe004 	addi	r2,r2,-128
  80076c:	1000081e 	bne	r2,zero,800790 <logic+0x500>
  800770:	e0bffd17 	ldw	r2,-12(fp)
  800774:	10801203 	ldbu	r2,72(r2)
  800778:	10803fcc 	andi	r2,r2,255
  80077c:	1080201c 	xori	r2,r2,128
  800780:	10bfe004 	addi	r2,r2,-128
  800784:	1000021e 	bne	r2,zero,800790 <logic+0x500>
  800788:	00800044 	movi	r2,1
  80078c:	00000106 	br	800794 <logic+0x504>
  800790:	0005883a 	mov	r2,zero
  800794:	1007883a 	mov	r3,r2
  800798:	e0bffd17 	ldw	r2,-12(fp)
  80079c:	10c02985 	stb	r3,166(r2)
  d->sleepT = 1000.0;
  8007a0:	e0fffd17 	ldw	r3,-12(fp)
  8007a4:	18000615 	stw	zero,24(r3)
  8007a8:	009023f4 	movhi	r2,16527
  8007ac:	10900004 	addi	r2,r2,16384
  8007b0:	18800715 	stw	r2,28(r3)
  d->_g56 = d->_g50 || d->_g56;
  8007b4:	e0bffd17 	ldw	r2,-12(fp)
  8007b8:	10801203 	ldbu	r2,72(r2)
  8007bc:	10803fcc 	andi	r2,r2,255
  8007c0:	1080201c 	xori	r2,r2,128
  8007c4:	10bfe004 	addi	r2,r2,-128
  8007c8:	1000061e 	bne	r2,zero,8007e4 <logic+0x554>
  8007cc:	e0bffd17 	ldw	r2,-12(fp)
  8007d0:	10801343 	ldbu	r2,77(r2)
  8007d4:	10803fcc 	andi	r2,r2,255
  8007d8:	1080201c 	xori	r2,r2,128
  8007dc:	10bfe004 	addi	r2,r2,-128
  8007e0:	10000226 	beq	r2,zero,8007ec <logic+0x55c>
  8007e4:	00800044 	movi	r2,1
  8007e8:	00000106 	br	8007f0 <logic+0x560>
  8007ec:	0005883a 	mov	r2,zero
  8007f0:	1007883a 	mov	r3,r2
  8007f4:	e0bffd17 	ldw	r2,-12(fp)
  8007f8:	10c01345 	stb	r3,77(r2)
  d->_cg51 = d->_region0_Atrium_VentricleTimer < VRP_VALUE;
  8007fc:	e13ffd17 	ldw	r4,-12(fp)
  800800:	20800017 	ldw	r2,0(r4)
  800804:	20c00117 	ldw	r3,4(r4)
  800808:	04000044 	movi	r16,1
  80080c:	000d883a 	mov	r6,zero
  800810:	01d018f4 	movhi	r7,16483
  800814:	39f00004 	addi	r7,r7,-16384
  800818:	1009883a 	mov	r4,r2
  80081c:	180b883a 	mov	r5,r3
  800820:	0804e7c0 	call	804e7c <__ledf2>
  800824:	10000116 	blt	r2,zero,80082c <logic+0x59c>
  800828:	0021883a 	mov	r16,zero
  80082c:	8007883a 	mov	r3,r16
  800830:	e0bffd17 	ldw	r2,-12(fp)
  800834:	10c02105 	stb	r3,132(r2)
  d->_g50 = d->_g56 && d->_cg51;
  800838:	e0bffd17 	ldw	r2,-12(fp)
  80083c:	10801343 	ldbu	r2,77(r2)
  800840:	10803fcc 	andi	r2,r2,255
  800844:	1080201c 	xori	r2,r2,128
  800848:	10bfe004 	addi	r2,r2,-128
  80084c:	10000826 	beq	r2,zero,800870 <logic+0x5e0>
  800850:	e0bffd17 	ldw	r2,-12(fp)
  800854:	10802103 	ldbu	r2,132(r2)
  800858:	10803fcc 	andi	r2,r2,255
  80085c:	1080201c 	xori	r2,r2,128
  800860:	10bfe004 	addi	r2,r2,-128
  800864:	10000226 	beq	r2,zero,800870 <logic+0x5e0>
  800868:	00800044 	movi	r2,1
  80086c:	00000106 	br	800874 <logic+0x5e4>
  800870:	0005883a 	mov	r2,zero
  800874:	1007883a 	mov	r3,r2
  800878:	e0bffd17 	ldw	r2,-12(fp)
  80087c:	10c01205 	stb	r3,72(r2)
  if (d->_g50) {
  800880:	e0bffd17 	ldw	r2,-12(fp)
  800884:	10801203 	ldbu	r2,72(r2)
  800888:	10803fcc 	andi	r2,r2,255
  80088c:	1080201c 	xori	r2,r2,128
  800890:	10bfe004 	addi	r2,r2,-128
  800894:	10002a26 	beq	r2,zero,800940 <logic+0x6b0>
    d->sleepT = (d->sleepT < (VRP_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (VRP_VALUE - d->_region0_Atrium_VentricleTimer);
  800898:	e0bffd17 	ldw	r2,-12(fp)
  80089c:	14000617 	ldw	r16,24(r2)
  8008a0:	14400717 	ldw	r17,28(r2)
  8008a4:	e13ffd17 	ldw	r4,-12(fp)
  8008a8:	20800017 	ldw	r2,0(r4)
  8008ac:	20c00117 	ldw	r3,4(r4)
  8008b0:	100d883a 	mov	r6,r2
  8008b4:	180f883a 	mov	r7,r3
  8008b8:	0009883a 	mov	r4,zero
  8008bc:	015018f4 	movhi	r5,16483
  8008c0:	29700004 	addi	r5,r5,-16384
  8008c4:	08056880 	call	805688 <__subdf3>
  8008c8:	1009883a 	mov	r4,r2
  8008cc:	180b883a 	mov	r5,r3
  8008d0:	2005883a 	mov	r2,r4
  8008d4:	2807883a 	mov	r3,r5
  8008d8:	100d883a 	mov	r6,r2
  8008dc:	180f883a 	mov	r7,r3
  8008e0:	8009883a 	mov	r4,r16
  8008e4:	880b883a 	mov	r5,r17
  8008e8:	0804e7c0 	call	804e7c <__ledf2>
  8008ec:	1000040e 	bge	r2,zero,800900 <logic+0x670>
  8008f0:	e13ffd17 	ldw	r4,-12(fp)
  8008f4:	20800617 	ldw	r2,24(r4)
  8008f8:	20c00717 	ldw	r3,28(r4)
  8008fc:	00000d06 	br	800934 <logic+0x6a4>
  800900:	e13ffd17 	ldw	r4,-12(fp)
  800904:	20800017 	ldw	r2,0(r4)
  800908:	20c00117 	ldw	r3,4(r4)
  80090c:	100d883a 	mov	r6,r2
  800910:	180f883a 	mov	r7,r3
  800914:	0009883a 	mov	r4,zero
  800918:	015018f4 	movhi	r5,16483
  80091c:	29700004 	addi	r5,r5,-16384
  800920:	08056880 	call	805688 <__subdf3>
  800924:	1009883a 	mov	r4,r2
  800928:	180b883a 	mov	r5,r3
  80092c:	2005883a 	mov	r2,r4
  800930:	2807883a 	mov	r3,r5
  800934:	e13ffd17 	ldw	r4,-12(fp)
  800938:	20800615 	stw	r2,24(r4)
  80093c:	20c00715 	stw	r3,28(r4)
  }
  d->_cg52 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  800940:	e0bffd17 	ldw	r2,-12(fp)
  800944:	10800983 	ldbu	r2,38(r2)
  800948:	10803fcc 	andi	r2,r2,255
  80094c:	1080201c 	xori	r2,r2,128
  800950:	10bfe004 	addi	r2,r2,-128
  800954:	10000c1e 	bne	r2,zero,800988 <logic+0x6f8>
  800958:	e0bffd17 	ldw	r2,-12(fp)
  80095c:	108009c3 	ldbu	r2,39(r2)
  800960:	10803fcc 	andi	r2,r2,255
  800964:	1080201c 	xori	r2,r2,128
  800968:	10bfe004 	addi	r2,r2,-128
  80096c:	1000061e 	bne	r2,zero,800988 <logic+0x6f8>
  800970:	e0bffd17 	ldw	r2,-12(fp)
  800974:	10800a03 	ldbu	r2,40(r2)
  800978:	10803fcc 	andi	r2,r2,255
  80097c:	1080201c 	xori	r2,r2,128
  800980:	10bfe004 	addi	r2,r2,-128
  800984:	10000226 	beq	r2,zero,800990 <logic+0x700>
  800988:	00800044 	movi	r2,1
  80098c:	00000106 	br	800994 <logic+0x704>
  800990:	0005883a 	mov	r2,zero
  800994:	1007883a 	mov	r3,r2
  800998:	e0bffd17 	ldw	r2,-12(fp)
  80099c:	10c020c5 	stb	r3,131(r2)
  d->_g51 = d->_g56 && !d->_cg51;
  8009a0:	e0bffd17 	ldw	r2,-12(fp)
  8009a4:	10801343 	ldbu	r2,77(r2)
  8009a8:	10803fcc 	andi	r2,r2,255
  8009ac:	1080201c 	xori	r2,r2,128
  8009b0:	10bfe004 	addi	r2,r2,-128
  8009b4:	10000826 	beq	r2,zero,8009d8 <logic+0x748>
  8009b8:	e0bffd17 	ldw	r2,-12(fp)
  8009bc:	10802103 	ldbu	r2,132(r2)
  8009c0:	10803fcc 	andi	r2,r2,255
  8009c4:	1080201c 	xori	r2,r2,128
  8009c8:	10bfe004 	addi	r2,r2,-128
  8009cc:	1000021e 	bne	r2,zero,8009d8 <logic+0x748>
  8009d0:	00800044 	movi	r2,1
  8009d4:	00000106 	br	8009dc <logic+0x74c>
  8009d8:	0005883a 	mov	r2,zero
  8009dc:	1007883a 	mov	r3,r2
  8009e0:	e0bffd17 	ldw	r2,-12(fp)
  8009e4:	10c01245 	stb	r3,73(r2)
  d->_cg54 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  8009e8:	e0bffd17 	ldw	r2,-12(fp)
  8009ec:	10800983 	ldbu	r2,38(r2)
  8009f0:	10803fcc 	andi	r2,r2,255
  8009f4:	1080201c 	xori	r2,r2,128
  8009f8:	10bfe004 	addi	r2,r2,-128
  8009fc:	10000c1e 	bne	r2,zero,800a30 <logic+0x7a0>
  800a00:	e0bffd17 	ldw	r2,-12(fp)
  800a04:	108009c3 	ldbu	r2,39(r2)
  800a08:	10803fcc 	andi	r2,r2,255
  800a0c:	1080201c 	xori	r2,r2,128
  800a10:	10bfe004 	addi	r2,r2,-128
  800a14:	1000061e 	bne	r2,zero,800a30 <logic+0x7a0>
  800a18:	e0bffd17 	ldw	r2,-12(fp)
  800a1c:	10800a03 	ldbu	r2,40(r2)
  800a20:	10803fcc 	andi	r2,r2,255
  800a24:	1080201c 	xori	r2,r2,128
  800a28:	10bfe004 	addi	r2,r2,-128
  800a2c:	10000226 	beq	r2,zero,800a38 <logic+0x7a8>
  800a30:	00800044 	movi	r2,1
  800a34:	00000106 	br	800a3c <logic+0x7ac>
  800a38:	0005883a 	mov	r2,zero
  800a3c:	1007883a 	mov	r3,r2
  800a40:	e0bffd17 	ldw	r2,-12(fp)
  800a44:	10c02145 	stb	r3,133(r2)
  d->_g53 = d->_g50 && d->_cg52 || d->_g51 && d->_cg54;
  800a48:	e0bffd17 	ldw	r2,-12(fp)
  800a4c:	10801203 	ldbu	r2,72(r2)
  800a50:	10803fcc 	andi	r2,r2,255
  800a54:	1080201c 	xori	r2,r2,128
  800a58:	10bfe004 	addi	r2,r2,-128
  800a5c:	10000626 	beq	r2,zero,800a78 <logic+0x7e8>
  800a60:	e0bffd17 	ldw	r2,-12(fp)
  800a64:	108020c3 	ldbu	r2,131(r2)
  800a68:	10803fcc 	andi	r2,r2,255
  800a6c:	1080201c 	xori	r2,r2,128
  800a70:	10bfe004 	addi	r2,r2,-128
  800a74:	10000c1e 	bne	r2,zero,800aa8 <logic+0x818>
  800a78:	e0bffd17 	ldw	r2,-12(fp)
  800a7c:	10801243 	ldbu	r2,73(r2)
  800a80:	10803fcc 	andi	r2,r2,255
  800a84:	1080201c 	xori	r2,r2,128
  800a88:	10bfe004 	addi	r2,r2,-128
  800a8c:	10000826 	beq	r2,zero,800ab0 <logic+0x820>
  800a90:	e0bffd17 	ldw	r2,-12(fp)
  800a94:	10802143 	ldbu	r2,133(r2)
  800a98:	10803fcc 	andi	r2,r2,255
  800a9c:	1080201c 	xori	r2,r2,128
  800aa0:	10bfe004 	addi	r2,r2,-128
  800aa4:	10000226 	beq	r2,zero,800ab0 <logic+0x820>
  800aa8:	00800044 	movi	r2,1
  800aac:	00000106 	br	800ab4 <logic+0x824>
  800ab0:	0005883a 	mov	r2,zero
  800ab4:	1007883a 	mov	r3,r2
  800ab8:	e0bffd17 	ldw	r2,-12(fp)
  800abc:	10c012c5 	stb	r3,75(r2)
  d->_g67 = d->_pg38_e5;
  800ac0:	e0bffd17 	ldw	r2,-12(fp)
  800ac4:	10c02c83 	ldbu	r3,178(r2)
  800ac8:	e0bffd17 	ldw	r2,-12(fp)
  800acc:	10c014c5 	stb	r3,83(r2)
  d->_g61 = d->_pg7;
  800ad0:	e0bffd17 	ldw	r2,-12(fp)
  800ad4:	10c02cc3 	ldbu	r3,179(r2)
  800ad8:	e0bffd17 	ldw	r2,-12(fp)
  800adc:	10c01405 	stb	r3,80(r2)
  d->_g64_e3 = !(d->_g67 || d->_g61);
  800ae0:	e0bffd17 	ldw	r2,-12(fp)
  800ae4:	108014c3 	ldbu	r2,83(r2)
  800ae8:	10803fcc 	andi	r2,r2,255
  800aec:	1080201c 	xori	r2,r2,128
  800af0:	10bfe004 	addi	r2,r2,-128
  800af4:	1000081e 	bne	r2,zero,800b18 <logic+0x888>
  800af8:	e0bffd17 	ldw	r2,-12(fp)
  800afc:	10801403 	ldbu	r2,80(r2)
  800b00:	10803fcc 	andi	r2,r2,255
  800b04:	1080201c 	xori	r2,r2,128
  800b08:	10bfe004 	addi	r2,r2,-128
  800b0c:	1000021e 	bne	r2,zero,800b18 <logic+0x888>
  800b10:	00800044 	movi	r2,1
  800b14:	00000106 	br	800b1c <logic+0x88c>
  800b18:	0005883a 	mov	r2,zero
  800b1c:	1007883a 	mov	r3,r2
  800b20:	e0bffd17 	ldw	r2,-12(fp)
  800b24:	10c029c5 	stb	r3,167(r2)
  d->_g67 = d->_g61 || d->_g67;
  800b28:	e0bffd17 	ldw	r2,-12(fp)
  800b2c:	10801403 	ldbu	r2,80(r2)
  800b30:	10803fcc 	andi	r2,r2,255
  800b34:	1080201c 	xori	r2,r2,128
  800b38:	10bfe004 	addi	r2,r2,-128
  800b3c:	1000061e 	bne	r2,zero,800b58 <logic+0x8c8>
  800b40:	e0bffd17 	ldw	r2,-12(fp)
  800b44:	108014c3 	ldbu	r2,83(r2)
  800b48:	10803fcc 	andi	r2,r2,255
  800b4c:	1080201c 	xori	r2,r2,128
  800b50:	10bfe004 	addi	r2,r2,-128
  800b54:	10000226 	beq	r2,zero,800b60 <logic+0x8d0>
  800b58:	00800044 	movi	r2,1
  800b5c:	00000106 	br	800b64 <logic+0x8d4>
  800b60:	0005883a 	mov	r2,zero
  800b64:	1007883a 	mov	r3,r2
  800b68:	e0bffd17 	ldw	r2,-12(fp)
  800b6c:	10c014c5 	stb	r3,83(r2)
  d->_cg62 = d->_region0_Atrium_VentricleTimer < URI_VALUE;
  800b70:	e13ffd17 	ldw	r4,-12(fp)
  800b74:	20800017 	ldw	r2,0(r4)
  800b78:	20c00117 	ldw	r3,4(r4)
  800b7c:	04000044 	movi	r16,1
  800b80:	000d883a 	mov	r6,zero
  800b84:	01d02334 	movhi	r7,16524
  800b88:	39c80004 	addi	r7,r7,8192
  800b8c:	1009883a 	mov	r4,r2
  800b90:	180b883a 	mov	r5,r3
  800b94:	0804e7c0 	call	804e7c <__ledf2>
  800b98:	10000116 	blt	r2,zero,800ba0 <logic+0x910>
  800b9c:	0021883a 	mov	r16,zero
  800ba0:	8007883a 	mov	r3,r16
  800ba4:	e0bffd17 	ldw	r2,-12(fp)
  800ba8:	10c02285 	stb	r3,138(r2)
  d->_g61 = d->_g67 && d->_cg62;
  800bac:	e0bffd17 	ldw	r2,-12(fp)
  800bb0:	108014c3 	ldbu	r2,83(r2)
  800bb4:	10803fcc 	andi	r2,r2,255
  800bb8:	1080201c 	xori	r2,r2,128
  800bbc:	10bfe004 	addi	r2,r2,-128
  800bc0:	10000826 	beq	r2,zero,800be4 <logic+0x954>
  800bc4:	e0bffd17 	ldw	r2,-12(fp)
  800bc8:	10802283 	ldbu	r2,138(r2)
  800bcc:	10803fcc 	andi	r2,r2,255
  800bd0:	1080201c 	xori	r2,r2,128
  800bd4:	10bfe004 	addi	r2,r2,-128
  800bd8:	10000226 	beq	r2,zero,800be4 <logic+0x954>
  800bdc:	00800044 	movi	r2,1
  800be0:	00000106 	br	800be8 <logic+0x958>
  800be4:	0005883a 	mov	r2,zero
  800be8:	1007883a 	mov	r3,r2
  800bec:	e0bffd17 	ldw	r2,-12(fp)
  800bf0:	10c01405 	stb	r3,80(r2)
  if (d->_g61) {
  800bf4:	e0bffd17 	ldw	r2,-12(fp)
  800bf8:	10801403 	ldbu	r2,80(r2)
  800bfc:	10803fcc 	andi	r2,r2,255
  800c00:	1080201c 	xori	r2,r2,128
  800c04:	10bfe004 	addi	r2,r2,-128
  800c08:	10002a26 	beq	r2,zero,800cb4 <logic+0xa24>
    d->sleepT = (d->sleepT < (URI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (URI_VALUE - d->_region0_Atrium_VentricleTimer);
  800c0c:	e0bffd17 	ldw	r2,-12(fp)
  800c10:	14000617 	ldw	r16,24(r2)
  800c14:	14400717 	ldw	r17,28(r2)
  800c18:	e13ffd17 	ldw	r4,-12(fp)
  800c1c:	20800017 	ldw	r2,0(r4)
  800c20:	20c00117 	ldw	r3,4(r4)
  800c24:	100d883a 	mov	r6,r2
  800c28:	180f883a 	mov	r7,r3
  800c2c:	0009883a 	mov	r4,zero
  800c30:	01502334 	movhi	r5,16524
  800c34:	29480004 	addi	r5,r5,8192
  800c38:	08056880 	call	805688 <__subdf3>
  800c3c:	1009883a 	mov	r4,r2
  800c40:	180b883a 	mov	r5,r3
  800c44:	2005883a 	mov	r2,r4
  800c48:	2807883a 	mov	r3,r5
  800c4c:	100d883a 	mov	r6,r2
  800c50:	180f883a 	mov	r7,r3
  800c54:	8009883a 	mov	r4,r16
  800c58:	880b883a 	mov	r5,r17
  800c5c:	0804e7c0 	call	804e7c <__ledf2>
  800c60:	1000040e 	bge	r2,zero,800c74 <logic+0x9e4>
  800c64:	e13ffd17 	ldw	r4,-12(fp)
  800c68:	20800617 	ldw	r2,24(r4)
  800c6c:	20c00717 	ldw	r3,28(r4)
  800c70:	00000d06 	br	800ca8 <logic+0xa18>
  800c74:	e13ffd17 	ldw	r4,-12(fp)
  800c78:	20800017 	ldw	r2,0(r4)
  800c7c:	20c00117 	ldw	r3,4(r4)
  800c80:	100d883a 	mov	r6,r2
  800c84:	180f883a 	mov	r7,r3
  800c88:	0009883a 	mov	r4,zero
  800c8c:	01502334 	movhi	r5,16524
  800c90:	29480004 	addi	r5,r5,8192
  800c94:	08056880 	call	805688 <__subdf3>
  800c98:	1009883a 	mov	r4,r2
  800c9c:	180b883a 	mov	r5,r3
  800ca0:	2005883a 	mov	r2,r4
  800ca4:	2807883a 	mov	r3,r5
  800ca8:	e13ffd17 	ldw	r4,-12(fp)
  800cac:	20800615 	stw	r2,24(r4)
  800cb0:	20c00715 	stw	r3,28(r4)
  }
  d->_cg63 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  800cb4:	e0bffd17 	ldw	r2,-12(fp)
  800cb8:	10800983 	ldbu	r2,38(r2)
  800cbc:	10803fcc 	andi	r2,r2,255
  800cc0:	1080201c 	xori	r2,r2,128
  800cc4:	10bfe004 	addi	r2,r2,-128
  800cc8:	10000c1e 	bne	r2,zero,800cfc <logic+0xa6c>
  800ccc:	e0bffd17 	ldw	r2,-12(fp)
  800cd0:	108009c3 	ldbu	r2,39(r2)
  800cd4:	10803fcc 	andi	r2,r2,255
  800cd8:	1080201c 	xori	r2,r2,128
  800cdc:	10bfe004 	addi	r2,r2,-128
  800ce0:	1000061e 	bne	r2,zero,800cfc <logic+0xa6c>
  800ce4:	e0bffd17 	ldw	r2,-12(fp)
  800ce8:	10800a03 	ldbu	r2,40(r2)
  800cec:	10803fcc 	andi	r2,r2,255
  800cf0:	1080201c 	xori	r2,r2,128
  800cf4:	10bfe004 	addi	r2,r2,-128
  800cf8:	10000226 	beq	r2,zero,800d04 <logic+0xa74>
  800cfc:	00800044 	movi	r2,1
  800d00:	00000106 	br	800d08 <logic+0xa78>
  800d04:	0005883a 	mov	r2,zero
  800d08:	1007883a 	mov	r3,r2
  800d0c:	e0bffd17 	ldw	r2,-12(fp)
  800d10:	10c02245 	stb	r3,137(r2)
  d->_g62 = d->_g67 && !d->_cg62;
  800d14:	e0bffd17 	ldw	r2,-12(fp)
  800d18:	108014c3 	ldbu	r2,83(r2)
  800d1c:	10803fcc 	andi	r2,r2,255
  800d20:	1080201c 	xori	r2,r2,128
  800d24:	10bfe004 	addi	r2,r2,-128
  800d28:	10000826 	beq	r2,zero,800d4c <logic+0xabc>
  800d2c:	e0bffd17 	ldw	r2,-12(fp)
  800d30:	10802283 	ldbu	r2,138(r2)
  800d34:	10803fcc 	andi	r2,r2,255
  800d38:	1080201c 	xori	r2,r2,128
  800d3c:	10bfe004 	addi	r2,r2,-128
  800d40:	1000021e 	bne	r2,zero,800d4c <logic+0xabc>
  800d44:	00800044 	movi	r2,1
  800d48:	00000106 	br	800d50 <logic+0xac0>
  800d4c:	0005883a 	mov	r2,zero
  800d50:	1007883a 	mov	r3,r2
  800d54:	e0bffd17 	ldw	r2,-12(fp)
  800d58:	10c01445 	stb	r3,81(r2)
  d->_cg65 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  800d5c:	e0bffd17 	ldw	r2,-12(fp)
  800d60:	10800983 	ldbu	r2,38(r2)
  800d64:	10803fcc 	andi	r2,r2,255
  800d68:	1080201c 	xori	r2,r2,128
  800d6c:	10bfe004 	addi	r2,r2,-128
  800d70:	10000c1e 	bne	r2,zero,800da4 <logic+0xb14>
  800d74:	e0bffd17 	ldw	r2,-12(fp)
  800d78:	108009c3 	ldbu	r2,39(r2)
  800d7c:	10803fcc 	andi	r2,r2,255
  800d80:	1080201c 	xori	r2,r2,128
  800d84:	10bfe004 	addi	r2,r2,-128
  800d88:	1000061e 	bne	r2,zero,800da4 <logic+0xb14>
  800d8c:	e0bffd17 	ldw	r2,-12(fp)
  800d90:	10800a03 	ldbu	r2,40(r2)
  800d94:	10803fcc 	andi	r2,r2,255
  800d98:	1080201c 	xori	r2,r2,128
  800d9c:	10bfe004 	addi	r2,r2,-128
  800da0:	10000226 	beq	r2,zero,800dac <logic+0xb1c>
  800da4:	00800044 	movi	r2,1
  800da8:	00000106 	br	800db0 <logic+0xb20>
  800dac:	0005883a 	mov	r2,zero
  800db0:	1007883a 	mov	r3,r2
  800db4:	e0bffd17 	ldw	r2,-12(fp)
  800db8:	10c022c5 	stb	r3,139(r2)
  d->_g64 = d->_g61 && d->_cg63 || d->_g62 && d->_cg65;
  800dbc:	e0bffd17 	ldw	r2,-12(fp)
  800dc0:	10801403 	ldbu	r2,80(r2)
  800dc4:	10803fcc 	andi	r2,r2,255
  800dc8:	1080201c 	xori	r2,r2,128
  800dcc:	10bfe004 	addi	r2,r2,-128
  800dd0:	10000626 	beq	r2,zero,800dec <logic+0xb5c>
  800dd4:	e0bffd17 	ldw	r2,-12(fp)
  800dd8:	10802243 	ldbu	r2,137(r2)
  800ddc:	10803fcc 	andi	r2,r2,255
  800de0:	1080201c 	xori	r2,r2,128
  800de4:	10bfe004 	addi	r2,r2,-128
  800de8:	10000c1e 	bne	r2,zero,800e1c <logic+0xb8c>
  800dec:	e0bffd17 	ldw	r2,-12(fp)
  800df0:	10801443 	ldbu	r2,81(r2)
  800df4:	10803fcc 	andi	r2,r2,255
  800df8:	1080201c 	xori	r2,r2,128
  800dfc:	10bfe004 	addi	r2,r2,-128
  800e00:	10000826 	beq	r2,zero,800e24 <logic+0xb94>
  800e04:	e0bffd17 	ldw	r2,-12(fp)
  800e08:	108022c3 	ldbu	r2,139(r2)
  800e0c:	10803fcc 	andi	r2,r2,255
  800e10:	1080201c 	xori	r2,r2,128
  800e14:	10bfe004 	addi	r2,r2,-128
  800e18:	10000226 	beq	r2,zero,800e24 <logic+0xb94>
  800e1c:	00800044 	movi	r2,1
  800e20:	00000106 	br	800e28 <logic+0xb98>
  800e24:	0005883a 	mov	r2,zero
  800e28:	1007883a 	mov	r3,r2
  800e2c:	e0bffd17 	ldw	r2,-12(fp)
  800e30:	10c01485 	stb	r3,82(r2)
  d->_g78 = d->_pg41;
  800e34:	e0bffd17 	ldw	r2,-12(fp)
  800e38:	10c02d03 	ldbu	r3,180(r2)
  800e3c:	e0bffd17 	ldw	r2,-12(fp)
  800e40:	10c015c5 	stb	r3,87(r2)
  d->_g72 = d->_pg14_e2;
  800e44:	e0bffd17 	ldw	r2,-12(fp)
  800e48:	10c02d43 	ldbu	r3,181(r2)
  800e4c:	e0bffd17 	ldw	r2,-12(fp)
  800e50:	10c01505 	stb	r3,84(r2)
  d->_g75_e4 = !(d->_g78 || d->_g72);
  800e54:	e0bffd17 	ldw	r2,-12(fp)
  800e58:	108015c3 	ldbu	r2,87(r2)
  800e5c:	10803fcc 	andi	r2,r2,255
  800e60:	1080201c 	xori	r2,r2,128
  800e64:	10bfe004 	addi	r2,r2,-128
  800e68:	1000081e 	bne	r2,zero,800e8c <logic+0xbfc>
  800e6c:	e0bffd17 	ldw	r2,-12(fp)
  800e70:	10801503 	ldbu	r2,84(r2)
  800e74:	10803fcc 	andi	r2,r2,255
  800e78:	1080201c 	xori	r2,r2,128
  800e7c:	10bfe004 	addi	r2,r2,-128
  800e80:	1000021e 	bne	r2,zero,800e8c <logic+0xbfc>
  800e84:	00800044 	movi	r2,1
  800e88:	00000106 	br	800e90 <logic+0xc00>
  800e8c:	0005883a 	mov	r2,zero
  800e90:	1007883a 	mov	r3,r2
  800e94:	e0bffd17 	ldw	r2,-12(fp)
  800e98:	10c02a05 	stb	r3,168(r2)
  d->_g78 = d->_g72 || d->_g78;
  800e9c:	e0bffd17 	ldw	r2,-12(fp)
  800ea0:	10801503 	ldbu	r2,84(r2)
  800ea4:	10803fcc 	andi	r2,r2,255
  800ea8:	1080201c 	xori	r2,r2,128
  800eac:	10bfe004 	addi	r2,r2,-128
  800eb0:	1000061e 	bne	r2,zero,800ecc <logic+0xc3c>
  800eb4:	e0bffd17 	ldw	r2,-12(fp)
  800eb8:	108015c3 	ldbu	r2,87(r2)
  800ebc:	10803fcc 	andi	r2,r2,255
  800ec0:	1080201c 	xori	r2,r2,128
  800ec4:	10bfe004 	addi	r2,r2,-128
  800ec8:	10000226 	beq	r2,zero,800ed4 <logic+0xc44>
  800ecc:	00800044 	movi	r2,1
  800ed0:	00000106 	br	800ed8 <logic+0xc48>
  800ed4:	0005883a 	mov	r2,zero
  800ed8:	1007883a 	mov	r3,r2
  800edc:	e0bffd17 	ldw	r2,-12(fp)
  800ee0:	10c015c5 	stb	r3,87(r2)
  d->_cg73 = d->_region0_Atrium_VentricleTimer < LRI_VALUE;
  800ee4:	e13ffd17 	ldw	r4,-12(fp)
  800ee8:	20800017 	ldw	r2,0(r4)
  800eec:	20c00117 	ldw	r3,4(r4)
  800ef0:	04000044 	movi	r16,1
  800ef4:	000d883a 	mov	r6,zero
  800ef8:	01d023b4 	movhi	r7,16526
  800efc:	39ec0004 	addi	r7,r7,-20480
  800f00:	1009883a 	mov	r4,r2
  800f04:	180b883a 	mov	r5,r3
  800f08:	0804e7c0 	call	804e7c <__ledf2>
  800f0c:	10000116 	blt	r2,zero,800f14 <logic+0xc84>
  800f10:	0021883a 	mov	r16,zero
  800f14:	8007883a 	mov	r3,r16
  800f18:	e0bffd17 	ldw	r2,-12(fp)
  800f1c:	10c02405 	stb	r3,144(r2)
  d->_g72 = d->_g78 && d->_cg73;
  800f20:	e0bffd17 	ldw	r2,-12(fp)
  800f24:	108015c3 	ldbu	r2,87(r2)
  800f28:	10803fcc 	andi	r2,r2,255
  800f2c:	1080201c 	xori	r2,r2,128
  800f30:	10bfe004 	addi	r2,r2,-128
  800f34:	10000826 	beq	r2,zero,800f58 <logic+0xcc8>
  800f38:	e0bffd17 	ldw	r2,-12(fp)
  800f3c:	10802403 	ldbu	r2,144(r2)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	1080201c 	xori	r2,r2,128
  800f48:	10bfe004 	addi	r2,r2,-128
  800f4c:	10000226 	beq	r2,zero,800f58 <logic+0xcc8>
  800f50:	00800044 	movi	r2,1
  800f54:	00000106 	br	800f5c <logic+0xccc>
  800f58:	0005883a 	mov	r2,zero
  800f5c:	1007883a 	mov	r3,r2
  800f60:	e0bffd17 	ldw	r2,-12(fp)
  800f64:	10c01505 	stb	r3,84(r2)
  if (d->_g72) {
  800f68:	e0bffd17 	ldw	r2,-12(fp)
  800f6c:	10801503 	ldbu	r2,84(r2)
  800f70:	10803fcc 	andi	r2,r2,255
  800f74:	1080201c 	xori	r2,r2,128
  800f78:	10bfe004 	addi	r2,r2,-128
  800f7c:	10002a26 	beq	r2,zero,801028 <logic+0xd98>
    d->sleepT = (d->sleepT < (LRI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (LRI_VALUE - d->_region0_Atrium_VentricleTimer);
  800f80:	e0bffd17 	ldw	r2,-12(fp)
  800f84:	14000617 	ldw	r16,24(r2)
  800f88:	14400717 	ldw	r17,28(r2)
  800f8c:	e13ffd17 	ldw	r4,-12(fp)
  800f90:	20800017 	ldw	r2,0(r4)
  800f94:	20c00117 	ldw	r3,4(r4)
  800f98:	100d883a 	mov	r6,r2
  800f9c:	180f883a 	mov	r7,r3
  800fa0:	0009883a 	mov	r4,zero
  800fa4:	015023b4 	movhi	r5,16526
  800fa8:	296c0004 	addi	r5,r5,-20480
  800fac:	08056880 	call	805688 <__subdf3>
  800fb0:	1009883a 	mov	r4,r2
  800fb4:	180b883a 	mov	r5,r3
  800fb8:	2005883a 	mov	r2,r4
  800fbc:	2807883a 	mov	r3,r5
  800fc0:	100d883a 	mov	r6,r2
  800fc4:	180f883a 	mov	r7,r3
  800fc8:	8009883a 	mov	r4,r16
  800fcc:	880b883a 	mov	r5,r17
  800fd0:	0804e7c0 	call	804e7c <__ledf2>
  800fd4:	1000040e 	bge	r2,zero,800fe8 <logic+0xd58>
  800fd8:	e13ffd17 	ldw	r4,-12(fp)
  800fdc:	20800617 	ldw	r2,24(r4)
  800fe0:	20c00717 	ldw	r3,28(r4)
  800fe4:	00000d06 	br	80101c <logic+0xd8c>
  800fe8:	e13ffd17 	ldw	r4,-12(fp)
  800fec:	20800017 	ldw	r2,0(r4)
  800ff0:	20c00117 	ldw	r3,4(r4)
  800ff4:	100d883a 	mov	r6,r2
  800ff8:	180f883a 	mov	r7,r3
  800ffc:	0009883a 	mov	r4,zero
  801000:	015023b4 	movhi	r5,16526
  801004:	296c0004 	addi	r5,r5,-20480
  801008:	08056880 	call	805688 <__subdf3>
  80100c:	1009883a 	mov	r4,r2
  801010:	180b883a 	mov	r5,r3
  801014:	2005883a 	mov	r2,r4
  801018:	2807883a 	mov	r3,r5
  80101c:	e13ffd17 	ldw	r4,-12(fp)
  801020:	20800615 	stw	r2,24(r4)
  801024:	20c00715 	stw	r3,28(r4)
  }
  d->_cg74 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  801028:	e0bffd17 	ldw	r2,-12(fp)
  80102c:	10800983 	ldbu	r2,38(r2)
  801030:	10803fcc 	andi	r2,r2,255
  801034:	1080201c 	xori	r2,r2,128
  801038:	10bfe004 	addi	r2,r2,-128
  80103c:	10000c1e 	bne	r2,zero,801070 <logic+0xde0>
  801040:	e0bffd17 	ldw	r2,-12(fp)
  801044:	108009c3 	ldbu	r2,39(r2)
  801048:	10803fcc 	andi	r2,r2,255
  80104c:	1080201c 	xori	r2,r2,128
  801050:	10bfe004 	addi	r2,r2,-128
  801054:	1000061e 	bne	r2,zero,801070 <logic+0xde0>
  801058:	e0bffd17 	ldw	r2,-12(fp)
  80105c:	10800a03 	ldbu	r2,40(r2)
  801060:	10803fcc 	andi	r2,r2,255
  801064:	1080201c 	xori	r2,r2,128
  801068:	10bfe004 	addi	r2,r2,-128
  80106c:	10000226 	beq	r2,zero,801078 <logic+0xde8>
  801070:	00800044 	movi	r2,1
  801074:	00000106 	br	80107c <logic+0xdec>
  801078:	0005883a 	mov	r2,zero
  80107c:	1007883a 	mov	r3,r2
  801080:	e0bffd17 	ldw	r2,-12(fp)
  801084:	10c023c5 	stb	r3,143(r2)
  d->_g73 = d->_g78 && !d->_cg73;
  801088:	e0bffd17 	ldw	r2,-12(fp)
  80108c:	108015c3 	ldbu	r2,87(r2)
  801090:	10803fcc 	andi	r2,r2,255
  801094:	1080201c 	xori	r2,r2,128
  801098:	10bfe004 	addi	r2,r2,-128
  80109c:	10000826 	beq	r2,zero,8010c0 <logic+0xe30>
  8010a0:	e0bffd17 	ldw	r2,-12(fp)
  8010a4:	10802403 	ldbu	r2,144(r2)
  8010a8:	10803fcc 	andi	r2,r2,255
  8010ac:	1080201c 	xori	r2,r2,128
  8010b0:	10bfe004 	addi	r2,r2,-128
  8010b4:	1000021e 	bne	r2,zero,8010c0 <logic+0xe30>
  8010b8:	00800044 	movi	r2,1
  8010bc:	00000106 	br	8010c4 <logic+0xe34>
  8010c0:	0005883a 	mov	r2,zero
  8010c4:	1007883a 	mov	r3,r2
  8010c8:	e0bffd17 	ldw	r2,-12(fp)
  8010cc:	10c01545 	stb	r3,85(r2)
  d->_cg76 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  8010d0:	e0bffd17 	ldw	r2,-12(fp)
  8010d4:	10800983 	ldbu	r2,38(r2)
  8010d8:	10803fcc 	andi	r2,r2,255
  8010dc:	1080201c 	xori	r2,r2,128
  8010e0:	10bfe004 	addi	r2,r2,-128
  8010e4:	10000c1e 	bne	r2,zero,801118 <logic+0xe88>
  8010e8:	e0bffd17 	ldw	r2,-12(fp)
  8010ec:	108009c3 	ldbu	r2,39(r2)
  8010f0:	10803fcc 	andi	r2,r2,255
  8010f4:	1080201c 	xori	r2,r2,128
  8010f8:	10bfe004 	addi	r2,r2,-128
  8010fc:	1000061e 	bne	r2,zero,801118 <logic+0xe88>
  801100:	e0bffd17 	ldw	r2,-12(fp)
  801104:	10800a03 	ldbu	r2,40(r2)
  801108:	10803fcc 	andi	r2,r2,255
  80110c:	1080201c 	xori	r2,r2,128
  801110:	10bfe004 	addi	r2,r2,-128
  801114:	10000226 	beq	r2,zero,801120 <logic+0xe90>
  801118:	00800044 	movi	r2,1
  80111c:	00000106 	br	801124 <logic+0xe94>
  801120:	0005883a 	mov	r2,zero
  801124:	1007883a 	mov	r3,r2
  801128:	e0bffd17 	ldw	r2,-12(fp)
  80112c:	10c02445 	stb	r3,145(r2)
  d->_g75 = d->_g72 && d->_cg74 || d->_g73 && d->_cg76;
  801130:	e0bffd17 	ldw	r2,-12(fp)
  801134:	10801503 	ldbu	r2,84(r2)
  801138:	10803fcc 	andi	r2,r2,255
  80113c:	1080201c 	xori	r2,r2,128
  801140:	10bfe004 	addi	r2,r2,-128
  801144:	10000626 	beq	r2,zero,801160 <logic+0xed0>
  801148:	e0bffd17 	ldw	r2,-12(fp)
  80114c:	108023c3 	ldbu	r2,143(r2)
  801150:	10803fcc 	andi	r2,r2,255
  801154:	1080201c 	xori	r2,r2,128
  801158:	10bfe004 	addi	r2,r2,-128
  80115c:	10000c1e 	bne	r2,zero,801190 <logic+0xf00>
  801160:	e0bffd17 	ldw	r2,-12(fp)
  801164:	10801543 	ldbu	r2,85(r2)
  801168:	10803fcc 	andi	r2,r2,255
  80116c:	1080201c 	xori	r2,r2,128
  801170:	10bfe004 	addi	r2,r2,-128
  801174:	10000826 	beq	r2,zero,801198 <logic+0xf08>
  801178:	e0bffd17 	ldw	r2,-12(fp)
  80117c:	10802443 	ldbu	r2,145(r2)
  801180:	10803fcc 	andi	r2,r2,255
  801184:	1080201c 	xori	r2,r2,128
  801188:	10bfe004 	addi	r2,r2,-128
  80118c:	10000226 	beq	r2,zero,801198 <logic+0xf08>
  801190:	00800044 	movi	r2,1
  801194:	00000106 	br	80119c <logic+0xf0c>
  801198:	0005883a 	mov	r2,zero
  80119c:	1007883a 	mov	r3,r2
  8011a0:	e0bffd17 	ldw	r2,-12(fp)
  8011a4:	10c01585 	stb	r3,86(r2)
  d->_g83_e5 = !d->_g82;
  8011a8:	e0bffd17 	ldw	r2,-12(fp)
  8011ac:	10801603 	ldbu	r2,88(r2)
  8011b0:	10803fcc 	andi	r2,r2,255
  8011b4:	1080201c 	xori	r2,r2,128
  8011b8:	10bfe004 	addi	r2,r2,-128
  8011bc:	1005003a 	cmpeq	r2,r2,zero
  8011c0:	1007883a 	mov	r3,r2
  8011c4:	e0bffd17 	ldw	r2,-12(fp)
  8011c8:	10c02a45 	stb	r3,169(r2)
  d->_cg82 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  8011cc:	e0bffd17 	ldw	r2,-12(fp)
  8011d0:	10800983 	ldbu	r2,38(r2)
  8011d4:	10803fcc 	andi	r2,r2,255
  8011d8:	1080201c 	xori	r2,r2,128
  8011dc:	10bfe004 	addi	r2,r2,-128
  8011e0:	10000c1e 	bne	r2,zero,801214 <logic+0xf84>
  8011e4:	e0bffd17 	ldw	r2,-12(fp)
  8011e8:	108009c3 	ldbu	r2,39(r2)
  8011ec:	10803fcc 	andi	r2,r2,255
  8011f0:	1080201c 	xori	r2,r2,128
  8011f4:	10bfe004 	addi	r2,r2,-128
  8011f8:	1000061e 	bne	r2,zero,801214 <logic+0xf84>
  8011fc:	e0bffd17 	ldw	r2,-12(fp)
  801200:	10800a03 	ldbu	r2,40(r2)
  801204:	10803fcc 	andi	r2,r2,255
  801208:	1080201c 	xori	r2,r2,128
  80120c:	10bfe004 	addi	r2,r2,-128
  801210:	10000226 	beq	r2,zero,80121c <logic+0xf8c>
  801214:	00800044 	movi	r2,1
  801218:	00000106 	br	801220 <logic+0xf90>
  80121c:	0005883a 	mov	r2,zero
  801220:	1007883a 	mov	r3,r2
  801224:	e0bffd17 	ldw	r2,-12(fp)
  801228:	10c02505 	stb	r3,148(r2)
  d->_g83 = d->_g82 && d->_cg82;
  80122c:	e0bffd17 	ldw	r2,-12(fp)
  801230:	10801603 	ldbu	r2,88(r2)
  801234:	10803fcc 	andi	r2,r2,255
  801238:	1080201c 	xori	r2,r2,128
  80123c:	10bfe004 	addi	r2,r2,-128
  801240:	10000826 	beq	r2,zero,801264 <logic+0xfd4>
  801244:	e0bffd17 	ldw	r2,-12(fp)
  801248:	10802503 	ldbu	r2,148(r2)
  80124c:	10803fcc 	andi	r2,r2,255
  801250:	1080201c 	xori	r2,r2,128
  801254:	10bfe004 	addi	r2,r2,-128
  801258:	10000226 	beq	r2,zero,801264 <logic+0xfd4>
  80125c:	00800044 	movi	r2,1
  801260:	00000106 	br	801268 <logic+0xfd8>
  801264:	0005883a 	mov	r2,zero
  801268:	1007883a 	mov	r3,r2
  80126c:	e0bffd17 	ldw	r2,-12(fp)
  801270:	10c01645 	stb	r3,89(r2)
  d->_g93 = d->_pg54;
  801274:	e0bffd17 	ldw	r2,-12(fp)
  801278:	10c02d83 	ldbu	r3,182(r2)
  80127c:	e0bffd17 	ldw	r2,-12(fp)
  801280:	10c01745 	stb	r3,93(r2)
  d->_g87 = d->_pg52;
  801284:	e0bffd17 	ldw	r2,-12(fp)
  801288:	10c02dc3 	ldbu	r3,183(r2)
  80128c:	e0bffd17 	ldw	r2,-12(fp)
  801290:	10c01685 	stb	r3,90(r2)
  d->_g90_e6 = !(d->_g93 || d->_g87);
  801294:	e0bffd17 	ldw	r2,-12(fp)
  801298:	10801743 	ldbu	r2,93(r2)
  80129c:	10803fcc 	andi	r2,r2,255
  8012a0:	1080201c 	xori	r2,r2,128
  8012a4:	10bfe004 	addi	r2,r2,-128
  8012a8:	1000081e 	bne	r2,zero,8012cc <logic+0x103c>
  8012ac:	e0bffd17 	ldw	r2,-12(fp)
  8012b0:	10801683 	ldbu	r2,90(r2)
  8012b4:	10803fcc 	andi	r2,r2,255
  8012b8:	1080201c 	xori	r2,r2,128
  8012bc:	10bfe004 	addi	r2,r2,-128
  8012c0:	1000021e 	bne	r2,zero,8012cc <logic+0x103c>
  8012c4:	00800044 	movi	r2,1
  8012c8:	00000106 	br	8012d0 <logic+0x1040>
  8012cc:	0005883a 	mov	r2,zero
  8012d0:	1007883a 	mov	r3,r2
  8012d4:	e0bffd17 	ldw	r2,-12(fp)
  8012d8:	10c02a85 	stb	r3,170(r2)
  d->_g93 = d->_g87 || d->_g93;
  8012dc:	e0bffd17 	ldw	r2,-12(fp)
  8012e0:	10801683 	ldbu	r2,90(r2)
  8012e4:	10803fcc 	andi	r2,r2,255
  8012e8:	1080201c 	xori	r2,r2,128
  8012ec:	10bfe004 	addi	r2,r2,-128
  8012f0:	1000061e 	bne	r2,zero,80130c <logic+0x107c>
  8012f4:	e0bffd17 	ldw	r2,-12(fp)
  8012f8:	10801743 	ldbu	r2,93(r2)
  8012fc:	10803fcc 	andi	r2,r2,255
  801300:	1080201c 	xori	r2,r2,128
  801304:	10bfe004 	addi	r2,r2,-128
  801308:	10000226 	beq	r2,zero,801314 <logic+0x1084>
  80130c:	00800044 	movi	r2,1
  801310:	00000106 	br	801318 <logic+0x1088>
  801314:	0005883a 	mov	r2,zero
  801318:	1007883a 	mov	r3,r2
  80131c:	e0bffd17 	ldw	r2,-12(fp)
  801320:	10c01745 	stb	r3,93(r2)
  d->_cg88 = d->_region0_Atrium_AtriumTimer < AVI_VALUE;
  801324:	e13ffd17 	ldw	r4,-12(fp)
  801328:	20800217 	ldw	r2,8(r4)
  80132c:	20c00317 	ldw	r3,12(r4)
  801330:	04000044 	movi	r16,1
  801334:	000d883a 	mov	r6,zero
  801338:	01d01cf4 	movhi	r7,16499
  80133c:	39f00004 	addi	r7,r7,-16384
  801340:	1009883a 	mov	r4,r2
  801344:	180b883a 	mov	r5,r3
  801348:	0804e7c0 	call	804e7c <__ledf2>
  80134c:	10000116 	blt	r2,zero,801354 <logic+0x10c4>
  801350:	0021883a 	mov	r16,zero
  801354:	8007883a 	mov	r3,r16
  801358:	e0bffd17 	ldw	r2,-12(fp)
  80135c:	10c02605 	stb	r3,152(r2)
  d->_g87 = d->_g93 && d->_cg88;
  801360:	e0bffd17 	ldw	r2,-12(fp)
  801364:	10801743 	ldbu	r2,93(r2)
  801368:	10803fcc 	andi	r2,r2,255
  80136c:	1080201c 	xori	r2,r2,128
  801370:	10bfe004 	addi	r2,r2,-128
  801374:	10000826 	beq	r2,zero,801398 <logic+0x1108>
  801378:	e0bffd17 	ldw	r2,-12(fp)
  80137c:	10802603 	ldbu	r2,152(r2)
  801380:	10803fcc 	andi	r2,r2,255
  801384:	1080201c 	xori	r2,r2,128
  801388:	10bfe004 	addi	r2,r2,-128
  80138c:	10000226 	beq	r2,zero,801398 <logic+0x1108>
  801390:	00800044 	movi	r2,1
  801394:	00000106 	br	80139c <logic+0x110c>
  801398:	0005883a 	mov	r2,zero
  80139c:	1007883a 	mov	r3,r2
  8013a0:	e0bffd17 	ldw	r2,-12(fp)
  8013a4:	10c01685 	stb	r3,90(r2)
  if (d->_g87) {
  8013a8:	e0bffd17 	ldw	r2,-12(fp)
  8013ac:	10801683 	ldbu	r2,90(r2)
  8013b0:	10803fcc 	andi	r2,r2,255
  8013b4:	1080201c 	xori	r2,r2,128
  8013b8:	10bfe004 	addi	r2,r2,-128
  8013bc:	10002a26 	beq	r2,zero,801468 <logic+0x11d8>
    d->sleepT = (d->sleepT < (AVI_VALUE - d->_region0_Atrium_AtriumTimer)) ? d->sleepT : (AVI_VALUE - d->_region0_Atrium_AtriumTimer);
  8013c0:	e0bffd17 	ldw	r2,-12(fp)
  8013c4:	14000617 	ldw	r16,24(r2)
  8013c8:	14400717 	ldw	r17,28(r2)
  8013cc:	e13ffd17 	ldw	r4,-12(fp)
  8013d0:	20800217 	ldw	r2,8(r4)
  8013d4:	20c00317 	ldw	r3,12(r4)
  8013d8:	100d883a 	mov	r6,r2
  8013dc:	180f883a 	mov	r7,r3
  8013e0:	0009883a 	mov	r4,zero
  8013e4:	01501cf4 	movhi	r5,16499
  8013e8:	29700004 	addi	r5,r5,-16384
  8013ec:	08056880 	call	805688 <__subdf3>
  8013f0:	1009883a 	mov	r4,r2
  8013f4:	180b883a 	mov	r5,r3
  8013f8:	2005883a 	mov	r2,r4
  8013fc:	2807883a 	mov	r3,r5
  801400:	100d883a 	mov	r6,r2
  801404:	180f883a 	mov	r7,r3
  801408:	8009883a 	mov	r4,r16
  80140c:	880b883a 	mov	r5,r17
  801410:	0804e7c0 	call	804e7c <__ledf2>
  801414:	1000040e 	bge	r2,zero,801428 <logic+0x1198>
  801418:	e13ffd17 	ldw	r4,-12(fp)
  80141c:	20800617 	ldw	r2,24(r4)
  801420:	20c00717 	ldw	r3,28(r4)
  801424:	00000d06 	br	80145c <logic+0x11cc>
  801428:	e13ffd17 	ldw	r4,-12(fp)
  80142c:	20800217 	ldw	r2,8(r4)
  801430:	20c00317 	ldw	r3,12(r4)
  801434:	100d883a 	mov	r6,r2
  801438:	180f883a 	mov	r7,r3
  80143c:	0009883a 	mov	r4,zero
  801440:	01501cf4 	movhi	r5,16499
  801444:	29700004 	addi	r5,r5,-16384
  801448:	08056880 	call	805688 <__subdf3>
  80144c:	1009883a 	mov	r4,r2
  801450:	180b883a 	mov	r5,r3
  801454:	2005883a 	mov	r2,r4
  801458:	2807883a 	mov	r3,r5
  80145c:	e13ffd17 	ldw	r4,-12(fp)
  801460:	20800615 	stw	r2,24(r4)
  801464:	20c00715 	stw	r3,28(r4)
  }
  d->_cg89 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  801468:	e0bffd17 	ldw	r2,-12(fp)
  80146c:	10800983 	ldbu	r2,38(r2)
  801470:	10803fcc 	andi	r2,r2,255
  801474:	1080201c 	xori	r2,r2,128
  801478:	10bfe004 	addi	r2,r2,-128
  80147c:	10000c1e 	bne	r2,zero,8014b0 <logic+0x1220>
  801480:	e0bffd17 	ldw	r2,-12(fp)
  801484:	108009c3 	ldbu	r2,39(r2)
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1080201c 	xori	r2,r2,128
  801490:	10bfe004 	addi	r2,r2,-128
  801494:	1000061e 	bne	r2,zero,8014b0 <logic+0x1220>
  801498:	e0bffd17 	ldw	r2,-12(fp)
  80149c:	10800a03 	ldbu	r2,40(r2)
  8014a0:	10803fcc 	andi	r2,r2,255
  8014a4:	1080201c 	xori	r2,r2,128
  8014a8:	10bfe004 	addi	r2,r2,-128
  8014ac:	10000226 	beq	r2,zero,8014b8 <logic+0x1228>
  8014b0:	00800044 	movi	r2,1
  8014b4:	00000106 	br	8014bc <logic+0x122c>
  8014b8:	0005883a 	mov	r2,zero
  8014bc:	1007883a 	mov	r3,r2
  8014c0:	e0bffd17 	ldw	r2,-12(fp)
  8014c4:	10c025c5 	stb	r3,151(r2)
  d->_g88 = d->_g93 && !d->_cg88;
  8014c8:	e0bffd17 	ldw	r2,-12(fp)
  8014cc:	10801743 	ldbu	r2,93(r2)
  8014d0:	10803fcc 	andi	r2,r2,255
  8014d4:	1080201c 	xori	r2,r2,128
  8014d8:	10bfe004 	addi	r2,r2,-128
  8014dc:	10000826 	beq	r2,zero,801500 <logic+0x1270>
  8014e0:	e0bffd17 	ldw	r2,-12(fp)
  8014e4:	10802603 	ldbu	r2,152(r2)
  8014e8:	10803fcc 	andi	r2,r2,255
  8014ec:	1080201c 	xori	r2,r2,128
  8014f0:	10bfe004 	addi	r2,r2,-128
  8014f4:	1000021e 	bne	r2,zero,801500 <logic+0x1270>
  8014f8:	00800044 	movi	r2,1
  8014fc:	00000106 	br	801504 <logic+0x1274>
  801500:	0005883a 	mov	r2,zero
  801504:	1007883a 	mov	r3,r2
  801508:	e0bffd17 	ldw	r2,-12(fp)
  80150c:	10c016c5 	stb	r3,91(r2)
  d->_cg91 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  801510:	e0bffd17 	ldw	r2,-12(fp)
  801514:	10800983 	ldbu	r2,38(r2)
  801518:	10803fcc 	andi	r2,r2,255
  80151c:	1080201c 	xori	r2,r2,128
  801520:	10bfe004 	addi	r2,r2,-128
  801524:	10000c1e 	bne	r2,zero,801558 <logic+0x12c8>
  801528:	e0bffd17 	ldw	r2,-12(fp)
  80152c:	108009c3 	ldbu	r2,39(r2)
  801530:	10803fcc 	andi	r2,r2,255
  801534:	1080201c 	xori	r2,r2,128
  801538:	10bfe004 	addi	r2,r2,-128
  80153c:	1000061e 	bne	r2,zero,801558 <logic+0x12c8>
  801540:	e0bffd17 	ldw	r2,-12(fp)
  801544:	10800a03 	ldbu	r2,40(r2)
  801548:	10803fcc 	andi	r2,r2,255
  80154c:	1080201c 	xori	r2,r2,128
  801550:	10bfe004 	addi	r2,r2,-128
  801554:	10000226 	beq	r2,zero,801560 <logic+0x12d0>
  801558:	00800044 	movi	r2,1
  80155c:	00000106 	br	801564 <logic+0x12d4>
  801560:	0005883a 	mov	r2,zero
  801564:	1007883a 	mov	r3,r2
  801568:	e0bffd17 	ldw	r2,-12(fp)
  80156c:	10c02645 	stb	r3,153(r2)
  d->_g90 = d->_g87 && d->_cg89 || d->_g88 && d->_cg91;
  801570:	e0bffd17 	ldw	r2,-12(fp)
  801574:	10801683 	ldbu	r2,90(r2)
  801578:	10803fcc 	andi	r2,r2,255
  80157c:	1080201c 	xori	r2,r2,128
  801580:	10bfe004 	addi	r2,r2,-128
  801584:	10000626 	beq	r2,zero,8015a0 <logic+0x1310>
  801588:	e0bffd17 	ldw	r2,-12(fp)
  80158c:	108025c3 	ldbu	r2,151(r2)
  801590:	10803fcc 	andi	r2,r2,255
  801594:	1080201c 	xori	r2,r2,128
  801598:	10bfe004 	addi	r2,r2,-128
  80159c:	10000c1e 	bne	r2,zero,8015d0 <logic+0x1340>
  8015a0:	e0bffd17 	ldw	r2,-12(fp)
  8015a4:	108016c3 	ldbu	r2,91(r2)
  8015a8:	10803fcc 	andi	r2,r2,255
  8015ac:	1080201c 	xori	r2,r2,128
  8015b0:	10bfe004 	addi	r2,r2,-128
  8015b4:	10000826 	beq	r2,zero,8015d8 <logic+0x1348>
  8015b8:	e0bffd17 	ldw	r2,-12(fp)
  8015bc:	10802643 	ldbu	r2,153(r2)
  8015c0:	10803fcc 	andi	r2,r2,255
  8015c4:	1080201c 	xori	r2,r2,128
  8015c8:	10bfe004 	addi	r2,r2,-128
  8015cc:	10000226 	beq	r2,zero,8015d8 <logic+0x1348>
  8015d0:	00800044 	movi	r2,1
  8015d4:	00000106 	br	8015dc <logic+0x134c>
  8015d8:	0005883a 	mov	r2,zero
  8015dc:	1007883a 	mov	r3,r2
  8015e0:	e0bffd17 	ldw	r2,-12(fp)
  8015e4:	10c01705 	stb	r3,92(r2)
  d->_g97 = !d->_g97;
  8015e8:	e0bffd17 	ldw	r2,-12(fp)
  8015ec:	10801783 	ldbu	r2,94(r2)
  8015f0:	10803fcc 	andi	r2,r2,255
  8015f4:	1080201c 	xori	r2,r2,128
  8015f8:	10bfe004 	addi	r2,r2,-128
  8015fc:	1005003a 	cmpeq	r2,r2,zero
  801600:	1007883a 	mov	r3,r2
  801604:	e0bffd17 	ldw	r2,-12(fp)
  801608:	10c01785 	stb	r3,94(r2)
  d->_g101 = d->_g98 || d->_g101 || d->_g103;
  80160c:	e0bffd17 	ldw	r2,-12(fp)
  801610:	108017c3 	ldbu	r2,95(r2)
  801614:	10803fcc 	andi	r2,r2,255
  801618:	1080201c 	xori	r2,r2,128
  80161c:	10bfe004 	addi	r2,r2,-128
  801620:	10000c1e 	bne	r2,zero,801654 <logic+0x13c4>
  801624:	e0bffd17 	ldw	r2,-12(fp)
  801628:	10801883 	ldbu	r2,98(r2)
  80162c:	10803fcc 	andi	r2,r2,255
  801630:	1080201c 	xori	r2,r2,128
  801634:	10bfe004 	addi	r2,r2,-128
  801638:	1000061e 	bne	r2,zero,801654 <logic+0x13c4>
  80163c:	e0bffd17 	ldw	r2,-12(fp)
  801640:	108018c3 	ldbu	r2,99(r2)
  801644:	10803fcc 	andi	r2,r2,255
  801648:	1080201c 	xori	r2,r2,128
  80164c:	10bfe004 	addi	r2,r2,-128
  801650:	10000226 	beq	r2,zero,80165c <logic+0x13cc>
  801654:	00800044 	movi	r2,1
  801658:	00000106 	br	801660 <logic+0x13d0>
  80165c:	0005883a 	mov	r2,zero
  801660:	1007883a 	mov	r3,r2
  801664:	e0bffd17 	ldw	r2,-12(fp)
  801668:	10c01885 	stb	r3,98(r2)
  d->_g103 = (d->_g46_e1 || d->_g46) && (d->_g53_e2 || d->_g53) && (d->_g64_e3 || d->_g64) && (d->_g75_e4 || d->_g75) && (d->_g83_e5 || d->_g83) && (d->_g90_e6 || d->_g90) && (d->_g97 || d->_g101) && (d->_g46 || d->_g53 || d->_g64 || d->_g75 || d->_g83 || d->_g90 || d->_g101);
  80166c:	e0bffd17 	ldw	r2,-12(fp)
  801670:	10802943 	ldbu	r2,165(r2)
  801674:	10803fcc 	andi	r2,r2,255
  801678:	1080201c 	xori	r2,r2,128
  80167c:	10bfe004 	addi	r2,r2,-128
  801680:	1000061e 	bne	r2,zero,80169c <logic+0x140c>
  801684:	e0bffd17 	ldw	r2,-12(fp)
  801688:	10801183 	ldbu	r2,70(r2)
  80168c:	10803fcc 	andi	r2,r2,255
  801690:	1080201c 	xori	r2,r2,128
  801694:	10bfe004 	addi	r2,r2,-128
  801698:	10007426 	beq	r2,zero,80186c <logic+0x15dc>
  80169c:	e0bffd17 	ldw	r2,-12(fp)
  8016a0:	10802983 	ldbu	r2,166(r2)
  8016a4:	10803fcc 	andi	r2,r2,255
  8016a8:	1080201c 	xori	r2,r2,128
  8016ac:	10bfe004 	addi	r2,r2,-128
  8016b0:	1000061e 	bne	r2,zero,8016cc <logic+0x143c>
  8016b4:	e0bffd17 	ldw	r2,-12(fp)
  8016b8:	108012c3 	ldbu	r2,75(r2)
  8016bc:	10803fcc 	andi	r2,r2,255
  8016c0:	1080201c 	xori	r2,r2,128
  8016c4:	10bfe004 	addi	r2,r2,-128
  8016c8:	10006826 	beq	r2,zero,80186c <logic+0x15dc>
  8016cc:	e0bffd17 	ldw	r2,-12(fp)
  8016d0:	108029c3 	ldbu	r2,167(r2)
  8016d4:	10803fcc 	andi	r2,r2,255
  8016d8:	1080201c 	xori	r2,r2,128
  8016dc:	10bfe004 	addi	r2,r2,-128
  8016e0:	1000061e 	bne	r2,zero,8016fc <logic+0x146c>
  8016e4:	e0bffd17 	ldw	r2,-12(fp)
  8016e8:	10801483 	ldbu	r2,82(r2)
  8016ec:	10803fcc 	andi	r2,r2,255
  8016f0:	1080201c 	xori	r2,r2,128
  8016f4:	10bfe004 	addi	r2,r2,-128
  8016f8:	10005c26 	beq	r2,zero,80186c <logic+0x15dc>
  8016fc:	e0bffd17 	ldw	r2,-12(fp)
  801700:	10802a03 	ldbu	r2,168(r2)
  801704:	10803fcc 	andi	r2,r2,255
  801708:	1080201c 	xori	r2,r2,128
  80170c:	10bfe004 	addi	r2,r2,-128
  801710:	1000061e 	bne	r2,zero,80172c <logic+0x149c>
  801714:	e0bffd17 	ldw	r2,-12(fp)
  801718:	10801583 	ldbu	r2,86(r2)
  80171c:	10803fcc 	andi	r2,r2,255
  801720:	1080201c 	xori	r2,r2,128
  801724:	10bfe004 	addi	r2,r2,-128
  801728:	10005026 	beq	r2,zero,80186c <logic+0x15dc>
  80172c:	e0bffd17 	ldw	r2,-12(fp)
  801730:	10802a43 	ldbu	r2,169(r2)
  801734:	10803fcc 	andi	r2,r2,255
  801738:	1080201c 	xori	r2,r2,128
  80173c:	10bfe004 	addi	r2,r2,-128
  801740:	1000061e 	bne	r2,zero,80175c <logic+0x14cc>
  801744:	e0bffd17 	ldw	r2,-12(fp)
  801748:	10801643 	ldbu	r2,89(r2)
  80174c:	10803fcc 	andi	r2,r2,255
  801750:	1080201c 	xori	r2,r2,128
  801754:	10bfe004 	addi	r2,r2,-128
  801758:	10004426 	beq	r2,zero,80186c <logic+0x15dc>
  80175c:	e0bffd17 	ldw	r2,-12(fp)
  801760:	10802a83 	ldbu	r2,170(r2)
  801764:	10803fcc 	andi	r2,r2,255
  801768:	1080201c 	xori	r2,r2,128
  80176c:	10bfe004 	addi	r2,r2,-128
  801770:	1000061e 	bne	r2,zero,80178c <logic+0x14fc>
  801774:	e0bffd17 	ldw	r2,-12(fp)
  801778:	10801703 	ldbu	r2,92(r2)
  80177c:	10803fcc 	andi	r2,r2,255
  801780:	1080201c 	xori	r2,r2,128
  801784:	10bfe004 	addi	r2,r2,-128
  801788:	10003826 	beq	r2,zero,80186c <logic+0x15dc>
  80178c:	e0bffd17 	ldw	r2,-12(fp)
  801790:	10801783 	ldbu	r2,94(r2)
  801794:	10803fcc 	andi	r2,r2,255
  801798:	1080201c 	xori	r2,r2,128
  80179c:	10bfe004 	addi	r2,r2,-128
  8017a0:	1000061e 	bne	r2,zero,8017bc <logic+0x152c>
  8017a4:	e0bffd17 	ldw	r2,-12(fp)
  8017a8:	10801883 	ldbu	r2,98(r2)
  8017ac:	10803fcc 	andi	r2,r2,255
  8017b0:	1080201c 	xori	r2,r2,128
  8017b4:	10bfe004 	addi	r2,r2,-128
  8017b8:	10002c26 	beq	r2,zero,80186c <logic+0x15dc>
  8017bc:	e0bffd17 	ldw	r2,-12(fp)
  8017c0:	10801183 	ldbu	r2,70(r2)
  8017c4:	10803fcc 	andi	r2,r2,255
  8017c8:	1080201c 	xori	r2,r2,128
  8017cc:	10bfe004 	addi	r2,r2,-128
  8017d0:	1000241e 	bne	r2,zero,801864 <logic+0x15d4>
  8017d4:	e0bffd17 	ldw	r2,-12(fp)
  8017d8:	108012c3 	ldbu	r2,75(r2)
  8017dc:	10803fcc 	andi	r2,r2,255
  8017e0:	1080201c 	xori	r2,r2,128
  8017e4:	10bfe004 	addi	r2,r2,-128
  8017e8:	10001e1e 	bne	r2,zero,801864 <logic+0x15d4>
  8017ec:	e0bffd17 	ldw	r2,-12(fp)
  8017f0:	10801483 	ldbu	r2,82(r2)
  8017f4:	10803fcc 	andi	r2,r2,255
  8017f8:	1080201c 	xori	r2,r2,128
  8017fc:	10bfe004 	addi	r2,r2,-128
  801800:	1000181e 	bne	r2,zero,801864 <logic+0x15d4>
  801804:	e0bffd17 	ldw	r2,-12(fp)
  801808:	10801583 	ldbu	r2,86(r2)
  80180c:	10803fcc 	andi	r2,r2,255
  801810:	1080201c 	xori	r2,r2,128
  801814:	10bfe004 	addi	r2,r2,-128
  801818:	1000121e 	bne	r2,zero,801864 <logic+0x15d4>
  80181c:	e0bffd17 	ldw	r2,-12(fp)
  801820:	10801643 	ldbu	r2,89(r2)
  801824:	10803fcc 	andi	r2,r2,255
  801828:	1080201c 	xori	r2,r2,128
  80182c:	10bfe004 	addi	r2,r2,-128
  801830:	10000c1e 	bne	r2,zero,801864 <logic+0x15d4>
  801834:	e0bffd17 	ldw	r2,-12(fp)
  801838:	10801703 	ldbu	r2,92(r2)
  80183c:	10803fcc 	andi	r2,r2,255
  801840:	1080201c 	xori	r2,r2,128
  801844:	10bfe004 	addi	r2,r2,-128
  801848:	1000061e 	bne	r2,zero,801864 <logic+0x15d4>
  80184c:	e0bffd17 	ldw	r2,-12(fp)
  801850:	10801883 	ldbu	r2,98(r2)
  801854:	10803fcc 	andi	r2,r2,255
  801858:	1080201c 	xori	r2,r2,128
  80185c:	10bfe004 	addi	r2,r2,-128
  801860:	10000226 	beq	r2,zero,80186c <logic+0x15dc>
  801864:	00800044 	movi	r2,1
  801868:	00000106 	br	801870 <logic+0x15e0>
  80186c:	0005883a 	mov	r2,zero
  801870:	1007883a 	mov	r3,r2
  801874:	e0bffd17 	ldw	r2,-12(fp)
  801878:	10c018c5 	stb	r3,99(r2)
  d->_cg104 = d->_Pacemaker_local__Atrig2;
  80187c:	e0bffd17 	ldw	r2,-12(fp)
  801880:	10c00983 	ldbu	r3,38(r2)
  801884:	e0bffd17 	ldw	r2,-12(fp)
  801888:	10c02785 	stb	r3,158(r2)
  d->_g98 = d->_pg64_e3;
  80188c:	e0bffd17 	ldw	r2,-12(fp)
  801890:	10c02e03 	ldbu	r3,184(r2)
  801894:	e0bffd17 	ldw	r2,-12(fp)
  801898:	10c017c5 	stb	r3,95(r2)
  d->_g64_e3 = d->_GO || d->_g98;
  80189c:	e0bffd17 	ldw	r2,-12(fp)
  8018a0:	10801ac3 	ldbu	r2,107(r2)
  8018a4:	10803fcc 	andi	r2,r2,255
  8018a8:	1080201c 	xori	r2,r2,128
  8018ac:	10bfe004 	addi	r2,r2,-128
  8018b0:	1000061e 	bne	r2,zero,8018cc <logic+0x163c>
  8018b4:	e0bffd17 	ldw	r2,-12(fp)
  8018b8:	108017c3 	ldbu	r2,95(r2)
  8018bc:	10803fcc 	andi	r2,r2,255
  8018c0:	1080201c 	xori	r2,r2,128
  8018c4:	10bfe004 	addi	r2,r2,-128
  8018c8:	10000226 	beq	r2,zero,8018d4 <logic+0x1644>
  8018cc:	00800044 	movi	r2,1
  8018d0:	00000106 	br	8018d8 <logic+0x1648>
  8018d4:	0005883a 	mov	r2,zero
  8018d8:	1007883a 	mov	r3,r2
  8018dc:	e0bffd17 	ldw	r2,-12(fp)
  8018e0:	10c029c5 	stb	r3,167(r2)
  if (d->_g64_e3) {
  8018e4:	e0bffd17 	ldw	r2,-12(fp)
  8018e8:	108029c3 	ldbu	r2,167(r2)
  8018ec:	10803fcc 	andi	r2,r2,255
  8018f0:	1080201c 	xori	r2,r2,128
  8018f4:	10bfe004 	addi	r2,r2,-128
  8018f8:	10000426 	beq	r2,zero,80190c <logic+0x167c>
    d->AP = 0;
  8018fc:	e0bffd17 	ldw	r2,-12(fp)
  801900:	10000885 	stb	zero,34(r2)
    d->VP = 0;
  801904:	e0bffd17 	ldw	r2,-12(fp)
  801908:	100008c5 	stb	zero,35(r2)
  }
  d->_g99 = d->_g103 && !d->_cg104;
  80190c:	e0bffd17 	ldw	r2,-12(fp)
  801910:	108018c3 	ldbu	r2,99(r2)
  801914:	10803fcc 	andi	r2,r2,255
  801918:	1080201c 	xori	r2,r2,128
  80191c:	10bfe004 	addi	r2,r2,-128
  801920:	10000826 	beq	r2,zero,801944 <logic+0x16b4>
  801924:	e0bffd17 	ldw	r2,-12(fp)
  801928:	10802783 	ldbu	r2,158(r2)
  80192c:	10803fcc 	andi	r2,r2,255
  801930:	1080201c 	xori	r2,r2,128
  801934:	10bfe004 	addi	r2,r2,-128
  801938:	1000021e 	bne	r2,zero,801944 <logic+0x16b4>
  80193c:	00800044 	movi	r2,1
  801940:	00000106 	br	801948 <logic+0x16b8>
  801944:	0005883a 	mov	r2,zero
  801948:	1007883a 	mov	r3,r2
  80194c:	e0bffd17 	ldw	r2,-12(fp)
  801950:	10c01805 	stb	r3,96(r2)
  d->_cg106 = d->_Pacemaker_local__Atrig3;
  801954:	e0bffd17 	ldw	r2,-12(fp)
  801958:	10c009c3 	ldbu	r3,39(r2)
  80195c:	e0bffd17 	ldw	r2,-12(fp)
  801960:	10c027c5 	stb	r3,159(r2)
  d->_g46 = d->_g99 && d->_cg106;
  801964:	e0bffd17 	ldw	r2,-12(fp)
  801968:	10801803 	ldbu	r2,96(r2)
  80196c:	10803fcc 	andi	r2,r2,255
  801970:	1080201c 	xori	r2,r2,128
  801974:	10bfe004 	addi	r2,r2,-128
  801978:	10000826 	beq	r2,zero,80199c <logic+0x170c>
  80197c:	e0bffd17 	ldw	r2,-12(fp)
  801980:	108027c3 	ldbu	r2,159(r2)
  801984:	10803fcc 	andi	r2,r2,255
  801988:	1080201c 	xori	r2,r2,128
  80198c:	10bfe004 	addi	r2,r2,-128
  801990:	10000226 	beq	r2,zero,80199c <logic+0x170c>
  801994:	00800044 	movi	r2,1
  801998:	00000106 	br	8019a0 <logic+0x1710>
  80199c:	0005883a 	mov	r2,zero
  8019a0:	1007883a 	mov	r3,r2
  8019a4:	e0bffd17 	ldw	r2,-12(fp)
  8019a8:	10c01185 	stb	r3,70(r2)
  if (d->_g46) {
  8019ac:	e0bffd17 	ldw	r2,-12(fp)
  8019b0:	10801183 	ldbu	r2,70(r2)
  8019b4:	10803fcc 	andi	r2,r2,255
  8019b8:	1080201c 	xori	r2,r2,128
  8019bc:	10bfe004 	addi	r2,r2,-128
  8019c0:	10000626 	beq	r2,zero,8019dc <logic+0x174c>
    d->VP |= 1;
  8019c4:	e0bffd17 	ldw	r2,-12(fp)
  8019c8:	108008c3 	ldbu	r2,35(r2)
  8019cc:	10800054 	ori	r2,r2,1
  8019d0:	1007883a 	mov	r3,r2
  8019d4:	e0bffd17 	ldw	r2,-12(fp)
  8019d8:	10c008c5 	stb	r3,35(r2)
  }
  d->_g46_e1 = d->_g99 && !d->_cg106;
  8019dc:	e0bffd17 	ldw	r2,-12(fp)
  8019e0:	10801803 	ldbu	r2,96(r2)
  8019e4:	10803fcc 	andi	r2,r2,255
  8019e8:	1080201c 	xori	r2,r2,128
  8019ec:	10bfe004 	addi	r2,r2,-128
  8019f0:	10000826 	beq	r2,zero,801a14 <logic+0x1784>
  8019f4:	e0bffd17 	ldw	r2,-12(fp)
  8019f8:	108027c3 	ldbu	r2,159(r2)
  8019fc:	10803fcc 	andi	r2,r2,255
  801a00:	1080201c 	xori	r2,r2,128
  801a04:	10bfe004 	addi	r2,r2,-128
  801a08:	1000021e 	bne	r2,zero,801a14 <logic+0x1784>
  801a0c:	00800044 	movi	r2,1
  801a10:	00000106 	br	801a18 <logic+0x1788>
  801a14:	0005883a 	mov	r2,zero
  801a18:	1007883a 	mov	r3,r2
  801a1c:	e0bffd17 	ldw	r2,-12(fp)
  801a20:	10c02945 	stb	r3,165(r2)
  if (d->_g46_e1) {
  801a24:	e0bffd17 	ldw	r2,-12(fp)
  801a28:	10802943 	ldbu	r2,165(r2)
  801a2c:	10803fcc 	andi	r2,r2,255
  801a30:	1080201c 	xori	r2,r2,128
  801a34:	10bfe004 	addi	r2,r2,-128
  801a38:	10000626 	beq	r2,zero,801a54 <logic+0x17c4>
    d->VP |= 1;
  801a3c:	e0bffd17 	ldw	r2,-12(fp)
  801a40:	108008c3 	ldbu	r2,35(r2)
  801a44:	10800054 	ori	r2,r2,1
  801a48:	1007883a 	mov	r3,r2
  801a4c:	e0bffd17 	ldw	r2,-12(fp)
  801a50:	10c008c5 	stb	r3,35(r2)
  }
  d->_g64 = d->_g103 && d->_cg104 || d->_g46 || d->_g46_e1;
  801a54:	e0bffd17 	ldw	r2,-12(fp)
  801a58:	108018c3 	ldbu	r2,99(r2)
  801a5c:	10803fcc 	andi	r2,r2,255
  801a60:	1080201c 	xori	r2,r2,128
  801a64:	10bfe004 	addi	r2,r2,-128
  801a68:	10000626 	beq	r2,zero,801a84 <logic+0x17f4>
  801a6c:	e0bffd17 	ldw	r2,-12(fp)
  801a70:	10802783 	ldbu	r2,158(r2)
  801a74:	10803fcc 	andi	r2,r2,255
  801a78:	1080201c 	xori	r2,r2,128
  801a7c:	10bfe004 	addi	r2,r2,-128
  801a80:	10000c1e 	bne	r2,zero,801ab4 <logic+0x1824>
  801a84:	e0bffd17 	ldw	r2,-12(fp)
  801a88:	10801183 	ldbu	r2,70(r2)
  801a8c:	10803fcc 	andi	r2,r2,255
  801a90:	1080201c 	xori	r2,r2,128
  801a94:	10bfe004 	addi	r2,r2,-128
  801a98:	1000061e 	bne	r2,zero,801ab4 <logic+0x1824>
  801a9c:	e0bffd17 	ldw	r2,-12(fp)
  801aa0:	10802943 	ldbu	r2,165(r2)
  801aa4:	10803fcc 	andi	r2,r2,255
  801aa8:	1080201c 	xori	r2,r2,128
  801aac:	10bfe004 	addi	r2,r2,-128
  801ab0:	10000226 	beq	r2,zero,801abc <logic+0x182c>
  801ab4:	00800044 	movi	r2,1
  801ab8:	00000106 	br	801ac0 <logic+0x1830>
  801abc:	0005883a 	mov	r2,zero
  801ac0:	1007883a 	mov	r3,r2
  801ac4:	e0bffd17 	ldw	r2,-12(fp)
  801ac8:	10c01485 	stb	r3,82(r2)
  if (d->_g64) {
  801acc:	e0bffd17 	ldw	r2,-12(fp)
  801ad0:	10801483 	ldbu	r2,82(r2)
  801ad4:	10803fcc 	andi	r2,r2,255
  801ad8:	1080201c 	xori	r2,r2,128
  801adc:	10bfe004 	addi	r2,r2,-128
  801ae0:	10000326 	beq	r2,zero,801af0 <logic+0x1860>
    d->_region0_Atrium_VentricleTimer = 0;
  801ae4:	e0bffd17 	ldw	r2,-12(fp)
  801ae8:	10000015 	stw	zero,0(r2)
  801aec:	10000115 	stw	zero,4(r2)
  }
  d->_g53 = d->_GO || d->_g64;
  801af0:	e0bffd17 	ldw	r2,-12(fp)
  801af4:	10801ac3 	ldbu	r2,107(r2)
  801af8:	10803fcc 	andi	r2,r2,255
  801afc:	1080201c 	xori	r2,r2,128
  801b00:	10bfe004 	addi	r2,r2,-128
  801b04:	1000061e 	bne	r2,zero,801b20 <logic+0x1890>
  801b08:	e0bffd17 	ldw	r2,-12(fp)
  801b0c:	10801483 	ldbu	r2,82(r2)
  801b10:	10803fcc 	andi	r2,r2,255
  801b14:	1080201c 	xori	r2,r2,128
  801b18:	10bfe004 	addi	r2,r2,-128
  801b1c:	10000226 	beq	r2,zero,801b28 <logic+0x1898>
  801b20:	00800044 	movi	r2,1
  801b24:	00000106 	br	801b2c <logic+0x189c>
  801b28:	0005883a 	mov	r2,zero
  801b2c:	1007883a 	mov	r3,r2
  801b30:	e0bffd17 	ldw	r2,-12(fp)
  801b34:	10c012c5 	stb	r3,75(r2)
  if (d->_g53) {
  801b38:	e0bffd17 	ldw	r2,-12(fp)
  801b3c:	108012c3 	ldbu	r2,75(r2)
  801b40:	10803fcc 	andi	r2,r2,255
  801b44:	1080201c 	xori	r2,r2,128
  801b48:	10bfe004 	addi	r2,r2,-128
  801b4c:	10000426 	beq	r2,zero,801b60 <logic+0x18d0>
    d->_Pacemaker_local__Atrig = 0;
  801b50:	e0bffd17 	ldw	r2,-12(fp)
  801b54:	10000905 	stb	zero,36(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  801b58:	e0bffd17 	ldw	r2,-12(fp)
  801b5c:	10000945 	stb	zero,37(r2)
  }
  d->_cg4 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  801b60:	e0bffd17 	ldw	r2,-12(fp)
  801b64:	10800903 	ldbu	r2,36(r2)
  801b68:	10803fcc 	andi	r2,r2,255
  801b6c:	1080201c 	xori	r2,r2,128
  801b70:	10bfe004 	addi	r2,r2,-128
  801b74:	1000061e 	bne	r2,zero,801b90 <logic+0x1900>
  801b78:	e0bffd17 	ldw	r2,-12(fp)
  801b7c:	10800943 	ldbu	r2,37(r2)
  801b80:	10803fcc 	andi	r2,r2,255
  801b84:	1080201c 	xori	r2,r2,128
  801b88:	10bfe004 	addi	r2,r2,-128
  801b8c:	10000226 	beq	r2,zero,801b98 <logic+0x1908>
  801b90:	00800044 	movi	r2,1
  801b94:	00000106 	br	801b9c <logic+0x190c>
  801b98:	0005883a 	mov	r2,zero
  801b9c:	1007883a 	mov	r3,r2
  801ba0:	e0bffd17 	ldw	r2,-12(fp)
  801ba4:	10c01b05 	stb	r3,108(r2)
  d->_g75 = d->_pg99_e7;
  801ba8:	e0bffd17 	ldw	r2,-12(fp)
  801bac:	10c02e43 	ldbu	r3,185(r2)
  801bb0:	e0bffd17 	ldw	r2,-12(fp)
  801bb4:	10c01585 	stb	r3,86(r2)
  if (d->_g75) {
  801bb8:	e0bffd17 	ldw	r2,-12(fp)
  801bbc:	10801583 	ldbu	r2,86(r2)
  801bc0:	10803fcc 	andi	r2,r2,255
  801bc4:	1080201c 	xori	r2,r2,128
  801bc8:	10bfe004 	addi	r2,r2,-128
  801bcc:	10001226 	beq	r2,zero,801c18 <logic+0x1988>
    d->_region0_Atrium_VentricleTimer += d->deltaT;
  801bd0:	e13ffd17 	ldw	r4,-12(fp)
  801bd4:	20800017 	ldw	r2,0(r4)
  801bd8:	20c00117 	ldw	r3,4(r4)
  801bdc:	e1bffd17 	ldw	r6,-12(fp)
  801be0:	31000417 	ldw	r4,16(r6)
  801be4:	31400517 	ldw	r5,20(r6)
  801be8:	200d883a 	mov	r6,r4
  801bec:	280f883a 	mov	r7,r5
  801bf0:	1009883a 	mov	r4,r2
  801bf4:	180b883a 	mov	r5,r3
  801bf8:	08044f40 	call	8044f4 <__adddf3>
  801bfc:	1009883a 	mov	r4,r2
  801c00:	180b883a 	mov	r5,r3
  801c04:	2005883a 	mov	r2,r4
  801c08:	2807883a 	mov	r3,r5
  801c0c:	e13ffd17 	ldw	r4,-12(fp)
  801c10:	20800015 	stw	r2,0(r4)
  801c14:	20c00115 	stw	r3,4(r4)
  }
  d->_g83_e5 = d->_pg3;
  801c18:	e0bffd17 	ldw	r2,-12(fp)
  801c1c:	10c02e83 	ldbu	r3,186(r2)
  801c20:	e0bffd17 	ldw	r2,-12(fp)
  801c24:	10c02a45 	stb	r3,169(r2)
  d->_cg36 = d->_region0_Atrium_VentricleTimer >= PVARP_VALUE && d->AS;
  801c28:	e13ffd17 	ldw	r4,-12(fp)
  801c2c:	20800017 	ldw	r2,0(r4)
  801c30:	20c00117 	ldw	r3,4(r4)
  801c34:	000d883a 	mov	r6,zero
  801c38:	01d01274 	movhi	r7,16457
  801c3c:	1009883a 	mov	r4,r2
  801c40:	180b883a 	mov	r5,r3
  801c44:	0804da00 	call	804da0 <__gedf2>
  801c48:	10000816 	blt	r2,zero,801c6c <logic+0x19dc>
  801c4c:	e0bffd17 	ldw	r2,-12(fp)
  801c50:	10800803 	ldbu	r2,32(r2)
  801c54:	10803fcc 	andi	r2,r2,255
  801c58:	1080201c 	xori	r2,r2,128
  801c5c:	10bfe004 	addi	r2,r2,-128
  801c60:	10000226 	beq	r2,zero,801c6c <logic+0x19dc>
  801c64:	00800044 	movi	r2,1
  801c68:	00000106 	br	801c70 <logic+0x19e0>
  801c6c:	0005883a 	mov	r2,zero
  801c70:	1007883a 	mov	r3,r2
  801c74:	e0bffd17 	ldw	r2,-12(fp)
  801c78:	10c01f45 	stb	r3,125(r2)
  d->_g83 = d->_g83_e5 && d->_cg36;
  801c7c:	e0bffd17 	ldw	r2,-12(fp)
  801c80:	10802a43 	ldbu	r2,169(r2)
  801c84:	10803fcc 	andi	r2,r2,255
  801c88:	1080201c 	xori	r2,r2,128
  801c8c:	10bfe004 	addi	r2,r2,-128
  801c90:	10000826 	beq	r2,zero,801cb4 <logic+0x1a24>
  801c94:	e0bffd17 	ldw	r2,-12(fp)
  801c98:	10801f43 	ldbu	r2,125(r2)
  801c9c:	10803fcc 	andi	r2,r2,255
  801ca0:	1080201c 	xori	r2,r2,128
  801ca4:	10bfe004 	addi	r2,r2,-128
  801ca8:	10000226 	beq	r2,zero,801cb4 <logic+0x1a24>
  801cac:	00800044 	movi	r2,1
  801cb0:	00000106 	br	801cb8 <logic+0x1a28>
  801cb4:	0005883a 	mov	r2,zero
  801cb8:	1007883a 	mov	r3,r2
  801cbc:	e0bffd17 	ldw	r2,-12(fp)
  801cc0:	10c01645 	stb	r3,89(r2)
  if (d->_g83) {
  801cc4:	e0bffd17 	ldw	r2,-12(fp)
  801cc8:	10801643 	ldbu	r2,89(r2)
  801ccc:	10803fcc 	andi	r2,r2,255
  801cd0:	1080201c 	xori	r2,r2,128
  801cd4:	10bfe004 	addi	r2,r2,-128
  801cd8:	10000326 	beq	r2,zero,801ce8 <logic+0x1a58>
    d->_Pacemaker_local__Atrig = 1;
  801cdc:	e0bffd17 	ldw	r2,-12(fp)
  801ce0:	00c00044 	movi	r3,1
  801ce4:	10c00905 	stb	r3,36(r2)
  }
  d->_g53_e2 = d->_g83_e5 && !d->_cg36;
  801ce8:	e0bffd17 	ldw	r2,-12(fp)
  801cec:	10802a43 	ldbu	r2,169(r2)
  801cf0:	10803fcc 	andi	r2,r2,255
  801cf4:	1080201c 	xori	r2,r2,128
  801cf8:	10bfe004 	addi	r2,r2,-128
  801cfc:	10000826 	beq	r2,zero,801d20 <logic+0x1a90>
  801d00:	e0bffd17 	ldw	r2,-12(fp)
  801d04:	10801f43 	ldbu	r2,125(r2)
  801d08:	10803fcc 	andi	r2,r2,255
  801d0c:	1080201c 	xori	r2,r2,128
  801d10:	10bfe004 	addi	r2,r2,-128
  801d14:	1000021e 	bne	r2,zero,801d20 <logic+0x1a90>
  801d18:	00800044 	movi	r2,1
  801d1c:	00000106 	br	801d24 <logic+0x1a94>
  801d20:	0005883a 	mov	r2,zero
  801d24:	1007883a 	mov	r3,r2
  801d28:	e0bffd17 	ldw	r2,-12(fp)
  801d2c:	10c02985 	stb	r3,166(r2)
  d->_cg39 = d->_region0_Atrium_VentricleTimer >= AEI_VALUE;
  801d30:	e13ffd17 	ldw	r4,-12(fp)
  801d34:	20800017 	ldw	r2,0(r4)
  801d38:	20c00117 	ldw	r3,4(r4)
  801d3c:	04000044 	movi	r16,1
  801d40:	000d883a 	mov	r6,zero
  801d44:	01d02274 	movhi	r7,16521
  801d48:	1009883a 	mov	r4,r2
  801d4c:	180b883a 	mov	r5,r3
  801d50:	0804da00 	call	804da0 <__gedf2>
  801d54:	1000010e 	bge	r2,zero,801d5c <logic+0x1acc>
  801d58:	0021883a 	mov	r16,zero
  801d5c:	8007883a 	mov	r3,r16
  801d60:	e0bffd17 	ldw	r2,-12(fp)
  801d64:	10c01f05 	stb	r3,124(r2)
  d->_g90 = d->_g53_e2 && d->_cg39;
  801d68:	e0bffd17 	ldw	r2,-12(fp)
  801d6c:	10802983 	ldbu	r2,166(r2)
  801d70:	10803fcc 	andi	r2,r2,255
  801d74:	1080201c 	xori	r2,r2,128
  801d78:	10bfe004 	addi	r2,r2,-128
  801d7c:	10000826 	beq	r2,zero,801da0 <logic+0x1b10>
  801d80:	e0bffd17 	ldw	r2,-12(fp)
  801d84:	10801f03 	ldbu	r2,124(r2)
  801d88:	10803fcc 	andi	r2,r2,255
  801d8c:	1080201c 	xori	r2,r2,128
  801d90:	10bfe004 	addi	r2,r2,-128
  801d94:	10000226 	beq	r2,zero,801da0 <logic+0x1b10>
  801d98:	00800044 	movi	r2,1
  801d9c:	00000106 	br	801da4 <logic+0x1b14>
  801da0:	0005883a 	mov	r2,zero
  801da4:	1007883a 	mov	r3,r2
  801da8:	e0bffd17 	ldw	r2,-12(fp)
  801dac:	10c01705 	stb	r3,92(r2)
  if (d->_g90) {
  801db0:	e0bffd17 	ldw	r2,-12(fp)
  801db4:	10801703 	ldbu	r2,92(r2)
  801db8:	10803fcc 	andi	r2,r2,255
  801dbc:	1080201c 	xori	r2,r2,128
  801dc0:	10bfe004 	addi	r2,r2,-128
  801dc4:	10000326 	beq	r2,zero,801dd4 <logic+0x1b44>
    d->_Pacemaker_local__Atrig1 = 1;
  801dc8:	e0bffd17 	ldw	r2,-12(fp)
  801dcc:	00c00044 	movi	r3,1
  801dd0:	10c00945 	stb	r3,37(r2)
  }
  d->_cg6 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  801dd4:	e0bffd17 	ldw	r2,-12(fp)
  801dd8:	10800903 	ldbu	r2,36(r2)
  801ddc:	10803fcc 	andi	r2,r2,255
  801de0:	1080201c 	xori	r2,r2,128
  801de4:	10bfe004 	addi	r2,r2,-128
  801de8:	1000061e 	bne	r2,zero,801e04 <logic+0x1b74>
  801dec:	e0bffd17 	ldw	r2,-12(fp)
  801df0:	10800943 	ldbu	r2,37(r2)
  801df4:	10803fcc 	andi	r2,r2,255
  801df8:	1080201c 	xori	r2,r2,128
  801dfc:	10bfe004 	addi	r2,r2,-128
  801e00:	10000226 	beq	r2,zero,801e0c <logic+0x1b7c>
  801e04:	00800044 	movi	r2,1
  801e08:	00000106 	br	801e10 <logic+0x1b80>
  801e0c:	0005883a 	mov	r2,zero
  801e10:	1007883a 	mov	r3,r2
  801e14:	e0bffd17 	ldw	r2,-12(fp)
  801e18:	10c01b45 	stb	r3,109(r2)
  d->_g99_e7 = d->_g53 && !d->_cg4 || d->_g75 && !d->_cg6;
  801e1c:	e0bffd17 	ldw	r2,-12(fp)
  801e20:	108012c3 	ldbu	r2,75(r2)
  801e24:	10803fcc 	andi	r2,r2,255
  801e28:	1080201c 	xori	r2,r2,128
  801e2c:	10bfe004 	addi	r2,r2,-128
  801e30:	10000626 	beq	r2,zero,801e4c <logic+0x1bbc>
  801e34:	e0bffd17 	ldw	r2,-12(fp)
  801e38:	10801b03 	ldbu	r2,108(r2)
  801e3c:	10803fcc 	andi	r2,r2,255
  801e40:	1080201c 	xori	r2,r2,128
  801e44:	10bfe004 	addi	r2,r2,-128
  801e48:	10000c26 	beq	r2,zero,801e7c <logic+0x1bec>
  801e4c:	e0bffd17 	ldw	r2,-12(fp)
  801e50:	10801583 	ldbu	r2,86(r2)
  801e54:	10803fcc 	andi	r2,r2,255
  801e58:	1080201c 	xori	r2,r2,128
  801e5c:	10bfe004 	addi	r2,r2,-128
  801e60:	10000826 	beq	r2,zero,801e84 <logic+0x1bf4>
  801e64:	e0bffd17 	ldw	r2,-12(fp)
  801e68:	10801b43 	ldbu	r2,109(r2)
  801e6c:	10803fcc 	andi	r2,r2,255
  801e70:	1080201c 	xori	r2,r2,128
  801e74:	10bfe004 	addi	r2,r2,-128
  801e78:	1000021e 	bne	r2,zero,801e84 <logic+0x1bf4>
  801e7c:	00800044 	movi	r2,1
  801e80:	00000106 	br	801e88 <logic+0x1bf8>
  801e84:	0005883a 	mov	r2,zero
  801e88:	1007883a 	mov	r3,r2
  801e8c:	e0bffd17 	ldw	r2,-12(fp)
  801e90:	10c02ac5 	stb	r3,171(r2)
  d->_g75_e4 = d->_g75 && d->_cg6;
  801e94:	e0bffd17 	ldw	r2,-12(fp)
  801e98:	10801583 	ldbu	r2,86(r2)
  801e9c:	10803fcc 	andi	r2,r2,255
  801ea0:	1080201c 	xori	r2,r2,128
  801ea4:	10bfe004 	addi	r2,r2,-128
  801ea8:	10000826 	beq	r2,zero,801ecc <logic+0x1c3c>
  801eac:	e0bffd17 	ldw	r2,-12(fp)
  801eb0:	10801b43 	ldbu	r2,109(r2)
  801eb4:	10803fcc 	andi	r2,r2,255
  801eb8:	1080201c 	xori	r2,r2,128
  801ebc:	10bfe004 	addi	r2,r2,-128
  801ec0:	10000226 	beq	r2,zero,801ecc <logic+0x1c3c>
  801ec4:	00800044 	movi	r2,1
  801ec8:	00000106 	br	801ed0 <logic+0x1c40>
  801ecc:	0005883a 	mov	r2,zero
  801ed0:	1007883a 	mov	r3,r2
  801ed4:	e0bffd17 	ldw	r2,-12(fp)
  801ed8:	10c02a05 	stb	r3,168(r2)
  d->_cg8 = d->_region0_Atrium_VentricleTimer < PVARP_VALUE;
  801edc:	e13ffd17 	ldw	r4,-12(fp)
  801ee0:	20800017 	ldw	r2,0(r4)
  801ee4:	20c00117 	ldw	r3,4(r4)
  801ee8:	04000044 	movi	r16,1
  801eec:	000d883a 	mov	r6,zero
  801ef0:	01d01274 	movhi	r7,16457
  801ef4:	1009883a 	mov	r4,r2
  801ef8:	180b883a 	mov	r5,r3
  801efc:	0804e7c0 	call	804e7c <__ledf2>
  801f00:	10000116 	blt	r2,zero,801f08 <logic+0x1c78>
  801f04:	0021883a 	mov	r16,zero
  801f08:	8007883a 	mov	r3,r16
  801f0c:	e0bffd17 	ldw	r2,-12(fp)
  801f10:	10c01b85 	stb	r3,110(r2)
  d->_g90_e6 = d->_g53 && d->_cg8;
  801f14:	e0bffd17 	ldw	r2,-12(fp)
  801f18:	108012c3 	ldbu	r2,75(r2)
  801f1c:	10803fcc 	andi	r2,r2,255
  801f20:	1080201c 	xori	r2,r2,128
  801f24:	10bfe004 	addi	r2,r2,-128
  801f28:	10000826 	beq	r2,zero,801f4c <logic+0x1cbc>
  801f2c:	e0bffd17 	ldw	r2,-12(fp)
  801f30:	10801b83 	ldbu	r2,110(r2)
  801f34:	10803fcc 	andi	r2,r2,255
  801f38:	1080201c 	xori	r2,r2,128
  801f3c:	10bfe004 	addi	r2,r2,-128
  801f40:	10000226 	beq	r2,zero,801f4c <logic+0x1cbc>
  801f44:	00800044 	movi	r2,1
  801f48:	00000106 	br	801f50 <logic+0x1cc0>
  801f4c:	0005883a 	mov	r2,zero
  801f50:	1007883a 	mov	r3,r2
  801f54:	e0bffd17 	ldw	r2,-12(fp)
  801f58:	10c02a85 	stb	r3,170(r2)
  if (d->_g90_e6) {
  801f5c:	e0bffd17 	ldw	r2,-12(fp)
  801f60:	10802a83 	ldbu	r2,170(r2)
  801f64:	10803fcc 	andi	r2,r2,255
  801f68:	1080201c 	xori	r2,r2,128
  801f6c:	10bfe004 	addi	r2,r2,-128
  801f70:	10002826 	beq	r2,zero,802014 <logic+0x1d84>
    d->sleepT = (d->sleepT < (PVARP_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (PVARP_VALUE - d->_region0_Atrium_VentricleTimer);
  801f74:	e0bffd17 	ldw	r2,-12(fp)
  801f78:	14000617 	ldw	r16,24(r2)
  801f7c:	14400717 	ldw	r17,28(r2)
  801f80:	e13ffd17 	ldw	r4,-12(fp)
  801f84:	20800017 	ldw	r2,0(r4)
  801f88:	20c00117 	ldw	r3,4(r4)
  801f8c:	100d883a 	mov	r6,r2
  801f90:	180f883a 	mov	r7,r3
  801f94:	0009883a 	mov	r4,zero
  801f98:	01501274 	movhi	r5,16457
  801f9c:	08056880 	call	805688 <__subdf3>
  801fa0:	1009883a 	mov	r4,r2
  801fa4:	180b883a 	mov	r5,r3
  801fa8:	2005883a 	mov	r2,r4
  801fac:	2807883a 	mov	r3,r5
  801fb0:	100d883a 	mov	r6,r2
  801fb4:	180f883a 	mov	r7,r3
  801fb8:	8009883a 	mov	r4,r16
  801fbc:	880b883a 	mov	r5,r17
  801fc0:	0804e7c0 	call	804e7c <__ledf2>
  801fc4:	1000040e 	bge	r2,zero,801fd8 <logic+0x1d48>
  801fc8:	e13ffd17 	ldw	r4,-12(fp)
  801fcc:	20800617 	ldw	r2,24(r4)
  801fd0:	20c00717 	ldw	r3,28(r4)
  801fd4:	00000c06 	br	802008 <logic+0x1d78>
  801fd8:	e13ffd17 	ldw	r4,-12(fp)
  801fdc:	20800017 	ldw	r2,0(r4)
  801fe0:	20c00117 	ldw	r3,4(r4)
  801fe4:	100d883a 	mov	r6,r2
  801fe8:	180f883a 	mov	r7,r3
  801fec:	0009883a 	mov	r4,zero
  801ff0:	01501274 	movhi	r5,16457
  801ff4:	08056880 	call	805688 <__subdf3>
  801ff8:	1009883a 	mov	r4,r2
  801ffc:	180b883a 	mov	r5,r3
  802000:	2005883a 	mov	r2,r4
  802004:	2807883a 	mov	r3,r5
  802008:	e13ffd17 	ldw	r4,-12(fp)
  80200c:	20800615 	stw	r2,24(r4)
  802010:	20c00715 	stw	r3,28(r4)
  }
  d->_cg9 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802014:	e0bffd17 	ldw	r2,-12(fp)
  802018:	10800903 	ldbu	r2,36(r2)
  80201c:	10803fcc 	andi	r2,r2,255
  802020:	1080201c 	xori	r2,r2,128
  802024:	10bfe004 	addi	r2,r2,-128
  802028:	1000061e 	bne	r2,zero,802044 <logic+0x1db4>
  80202c:	e0bffd17 	ldw	r2,-12(fp)
  802030:	10800943 	ldbu	r2,37(r2)
  802034:	10803fcc 	andi	r2,r2,255
  802038:	1080201c 	xori	r2,r2,128
  80203c:	10bfe004 	addi	r2,r2,-128
  802040:	10000226 	beq	r2,zero,80204c <logic+0x1dbc>
  802044:	00800044 	movi	r2,1
  802048:	00000106 	br	802050 <logic+0x1dc0>
  80204c:	0005883a 	mov	r2,zero
  802050:	1007883a 	mov	r3,r2
  802054:	e0bffd17 	ldw	r2,-12(fp)
  802058:	10c01bc5 	stb	r3,111(r2)
  d->_g118 = d->_pg108;
  80205c:	e0bffd17 	ldw	r2,-12(fp)
  802060:	10c02ec3 	ldbu	r3,187(r2)
  802064:	e0bffd17 	ldw	r2,-12(fp)
  802068:	10c01a85 	stb	r3,106(r2)
  d->_g106 = d->_pg13;
  80206c:	e0bffd17 	ldw	r2,-12(fp)
  802070:	10c02f03 	ldbu	r3,188(r2)
  802074:	e0bffd17 	ldw	r2,-12(fp)
  802078:	10c01985 	stb	r3,102(r2)
  d->_g107 = d->_g118 || d->_g106;
  80207c:	e0bffd17 	ldw	r2,-12(fp)
  802080:	10801a83 	ldbu	r2,106(r2)
  802084:	10803fcc 	andi	r2,r2,255
  802088:	1080201c 	xori	r2,r2,128
  80208c:	10bfe004 	addi	r2,r2,-128
  802090:	1000061e 	bne	r2,zero,8020ac <logic+0x1e1c>
  802094:	e0bffd17 	ldw	r2,-12(fp)
  802098:	10801983 	ldbu	r2,102(r2)
  80209c:	10803fcc 	andi	r2,r2,255
  8020a0:	1080201c 	xori	r2,r2,128
  8020a4:	10bfe004 	addi	r2,r2,-128
  8020a8:	10000226 	beq	r2,zero,8020b4 <logic+0x1e24>
  8020ac:	00800044 	movi	r2,1
  8020b0:	00000106 	br	8020b8 <logic+0x1e28>
  8020b4:	0005883a 	mov	r2,zero
  8020b8:	1007883a 	mov	r3,r2
  8020bc:	e0bffd17 	ldw	r2,-12(fp)
  8020c0:	10c019c5 	stb	r3,103(r2)
  d->_cg12 = d->_region0_Atrium_VentricleTimer < PVARP_VALUE;
  8020c4:	e13ffd17 	ldw	r4,-12(fp)
  8020c8:	20800017 	ldw	r2,0(r4)
  8020cc:	20c00117 	ldw	r3,4(r4)
  8020d0:	04000044 	movi	r16,1
  8020d4:	000d883a 	mov	r6,zero
  8020d8:	01d01274 	movhi	r7,16457
  8020dc:	1009883a 	mov	r4,r2
  8020e0:	180b883a 	mov	r5,r3
  8020e4:	0804e7c0 	call	804e7c <__ledf2>
  8020e8:	10000116 	blt	r2,zero,8020f0 <logic+0x1e60>
  8020ec:	0021883a 	mov	r16,zero
  8020f0:	8007883a 	mov	r3,r16
  8020f4:	e0bffd17 	ldw	r2,-12(fp)
  8020f8:	10c01c45 	stb	r3,113(r2)
  d->_g104 = d->_g107 && d->_cg12;
  8020fc:	e0bffd17 	ldw	r2,-12(fp)
  802100:	108019c3 	ldbu	r2,103(r2)
  802104:	10803fcc 	andi	r2,r2,255
  802108:	1080201c 	xori	r2,r2,128
  80210c:	10bfe004 	addi	r2,r2,-128
  802110:	10000826 	beq	r2,zero,802134 <logic+0x1ea4>
  802114:	e0bffd17 	ldw	r2,-12(fp)
  802118:	10801c43 	ldbu	r2,113(r2)
  80211c:	10803fcc 	andi	r2,r2,255
  802120:	1080201c 	xori	r2,r2,128
  802124:	10bfe004 	addi	r2,r2,-128
  802128:	10000226 	beq	r2,zero,802134 <logic+0x1ea4>
  80212c:	00800044 	movi	r2,1
  802130:	00000106 	br	802138 <logic+0x1ea8>
  802134:	0005883a 	mov	r2,zero
  802138:	1007883a 	mov	r3,r2
  80213c:	e0bffd17 	ldw	r2,-12(fp)
  802140:	10c01905 	stb	r3,100(r2)
  if (d->_g104) {
  802144:	e0bffd17 	ldw	r2,-12(fp)
  802148:	10801903 	ldbu	r2,100(r2)
  80214c:	10803fcc 	andi	r2,r2,255
  802150:	1080201c 	xori	r2,r2,128
  802154:	10bfe004 	addi	r2,r2,-128
  802158:	10002826 	beq	r2,zero,8021fc <logic+0x1f6c>
    d->sleepT = (d->sleepT < (PVARP_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (PVARP_VALUE - d->_region0_Atrium_VentricleTimer);
  80215c:	e0bffd17 	ldw	r2,-12(fp)
  802160:	14000617 	ldw	r16,24(r2)
  802164:	14400717 	ldw	r17,28(r2)
  802168:	e13ffd17 	ldw	r4,-12(fp)
  80216c:	20800017 	ldw	r2,0(r4)
  802170:	20c00117 	ldw	r3,4(r4)
  802174:	100d883a 	mov	r6,r2
  802178:	180f883a 	mov	r7,r3
  80217c:	0009883a 	mov	r4,zero
  802180:	01501274 	movhi	r5,16457
  802184:	08056880 	call	805688 <__subdf3>
  802188:	1009883a 	mov	r4,r2
  80218c:	180b883a 	mov	r5,r3
  802190:	2005883a 	mov	r2,r4
  802194:	2807883a 	mov	r3,r5
  802198:	100d883a 	mov	r6,r2
  80219c:	180f883a 	mov	r7,r3
  8021a0:	8009883a 	mov	r4,r16
  8021a4:	880b883a 	mov	r5,r17
  8021a8:	0804e7c0 	call	804e7c <__ledf2>
  8021ac:	1000040e 	bge	r2,zero,8021c0 <logic+0x1f30>
  8021b0:	e13ffd17 	ldw	r4,-12(fp)
  8021b4:	20800617 	ldw	r2,24(r4)
  8021b8:	20c00717 	ldw	r3,28(r4)
  8021bc:	00000c06 	br	8021f0 <logic+0x1f60>
  8021c0:	e13ffd17 	ldw	r4,-12(fp)
  8021c4:	20800017 	ldw	r2,0(r4)
  8021c8:	20c00117 	ldw	r3,4(r4)
  8021cc:	100d883a 	mov	r6,r2
  8021d0:	180f883a 	mov	r7,r3
  8021d4:	0009883a 	mov	r4,zero
  8021d8:	01501274 	movhi	r5,16457
  8021dc:	08056880 	call	805688 <__subdf3>
  8021e0:	1009883a 	mov	r4,r2
  8021e4:	180b883a 	mov	r5,r3
  8021e8:	2005883a 	mov	r2,r4
  8021ec:	2807883a 	mov	r3,r5
  8021f0:	e13ffd17 	ldw	r4,-12(fp)
  8021f4:	20800615 	stw	r2,24(r4)
  8021f8:	20c00715 	stw	r3,28(r4)
  }
  d->_cg13 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8021fc:	e0bffd17 	ldw	r2,-12(fp)
  802200:	10800903 	ldbu	r2,36(r2)
  802204:	10803fcc 	andi	r2,r2,255
  802208:	1080201c 	xori	r2,r2,128
  80220c:	10bfe004 	addi	r2,r2,-128
  802210:	1000061e 	bne	r2,zero,80222c <logic+0x1f9c>
  802214:	e0bffd17 	ldw	r2,-12(fp)
  802218:	10800943 	ldbu	r2,37(r2)
  80221c:	10803fcc 	andi	r2,r2,255
  802220:	1080201c 	xori	r2,r2,128
  802224:	10bfe004 	addi	r2,r2,-128
  802228:	10000226 	beq	r2,zero,802234 <logic+0x1fa4>
  80222c:	00800044 	movi	r2,1
  802230:	00000106 	br	802238 <logic+0x1fa8>
  802234:	0005883a 	mov	r2,zero
  802238:	1007883a 	mov	r3,r2
  80223c:	e0bffd17 	ldw	r2,-12(fp)
  802240:	10c01c05 	stb	r3,112(r2)
  d->_g108 = d->_g90_e6 && !d->_cg9 || d->_g104 && !d->_cg13;
  802244:	e0bffd17 	ldw	r2,-12(fp)
  802248:	10802a83 	ldbu	r2,170(r2)
  80224c:	10803fcc 	andi	r2,r2,255
  802250:	1080201c 	xori	r2,r2,128
  802254:	10bfe004 	addi	r2,r2,-128
  802258:	10000626 	beq	r2,zero,802274 <logic+0x1fe4>
  80225c:	e0bffd17 	ldw	r2,-12(fp)
  802260:	10801bc3 	ldbu	r2,111(r2)
  802264:	10803fcc 	andi	r2,r2,255
  802268:	1080201c 	xori	r2,r2,128
  80226c:	10bfe004 	addi	r2,r2,-128
  802270:	10000c26 	beq	r2,zero,8022a4 <logic+0x2014>
  802274:	e0bffd17 	ldw	r2,-12(fp)
  802278:	10801903 	ldbu	r2,100(r2)
  80227c:	10803fcc 	andi	r2,r2,255
  802280:	1080201c 	xori	r2,r2,128
  802284:	10bfe004 	addi	r2,r2,-128
  802288:	10000826 	beq	r2,zero,8022ac <logic+0x201c>
  80228c:	e0bffd17 	ldw	r2,-12(fp)
  802290:	10801c03 	ldbu	r2,112(r2)
  802294:	10803fcc 	andi	r2,r2,255
  802298:	1080201c 	xori	r2,r2,128
  80229c:	10bfe004 	addi	r2,r2,-128
  8022a0:	1000021e 	bne	r2,zero,8022ac <logic+0x201c>
  8022a4:	00800044 	movi	r2,1
  8022a8:	00000106 	br	8022b0 <logic+0x2020>
  8022ac:	0005883a 	mov	r2,zero
  8022b0:	1007883a 	mov	r3,r2
  8022b4:	e0bffd17 	ldw	r2,-12(fp)
  8022b8:	10c01a05 	stb	r3,104(r2)
  d->_g105 = d->_g107 && !d->_cg12;
  8022bc:	e0bffd17 	ldw	r2,-12(fp)
  8022c0:	108019c3 	ldbu	r2,103(r2)
  8022c4:	10803fcc 	andi	r2,r2,255
  8022c8:	1080201c 	xori	r2,r2,128
  8022cc:	10bfe004 	addi	r2,r2,-128
  8022d0:	10000826 	beq	r2,zero,8022f4 <logic+0x2064>
  8022d4:	e0bffd17 	ldw	r2,-12(fp)
  8022d8:	10801c43 	ldbu	r2,113(r2)
  8022dc:	10803fcc 	andi	r2,r2,255
  8022e0:	1080201c 	xori	r2,r2,128
  8022e4:	10bfe004 	addi	r2,r2,-128
  8022e8:	1000021e 	bne	r2,zero,8022f4 <logic+0x2064>
  8022ec:	00800044 	movi	r2,1
  8022f0:	00000106 	br	8022f8 <logic+0x2068>
  8022f4:	0005883a 	mov	r2,zero
  8022f8:	1007883a 	mov	r3,r2
  8022fc:	e0bffd17 	ldw	r2,-12(fp)
  802300:	10c01945 	stb	r3,101(r2)
  d->_cg15 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802304:	e0bffd17 	ldw	r2,-12(fp)
  802308:	10800903 	ldbu	r2,36(r2)
  80230c:	10803fcc 	andi	r2,r2,255
  802310:	1080201c 	xori	r2,r2,128
  802314:	10bfe004 	addi	r2,r2,-128
  802318:	1000061e 	bne	r2,zero,802334 <logic+0x20a4>
  80231c:	e0bffd17 	ldw	r2,-12(fp)
  802320:	10800943 	ldbu	r2,37(r2)
  802324:	10803fcc 	andi	r2,r2,255
  802328:	1080201c 	xori	r2,r2,128
  80232c:	10bfe004 	addi	r2,r2,-128
  802330:	10000226 	beq	r2,zero,80233c <logic+0x20ac>
  802334:	00800044 	movi	r2,1
  802338:	00000106 	br	802340 <logic+0x20b0>
  80233c:	0005883a 	mov	r2,zero
  802340:	1007883a 	mov	r3,r2
  802344:	e0bffd17 	ldw	r2,-12(fp)
  802348:	10c01c85 	stb	r3,114(r2)
  d->_g9 = d->_g104 && d->_cg13 || d->_g105 && d->_cg15;
  80234c:	e0bffd17 	ldw	r2,-12(fp)
  802350:	10801903 	ldbu	r2,100(r2)
  802354:	10803fcc 	andi	r2,r2,255
  802358:	1080201c 	xori	r2,r2,128
  80235c:	10bfe004 	addi	r2,r2,-128
  802360:	10000626 	beq	r2,zero,80237c <logic+0x20ec>
  802364:	e0bffd17 	ldw	r2,-12(fp)
  802368:	10801c03 	ldbu	r2,112(r2)
  80236c:	10803fcc 	andi	r2,r2,255
  802370:	1080201c 	xori	r2,r2,128
  802374:	10bfe004 	addi	r2,r2,-128
  802378:	10000c1e 	bne	r2,zero,8023ac <logic+0x211c>
  80237c:	e0bffd17 	ldw	r2,-12(fp)
  802380:	10801943 	ldbu	r2,101(r2)
  802384:	10803fcc 	andi	r2,r2,255
  802388:	1080201c 	xori	r2,r2,128
  80238c:	10bfe004 	addi	r2,r2,-128
  802390:	10000826 	beq	r2,zero,8023b4 <logic+0x2124>
  802394:	e0bffd17 	ldw	r2,-12(fp)
  802398:	10801c83 	ldbu	r2,114(r2)
  80239c:	10803fcc 	andi	r2,r2,255
  8023a0:	1080201c 	xori	r2,r2,128
  8023a4:	10bfe004 	addi	r2,r2,-128
  8023a8:	10000226 	beq	r2,zero,8023b4 <logic+0x2124>
  8023ac:	00800044 	movi	r2,1
  8023b0:	00000106 	br	8023b8 <logic+0x2128>
  8023b4:	0005883a 	mov	r2,zero
  8023b8:	1007883a 	mov	r3,r2
  8023bc:	e0bffd17 	ldw	r2,-12(fp)
  8023c0:	10c00b05 	stb	r3,44(r2)
  d->_g12 = d->_g53 && !d->_cg8;
  8023c4:	e0bffd17 	ldw	r2,-12(fp)
  8023c8:	108012c3 	ldbu	r2,75(r2)
  8023cc:	10803fcc 	andi	r2,r2,255
  8023d0:	1080201c 	xori	r2,r2,128
  8023d4:	10bfe004 	addi	r2,r2,-128
  8023d8:	10000826 	beq	r2,zero,8023fc <logic+0x216c>
  8023dc:	e0bffd17 	ldw	r2,-12(fp)
  8023e0:	10801b83 	ldbu	r2,110(r2)
  8023e4:	10803fcc 	andi	r2,r2,255
  8023e8:	1080201c 	xori	r2,r2,128
  8023ec:	10bfe004 	addi	r2,r2,-128
  8023f0:	1000021e 	bne	r2,zero,8023fc <logic+0x216c>
  8023f4:	00800044 	movi	r2,1
  8023f8:	00000106 	br	802400 <logic+0x2170>
  8023fc:	0005883a 	mov	r2,zero
  802400:	1007883a 	mov	r3,r2
  802404:	e0bffd17 	ldw	r2,-12(fp)
  802408:	10c00b85 	stb	r3,46(r2)
  d->_cg18 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  80240c:	e0bffd17 	ldw	r2,-12(fp)
  802410:	10800903 	ldbu	r2,36(r2)
  802414:	10803fcc 	andi	r2,r2,255
  802418:	1080201c 	xori	r2,r2,128
  80241c:	10bfe004 	addi	r2,r2,-128
  802420:	1000061e 	bne	r2,zero,80243c <logic+0x21ac>
  802424:	e0bffd17 	ldw	r2,-12(fp)
  802428:	10800943 	ldbu	r2,37(r2)
  80242c:	10803fcc 	andi	r2,r2,255
  802430:	1080201c 	xori	r2,r2,128
  802434:	10bfe004 	addi	r2,r2,-128
  802438:	10000226 	beq	r2,zero,802444 <logic+0x21b4>
  80243c:	00800044 	movi	r2,1
  802440:	00000106 	br	802448 <logic+0x21b8>
  802444:	0005883a 	mov	r2,zero
  802448:	1007883a 	mov	r3,r2
  80244c:	e0bffd17 	ldw	r2,-12(fp)
  802450:	10c01cc5 	stb	r3,115(r2)
  d->_g13 = d->_g105 && !d->_cg15 || d->_g12 && !d->_cg18;
  802454:	e0bffd17 	ldw	r2,-12(fp)
  802458:	10801943 	ldbu	r2,101(r2)
  80245c:	10803fcc 	andi	r2,r2,255
  802460:	1080201c 	xori	r2,r2,128
  802464:	10bfe004 	addi	r2,r2,-128
  802468:	10000626 	beq	r2,zero,802484 <logic+0x21f4>
  80246c:	e0bffd17 	ldw	r2,-12(fp)
  802470:	10801c83 	ldbu	r2,114(r2)
  802474:	10803fcc 	andi	r2,r2,255
  802478:	1080201c 	xori	r2,r2,128
  80247c:	10bfe004 	addi	r2,r2,-128
  802480:	10000c26 	beq	r2,zero,8024b4 <logic+0x2224>
  802484:	e0bffd17 	ldw	r2,-12(fp)
  802488:	10800b83 	ldbu	r2,46(r2)
  80248c:	10803fcc 	andi	r2,r2,255
  802490:	1080201c 	xori	r2,r2,128
  802494:	10bfe004 	addi	r2,r2,-128
  802498:	10000826 	beq	r2,zero,8024bc <logic+0x222c>
  80249c:	e0bffd17 	ldw	r2,-12(fp)
  8024a0:	10801cc3 	ldbu	r2,115(r2)
  8024a4:	10803fcc 	andi	r2,r2,255
  8024a8:	1080201c 	xori	r2,r2,128
  8024ac:	10bfe004 	addi	r2,r2,-128
  8024b0:	1000021e 	bne	r2,zero,8024bc <logic+0x222c>
  8024b4:	00800044 	movi	r2,1
  8024b8:	00000106 	br	8024c0 <logic+0x2230>
  8024bc:	0005883a 	mov	r2,zero
  8024c0:	1007883a 	mov	r3,r2
  8024c4:	e0bffd17 	ldw	r2,-12(fp)
  8024c8:	10c00bc5 	stb	r3,47(r2)
  d->_cg19 = d->_region0_Atrium_VentricleTimer < AEI_VALUE;
  8024cc:	e13ffd17 	ldw	r4,-12(fp)
  8024d0:	20800017 	ldw	r2,0(r4)
  8024d4:	20c00117 	ldw	r3,4(r4)
  8024d8:	04000044 	movi	r16,1
  8024dc:	000d883a 	mov	r6,zero
  8024e0:	01d02274 	movhi	r7,16521
  8024e4:	1009883a 	mov	r4,r2
  8024e8:	180b883a 	mov	r5,r3
  8024ec:	0804e7c0 	call	804e7c <__ledf2>
  8024f0:	10000116 	blt	r2,zero,8024f8 <logic+0x2268>
  8024f4:	0021883a 	mov	r16,zero
  8024f8:	8007883a 	mov	r3,r16
  8024fc:	e0bffd17 	ldw	r2,-12(fp)
  802500:	10c01d05 	stb	r3,116(r2)
  d->_g15 = d->_g53 && d->_cg19;
  802504:	e0bffd17 	ldw	r2,-12(fp)
  802508:	108012c3 	ldbu	r2,75(r2)
  80250c:	10803fcc 	andi	r2,r2,255
  802510:	1080201c 	xori	r2,r2,128
  802514:	10bfe004 	addi	r2,r2,-128
  802518:	10000826 	beq	r2,zero,80253c <logic+0x22ac>
  80251c:	e0bffd17 	ldw	r2,-12(fp)
  802520:	10801d03 	ldbu	r2,116(r2)
  802524:	10803fcc 	andi	r2,r2,255
  802528:	1080201c 	xori	r2,r2,128
  80252c:	10bfe004 	addi	r2,r2,-128
  802530:	10000226 	beq	r2,zero,80253c <logic+0x22ac>
  802534:	00800044 	movi	r2,1
  802538:	00000106 	br	802540 <logic+0x22b0>
  80253c:	0005883a 	mov	r2,zero
  802540:	1007883a 	mov	r3,r2
  802544:	e0bffd17 	ldw	r2,-12(fp)
  802548:	10c00c45 	stb	r3,49(r2)
  if (d->_g15) {
  80254c:	e0bffd17 	ldw	r2,-12(fp)
  802550:	10800c43 	ldbu	r2,49(r2)
  802554:	10803fcc 	andi	r2,r2,255
  802558:	1080201c 	xori	r2,r2,128
  80255c:	10bfe004 	addi	r2,r2,-128
  802560:	10002826 	beq	r2,zero,802604 <logic+0x2374>
    d->sleepT = (d->sleepT < (AEI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (AEI_VALUE - d->_region0_Atrium_VentricleTimer);
  802564:	e0bffd17 	ldw	r2,-12(fp)
  802568:	14000617 	ldw	r16,24(r2)
  80256c:	14400717 	ldw	r17,28(r2)
  802570:	e13ffd17 	ldw	r4,-12(fp)
  802574:	20800017 	ldw	r2,0(r4)
  802578:	20c00117 	ldw	r3,4(r4)
  80257c:	100d883a 	mov	r6,r2
  802580:	180f883a 	mov	r7,r3
  802584:	0009883a 	mov	r4,zero
  802588:	01502274 	movhi	r5,16521
  80258c:	08056880 	call	805688 <__subdf3>
  802590:	1009883a 	mov	r4,r2
  802594:	180b883a 	mov	r5,r3
  802598:	2005883a 	mov	r2,r4
  80259c:	2807883a 	mov	r3,r5
  8025a0:	100d883a 	mov	r6,r2
  8025a4:	180f883a 	mov	r7,r3
  8025a8:	8009883a 	mov	r4,r16
  8025ac:	880b883a 	mov	r5,r17
  8025b0:	0804e7c0 	call	804e7c <__ledf2>
  8025b4:	1000040e 	bge	r2,zero,8025c8 <logic+0x2338>
  8025b8:	e13ffd17 	ldw	r4,-12(fp)
  8025bc:	20800617 	ldw	r2,24(r4)
  8025c0:	20c00717 	ldw	r3,28(r4)
  8025c4:	00000c06 	br	8025f8 <logic+0x2368>
  8025c8:	e13ffd17 	ldw	r4,-12(fp)
  8025cc:	20800017 	ldw	r2,0(r4)
  8025d0:	20c00117 	ldw	r3,4(r4)
  8025d4:	100d883a 	mov	r6,r2
  8025d8:	180f883a 	mov	r7,r3
  8025dc:	0009883a 	mov	r4,zero
  8025e0:	01502274 	movhi	r5,16521
  8025e4:	08056880 	call	805688 <__subdf3>
  8025e8:	1009883a 	mov	r4,r2
  8025ec:	180b883a 	mov	r5,r3
  8025f0:	2005883a 	mov	r2,r4
  8025f4:	2807883a 	mov	r3,r5
  8025f8:	e13ffd17 	ldw	r4,-12(fp)
  8025fc:	20800615 	stw	r2,24(r4)
  802600:	20c00715 	stw	r3,28(r4)
  }
  d->_cg20 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802604:	e0bffd17 	ldw	r2,-12(fp)
  802608:	10800903 	ldbu	r2,36(r2)
  80260c:	10803fcc 	andi	r2,r2,255
  802610:	1080201c 	xori	r2,r2,128
  802614:	10bfe004 	addi	r2,r2,-128
  802618:	1000061e 	bne	r2,zero,802634 <logic+0x23a4>
  80261c:	e0bffd17 	ldw	r2,-12(fp)
  802620:	10800943 	ldbu	r2,37(r2)
  802624:	10803fcc 	andi	r2,r2,255
  802628:	1080201c 	xori	r2,r2,128
  80262c:	10bfe004 	addi	r2,r2,-128
  802630:	10000226 	beq	r2,zero,80263c <logic+0x23ac>
  802634:	00800044 	movi	r2,1
  802638:	00000106 	br	802640 <logic+0x23b0>
  80263c:	0005883a 	mov	r2,zero
  802640:	1007883a 	mov	r3,r2
  802644:	e0bffd17 	ldw	r2,-12(fp)
  802648:	10c01d45 	stb	r3,117(r2)
  d->_g18 = d->_pg20;
  80264c:	e0bffd17 	ldw	r2,-12(fp)
  802650:	10c02f43 	ldbu	r3,189(r2)
  802654:	e0bffd17 	ldw	r2,-12(fp)
  802658:	10c00cc5 	stb	r3,51(r2)
  d->_g28 = d->_pg26;
  80265c:	e0bffd17 	ldw	r2,-12(fp)
  802660:	10c02f83 	ldbu	r3,190(r2)
  802664:	e0bffd17 	ldw	r2,-12(fp)
  802668:	10c00e85 	stb	r3,58(r2)
  d->_g23 = d->_g18 || d->_g28;
  80266c:	e0bffd17 	ldw	r2,-12(fp)
  802670:	10800cc3 	ldbu	r2,51(r2)
  802674:	10803fcc 	andi	r2,r2,255
  802678:	1080201c 	xori	r2,r2,128
  80267c:	10bfe004 	addi	r2,r2,-128
  802680:	1000061e 	bne	r2,zero,80269c <logic+0x240c>
  802684:	e0bffd17 	ldw	r2,-12(fp)
  802688:	10800e83 	ldbu	r2,58(r2)
  80268c:	10803fcc 	andi	r2,r2,255
  802690:	1080201c 	xori	r2,r2,128
  802694:	10bfe004 	addi	r2,r2,-128
  802698:	10000226 	beq	r2,zero,8026a4 <logic+0x2414>
  80269c:	00800044 	movi	r2,1
  8026a0:	00000106 	br	8026a8 <logic+0x2418>
  8026a4:	0005883a 	mov	r2,zero
  8026a8:	1007883a 	mov	r3,r2
  8026ac:	e0bffd17 	ldw	r2,-12(fp)
  8026b0:	10c00d85 	stb	r3,54(r2)
  d->_cg23 = d->_region0_Atrium_VentricleTimer < AEI_VALUE;
  8026b4:	e13ffd17 	ldw	r4,-12(fp)
  8026b8:	20800017 	ldw	r2,0(r4)
  8026bc:	20c00117 	ldw	r3,4(r4)
  8026c0:	04000044 	movi	r16,1
  8026c4:	000d883a 	mov	r6,zero
  8026c8:	01d02274 	movhi	r7,16521
  8026cc:	1009883a 	mov	r4,r2
  8026d0:	180b883a 	mov	r5,r3
  8026d4:	0804e7c0 	call	804e7c <__ledf2>
  8026d8:	10000116 	blt	r2,zero,8026e0 <logic+0x2450>
  8026dc:	0021883a 	mov	r16,zero
  8026e0:	8007883a 	mov	r3,r16
  8026e4:	e0bffd17 	ldw	r2,-12(fp)
  8026e8:	10c01dc5 	stb	r3,119(r2)
  d->_g24 = d->_g23 && d->_cg23;
  8026ec:	e0bffd17 	ldw	r2,-12(fp)
  8026f0:	10800d83 	ldbu	r2,54(r2)
  8026f4:	10803fcc 	andi	r2,r2,255
  8026f8:	1080201c 	xori	r2,r2,128
  8026fc:	10bfe004 	addi	r2,r2,-128
  802700:	10000826 	beq	r2,zero,802724 <logic+0x2494>
  802704:	e0bffd17 	ldw	r2,-12(fp)
  802708:	10801dc3 	ldbu	r2,119(r2)
  80270c:	10803fcc 	andi	r2,r2,255
  802710:	1080201c 	xori	r2,r2,128
  802714:	10bfe004 	addi	r2,r2,-128
  802718:	10000226 	beq	r2,zero,802724 <logic+0x2494>
  80271c:	00800044 	movi	r2,1
  802720:	00000106 	br	802728 <logic+0x2498>
  802724:	0005883a 	mov	r2,zero
  802728:	1007883a 	mov	r3,r2
  80272c:	e0bffd17 	ldw	r2,-12(fp)
  802730:	10c00dc5 	stb	r3,55(r2)
  if (d->_g24) {
  802734:	e0bffd17 	ldw	r2,-12(fp)
  802738:	10800dc3 	ldbu	r2,55(r2)
  80273c:	10803fcc 	andi	r2,r2,255
  802740:	1080201c 	xori	r2,r2,128
  802744:	10bfe004 	addi	r2,r2,-128
  802748:	10002826 	beq	r2,zero,8027ec <logic+0x255c>
    d->sleepT = (d->sleepT < (AEI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (AEI_VALUE - d->_region0_Atrium_VentricleTimer);
  80274c:	e0bffd17 	ldw	r2,-12(fp)
  802750:	14000617 	ldw	r16,24(r2)
  802754:	14400717 	ldw	r17,28(r2)
  802758:	e13ffd17 	ldw	r4,-12(fp)
  80275c:	20800017 	ldw	r2,0(r4)
  802760:	20c00117 	ldw	r3,4(r4)
  802764:	100d883a 	mov	r6,r2
  802768:	180f883a 	mov	r7,r3
  80276c:	0009883a 	mov	r4,zero
  802770:	01502274 	movhi	r5,16521
  802774:	08056880 	call	805688 <__subdf3>
  802778:	1009883a 	mov	r4,r2
  80277c:	180b883a 	mov	r5,r3
  802780:	2005883a 	mov	r2,r4
  802784:	2807883a 	mov	r3,r5
  802788:	100d883a 	mov	r6,r2
  80278c:	180f883a 	mov	r7,r3
  802790:	8009883a 	mov	r4,r16
  802794:	880b883a 	mov	r5,r17
  802798:	0804e7c0 	call	804e7c <__ledf2>
  80279c:	1000040e 	bge	r2,zero,8027b0 <logic+0x2520>
  8027a0:	e13ffd17 	ldw	r4,-12(fp)
  8027a4:	20800617 	ldw	r2,24(r4)
  8027a8:	20c00717 	ldw	r3,28(r4)
  8027ac:	00000c06 	br	8027e0 <logic+0x2550>
  8027b0:	e13ffd17 	ldw	r4,-12(fp)
  8027b4:	20800017 	ldw	r2,0(r4)
  8027b8:	20c00117 	ldw	r3,4(r4)
  8027bc:	100d883a 	mov	r6,r2
  8027c0:	180f883a 	mov	r7,r3
  8027c4:	0009883a 	mov	r4,zero
  8027c8:	01502274 	movhi	r5,16521
  8027cc:	08056880 	call	805688 <__subdf3>
  8027d0:	1009883a 	mov	r4,r2
  8027d4:	180b883a 	mov	r5,r3
  8027d8:	2005883a 	mov	r2,r4
  8027dc:	2807883a 	mov	r3,r5
  8027e0:	e13ffd17 	ldw	r4,-12(fp)
  8027e4:	20800615 	stw	r2,24(r4)
  8027e8:	20c00715 	stw	r3,28(r4)
  }
  d->_cg24 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8027ec:	e0bffd17 	ldw	r2,-12(fp)
  8027f0:	10800903 	ldbu	r2,36(r2)
  8027f4:	10803fcc 	andi	r2,r2,255
  8027f8:	1080201c 	xori	r2,r2,128
  8027fc:	10bfe004 	addi	r2,r2,-128
  802800:	1000061e 	bne	r2,zero,80281c <logic+0x258c>
  802804:	e0bffd17 	ldw	r2,-12(fp)
  802808:	10800943 	ldbu	r2,37(r2)
  80280c:	10803fcc 	andi	r2,r2,255
  802810:	1080201c 	xori	r2,r2,128
  802814:	10bfe004 	addi	r2,r2,-128
  802818:	10000226 	beq	r2,zero,802824 <logic+0x2594>
  80281c:	00800044 	movi	r2,1
  802820:	00000106 	br	802828 <logic+0x2598>
  802824:	0005883a 	mov	r2,zero
  802828:	1007883a 	mov	r3,r2
  80282c:	e0bffd17 	ldw	r2,-12(fp)
  802830:	10c01d85 	stb	r3,118(r2)
  d->_g20 = d->_g15 && !d->_cg20 || d->_g24 && !d->_cg24;
  802834:	e0bffd17 	ldw	r2,-12(fp)
  802838:	10800c43 	ldbu	r2,49(r2)
  80283c:	10803fcc 	andi	r2,r2,255
  802840:	1080201c 	xori	r2,r2,128
  802844:	10bfe004 	addi	r2,r2,-128
  802848:	10000626 	beq	r2,zero,802864 <logic+0x25d4>
  80284c:	e0bffd17 	ldw	r2,-12(fp)
  802850:	10801d43 	ldbu	r2,117(r2)
  802854:	10803fcc 	andi	r2,r2,255
  802858:	1080201c 	xori	r2,r2,128
  80285c:	10bfe004 	addi	r2,r2,-128
  802860:	10000c26 	beq	r2,zero,802894 <logic+0x2604>
  802864:	e0bffd17 	ldw	r2,-12(fp)
  802868:	10800dc3 	ldbu	r2,55(r2)
  80286c:	10803fcc 	andi	r2,r2,255
  802870:	1080201c 	xori	r2,r2,128
  802874:	10bfe004 	addi	r2,r2,-128
  802878:	10000826 	beq	r2,zero,80289c <logic+0x260c>
  80287c:	e0bffd17 	ldw	r2,-12(fp)
  802880:	10801d83 	ldbu	r2,118(r2)
  802884:	10803fcc 	andi	r2,r2,255
  802888:	1080201c 	xori	r2,r2,128
  80288c:	10bfe004 	addi	r2,r2,-128
  802890:	1000021e 	bne	r2,zero,80289c <logic+0x260c>
  802894:	00800044 	movi	r2,1
  802898:	00000106 	br	8028a0 <logic+0x2610>
  80289c:	0005883a 	mov	r2,zero
  8028a0:	1007883a 	mov	r3,r2
  8028a4:	e0bffd17 	ldw	r2,-12(fp)
  8028a8:	10c00d05 	stb	r3,52(r2)
  d->_g23 = d->_g23 && !d->_cg23;
  8028ac:	e0bffd17 	ldw	r2,-12(fp)
  8028b0:	10800d83 	ldbu	r2,54(r2)
  8028b4:	10803fcc 	andi	r2,r2,255
  8028b8:	1080201c 	xori	r2,r2,128
  8028bc:	10bfe004 	addi	r2,r2,-128
  8028c0:	10000826 	beq	r2,zero,8028e4 <logic+0x2654>
  8028c4:	e0bffd17 	ldw	r2,-12(fp)
  8028c8:	10801dc3 	ldbu	r2,119(r2)
  8028cc:	10803fcc 	andi	r2,r2,255
  8028d0:	1080201c 	xori	r2,r2,128
  8028d4:	10bfe004 	addi	r2,r2,-128
  8028d8:	1000021e 	bne	r2,zero,8028e4 <logic+0x2654>
  8028dc:	00800044 	movi	r2,1
  8028e0:	00000106 	br	8028e8 <logic+0x2658>
  8028e4:	0005883a 	mov	r2,zero
  8028e8:	1007883a 	mov	r3,r2
  8028ec:	e0bffd17 	ldw	r2,-12(fp)
  8028f0:	10c00d85 	stb	r3,54(r2)
  d->_cg26 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8028f4:	e0bffd17 	ldw	r2,-12(fp)
  8028f8:	10800903 	ldbu	r2,36(r2)
  8028fc:	10803fcc 	andi	r2,r2,255
  802900:	1080201c 	xori	r2,r2,128
  802904:	10bfe004 	addi	r2,r2,-128
  802908:	1000061e 	bne	r2,zero,802924 <logic+0x2694>
  80290c:	e0bffd17 	ldw	r2,-12(fp)
  802910:	10800943 	ldbu	r2,37(r2)
  802914:	10803fcc 	andi	r2,r2,255
  802918:	1080201c 	xori	r2,r2,128
  80291c:	10bfe004 	addi	r2,r2,-128
  802920:	10000226 	beq	r2,zero,80292c <logic+0x269c>
  802924:	00800044 	movi	r2,1
  802928:	00000106 	br	802930 <logic+0x26a0>
  80292c:	0005883a 	mov	r2,zero
  802930:	1007883a 	mov	r3,r2
  802934:	e0bffd17 	ldw	r2,-12(fp)
  802938:	10c01e05 	stb	r3,120(r2)
  d->_g24 = d->_g24 && d->_cg24 || d->_g23 && d->_cg26;
  80293c:	e0bffd17 	ldw	r2,-12(fp)
  802940:	10800dc3 	ldbu	r2,55(r2)
  802944:	10803fcc 	andi	r2,r2,255
  802948:	1080201c 	xori	r2,r2,128
  80294c:	10bfe004 	addi	r2,r2,-128
  802950:	10000626 	beq	r2,zero,80296c <logic+0x26dc>
  802954:	e0bffd17 	ldw	r2,-12(fp)
  802958:	10801d83 	ldbu	r2,118(r2)
  80295c:	10803fcc 	andi	r2,r2,255
  802960:	1080201c 	xori	r2,r2,128
  802964:	10bfe004 	addi	r2,r2,-128
  802968:	10000c1e 	bne	r2,zero,80299c <logic+0x270c>
  80296c:	e0bffd17 	ldw	r2,-12(fp)
  802970:	10800d83 	ldbu	r2,54(r2)
  802974:	10803fcc 	andi	r2,r2,255
  802978:	1080201c 	xori	r2,r2,128
  80297c:	10bfe004 	addi	r2,r2,-128
  802980:	10000826 	beq	r2,zero,8029a4 <logic+0x2714>
  802984:	e0bffd17 	ldw	r2,-12(fp)
  802988:	10801e03 	ldbu	r2,120(r2)
  80298c:	10803fcc 	andi	r2,r2,255
  802990:	1080201c 	xori	r2,r2,128
  802994:	10bfe004 	addi	r2,r2,-128
  802998:	10000226 	beq	r2,zero,8029a4 <logic+0x2714>
  80299c:	00800044 	movi	r2,1
  8029a0:	00000106 	br	8029a8 <logic+0x2718>
  8029a4:	0005883a 	mov	r2,zero
  8029a8:	1007883a 	mov	r3,r2
  8029ac:	e0bffd17 	ldw	r2,-12(fp)
  8029b0:	10c00dc5 	stb	r3,55(r2)
  d->_g29 = d->_g53 && !d->_cg19;
  8029b4:	e0bffd17 	ldw	r2,-12(fp)
  8029b8:	108012c3 	ldbu	r2,75(r2)
  8029bc:	10803fcc 	andi	r2,r2,255
  8029c0:	1080201c 	xori	r2,r2,128
  8029c4:	10bfe004 	addi	r2,r2,-128
  8029c8:	10000826 	beq	r2,zero,8029ec <logic+0x275c>
  8029cc:	e0bffd17 	ldw	r2,-12(fp)
  8029d0:	10801d03 	ldbu	r2,116(r2)
  8029d4:	10803fcc 	andi	r2,r2,255
  8029d8:	1080201c 	xori	r2,r2,128
  8029dc:	10bfe004 	addi	r2,r2,-128
  8029e0:	1000021e 	bne	r2,zero,8029ec <logic+0x275c>
  8029e4:	00800044 	movi	r2,1
  8029e8:	00000106 	br	8029f0 <logic+0x2760>
  8029ec:	0005883a 	mov	r2,zero
  8029f0:	1007883a 	mov	r3,r2
  8029f4:	e0bffd17 	ldw	r2,-12(fp)
  8029f8:	10c00ec5 	stb	r3,59(r2)
  d->_cg29 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8029fc:	e0bffd17 	ldw	r2,-12(fp)
  802a00:	10800903 	ldbu	r2,36(r2)
  802a04:	10803fcc 	andi	r2,r2,255
  802a08:	1080201c 	xori	r2,r2,128
  802a0c:	10bfe004 	addi	r2,r2,-128
  802a10:	1000061e 	bne	r2,zero,802a2c <logic+0x279c>
  802a14:	e0bffd17 	ldw	r2,-12(fp)
  802a18:	10800943 	ldbu	r2,37(r2)
  802a1c:	10803fcc 	andi	r2,r2,255
  802a20:	1080201c 	xori	r2,r2,128
  802a24:	10bfe004 	addi	r2,r2,-128
  802a28:	10000226 	beq	r2,zero,802a34 <logic+0x27a4>
  802a2c:	00800044 	movi	r2,1
  802a30:	00000106 	br	802a38 <logic+0x27a8>
  802a34:	0005883a 	mov	r2,zero
  802a38:	1007883a 	mov	r3,r2
  802a3c:	e0bffd17 	ldw	r2,-12(fp)
  802a40:	10c01e45 	stb	r3,121(r2)
  d->_g26 = d->_g23 && !d->_cg26 || d->_g29 && !d->_cg29;
  802a44:	e0bffd17 	ldw	r2,-12(fp)
  802a48:	10800d83 	ldbu	r2,54(r2)
  802a4c:	10803fcc 	andi	r2,r2,255
  802a50:	1080201c 	xori	r2,r2,128
  802a54:	10bfe004 	addi	r2,r2,-128
  802a58:	10000626 	beq	r2,zero,802a74 <logic+0x27e4>
  802a5c:	e0bffd17 	ldw	r2,-12(fp)
  802a60:	10801e03 	ldbu	r2,120(r2)
  802a64:	10803fcc 	andi	r2,r2,255
  802a68:	1080201c 	xori	r2,r2,128
  802a6c:	10bfe004 	addi	r2,r2,-128
  802a70:	10000c26 	beq	r2,zero,802aa4 <logic+0x2814>
  802a74:	e0bffd17 	ldw	r2,-12(fp)
  802a78:	10800ec3 	ldbu	r2,59(r2)
  802a7c:	10803fcc 	andi	r2,r2,255
  802a80:	1080201c 	xori	r2,r2,128
  802a84:	10bfe004 	addi	r2,r2,-128
  802a88:	10000826 	beq	r2,zero,802aac <logic+0x281c>
  802a8c:	e0bffd17 	ldw	r2,-12(fp)
  802a90:	10801e43 	ldbu	r2,121(r2)
  802a94:	10803fcc 	andi	r2,r2,255
  802a98:	1080201c 	xori	r2,r2,128
  802a9c:	10bfe004 	addi	r2,r2,-128
  802aa0:	1000021e 	bne	r2,zero,802aac <logic+0x281c>
  802aa4:	00800044 	movi	r2,1
  802aa8:	00000106 	br	802ab0 <logic+0x2820>
  802aac:	0005883a 	mov	r2,zero
  802ab0:	1007883a 	mov	r3,r2
  802ab4:	e0bffd17 	ldw	r2,-12(fp)
  802ab8:	10c00e45 	stb	r3,57(r2)
  d->_cg30 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802abc:	e0bffd17 	ldw	r2,-12(fp)
  802ac0:	10800903 	ldbu	r2,36(r2)
  802ac4:	10803fcc 	andi	r2,r2,255
  802ac8:	1080201c 	xori	r2,r2,128
  802acc:	10bfe004 	addi	r2,r2,-128
  802ad0:	1000061e 	bne	r2,zero,802aec <logic+0x285c>
  802ad4:	e0bffd17 	ldw	r2,-12(fp)
  802ad8:	10800943 	ldbu	r2,37(r2)
  802adc:	10803fcc 	andi	r2,r2,255
  802ae0:	1080201c 	xori	r2,r2,128
  802ae4:	10bfe004 	addi	r2,r2,-128
  802ae8:	10000226 	beq	r2,zero,802af4 <logic+0x2864>
  802aec:	00800044 	movi	r2,1
  802af0:	00000106 	br	802af8 <logic+0x2868>
  802af4:	0005883a 	mov	r2,zero
  802af8:	1007883a 	mov	r3,r2
  802afc:	e0bffd17 	ldw	r2,-12(fp)
  802b00:	10c01e85 	stb	r3,122(r2)
  d->_g29 = d->_pg31;
  802b04:	e0bffd17 	ldw	r2,-12(fp)
  802b08:	10c02fc3 	ldbu	r3,191(r2)
  802b0c:	e0bffd17 	ldw	r2,-12(fp)
  802b10:	10c00ec5 	stb	r3,59(r2)
  if (d->_g29) {
  802b14:	e0bffd17 	ldw	r2,-12(fp)
  802b18:	10800ec3 	ldbu	r2,59(r2)
  802b1c:	10803fcc 	andi	r2,r2,255
  802b20:	1080201c 	xori	r2,r2,128
  802b24:	10bfe004 	addi	r2,r2,-128
  802b28:	10001226 	beq	r2,zero,802b74 <logic+0x28e4>
    d->_region0_Atrium_AtriumTimer += d->deltaT;
  802b2c:	e13ffd17 	ldw	r4,-12(fp)
  802b30:	20800217 	ldw	r2,8(r4)
  802b34:	20c00317 	ldw	r3,12(r4)
  802b38:	e1bffd17 	ldw	r6,-12(fp)
  802b3c:	31000417 	ldw	r4,16(r6)
  802b40:	31400517 	ldw	r5,20(r6)
  802b44:	200d883a 	mov	r6,r4
  802b48:	280f883a 	mov	r7,r5
  802b4c:	1009883a 	mov	r4,r2
  802b50:	180b883a 	mov	r5,r3
  802b54:	08044f40 	call	8044f4 <__adddf3>
  802b58:	1009883a 	mov	r4,r2
  802b5c:	180b883a 	mov	r5,r3
  802b60:	2005883a 	mov	r2,r4
  802b64:	2807883a 	mov	r3,r5
  802b68:	e13ffd17 	ldw	r4,-12(fp)
  802b6c:	20800215 	stw	r2,8(r4)
  802b70:	20c00315 	stw	r3,12(r4)
  }
  d->_cg32 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  802b74:	e0bffd17 	ldw	r2,-12(fp)
  802b78:	10800903 	ldbu	r2,36(r2)
  802b7c:	10803fcc 	andi	r2,r2,255
  802b80:	1080201c 	xori	r2,r2,128
  802b84:	10bfe004 	addi	r2,r2,-128
  802b88:	1000061e 	bne	r2,zero,802ba4 <logic+0x2914>
  802b8c:	e0bffd17 	ldw	r2,-12(fp)
  802b90:	10800943 	ldbu	r2,37(r2)
  802b94:	10803fcc 	andi	r2,r2,255
  802b98:	1080201c 	xori	r2,r2,128
  802b9c:	10bfe004 	addi	r2,r2,-128
  802ba0:	10000226 	beq	r2,zero,802bac <logic+0x291c>
  802ba4:	00800044 	movi	r2,1
  802ba8:	00000106 	br	802bb0 <logic+0x2920>
  802bac:	0005883a 	mov	r2,zero
  802bb0:	1007883a 	mov	r3,r2
  802bb4:	e0bffd17 	ldw	r2,-12(fp)
  802bb8:	10c01ec5 	stb	r3,123(r2)
  d->_g31 = d->_g53 && !d->_cg30 || d->_g29 && !d->_cg32;
  802bbc:	e0bffd17 	ldw	r2,-12(fp)
  802bc0:	108012c3 	ldbu	r2,75(r2)
  802bc4:	10803fcc 	andi	r2,r2,255
  802bc8:	1080201c 	xori	r2,r2,128
  802bcc:	10bfe004 	addi	r2,r2,-128
  802bd0:	10000626 	beq	r2,zero,802bec <logic+0x295c>
  802bd4:	e0bffd17 	ldw	r2,-12(fp)
  802bd8:	10801e83 	ldbu	r2,122(r2)
  802bdc:	10803fcc 	andi	r2,r2,255
  802be0:	1080201c 	xori	r2,r2,128
  802be4:	10bfe004 	addi	r2,r2,-128
  802be8:	10000c26 	beq	r2,zero,802c1c <logic+0x298c>
  802bec:	e0bffd17 	ldw	r2,-12(fp)
  802bf0:	10800ec3 	ldbu	r2,59(r2)
  802bf4:	10803fcc 	andi	r2,r2,255
  802bf8:	1080201c 	xori	r2,r2,128
  802bfc:	10bfe004 	addi	r2,r2,-128
  802c00:	10000826 	beq	r2,zero,802c24 <logic+0x2994>
  802c04:	e0bffd17 	ldw	r2,-12(fp)
  802c08:	10801ec3 	ldbu	r2,123(r2)
  802c0c:	10803fcc 	andi	r2,r2,255
  802c10:	1080201c 	xori	r2,r2,128
  802c14:	10bfe004 	addi	r2,r2,-128
  802c18:	1000021e 	bne	r2,zero,802c24 <logic+0x2994>
  802c1c:	00800044 	movi	r2,1
  802c20:	00000106 	br	802c28 <logic+0x2998>
  802c24:	0005883a 	mov	r2,zero
  802c28:	1007883a 	mov	r3,r2
  802c2c:	e0bffd17 	ldw	r2,-12(fp)
  802c30:	10c00f05 	stb	r3,60(r2)
  d->_g33 = d->_g29 && d->_cg32;
  802c34:	e0bffd17 	ldw	r2,-12(fp)
  802c38:	10800ec3 	ldbu	r2,59(r2)
  802c3c:	10803fcc 	andi	r2,r2,255
  802c40:	1080201c 	xori	r2,r2,128
  802c44:	10bfe004 	addi	r2,r2,-128
  802c48:	10000826 	beq	r2,zero,802c6c <logic+0x29dc>
  802c4c:	e0bffd17 	ldw	r2,-12(fp)
  802c50:	10801ec3 	ldbu	r2,123(r2)
  802c54:	10803fcc 	andi	r2,r2,255
  802c58:	1080201c 	xori	r2,r2,128
  802c5c:	10bfe004 	addi	r2,r2,-128
  802c60:	10000226 	beq	r2,zero,802c6c <logic+0x29dc>
  802c64:	00800044 	movi	r2,1
  802c68:	00000106 	br	802c70 <logic+0x29e0>
  802c6c:	0005883a 	mov	r2,zero
  802c70:	1007883a 	mov	r3,r2
  802c74:	e0bffd17 	ldw	r2,-12(fp)
  802c78:	10c00f85 	stb	r3,62(r2)
  d->_g3 = d->_g53 || d->_g53_e2 && !d->_cg39;
  802c7c:	e0bffd17 	ldw	r2,-12(fp)
  802c80:	108012c3 	ldbu	r2,75(r2)
  802c84:	10803fcc 	andi	r2,r2,255
  802c88:	1080201c 	xori	r2,r2,128
  802c8c:	10bfe004 	addi	r2,r2,-128
  802c90:	10000c1e 	bne	r2,zero,802cc4 <logic+0x2a34>
  802c94:	e0bffd17 	ldw	r2,-12(fp)
  802c98:	10802983 	ldbu	r2,166(r2)
  802c9c:	10803fcc 	andi	r2,r2,255
  802ca0:	1080201c 	xori	r2,r2,128
  802ca4:	10bfe004 	addi	r2,r2,-128
  802ca8:	10000826 	beq	r2,zero,802ccc <logic+0x2a3c>
  802cac:	e0bffd17 	ldw	r2,-12(fp)
  802cb0:	10801f03 	ldbu	r2,124(r2)
  802cb4:	10803fcc 	andi	r2,r2,255
  802cb8:	1080201c 	xori	r2,r2,128
  802cbc:	10bfe004 	addi	r2,r2,-128
  802cc0:	1000021e 	bne	r2,zero,802ccc <logic+0x2a3c>
  802cc4:	00800044 	movi	r2,1
  802cc8:	00000106 	br	802cd0 <logic+0x2a40>
  802ccc:	0005883a 	mov	r2,zero
  802cd0:	1007883a 	mov	r3,r2
  802cd4:	e0bffd17 	ldw	r2,-12(fp)
  802cd8:	10c00a45 	stb	r3,41(r2)
  d->_g39 = d->_g83 || d->_g90;
  802cdc:	e0bffd17 	ldw	r2,-12(fp)
  802ce0:	10801643 	ldbu	r2,89(r2)
  802ce4:	10803fcc 	andi	r2,r2,255
  802ce8:	1080201c 	xori	r2,r2,128
  802cec:	10bfe004 	addi	r2,r2,-128
  802cf0:	1000061e 	bne	r2,zero,802d0c <logic+0x2a7c>
  802cf4:	e0bffd17 	ldw	r2,-12(fp)
  802cf8:	10801703 	ldbu	r2,92(r2)
  802cfc:	10803fcc 	andi	r2,r2,255
  802d00:	1080201c 	xori	r2,r2,128
  802d04:	10bfe004 	addi	r2,r2,-128
  802d08:	10000226 	beq	r2,zero,802d14 <logic+0x2a84>
  802d0c:	00800044 	movi	r2,1
  802d10:	00000106 	br	802d18 <logic+0x2a88>
  802d14:	0005883a 	mov	r2,zero
  802d18:	1007883a 	mov	r3,r2
  802d1c:	e0bffd17 	ldw	r2,-12(fp)
  802d20:	10c01085 	stb	r3,66(r2)
  d->_g40 = !d->_g75;
  802d24:	e0bffd17 	ldw	r2,-12(fp)
  802d28:	10801583 	ldbu	r2,86(r2)
  802d2c:	10803fcc 	andi	r2,r2,255
  802d30:	1080201c 	xori	r2,r2,128
  802d34:	10bfe004 	addi	r2,r2,-128
  802d38:	1005003a 	cmpeq	r2,r2,zero
  802d3c:	1007883a 	mov	r3,r2
  802d40:	e0bffd17 	ldw	r2,-12(fp)
  802d44:	10c010c5 	stb	r3,67(r2)
  d->_g37 = !(d->_g106 || d->_g118);
  802d48:	e0bffd17 	ldw	r2,-12(fp)
  802d4c:	10801983 	ldbu	r2,102(r2)
  802d50:	10803fcc 	andi	r2,r2,255
  802d54:	1080201c 	xori	r2,r2,128
  802d58:	10bfe004 	addi	r2,r2,-128
  802d5c:	1000081e 	bne	r2,zero,802d80 <logic+0x2af0>
  802d60:	e0bffd17 	ldw	r2,-12(fp)
  802d64:	10801a83 	ldbu	r2,106(r2)
  802d68:	10803fcc 	andi	r2,r2,255
  802d6c:	1080201c 	xori	r2,r2,128
  802d70:	10bfe004 	addi	r2,r2,-128
  802d74:	1000021e 	bne	r2,zero,802d80 <logic+0x2af0>
  802d78:	00800044 	movi	r2,1
  802d7c:	00000106 	br	802d84 <logic+0x2af4>
  802d80:	0005883a 	mov	r2,zero
  802d84:	1007883a 	mov	r3,r2
  802d88:	e0bffd17 	ldw	r2,-12(fp)
  802d8c:	10c01005 	stb	r3,64(r2)
  d->_g6 = !(d->_g28 || d->_g18);
  802d90:	e0bffd17 	ldw	r2,-12(fp)
  802d94:	10800e83 	ldbu	r2,58(r2)
  802d98:	10803fcc 	andi	r2,r2,255
  802d9c:	1080201c 	xori	r2,r2,128
  802da0:	10bfe004 	addi	r2,r2,-128
  802da4:	1000081e 	bne	r2,zero,802dc8 <logic+0x2b38>
  802da8:	e0bffd17 	ldw	r2,-12(fp)
  802dac:	10800cc3 	ldbu	r2,51(r2)
  802db0:	10803fcc 	andi	r2,r2,255
  802db4:	1080201c 	xori	r2,r2,128
  802db8:	10bfe004 	addi	r2,r2,-128
  802dbc:	1000021e 	bne	r2,zero,802dc8 <logic+0x2b38>
  802dc0:	00800044 	movi	r2,1
  802dc4:	00000106 	br	802dcc <logic+0x2b3c>
  802dc8:	0005883a 	mov	r2,zero
  802dcc:	1007883a 	mov	r3,r2
  802dd0:	e0bffd17 	ldw	r2,-12(fp)
  802dd4:	10c00a85 	stb	r3,42(r2)
  d->_g11 = !d->_g29;
  802dd8:	e0bffd17 	ldw	r2,-12(fp)
  802ddc:	10800ec3 	ldbu	r2,59(r2)
  802de0:	10803fcc 	andi	r2,r2,255
  802de4:	1080201c 	xori	r2,r2,128
  802de8:	10bfe004 	addi	r2,r2,-128
  802dec:	1005003a 	cmpeq	r2,r2,zero
  802df0:	1007883a 	mov	r3,r2
  802df4:	e0bffd17 	ldw	r2,-12(fp)
  802df8:	10c00b45 	stb	r3,45(r2)
  d->_g17 = !d->_g83_e5;
  802dfc:	e0bffd17 	ldw	r2,-12(fp)
  802e00:	10802a43 	ldbu	r2,169(r2)
  802e04:	10803fcc 	andi	r2,r2,255
  802e08:	1080201c 	xori	r2,r2,128
  802e0c:	10bfe004 	addi	r2,r2,-128
  802e10:	1005003a 	cmpeq	r2,r2,zero
  802e14:	1007883a 	mov	r3,r2
  802e18:	e0bffd17 	ldw	r2,-12(fp)
  802e1c:	10c00c85 	stb	r3,50(r2)
  d->_g22 = (d->_g40 || d->_g75_e4) && (d->_g37 || d->_g9) && (d->_g6 || d->_g24) && (d->_g11 || d->_g33) && (d->_g17 || d->_g39) && (d->_g75_e4 || d->_g9 || d->_g24 || d->_g33 || d->_g39);
  802e20:	e0bffd17 	ldw	r2,-12(fp)
  802e24:	108010c3 	ldbu	r2,67(r2)
  802e28:	10803fcc 	andi	r2,r2,255
  802e2c:	1080201c 	xori	r2,r2,128
  802e30:	10bfe004 	addi	r2,r2,-128
  802e34:	1000061e 	bne	r2,zero,802e50 <logic+0x2bc0>
  802e38:	e0bffd17 	ldw	r2,-12(fp)
  802e3c:	10802a03 	ldbu	r2,168(r2)
  802e40:	10803fcc 	andi	r2,r2,255
  802e44:	1080201c 	xori	r2,r2,128
  802e48:	10bfe004 	addi	r2,r2,-128
  802e4c:	10005026 	beq	r2,zero,802f90 <logic+0x2d00>
  802e50:	e0bffd17 	ldw	r2,-12(fp)
  802e54:	10801003 	ldbu	r2,64(r2)
  802e58:	10803fcc 	andi	r2,r2,255
  802e5c:	1080201c 	xori	r2,r2,128
  802e60:	10bfe004 	addi	r2,r2,-128
  802e64:	1000061e 	bne	r2,zero,802e80 <logic+0x2bf0>
  802e68:	e0bffd17 	ldw	r2,-12(fp)
  802e6c:	10800b03 	ldbu	r2,44(r2)
  802e70:	10803fcc 	andi	r2,r2,255
  802e74:	1080201c 	xori	r2,r2,128
  802e78:	10bfe004 	addi	r2,r2,-128
  802e7c:	10004426 	beq	r2,zero,802f90 <logic+0x2d00>
  802e80:	e0bffd17 	ldw	r2,-12(fp)
  802e84:	10800a83 	ldbu	r2,42(r2)
  802e88:	10803fcc 	andi	r2,r2,255
  802e8c:	1080201c 	xori	r2,r2,128
  802e90:	10bfe004 	addi	r2,r2,-128
  802e94:	1000061e 	bne	r2,zero,802eb0 <logic+0x2c20>
  802e98:	e0bffd17 	ldw	r2,-12(fp)
  802e9c:	10800dc3 	ldbu	r2,55(r2)
  802ea0:	10803fcc 	andi	r2,r2,255
  802ea4:	1080201c 	xori	r2,r2,128
  802ea8:	10bfe004 	addi	r2,r2,-128
  802eac:	10003826 	beq	r2,zero,802f90 <logic+0x2d00>
  802eb0:	e0bffd17 	ldw	r2,-12(fp)
  802eb4:	10800b43 	ldbu	r2,45(r2)
  802eb8:	10803fcc 	andi	r2,r2,255
  802ebc:	1080201c 	xori	r2,r2,128
  802ec0:	10bfe004 	addi	r2,r2,-128
  802ec4:	1000061e 	bne	r2,zero,802ee0 <logic+0x2c50>
  802ec8:	e0bffd17 	ldw	r2,-12(fp)
  802ecc:	10800f83 	ldbu	r2,62(r2)
  802ed0:	10803fcc 	andi	r2,r2,255
  802ed4:	1080201c 	xori	r2,r2,128
  802ed8:	10bfe004 	addi	r2,r2,-128
  802edc:	10002c26 	beq	r2,zero,802f90 <logic+0x2d00>
  802ee0:	e0bffd17 	ldw	r2,-12(fp)
  802ee4:	10800c83 	ldbu	r2,50(r2)
  802ee8:	10803fcc 	andi	r2,r2,255
  802eec:	1080201c 	xori	r2,r2,128
  802ef0:	10bfe004 	addi	r2,r2,-128
  802ef4:	1000061e 	bne	r2,zero,802f10 <logic+0x2c80>
  802ef8:	e0bffd17 	ldw	r2,-12(fp)
  802efc:	10801083 	ldbu	r2,66(r2)
  802f00:	10803fcc 	andi	r2,r2,255
  802f04:	1080201c 	xori	r2,r2,128
  802f08:	10bfe004 	addi	r2,r2,-128
  802f0c:	10002026 	beq	r2,zero,802f90 <logic+0x2d00>
  802f10:	e0bffd17 	ldw	r2,-12(fp)
  802f14:	10802a03 	ldbu	r2,168(r2)
  802f18:	10803fcc 	andi	r2,r2,255
  802f1c:	1080201c 	xori	r2,r2,128
  802f20:	10bfe004 	addi	r2,r2,-128
  802f24:	1000181e 	bne	r2,zero,802f88 <logic+0x2cf8>
  802f28:	e0bffd17 	ldw	r2,-12(fp)
  802f2c:	10800b03 	ldbu	r2,44(r2)
  802f30:	10803fcc 	andi	r2,r2,255
  802f34:	1080201c 	xori	r2,r2,128
  802f38:	10bfe004 	addi	r2,r2,-128
  802f3c:	1000121e 	bne	r2,zero,802f88 <logic+0x2cf8>
  802f40:	e0bffd17 	ldw	r2,-12(fp)
  802f44:	10800dc3 	ldbu	r2,55(r2)
  802f48:	10803fcc 	andi	r2,r2,255
  802f4c:	1080201c 	xori	r2,r2,128
  802f50:	10bfe004 	addi	r2,r2,-128
  802f54:	10000c1e 	bne	r2,zero,802f88 <logic+0x2cf8>
  802f58:	e0bffd17 	ldw	r2,-12(fp)
  802f5c:	10800f83 	ldbu	r2,62(r2)
  802f60:	10803fcc 	andi	r2,r2,255
  802f64:	1080201c 	xori	r2,r2,128
  802f68:	10bfe004 	addi	r2,r2,-128
  802f6c:	1000061e 	bne	r2,zero,802f88 <logic+0x2cf8>
  802f70:	e0bffd17 	ldw	r2,-12(fp)
  802f74:	10801083 	ldbu	r2,66(r2)
  802f78:	10803fcc 	andi	r2,r2,255
  802f7c:	1080201c 	xori	r2,r2,128
  802f80:	10bfe004 	addi	r2,r2,-128
  802f84:	10000226 	beq	r2,zero,802f90 <logic+0x2d00>
  802f88:	00800044 	movi	r2,1
  802f8c:	00000106 	br	802f94 <logic+0x2d04>
  802f90:	0005883a 	mov	r2,zero
  802f94:	1007883a 	mov	r3,r2
  802f98:	e0bffd17 	ldw	r2,-12(fp)
  802f9c:	10c00d45 	stb	r3,53(r2)
  d->_cg41 = d->_Pacemaker_local__Atrig;
  802fa0:	e0bffd17 	ldw	r2,-12(fp)
  802fa4:	10c00903 	ldbu	r3,36(r2)
  802fa8:	e0bffd17 	ldw	r2,-12(fp)
  802fac:	10c01f85 	stb	r3,126(r2)
  d->_g28 = d->_g22 && !d->_cg41;
  802fb0:	e0bffd17 	ldw	r2,-12(fp)
  802fb4:	10800d43 	ldbu	r2,53(r2)
  802fb8:	10803fcc 	andi	r2,r2,255
  802fbc:	1080201c 	xori	r2,r2,128
  802fc0:	10bfe004 	addi	r2,r2,-128
  802fc4:	10000826 	beq	r2,zero,802fe8 <logic+0x2d58>
  802fc8:	e0bffd17 	ldw	r2,-12(fp)
  802fcc:	10801f83 	ldbu	r2,126(r2)
  802fd0:	10803fcc 	andi	r2,r2,255
  802fd4:	1080201c 	xori	r2,r2,128
  802fd8:	10bfe004 	addi	r2,r2,-128
  802fdc:	1000021e 	bne	r2,zero,802fe8 <logic+0x2d58>
  802fe0:	00800044 	movi	r2,1
  802fe4:	00000106 	br	802fec <logic+0x2d5c>
  802fe8:	0005883a 	mov	r2,zero
  802fec:	1007883a 	mov	r3,r2
  802ff0:	e0bffd17 	ldw	r2,-12(fp)
  802ff4:	10c00e85 	stb	r3,58(r2)
  if (d->_g28) {
  802ff8:	e0bffd17 	ldw	r2,-12(fp)
  802ffc:	10800e83 	ldbu	r2,58(r2)
  803000:	10803fcc 	andi	r2,r2,255
  803004:	1080201c 	xori	r2,r2,128
  803008:	10bfe004 	addi	r2,r2,-128
  80300c:	10000626 	beq	r2,zero,803028 <logic+0x2d98>
    d->AP |= 1;
  803010:	e0bffd17 	ldw	r2,-12(fp)
  803014:	10800883 	ldbu	r2,34(r2)
  803018:	10800054 	ori	r2,r2,1
  80301c:	1007883a 	mov	r3,r2
  803020:	e0bffd17 	ldw	r2,-12(fp)
  803024:	10c00885 	stb	r3,34(r2)
  }
  d->_g32 = d->_g22 && d->_cg41 || d->_g28;
  803028:	e0bffd17 	ldw	r2,-12(fp)
  80302c:	10800d43 	ldbu	r2,53(r2)
  803030:	10803fcc 	andi	r2,r2,255
  803034:	1080201c 	xori	r2,r2,128
  803038:	10bfe004 	addi	r2,r2,-128
  80303c:	10000626 	beq	r2,zero,803058 <logic+0x2dc8>
  803040:	e0bffd17 	ldw	r2,-12(fp)
  803044:	10801f83 	ldbu	r2,126(r2)
  803048:	10803fcc 	andi	r2,r2,255
  80304c:	1080201c 	xori	r2,r2,128
  803050:	10bfe004 	addi	r2,r2,-128
  803054:	1000061e 	bne	r2,zero,803070 <logic+0x2de0>
  803058:	e0bffd17 	ldw	r2,-12(fp)
  80305c:	10800e83 	ldbu	r2,58(r2)
  803060:	10803fcc 	andi	r2,r2,255
  803064:	1080201c 	xori	r2,r2,128
  803068:	10bfe004 	addi	r2,r2,-128
  80306c:	10000226 	beq	r2,zero,803078 <logic+0x2de8>
  803070:	00800044 	movi	r2,1
  803074:	00000106 	br	80307c <logic+0x2dec>
  803078:	0005883a 	mov	r2,zero
  80307c:	1007883a 	mov	r3,r2
  803080:	e0bffd17 	ldw	r2,-12(fp)
  803084:	10c00f45 	stb	r3,61(r2)
  if (d->_g32) {
  803088:	e0bffd17 	ldw	r2,-12(fp)
  80308c:	10800f43 	ldbu	r2,61(r2)
  803090:	10803fcc 	andi	r2,r2,255
  803094:	1080201c 	xori	r2,r2,128
  803098:	10bfe004 	addi	r2,r2,-128
  80309c:	10000926 	beq	r2,zero,8030c4 <logic+0x2e34>
    d->_region0_Atrium_AtriumTimer = 0;
  8030a0:	e0bffd17 	ldw	r2,-12(fp)
  8030a4:	10000215 	stw	zero,8(r2)
  8030a8:	10000315 	stw	zero,12(r2)
    d->_Pacemaker_local__Atrig2 = 0;
  8030ac:	e0bffd17 	ldw	r2,-12(fp)
  8030b0:	10000985 	stb	zero,38(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  8030b4:	e0bffd17 	ldw	r2,-12(fp)
  8030b8:	100009c5 	stb	zero,39(r2)
    d->_Pacemaker_local__Atrig4 = 0;
  8030bc:	e0bffd17 	ldw	r2,-12(fp)
  8030c0:	10000a05 	stb	zero,40(r2)
  }
  d->_cg43 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  8030c4:	e0bffd17 	ldw	r2,-12(fp)
  8030c8:	10800983 	ldbu	r2,38(r2)
  8030cc:	10803fcc 	andi	r2,r2,255
  8030d0:	1080201c 	xori	r2,r2,128
  8030d4:	10bfe004 	addi	r2,r2,-128
  8030d8:	10000c1e 	bne	r2,zero,80310c <logic+0x2e7c>
  8030dc:	e0bffd17 	ldw	r2,-12(fp)
  8030e0:	108009c3 	ldbu	r2,39(r2)
  8030e4:	10803fcc 	andi	r2,r2,255
  8030e8:	1080201c 	xori	r2,r2,128
  8030ec:	10bfe004 	addi	r2,r2,-128
  8030f0:	1000061e 	bne	r2,zero,80310c <logic+0x2e7c>
  8030f4:	e0bffd17 	ldw	r2,-12(fp)
  8030f8:	10800a03 	ldbu	r2,40(r2)
  8030fc:	10803fcc 	andi	r2,r2,255
  803100:	1080201c 	xori	r2,r2,128
  803104:	10bfe004 	addi	r2,r2,-128
  803108:	10000226 	beq	r2,zero,803114 <logic+0x2e84>
  80310c:	00800044 	movi	r2,1
  803110:	00000106 	br	803118 <logic+0x2e88>
  803114:	0005883a 	mov	r2,zero
  803118:	1007883a 	mov	r3,r2
  80311c:	e0bffd17 	ldw	r2,-12(fp)
  803120:	10c01fc5 	stb	r3,127(r2)
  d->_g36 = d->_g32 && !d->_cg43 || d->_g45 && !d->_cg45;
  803124:	e0bffd17 	ldw	r2,-12(fp)
  803128:	10800f43 	ldbu	r2,61(r2)
  80312c:	10803fcc 	andi	r2,r2,255
  803130:	1080201c 	xori	r2,r2,128
  803134:	10bfe004 	addi	r2,r2,-128
  803138:	10000626 	beq	r2,zero,803154 <logic+0x2ec4>
  80313c:	e0bffd17 	ldw	r2,-12(fp)
  803140:	10801fc3 	ldbu	r2,127(r2)
  803144:	10803fcc 	andi	r2,r2,255
  803148:	1080201c 	xori	r2,r2,128
  80314c:	10bfe004 	addi	r2,r2,-128
  803150:	10000c26 	beq	r2,zero,803184 <logic+0x2ef4>
  803154:	e0bffd17 	ldw	r2,-12(fp)
  803158:	10801143 	ldbu	r2,69(r2)
  80315c:	10803fcc 	andi	r2,r2,255
  803160:	1080201c 	xori	r2,r2,128
  803164:	10bfe004 	addi	r2,r2,-128
  803168:	10000826 	beq	r2,zero,80318c <logic+0x2efc>
  80316c:	e0bffd17 	ldw	r2,-12(fp)
  803170:	10802003 	ldbu	r2,128(r2)
  803174:	10803fcc 	andi	r2,r2,255
  803178:	1080201c 	xori	r2,r2,128
  80317c:	10bfe004 	addi	r2,r2,-128
  803180:	1000021e 	bne	r2,zero,80318c <logic+0x2efc>
  803184:	00800044 	movi	r2,1
  803188:	00000106 	br	803190 <logic+0x2f00>
  80318c:	0005883a 	mov	r2,zero
  803190:	1007883a 	mov	r3,r2
  803194:	e0bffd17 	ldw	r2,-12(fp)
  803198:	10c00fc5 	stb	r3,63(r2)
  d->_cg47 = d->_region0_Atrium_VentricleTimer < VRP_VALUE;
  80319c:	e13ffd17 	ldw	r4,-12(fp)
  8031a0:	20800017 	ldw	r2,0(r4)
  8031a4:	20c00117 	ldw	r3,4(r4)
  8031a8:	04000044 	movi	r16,1
  8031ac:	000d883a 	mov	r6,zero
  8031b0:	01d018f4 	movhi	r7,16483
  8031b4:	39f00004 	addi	r7,r7,-16384
  8031b8:	1009883a 	mov	r4,r2
  8031bc:	180b883a 	mov	r5,r3
  8031c0:	0804e7c0 	call	804e7c <__ledf2>
  8031c4:	10000116 	blt	r2,zero,8031cc <logic+0x2f3c>
  8031c8:	0021883a 	mov	r16,zero
  8031cc:	8007883a 	mov	r3,r16
  8031d0:	e0bffd17 	ldw	r2,-12(fp)
  8031d4:	10c02045 	stb	r3,129(r2)
  d->_g38 = d->_g32 && d->_cg47;
  8031d8:	e0bffd17 	ldw	r2,-12(fp)
  8031dc:	10800f43 	ldbu	r2,61(r2)
  8031e0:	10803fcc 	andi	r2,r2,255
  8031e4:	1080201c 	xori	r2,r2,128
  8031e8:	10bfe004 	addi	r2,r2,-128
  8031ec:	10000826 	beq	r2,zero,803210 <logic+0x2f80>
  8031f0:	e0bffd17 	ldw	r2,-12(fp)
  8031f4:	10802043 	ldbu	r2,129(r2)
  8031f8:	10803fcc 	andi	r2,r2,255
  8031fc:	1080201c 	xori	r2,r2,128
  803200:	10bfe004 	addi	r2,r2,-128
  803204:	10000226 	beq	r2,zero,803210 <logic+0x2f80>
  803208:	00800044 	movi	r2,1
  80320c:	00000106 	br	803214 <logic+0x2f84>
  803210:	0005883a 	mov	r2,zero
  803214:	1007883a 	mov	r3,r2
  803218:	e0bffd17 	ldw	r2,-12(fp)
  80321c:	10c01045 	stb	r3,65(r2)
  if (d->_g38) {
  803220:	e0bffd17 	ldw	r2,-12(fp)
  803224:	10801043 	ldbu	r2,65(r2)
  803228:	10803fcc 	andi	r2,r2,255
  80322c:	1080201c 	xori	r2,r2,128
  803230:	10bfe004 	addi	r2,r2,-128
  803234:	10002a26 	beq	r2,zero,8032e0 <logic+0x3050>
    d->sleepT = (d->sleepT < (VRP_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (VRP_VALUE - d->_region0_Atrium_VentricleTimer);
  803238:	e0bffd17 	ldw	r2,-12(fp)
  80323c:	14000617 	ldw	r16,24(r2)
  803240:	14400717 	ldw	r17,28(r2)
  803244:	e13ffd17 	ldw	r4,-12(fp)
  803248:	20800017 	ldw	r2,0(r4)
  80324c:	20c00117 	ldw	r3,4(r4)
  803250:	100d883a 	mov	r6,r2
  803254:	180f883a 	mov	r7,r3
  803258:	0009883a 	mov	r4,zero
  80325c:	015018f4 	movhi	r5,16483
  803260:	29700004 	addi	r5,r5,-16384
  803264:	08056880 	call	805688 <__subdf3>
  803268:	1009883a 	mov	r4,r2
  80326c:	180b883a 	mov	r5,r3
  803270:	2005883a 	mov	r2,r4
  803274:	2807883a 	mov	r3,r5
  803278:	100d883a 	mov	r6,r2
  80327c:	180f883a 	mov	r7,r3
  803280:	8009883a 	mov	r4,r16
  803284:	880b883a 	mov	r5,r17
  803288:	0804e7c0 	call	804e7c <__ledf2>
  80328c:	1000040e 	bge	r2,zero,8032a0 <logic+0x3010>
  803290:	e13ffd17 	ldw	r4,-12(fp)
  803294:	20800617 	ldw	r2,24(r4)
  803298:	20c00717 	ldw	r3,28(r4)
  80329c:	00000d06 	br	8032d4 <logic+0x3044>
  8032a0:	e13ffd17 	ldw	r4,-12(fp)
  8032a4:	20800017 	ldw	r2,0(r4)
  8032a8:	20c00117 	ldw	r3,4(r4)
  8032ac:	100d883a 	mov	r6,r2
  8032b0:	180f883a 	mov	r7,r3
  8032b4:	0009883a 	mov	r4,zero
  8032b8:	015018f4 	movhi	r5,16483
  8032bc:	29700004 	addi	r5,r5,-16384
  8032c0:	08056880 	call	805688 <__subdf3>
  8032c4:	1009883a 	mov	r4,r2
  8032c8:	180b883a 	mov	r5,r3
  8032cc:	2005883a 	mov	r2,r4
  8032d0:	2807883a 	mov	r3,r5
  8032d4:	e13ffd17 	ldw	r4,-12(fp)
  8032d8:	20800615 	stw	r2,24(r4)
  8032dc:	20c00715 	stw	r3,28(r4)
  }
  d->_cg48 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  8032e0:	e0bffd17 	ldw	r2,-12(fp)
  8032e4:	10800983 	ldbu	r2,38(r2)
  8032e8:	10803fcc 	andi	r2,r2,255
  8032ec:	1080201c 	xori	r2,r2,128
  8032f0:	10bfe004 	addi	r2,r2,-128
  8032f4:	10000c1e 	bne	r2,zero,803328 <logic+0x3098>
  8032f8:	e0bffd17 	ldw	r2,-12(fp)
  8032fc:	108009c3 	ldbu	r2,39(r2)
  803300:	10803fcc 	andi	r2,r2,255
  803304:	1080201c 	xori	r2,r2,128
  803308:	10bfe004 	addi	r2,r2,-128
  80330c:	1000061e 	bne	r2,zero,803328 <logic+0x3098>
  803310:	e0bffd17 	ldw	r2,-12(fp)
  803314:	10800a03 	ldbu	r2,40(r2)
  803318:	10803fcc 	andi	r2,r2,255
  80331c:	1080201c 	xori	r2,r2,128
  803320:	10bfe004 	addi	r2,r2,-128
  803324:	10000226 	beq	r2,zero,803330 <logic+0x30a0>
  803328:	00800044 	movi	r2,1
  80332c:	00000106 	br	803334 <logic+0x30a4>
  803330:	0005883a 	mov	r2,zero
  803334:	1007883a 	mov	r3,r2
  803338:	e0bffd17 	ldw	r2,-12(fp)
  80333c:	10c02085 	stb	r3,130(r2)
  d->_g33 = d->_g38 && !d->_cg48 || d->_g50 && !d->_cg52;
  803340:	e0bffd17 	ldw	r2,-12(fp)
  803344:	10801043 	ldbu	r2,65(r2)
  803348:	10803fcc 	andi	r2,r2,255
  80334c:	1080201c 	xori	r2,r2,128
  803350:	10bfe004 	addi	r2,r2,-128
  803354:	10000626 	beq	r2,zero,803370 <logic+0x30e0>
  803358:	e0bffd17 	ldw	r2,-12(fp)
  80335c:	10802083 	ldbu	r2,130(r2)
  803360:	10803fcc 	andi	r2,r2,255
  803364:	1080201c 	xori	r2,r2,128
  803368:	10bfe004 	addi	r2,r2,-128
  80336c:	10000c26 	beq	r2,zero,8033a0 <logic+0x3110>
  803370:	e0bffd17 	ldw	r2,-12(fp)
  803374:	10801203 	ldbu	r2,72(r2)
  803378:	10803fcc 	andi	r2,r2,255
  80337c:	1080201c 	xori	r2,r2,128
  803380:	10bfe004 	addi	r2,r2,-128
  803384:	10000826 	beq	r2,zero,8033a8 <logic+0x3118>
  803388:	e0bffd17 	ldw	r2,-12(fp)
  80338c:	108020c3 	ldbu	r2,131(r2)
  803390:	10803fcc 	andi	r2,r2,255
  803394:	1080201c 	xori	r2,r2,128
  803398:	10bfe004 	addi	r2,r2,-128
  80339c:	1000021e 	bne	r2,zero,8033a8 <logic+0x3118>
  8033a0:	00800044 	movi	r2,1
  8033a4:	00000106 	br	8033ac <logic+0x311c>
  8033a8:	0005883a 	mov	r2,zero
  8033ac:	1007883a 	mov	r3,r2
  8033b0:	e0bffd17 	ldw	r2,-12(fp)
  8033b4:	10c00f85 	stb	r3,62(r2)
  d->_g25 = d->_g32 && !d->_cg47;
  8033b8:	e0bffd17 	ldw	r2,-12(fp)
  8033bc:	10800f43 	ldbu	r2,61(r2)
  8033c0:	10803fcc 	andi	r2,r2,255
  8033c4:	1080201c 	xori	r2,r2,128
  8033c8:	10bfe004 	addi	r2,r2,-128
  8033cc:	10000826 	beq	r2,zero,8033f0 <logic+0x3160>
  8033d0:	e0bffd17 	ldw	r2,-12(fp)
  8033d4:	10802043 	ldbu	r2,129(r2)
  8033d8:	10803fcc 	andi	r2,r2,255
  8033dc:	1080201c 	xori	r2,r2,128
  8033e0:	10bfe004 	addi	r2,r2,-128
  8033e4:	1000021e 	bne	r2,zero,8033f0 <logic+0x3160>
  8033e8:	00800044 	movi	r2,1
  8033ec:	00000106 	br	8033f4 <logic+0x3164>
  8033f0:	0005883a 	mov	r2,zero
  8033f4:	1007883a 	mov	r3,r2
  8033f8:	e0bffd17 	ldw	r2,-12(fp)
  8033fc:	10c00e05 	stb	r3,56(r2)
  d->_cg57 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803400:	e0bffd17 	ldw	r2,-12(fp)
  803404:	10800983 	ldbu	r2,38(r2)
  803408:	10803fcc 	andi	r2,r2,255
  80340c:	1080201c 	xori	r2,r2,128
  803410:	10bfe004 	addi	r2,r2,-128
  803414:	10000c1e 	bne	r2,zero,803448 <logic+0x31b8>
  803418:	e0bffd17 	ldw	r2,-12(fp)
  80341c:	108009c3 	ldbu	r2,39(r2)
  803420:	10803fcc 	andi	r2,r2,255
  803424:	1080201c 	xori	r2,r2,128
  803428:	10bfe004 	addi	r2,r2,-128
  80342c:	1000061e 	bne	r2,zero,803448 <logic+0x31b8>
  803430:	e0bffd17 	ldw	r2,-12(fp)
  803434:	10800a03 	ldbu	r2,40(r2)
  803438:	10803fcc 	andi	r2,r2,255
  80343c:	1080201c 	xori	r2,r2,128
  803440:	10bfe004 	addi	r2,r2,-128
  803444:	10000226 	beq	r2,zero,803450 <logic+0x31c0>
  803448:	00800044 	movi	r2,1
  80344c:	00000106 	br	803454 <logic+0x31c4>
  803450:	0005883a 	mov	r2,zero
  803454:	1007883a 	mov	r3,r2
  803458:	e0bffd17 	ldw	r2,-12(fp)
  80345c:	10c02185 	stb	r3,134(r2)
  d->_g14 = d->_g51 && !d->_cg54 || d->_g25 && !d->_cg57;
  803460:	e0bffd17 	ldw	r2,-12(fp)
  803464:	10801243 	ldbu	r2,73(r2)
  803468:	10803fcc 	andi	r2,r2,255
  80346c:	1080201c 	xori	r2,r2,128
  803470:	10bfe004 	addi	r2,r2,-128
  803474:	10000626 	beq	r2,zero,803490 <logic+0x3200>
  803478:	e0bffd17 	ldw	r2,-12(fp)
  80347c:	10802143 	ldbu	r2,133(r2)
  803480:	10803fcc 	andi	r2,r2,255
  803484:	1080201c 	xori	r2,r2,128
  803488:	10bfe004 	addi	r2,r2,-128
  80348c:	10000c26 	beq	r2,zero,8034c0 <logic+0x3230>
  803490:	e0bffd17 	ldw	r2,-12(fp)
  803494:	10800e03 	ldbu	r2,56(r2)
  803498:	10803fcc 	andi	r2,r2,255
  80349c:	1080201c 	xori	r2,r2,128
  8034a0:	10bfe004 	addi	r2,r2,-128
  8034a4:	10000826 	beq	r2,zero,8034c8 <logic+0x3238>
  8034a8:	e0bffd17 	ldw	r2,-12(fp)
  8034ac:	10802183 	ldbu	r2,134(r2)
  8034b0:	10803fcc 	andi	r2,r2,255
  8034b4:	1080201c 	xori	r2,r2,128
  8034b8:	10bfe004 	addi	r2,r2,-128
  8034bc:	1000021e 	bne	r2,zero,8034c8 <logic+0x3238>
  8034c0:	00800044 	movi	r2,1
  8034c4:	00000106 	br	8034cc <logic+0x323c>
  8034c8:	0005883a 	mov	r2,zero
  8034cc:	1007883a 	mov	r3,r2
  8034d0:	e0bffd17 	ldw	r2,-12(fp)
  8034d4:	10c00c05 	stb	r3,48(r2)
  d->_cg58 = d->_region0_Atrium_VentricleTimer < URI_VALUE;
  8034d8:	e13ffd17 	ldw	r4,-12(fp)
  8034dc:	20800017 	ldw	r2,0(r4)
  8034e0:	20c00117 	ldw	r3,4(r4)
  8034e4:	04000044 	movi	r16,1
  8034e8:	000d883a 	mov	r6,zero
  8034ec:	01d02334 	movhi	r7,16524
  8034f0:	39c80004 	addi	r7,r7,8192
  8034f4:	1009883a 	mov	r4,r2
  8034f8:	180b883a 	mov	r5,r3
  8034fc:	0804e7c0 	call	804e7c <__ledf2>
  803500:	10000116 	blt	r2,zero,803508 <logic+0x3278>
  803504:	0021883a 	mov	r16,zero
  803508:	8007883a 	mov	r3,r16
  80350c:	e0bffd17 	ldw	r2,-12(fp)
  803510:	10c021c5 	stb	r3,135(r2)
  d->_g33_e4 = d->_g32 && d->_cg58;
  803514:	e0bffd17 	ldw	r2,-12(fp)
  803518:	10800f43 	ldbu	r2,61(r2)
  80351c:	10803fcc 	andi	r2,r2,255
  803520:	1080201c 	xori	r2,r2,128
  803524:	10bfe004 	addi	r2,r2,-128
  803528:	10000826 	beq	r2,zero,80354c <logic+0x32bc>
  80352c:	e0bffd17 	ldw	r2,-12(fp)
  803530:	108021c3 	ldbu	r2,135(r2)
  803534:	10803fcc 	andi	r2,r2,255
  803538:	1080201c 	xori	r2,r2,128
  80353c:	10bfe004 	addi	r2,r2,-128
  803540:	10000226 	beq	r2,zero,80354c <logic+0x32bc>
  803544:	00800044 	movi	r2,1
  803548:	00000106 	br	803550 <logic+0x32c0>
  80354c:	0005883a 	mov	r2,zero
  803550:	1007883a 	mov	r3,r2
  803554:	e0bffd17 	ldw	r2,-12(fp)
  803558:	10c028c5 	stb	r3,163(r2)
  if (d->_g33_e4) {
  80355c:	e0bffd17 	ldw	r2,-12(fp)
  803560:	108028c3 	ldbu	r2,163(r2)
  803564:	10803fcc 	andi	r2,r2,255
  803568:	1080201c 	xori	r2,r2,128
  80356c:	10bfe004 	addi	r2,r2,-128
  803570:	10002a26 	beq	r2,zero,80361c <logic+0x338c>
    d->sleepT = (d->sleepT < (URI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (URI_VALUE - d->_region0_Atrium_VentricleTimer);
  803574:	e0bffd17 	ldw	r2,-12(fp)
  803578:	14000617 	ldw	r16,24(r2)
  80357c:	14400717 	ldw	r17,28(r2)
  803580:	e13ffd17 	ldw	r4,-12(fp)
  803584:	20800017 	ldw	r2,0(r4)
  803588:	20c00117 	ldw	r3,4(r4)
  80358c:	100d883a 	mov	r6,r2
  803590:	180f883a 	mov	r7,r3
  803594:	0009883a 	mov	r4,zero
  803598:	01502334 	movhi	r5,16524
  80359c:	29480004 	addi	r5,r5,8192
  8035a0:	08056880 	call	805688 <__subdf3>
  8035a4:	1009883a 	mov	r4,r2
  8035a8:	180b883a 	mov	r5,r3
  8035ac:	2005883a 	mov	r2,r4
  8035b0:	2807883a 	mov	r3,r5
  8035b4:	100d883a 	mov	r6,r2
  8035b8:	180f883a 	mov	r7,r3
  8035bc:	8009883a 	mov	r4,r16
  8035c0:	880b883a 	mov	r5,r17
  8035c4:	0804e7c0 	call	804e7c <__ledf2>
  8035c8:	1000040e 	bge	r2,zero,8035dc <logic+0x334c>
  8035cc:	e13ffd17 	ldw	r4,-12(fp)
  8035d0:	20800617 	ldw	r2,24(r4)
  8035d4:	20c00717 	ldw	r3,28(r4)
  8035d8:	00000d06 	br	803610 <logic+0x3380>
  8035dc:	e13ffd17 	ldw	r4,-12(fp)
  8035e0:	20800017 	ldw	r2,0(r4)
  8035e4:	20c00117 	ldw	r3,4(r4)
  8035e8:	100d883a 	mov	r6,r2
  8035ec:	180f883a 	mov	r7,r3
  8035f0:	0009883a 	mov	r4,zero
  8035f4:	01502334 	movhi	r5,16524
  8035f8:	29480004 	addi	r5,r5,8192
  8035fc:	08056880 	call	805688 <__subdf3>
  803600:	1009883a 	mov	r4,r2
  803604:	180b883a 	mov	r5,r3
  803608:	2005883a 	mov	r2,r4
  80360c:	2807883a 	mov	r3,r5
  803610:	e13ffd17 	ldw	r4,-12(fp)
  803614:	20800615 	stw	r2,24(r4)
  803618:	20c00715 	stw	r3,28(r4)
  }
  d->_cg59 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  80361c:	e0bffd17 	ldw	r2,-12(fp)
  803620:	10800983 	ldbu	r2,38(r2)
  803624:	10803fcc 	andi	r2,r2,255
  803628:	1080201c 	xori	r2,r2,128
  80362c:	10bfe004 	addi	r2,r2,-128
  803630:	10000c1e 	bne	r2,zero,803664 <logic+0x33d4>
  803634:	e0bffd17 	ldw	r2,-12(fp)
  803638:	108009c3 	ldbu	r2,39(r2)
  80363c:	10803fcc 	andi	r2,r2,255
  803640:	1080201c 	xori	r2,r2,128
  803644:	10bfe004 	addi	r2,r2,-128
  803648:	1000061e 	bne	r2,zero,803664 <logic+0x33d4>
  80364c:	e0bffd17 	ldw	r2,-12(fp)
  803650:	10800a03 	ldbu	r2,40(r2)
  803654:	10803fcc 	andi	r2,r2,255
  803658:	1080201c 	xori	r2,r2,128
  80365c:	10bfe004 	addi	r2,r2,-128
  803660:	10000226 	beq	r2,zero,80366c <logic+0x33dc>
  803664:	00800044 	movi	r2,1
  803668:	00000106 	br	803670 <logic+0x33e0>
  80366c:	0005883a 	mov	r2,zero
  803670:	1007883a 	mov	r3,r2
  803674:	e0bffd17 	ldw	r2,-12(fp)
  803678:	10c02205 	stb	r3,136(r2)
  d->_g7 = d->_g33_e4 && !d->_cg59 || d->_g61 && !d->_cg63;
  80367c:	e0bffd17 	ldw	r2,-12(fp)
  803680:	108028c3 	ldbu	r2,163(r2)
  803684:	10803fcc 	andi	r2,r2,255
  803688:	1080201c 	xori	r2,r2,128
  80368c:	10bfe004 	addi	r2,r2,-128
  803690:	10000626 	beq	r2,zero,8036ac <logic+0x341c>
  803694:	e0bffd17 	ldw	r2,-12(fp)
  803698:	10802203 	ldbu	r2,136(r2)
  80369c:	10803fcc 	andi	r2,r2,255
  8036a0:	1080201c 	xori	r2,r2,128
  8036a4:	10bfe004 	addi	r2,r2,-128
  8036a8:	10000c26 	beq	r2,zero,8036dc <logic+0x344c>
  8036ac:	e0bffd17 	ldw	r2,-12(fp)
  8036b0:	10801403 	ldbu	r2,80(r2)
  8036b4:	10803fcc 	andi	r2,r2,255
  8036b8:	1080201c 	xori	r2,r2,128
  8036bc:	10bfe004 	addi	r2,r2,-128
  8036c0:	10000826 	beq	r2,zero,8036e4 <logic+0x3454>
  8036c4:	e0bffd17 	ldw	r2,-12(fp)
  8036c8:	10802243 	ldbu	r2,137(r2)
  8036cc:	10803fcc 	andi	r2,r2,255
  8036d0:	1080201c 	xori	r2,r2,128
  8036d4:	10bfe004 	addi	r2,r2,-128
  8036d8:	1000021e 	bne	r2,zero,8036e4 <logic+0x3454>
  8036dc:	00800044 	movi	r2,1
  8036e0:	00000106 	br	8036e8 <logic+0x3458>
  8036e4:	0005883a 	mov	r2,zero
  8036e8:	1007883a 	mov	r3,r2
  8036ec:	e0bffd17 	ldw	r2,-12(fp)
  8036f0:	10c00ac5 	stb	r3,43(r2)
  d->_g7_e1 = d->_g32 && !d->_cg58;
  8036f4:	e0bffd17 	ldw	r2,-12(fp)
  8036f8:	10800f43 	ldbu	r2,61(r2)
  8036fc:	10803fcc 	andi	r2,r2,255
  803700:	1080201c 	xori	r2,r2,128
  803704:	10bfe004 	addi	r2,r2,-128
  803708:	10000826 	beq	r2,zero,80372c <logic+0x349c>
  80370c:	e0bffd17 	ldw	r2,-12(fp)
  803710:	108021c3 	ldbu	r2,135(r2)
  803714:	10803fcc 	andi	r2,r2,255
  803718:	1080201c 	xori	r2,r2,128
  80371c:	10bfe004 	addi	r2,r2,-128
  803720:	1000021e 	bne	r2,zero,80372c <logic+0x349c>
  803724:	00800044 	movi	r2,1
  803728:	00000106 	br	803730 <logic+0x34a0>
  80372c:	0005883a 	mov	r2,zero
  803730:	1007883a 	mov	r3,r2
  803734:	e0bffd17 	ldw	r2,-12(fp)
  803738:	10c02805 	stb	r3,160(r2)
  d->_cg68 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  80373c:	e0bffd17 	ldw	r2,-12(fp)
  803740:	10800983 	ldbu	r2,38(r2)
  803744:	10803fcc 	andi	r2,r2,255
  803748:	1080201c 	xori	r2,r2,128
  80374c:	10bfe004 	addi	r2,r2,-128
  803750:	10000c1e 	bne	r2,zero,803784 <logic+0x34f4>
  803754:	e0bffd17 	ldw	r2,-12(fp)
  803758:	108009c3 	ldbu	r2,39(r2)
  80375c:	10803fcc 	andi	r2,r2,255
  803760:	1080201c 	xori	r2,r2,128
  803764:	10bfe004 	addi	r2,r2,-128
  803768:	1000061e 	bne	r2,zero,803784 <logic+0x34f4>
  80376c:	e0bffd17 	ldw	r2,-12(fp)
  803770:	10800a03 	ldbu	r2,40(r2)
  803774:	10803fcc 	andi	r2,r2,255
  803778:	1080201c 	xori	r2,r2,128
  80377c:	10bfe004 	addi	r2,r2,-128
  803780:	10000226 	beq	r2,zero,80378c <logic+0x34fc>
  803784:	00800044 	movi	r2,1
  803788:	00000106 	br	803790 <logic+0x3500>
  80378c:	0005883a 	mov	r2,zero
  803790:	1007883a 	mov	r3,r2
  803794:	e0bffd17 	ldw	r2,-12(fp)
  803798:	10c02305 	stb	r3,140(r2)
  d->_g38_e5 = d->_g62 && !d->_cg65 || d->_g7_e1 && !d->_cg68;
  80379c:	e0bffd17 	ldw	r2,-12(fp)
  8037a0:	10801443 	ldbu	r2,81(r2)
  8037a4:	10803fcc 	andi	r2,r2,255
  8037a8:	1080201c 	xori	r2,r2,128
  8037ac:	10bfe004 	addi	r2,r2,-128
  8037b0:	10000626 	beq	r2,zero,8037cc <logic+0x353c>
  8037b4:	e0bffd17 	ldw	r2,-12(fp)
  8037b8:	108022c3 	ldbu	r2,139(r2)
  8037bc:	10803fcc 	andi	r2,r2,255
  8037c0:	1080201c 	xori	r2,r2,128
  8037c4:	10bfe004 	addi	r2,r2,-128
  8037c8:	10000c26 	beq	r2,zero,8037fc <logic+0x356c>
  8037cc:	e0bffd17 	ldw	r2,-12(fp)
  8037d0:	10802803 	ldbu	r2,160(r2)
  8037d4:	10803fcc 	andi	r2,r2,255
  8037d8:	1080201c 	xori	r2,r2,128
  8037dc:	10bfe004 	addi	r2,r2,-128
  8037e0:	10000826 	beq	r2,zero,803804 <logic+0x3574>
  8037e4:	e0bffd17 	ldw	r2,-12(fp)
  8037e8:	10802303 	ldbu	r2,140(r2)
  8037ec:	10803fcc 	andi	r2,r2,255
  8037f0:	1080201c 	xori	r2,r2,128
  8037f4:	10bfe004 	addi	r2,r2,-128
  8037f8:	1000021e 	bne	r2,zero,803804 <logic+0x3574>
  8037fc:	00800044 	movi	r2,1
  803800:	00000106 	br	803808 <logic+0x3578>
  803804:	0005883a 	mov	r2,zero
  803808:	1007883a 	mov	r3,r2
  80380c:	e0bffd17 	ldw	r2,-12(fp)
  803810:	10c02905 	stb	r3,164(r2)
  d->_cg69 = d->_region0_Atrium_VentricleTimer < LRI_VALUE;
  803814:	e13ffd17 	ldw	r4,-12(fp)
  803818:	20800017 	ldw	r2,0(r4)
  80381c:	20c00117 	ldw	r3,4(r4)
  803820:	04000044 	movi	r16,1
  803824:	000d883a 	mov	r6,zero
  803828:	01d023b4 	movhi	r7,16526
  80382c:	39ec0004 	addi	r7,r7,-20480
  803830:	1009883a 	mov	r4,r2
  803834:	180b883a 	mov	r5,r3
  803838:	0804e7c0 	call	804e7c <__ledf2>
  80383c:	10000116 	blt	r2,zero,803844 <logic+0x35b4>
  803840:	0021883a 	mov	r16,zero
  803844:	8007883a 	mov	r3,r16
  803848:	e0bffd17 	ldw	r2,-12(fp)
  80384c:	10c02345 	stb	r3,141(r2)
  d->_g25_e3 = d->_g32 && d->_cg69;
  803850:	e0bffd17 	ldw	r2,-12(fp)
  803854:	10800f43 	ldbu	r2,61(r2)
  803858:	10803fcc 	andi	r2,r2,255
  80385c:	1080201c 	xori	r2,r2,128
  803860:	10bfe004 	addi	r2,r2,-128
  803864:	10000826 	beq	r2,zero,803888 <logic+0x35f8>
  803868:	e0bffd17 	ldw	r2,-12(fp)
  80386c:	10802343 	ldbu	r2,141(r2)
  803870:	10803fcc 	andi	r2,r2,255
  803874:	1080201c 	xori	r2,r2,128
  803878:	10bfe004 	addi	r2,r2,-128
  80387c:	10000226 	beq	r2,zero,803888 <logic+0x35f8>
  803880:	00800044 	movi	r2,1
  803884:	00000106 	br	80388c <logic+0x35fc>
  803888:	0005883a 	mov	r2,zero
  80388c:	1007883a 	mov	r3,r2
  803890:	e0bffd17 	ldw	r2,-12(fp)
  803894:	10c02885 	stb	r3,162(r2)
  if (d->_g25_e3) {
  803898:	e0bffd17 	ldw	r2,-12(fp)
  80389c:	10802883 	ldbu	r2,162(r2)
  8038a0:	10803fcc 	andi	r2,r2,255
  8038a4:	1080201c 	xori	r2,r2,128
  8038a8:	10bfe004 	addi	r2,r2,-128
  8038ac:	10002a26 	beq	r2,zero,803958 <logic+0x36c8>
    d->sleepT = (d->sleepT < (LRI_VALUE - d->_region0_Atrium_VentricleTimer)) ? d->sleepT : (LRI_VALUE - d->_region0_Atrium_VentricleTimer);
  8038b0:	e0bffd17 	ldw	r2,-12(fp)
  8038b4:	14000617 	ldw	r16,24(r2)
  8038b8:	14400717 	ldw	r17,28(r2)
  8038bc:	e13ffd17 	ldw	r4,-12(fp)
  8038c0:	20800017 	ldw	r2,0(r4)
  8038c4:	20c00117 	ldw	r3,4(r4)
  8038c8:	100d883a 	mov	r6,r2
  8038cc:	180f883a 	mov	r7,r3
  8038d0:	0009883a 	mov	r4,zero
  8038d4:	015023b4 	movhi	r5,16526
  8038d8:	296c0004 	addi	r5,r5,-20480
  8038dc:	08056880 	call	805688 <__subdf3>
  8038e0:	1009883a 	mov	r4,r2
  8038e4:	180b883a 	mov	r5,r3
  8038e8:	2005883a 	mov	r2,r4
  8038ec:	2807883a 	mov	r3,r5
  8038f0:	100d883a 	mov	r6,r2
  8038f4:	180f883a 	mov	r7,r3
  8038f8:	8009883a 	mov	r4,r16
  8038fc:	880b883a 	mov	r5,r17
  803900:	0804e7c0 	call	804e7c <__ledf2>
  803904:	1000040e 	bge	r2,zero,803918 <logic+0x3688>
  803908:	e13ffd17 	ldw	r4,-12(fp)
  80390c:	20800617 	ldw	r2,24(r4)
  803910:	20c00717 	ldw	r3,28(r4)
  803914:	00000d06 	br	80394c <logic+0x36bc>
  803918:	e13ffd17 	ldw	r4,-12(fp)
  80391c:	20800017 	ldw	r2,0(r4)
  803920:	20c00117 	ldw	r3,4(r4)
  803924:	100d883a 	mov	r6,r2
  803928:	180f883a 	mov	r7,r3
  80392c:	0009883a 	mov	r4,zero
  803930:	015023b4 	movhi	r5,16526
  803934:	296c0004 	addi	r5,r5,-20480
  803938:	08056880 	call	805688 <__subdf3>
  80393c:	1009883a 	mov	r4,r2
  803940:	180b883a 	mov	r5,r3
  803944:	2005883a 	mov	r2,r4
  803948:	2807883a 	mov	r3,r5
  80394c:	e13ffd17 	ldw	r4,-12(fp)
  803950:	20800615 	stw	r2,24(r4)
  803954:	20c00715 	stw	r3,28(r4)
  }
  d->_cg70 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803958:	e0bffd17 	ldw	r2,-12(fp)
  80395c:	10800983 	ldbu	r2,38(r2)
  803960:	10803fcc 	andi	r2,r2,255
  803964:	1080201c 	xori	r2,r2,128
  803968:	10bfe004 	addi	r2,r2,-128
  80396c:	10000c1e 	bne	r2,zero,8039a0 <logic+0x3710>
  803970:	e0bffd17 	ldw	r2,-12(fp)
  803974:	108009c3 	ldbu	r2,39(r2)
  803978:	10803fcc 	andi	r2,r2,255
  80397c:	1080201c 	xori	r2,r2,128
  803980:	10bfe004 	addi	r2,r2,-128
  803984:	1000061e 	bne	r2,zero,8039a0 <logic+0x3710>
  803988:	e0bffd17 	ldw	r2,-12(fp)
  80398c:	10800a03 	ldbu	r2,40(r2)
  803990:	10803fcc 	andi	r2,r2,255
  803994:	1080201c 	xori	r2,r2,128
  803998:	10bfe004 	addi	r2,r2,-128
  80399c:	10000226 	beq	r2,zero,8039a8 <logic+0x3718>
  8039a0:	00800044 	movi	r2,1
  8039a4:	00000106 	br	8039ac <logic+0x371c>
  8039a8:	0005883a 	mov	r2,zero
  8039ac:	1007883a 	mov	r3,r2
  8039b0:	e0bffd17 	ldw	r2,-12(fp)
  8039b4:	10c02385 	stb	r3,142(r2)
  d->_g14_e2 = d->_g25_e3 && !d->_cg70 || d->_g72 && !d->_cg74;
  8039b8:	e0bffd17 	ldw	r2,-12(fp)
  8039bc:	10802883 	ldbu	r2,162(r2)
  8039c0:	10803fcc 	andi	r2,r2,255
  8039c4:	1080201c 	xori	r2,r2,128
  8039c8:	10bfe004 	addi	r2,r2,-128
  8039cc:	10000626 	beq	r2,zero,8039e8 <logic+0x3758>
  8039d0:	e0bffd17 	ldw	r2,-12(fp)
  8039d4:	10802383 	ldbu	r2,142(r2)
  8039d8:	10803fcc 	andi	r2,r2,255
  8039dc:	1080201c 	xori	r2,r2,128
  8039e0:	10bfe004 	addi	r2,r2,-128
  8039e4:	10000c26 	beq	r2,zero,803a18 <logic+0x3788>
  8039e8:	e0bffd17 	ldw	r2,-12(fp)
  8039ec:	10801503 	ldbu	r2,84(r2)
  8039f0:	10803fcc 	andi	r2,r2,255
  8039f4:	1080201c 	xori	r2,r2,128
  8039f8:	10bfe004 	addi	r2,r2,-128
  8039fc:	10000826 	beq	r2,zero,803a20 <logic+0x3790>
  803a00:	e0bffd17 	ldw	r2,-12(fp)
  803a04:	108023c3 	ldbu	r2,143(r2)
  803a08:	10803fcc 	andi	r2,r2,255
  803a0c:	1080201c 	xori	r2,r2,128
  803a10:	10bfe004 	addi	r2,r2,-128
  803a14:	1000021e 	bne	r2,zero,803a20 <logic+0x3790>
  803a18:	00800044 	movi	r2,1
  803a1c:	00000106 	br	803a24 <logic+0x3794>
  803a20:	0005883a 	mov	r2,zero
  803a24:	1007883a 	mov	r3,r2
  803a28:	e0bffd17 	ldw	r2,-12(fp)
  803a2c:	10c02845 	stb	r3,161(r2)
  d->_g109 = d->_g32 && !d->_cg69;
  803a30:	e0bffd17 	ldw	r2,-12(fp)
  803a34:	10800f43 	ldbu	r2,61(r2)
  803a38:	10803fcc 	andi	r2,r2,255
  803a3c:	1080201c 	xori	r2,r2,128
  803a40:	10bfe004 	addi	r2,r2,-128
  803a44:	10000826 	beq	r2,zero,803a68 <logic+0x37d8>
  803a48:	e0bffd17 	ldw	r2,-12(fp)
  803a4c:	10802343 	ldbu	r2,141(r2)
  803a50:	10803fcc 	andi	r2,r2,255
  803a54:	1080201c 	xori	r2,r2,128
  803a58:	10bfe004 	addi	r2,r2,-128
  803a5c:	1000021e 	bne	r2,zero,803a68 <logic+0x37d8>
  803a60:	00800044 	movi	r2,1
  803a64:	00000106 	br	803a6c <logic+0x37dc>
  803a68:	0005883a 	mov	r2,zero
  803a6c:	1007883a 	mov	r3,r2
  803a70:	e0bffd17 	ldw	r2,-12(fp)
  803a74:	10c01a45 	stb	r3,105(r2)
  d->_cg79 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803a78:	e0bffd17 	ldw	r2,-12(fp)
  803a7c:	10800983 	ldbu	r2,38(r2)
  803a80:	10803fcc 	andi	r2,r2,255
  803a84:	1080201c 	xori	r2,r2,128
  803a88:	10bfe004 	addi	r2,r2,-128
  803a8c:	10000c1e 	bne	r2,zero,803ac0 <logic+0x3830>
  803a90:	e0bffd17 	ldw	r2,-12(fp)
  803a94:	108009c3 	ldbu	r2,39(r2)
  803a98:	10803fcc 	andi	r2,r2,255
  803a9c:	1080201c 	xori	r2,r2,128
  803aa0:	10bfe004 	addi	r2,r2,-128
  803aa4:	1000061e 	bne	r2,zero,803ac0 <logic+0x3830>
  803aa8:	e0bffd17 	ldw	r2,-12(fp)
  803aac:	10800a03 	ldbu	r2,40(r2)
  803ab0:	10803fcc 	andi	r2,r2,255
  803ab4:	1080201c 	xori	r2,r2,128
  803ab8:	10bfe004 	addi	r2,r2,-128
  803abc:	10000226 	beq	r2,zero,803ac8 <logic+0x3838>
  803ac0:	00800044 	movi	r2,1
  803ac4:	00000106 	br	803acc <logic+0x383c>
  803ac8:	0005883a 	mov	r2,zero
  803acc:	1007883a 	mov	r3,r2
  803ad0:	e0bffd17 	ldw	r2,-12(fp)
  803ad4:	10c02485 	stb	r3,146(r2)
  d->_g41 = d->_g73 && !d->_cg76 || d->_g109 && !d->_cg79;
  803ad8:	e0bffd17 	ldw	r2,-12(fp)
  803adc:	10801543 	ldbu	r2,85(r2)
  803ae0:	10803fcc 	andi	r2,r2,255
  803ae4:	1080201c 	xori	r2,r2,128
  803ae8:	10bfe004 	addi	r2,r2,-128
  803aec:	10000626 	beq	r2,zero,803b08 <logic+0x3878>
  803af0:	e0bffd17 	ldw	r2,-12(fp)
  803af4:	10802443 	ldbu	r2,145(r2)
  803af8:	10803fcc 	andi	r2,r2,255
  803afc:	1080201c 	xori	r2,r2,128
  803b00:	10bfe004 	addi	r2,r2,-128
  803b04:	10000c26 	beq	r2,zero,803b38 <logic+0x38a8>
  803b08:	e0bffd17 	ldw	r2,-12(fp)
  803b0c:	10801a43 	ldbu	r2,105(r2)
  803b10:	10803fcc 	andi	r2,r2,255
  803b14:	1080201c 	xori	r2,r2,128
  803b18:	10bfe004 	addi	r2,r2,-128
  803b1c:	10000826 	beq	r2,zero,803b40 <logic+0x38b0>
  803b20:	e0bffd17 	ldw	r2,-12(fp)
  803b24:	10802483 	ldbu	r2,146(r2)
  803b28:	10803fcc 	andi	r2,r2,255
  803b2c:	1080201c 	xori	r2,r2,128
  803b30:	10bfe004 	addi	r2,r2,-128
  803b34:	1000021e 	bne	r2,zero,803b40 <logic+0x38b0>
  803b38:	00800044 	movi	r2,1
  803b3c:	00000106 	br	803b44 <logic+0x38b4>
  803b40:	0005883a 	mov	r2,zero
  803b44:	1007883a 	mov	r3,r2
  803b48:	e0bffd17 	ldw	r2,-12(fp)
  803b4c:	10c01105 	stb	r3,68(r2)
  d->_cg80 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803b50:	e0bffd17 	ldw	r2,-12(fp)
  803b54:	10800983 	ldbu	r2,38(r2)
  803b58:	10803fcc 	andi	r2,r2,255
  803b5c:	1080201c 	xori	r2,r2,128
  803b60:	10bfe004 	addi	r2,r2,-128
  803b64:	10000c1e 	bne	r2,zero,803b98 <logic+0x3908>
  803b68:	e0bffd17 	ldw	r2,-12(fp)
  803b6c:	108009c3 	ldbu	r2,39(r2)
  803b70:	10803fcc 	andi	r2,r2,255
  803b74:	1080201c 	xori	r2,r2,128
  803b78:	10bfe004 	addi	r2,r2,-128
  803b7c:	1000061e 	bne	r2,zero,803b98 <logic+0x3908>
  803b80:	e0bffd17 	ldw	r2,-12(fp)
  803b84:	10800a03 	ldbu	r2,40(r2)
  803b88:	10803fcc 	andi	r2,r2,255
  803b8c:	1080201c 	xori	r2,r2,128
  803b90:	10bfe004 	addi	r2,r2,-128
  803b94:	10000226 	beq	r2,zero,803ba0 <logic+0x3910>
  803b98:	00800044 	movi	r2,1
  803b9c:	00000106 	br	803ba4 <logic+0x3914>
  803ba0:	0005883a 	mov	r2,zero
  803ba4:	1007883a 	mov	r3,r2
  803ba8:	e0bffd17 	ldw	r2,-12(fp)
  803bac:	10c024c5 	stb	r3,147(r2)
  d->_g45 = d->_g32 && !d->_cg80 || d->_g82 && !d->_cg82;
  803bb0:	e0bffd17 	ldw	r2,-12(fp)
  803bb4:	10800f43 	ldbu	r2,61(r2)
  803bb8:	10803fcc 	andi	r2,r2,255
  803bbc:	1080201c 	xori	r2,r2,128
  803bc0:	10bfe004 	addi	r2,r2,-128
  803bc4:	10000626 	beq	r2,zero,803be0 <logic+0x3950>
  803bc8:	e0bffd17 	ldw	r2,-12(fp)
  803bcc:	108024c3 	ldbu	r2,147(r2)
  803bd0:	10803fcc 	andi	r2,r2,255
  803bd4:	1080201c 	xori	r2,r2,128
  803bd8:	10bfe004 	addi	r2,r2,-128
  803bdc:	10000c26 	beq	r2,zero,803c10 <logic+0x3980>
  803be0:	e0bffd17 	ldw	r2,-12(fp)
  803be4:	10801603 	ldbu	r2,88(r2)
  803be8:	10803fcc 	andi	r2,r2,255
  803bec:	1080201c 	xori	r2,r2,128
  803bf0:	10bfe004 	addi	r2,r2,-128
  803bf4:	10000826 	beq	r2,zero,803c18 <logic+0x3988>
  803bf8:	e0bffd17 	ldw	r2,-12(fp)
  803bfc:	10802503 	ldbu	r2,148(r2)
  803c00:	10803fcc 	andi	r2,r2,255
  803c04:	1080201c 	xori	r2,r2,128
  803c08:	10bfe004 	addi	r2,r2,-128
  803c0c:	1000021e 	bne	r2,zero,803c18 <logic+0x3988>
  803c10:	00800044 	movi	r2,1
  803c14:	00000106 	br	803c1c <logic+0x398c>
  803c18:	0005883a 	mov	r2,zero
  803c1c:	1007883a 	mov	r3,r2
  803c20:	e0bffd17 	ldw	r2,-12(fp)
  803c24:	10c01145 	stb	r3,69(r2)
  d->_cg84 = d->_region0_Atrium_AtriumTimer < AVI_VALUE;
  803c28:	e13ffd17 	ldw	r4,-12(fp)
  803c2c:	20800217 	ldw	r2,8(r4)
  803c30:	20c00317 	ldw	r3,12(r4)
  803c34:	04000044 	movi	r16,1
  803c38:	000d883a 	mov	r6,zero
  803c3c:	01d01cf4 	movhi	r7,16499
  803c40:	39f00004 	addi	r7,r7,-16384
  803c44:	1009883a 	mov	r4,r2
  803c48:	180b883a 	mov	r5,r3
  803c4c:	0804e7c0 	call	804e7c <__ledf2>
  803c50:	10000116 	blt	r2,zero,803c58 <logic+0x39c8>
  803c54:	0021883a 	mov	r16,zero
  803c58:	8007883a 	mov	r3,r16
  803c5c:	e0bffd17 	ldw	r2,-12(fp)
  803c60:	10c02545 	stb	r3,149(r2)
  d->_g48 = d->_g32 && d->_cg84;
  803c64:	e0bffd17 	ldw	r2,-12(fp)
  803c68:	10800f43 	ldbu	r2,61(r2)
  803c6c:	10803fcc 	andi	r2,r2,255
  803c70:	1080201c 	xori	r2,r2,128
  803c74:	10bfe004 	addi	r2,r2,-128
  803c78:	10000826 	beq	r2,zero,803c9c <logic+0x3a0c>
  803c7c:	e0bffd17 	ldw	r2,-12(fp)
  803c80:	10802543 	ldbu	r2,149(r2)
  803c84:	10803fcc 	andi	r2,r2,255
  803c88:	1080201c 	xori	r2,r2,128
  803c8c:	10bfe004 	addi	r2,r2,-128
  803c90:	10000226 	beq	r2,zero,803c9c <logic+0x3a0c>
  803c94:	00800044 	movi	r2,1
  803c98:	00000106 	br	803ca0 <logic+0x3a10>
  803c9c:	0005883a 	mov	r2,zero
  803ca0:	1007883a 	mov	r3,r2
  803ca4:	e0bffd17 	ldw	r2,-12(fp)
  803ca8:	10c011c5 	stb	r3,71(r2)
  if (d->_g48) {
  803cac:	e0bffd17 	ldw	r2,-12(fp)
  803cb0:	108011c3 	ldbu	r2,71(r2)
  803cb4:	10803fcc 	andi	r2,r2,255
  803cb8:	1080201c 	xori	r2,r2,128
  803cbc:	10bfe004 	addi	r2,r2,-128
  803cc0:	10002a26 	beq	r2,zero,803d6c <logic+0x3adc>
    d->sleepT = (d->sleepT < (AVI_VALUE - d->_region0_Atrium_AtriumTimer)) ? d->sleepT : (AVI_VALUE - d->_region0_Atrium_AtriumTimer);
  803cc4:	e0bffd17 	ldw	r2,-12(fp)
  803cc8:	14000617 	ldw	r16,24(r2)
  803ccc:	14400717 	ldw	r17,28(r2)
  803cd0:	e13ffd17 	ldw	r4,-12(fp)
  803cd4:	20800217 	ldw	r2,8(r4)
  803cd8:	20c00317 	ldw	r3,12(r4)
  803cdc:	100d883a 	mov	r6,r2
  803ce0:	180f883a 	mov	r7,r3
  803ce4:	0009883a 	mov	r4,zero
  803ce8:	01501cf4 	movhi	r5,16499
  803cec:	29700004 	addi	r5,r5,-16384
  803cf0:	08056880 	call	805688 <__subdf3>
  803cf4:	1009883a 	mov	r4,r2
  803cf8:	180b883a 	mov	r5,r3
  803cfc:	2005883a 	mov	r2,r4
  803d00:	2807883a 	mov	r3,r5
  803d04:	100d883a 	mov	r6,r2
  803d08:	180f883a 	mov	r7,r3
  803d0c:	8009883a 	mov	r4,r16
  803d10:	880b883a 	mov	r5,r17
  803d14:	0804e7c0 	call	804e7c <__ledf2>
  803d18:	1000040e 	bge	r2,zero,803d2c <logic+0x3a9c>
  803d1c:	e13ffd17 	ldw	r4,-12(fp)
  803d20:	20800617 	ldw	r2,24(r4)
  803d24:	20c00717 	ldw	r3,28(r4)
  803d28:	00000d06 	br	803d60 <logic+0x3ad0>
  803d2c:	e13ffd17 	ldw	r4,-12(fp)
  803d30:	20800217 	ldw	r2,8(r4)
  803d34:	20c00317 	ldw	r3,12(r4)
  803d38:	100d883a 	mov	r6,r2
  803d3c:	180f883a 	mov	r7,r3
  803d40:	0009883a 	mov	r4,zero
  803d44:	01501cf4 	movhi	r5,16499
  803d48:	29700004 	addi	r5,r5,-16384
  803d4c:	08056880 	call	805688 <__subdf3>
  803d50:	1009883a 	mov	r4,r2
  803d54:	180b883a 	mov	r5,r3
  803d58:	2005883a 	mov	r2,r4
  803d5c:	2807883a 	mov	r3,r5
  803d60:	e13ffd17 	ldw	r4,-12(fp)
  803d64:	20800615 	stw	r2,24(r4)
  803d68:	20c00715 	stw	r3,28(r4)
  }
  d->_cg85 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803d6c:	e0bffd17 	ldw	r2,-12(fp)
  803d70:	10800983 	ldbu	r2,38(r2)
  803d74:	10803fcc 	andi	r2,r2,255
  803d78:	1080201c 	xori	r2,r2,128
  803d7c:	10bfe004 	addi	r2,r2,-128
  803d80:	10000c1e 	bne	r2,zero,803db4 <logic+0x3b24>
  803d84:	e0bffd17 	ldw	r2,-12(fp)
  803d88:	108009c3 	ldbu	r2,39(r2)
  803d8c:	10803fcc 	andi	r2,r2,255
  803d90:	1080201c 	xori	r2,r2,128
  803d94:	10bfe004 	addi	r2,r2,-128
  803d98:	1000061e 	bne	r2,zero,803db4 <logic+0x3b24>
  803d9c:	e0bffd17 	ldw	r2,-12(fp)
  803da0:	10800a03 	ldbu	r2,40(r2)
  803da4:	10803fcc 	andi	r2,r2,255
  803da8:	1080201c 	xori	r2,r2,128
  803dac:	10bfe004 	addi	r2,r2,-128
  803db0:	10000226 	beq	r2,zero,803dbc <logic+0x3b2c>
  803db4:	00800044 	movi	r2,1
  803db8:	00000106 	br	803dc0 <logic+0x3b30>
  803dbc:	0005883a 	mov	r2,zero
  803dc0:	1007883a 	mov	r3,r2
  803dc4:	e0bffd17 	ldw	r2,-12(fp)
  803dc8:	10c02585 	stb	r3,150(r2)
  d->_g52 = d->_g48 && !d->_cg85 || d->_g87 && !d->_cg89;
  803dcc:	e0bffd17 	ldw	r2,-12(fp)
  803dd0:	108011c3 	ldbu	r2,71(r2)
  803dd4:	10803fcc 	andi	r2,r2,255
  803dd8:	1080201c 	xori	r2,r2,128
  803ddc:	10bfe004 	addi	r2,r2,-128
  803de0:	10000626 	beq	r2,zero,803dfc <logic+0x3b6c>
  803de4:	e0bffd17 	ldw	r2,-12(fp)
  803de8:	10802583 	ldbu	r2,150(r2)
  803dec:	10803fcc 	andi	r2,r2,255
  803df0:	1080201c 	xori	r2,r2,128
  803df4:	10bfe004 	addi	r2,r2,-128
  803df8:	10000c26 	beq	r2,zero,803e2c <logic+0x3b9c>
  803dfc:	e0bffd17 	ldw	r2,-12(fp)
  803e00:	10801683 	ldbu	r2,90(r2)
  803e04:	10803fcc 	andi	r2,r2,255
  803e08:	1080201c 	xori	r2,r2,128
  803e0c:	10bfe004 	addi	r2,r2,-128
  803e10:	10000826 	beq	r2,zero,803e34 <logic+0x3ba4>
  803e14:	e0bffd17 	ldw	r2,-12(fp)
  803e18:	108025c3 	ldbu	r2,151(r2)
  803e1c:	10803fcc 	andi	r2,r2,255
  803e20:	1080201c 	xori	r2,r2,128
  803e24:	10bfe004 	addi	r2,r2,-128
  803e28:	1000021e 	bne	r2,zero,803e34 <logic+0x3ba4>
  803e2c:	00800044 	movi	r2,1
  803e30:	00000106 	br	803e38 <logic+0x3ba8>
  803e34:	0005883a 	mov	r2,zero
  803e38:	1007883a 	mov	r3,r2
  803e3c:	e0bffd17 	ldw	r2,-12(fp)
  803e40:	10c01285 	stb	r3,74(r2)
  d->_g57 = d->_g32 && !d->_cg84;
  803e44:	e0bffd17 	ldw	r2,-12(fp)
  803e48:	10800f43 	ldbu	r2,61(r2)
  803e4c:	10803fcc 	andi	r2,r2,255
  803e50:	1080201c 	xori	r2,r2,128
  803e54:	10bfe004 	addi	r2,r2,-128
  803e58:	10000826 	beq	r2,zero,803e7c <logic+0x3bec>
  803e5c:	e0bffd17 	ldw	r2,-12(fp)
  803e60:	10802543 	ldbu	r2,149(r2)
  803e64:	10803fcc 	andi	r2,r2,255
  803e68:	1080201c 	xori	r2,r2,128
  803e6c:	10bfe004 	addi	r2,r2,-128
  803e70:	1000021e 	bne	r2,zero,803e7c <logic+0x3bec>
  803e74:	00800044 	movi	r2,1
  803e78:	00000106 	br	803e80 <logic+0x3bf0>
  803e7c:	0005883a 	mov	r2,zero
  803e80:	1007883a 	mov	r3,r2
  803e84:	e0bffd17 	ldw	r2,-12(fp)
  803e88:	10c01385 	stb	r3,78(r2)
  d->_cg94 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3 || d->_Pacemaker_local__Atrig4;
  803e8c:	e0bffd17 	ldw	r2,-12(fp)
  803e90:	10800983 	ldbu	r2,38(r2)
  803e94:	10803fcc 	andi	r2,r2,255
  803e98:	1080201c 	xori	r2,r2,128
  803e9c:	10bfe004 	addi	r2,r2,-128
  803ea0:	10000c1e 	bne	r2,zero,803ed4 <logic+0x3c44>
  803ea4:	e0bffd17 	ldw	r2,-12(fp)
  803ea8:	108009c3 	ldbu	r2,39(r2)
  803eac:	10803fcc 	andi	r2,r2,255
  803eb0:	1080201c 	xori	r2,r2,128
  803eb4:	10bfe004 	addi	r2,r2,-128
  803eb8:	1000061e 	bne	r2,zero,803ed4 <logic+0x3c44>
  803ebc:	e0bffd17 	ldw	r2,-12(fp)
  803ec0:	10800a03 	ldbu	r2,40(r2)
  803ec4:	10803fcc 	andi	r2,r2,255
  803ec8:	1080201c 	xori	r2,r2,128
  803ecc:	10bfe004 	addi	r2,r2,-128
  803ed0:	10000226 	beq	r2,zero,803edc <logic+0x3c4c>
  803ed4:	00800044 	movi	r2,1
  803ed8:	00000106 	br	803ee0 <logic+0x3c50>
  803edc:	0005883a 	mov	r2,zero
  803ee0:	1007883a 	mov	r3,r2
  803ee4:	e0bffd17 	ldw	r2,-12(fp)
  803ee8:	10c02685 	stb	r3,154(r2)
  d->_g54 = d->_g88 && !d->_cg91 || d->_g57 && !d->_cg94;
  803eec:	e0bffd17 	ldw	r2,-12(fp)
  803ef0:	108016c3 	ldbu	r2,91(r2)
  803ef4:	10803fcc 	andi	r2,r2,255
  803ef8:	1080201c 	xori	r2,r2,128
  803efc:	10bfe004 	addi	r2,r2,-128
  803f00:	10000626 	beq	r2,zero,803f1c <logic+0x3c8c>
  803f04:	e0bffd17 	ldw	r2,-12(fp)
  803f08:	10802643 	ldbu	r2,153(r2)
  803f0c:	10803fcc 	andi	r2,r2,255
  803f10:	1080201c 	xori	r2,r2,128
  803f14:	10bfe004 	addi	r2,r2,-128
  803f18:	10000c26 	beq	r2,zero,803f4c <logic+0x3cbc>
  803f1c:	e0bffd17 	ldw	r2,-12(fp)
  803f20:	10801383 	ldbu	r2,78(r2)
  803f24:	10803fcc 	andi	r2,r2,255
  803f28:	1080201c 	xori	r2,r2,128
  803f2c:	10bfe004 	addi	r2,r2,-128
  803f30:	10000826 	beq	r2,zero,803f54 <logic+0x3cc4>
  803f34:	e0bffd17 	ldw	r2,-12(fp)
  803f38:	10802683 	ldbu	r2,154(r2)
  803f3c:	10803fcc 	andi	r2,r2,255
  803f40:	1080201c 	xori	r2,r2,128
  803f44:	10bfe004 	addi	r2,r2,-128
  803f48:	1000021e 	bne	r2,zero,803f54 <logic+0x3cc4>
  803f4c:	00800044 	movi	r2,1
  803f50:	00000106 	br	803f58 <logic+0x3cc8>
  803f54:	0005883a 	mov	r2,zero
  803f58:	1007883a 	mov	r3,r2
  803f5c:	e0bffd17 	ldw	r2,-12(fp)
  803f60:	10c01305 	stb	r3,76(r2)
  d->_g59 = d->_g32 || d->_g100 && !d->_cg102;
  803f64:	e0bffd17 	ldw	r2,-12(fp)
  803f68:	10800f43 	ldbu	r2,61(r2)
  803f6c:	10803fcc 	andi	r2,r2,255
  803f70:	1080201c 	xori	r2,r2,128
  803f74:	10bfe004 	addi	r2,r2,-128
  803f78:	10000c1e 	bne	r2,zero,803fac <logic+0x3d1c>
  803f7c:	e0bffd17 	ldw	r2,-12(fp)
  803f80:	10801843 	ldbu	r2,97(r2)
  803f84:	10803fcc 	andi	r2,r2,255
  803f88:	1080201c 	xori	r2,r2,128
  803f8c:	10bfe004 	addi	r2,r2,-128
  803f90:	10000826 	beq	r2,zero,803fb4 <logic+0x3d24>
  803f94:	e0bffd17 	ldw	r2,-12(fp)
  803f98:	108026c3 	ldbu	r2,155(r2)
  803f9c:	10803fcc 	andi	r2,r2,255
  803fa0:	1080201c 	xori	r2,r2,128
  803fa4:	10bfe004 	addi	r2,r2,-128
  803fa8:	1000021e 	bne	r2,zero,803fb4 <logic+0x3d24>
  803fac:	00800044 	movi	r2,1
  803fb0:	00000106 	br	803fb8 <logic+0x3d28>
  803fb4:	0005883a 	mov	r2,zero
  803fb8:	1007883a 	mov	r3,r2
  803fbc:	e0bffd17 	ldw	r2,-12(fp)
  803fc0:	10c013c5 	stb	r3,79(r2)
}
  803fc4:	0001883a 	nop
  803fc8:	e6fffe04 	addi	sp,fp,-8
  803fcc:	dfc00317 	ldw	ra,12(sp)
  803fd0:	df000217 	ldw	fp,8(sp)
  803fd4:	dc400117 	ldw	r17,4(sp)
  803fd8:	dc000017 	ldw	r16,0(sp)
  803fdc:	dec00404 	addi	sp,sp,16
  803fe0:	f800283a 	ret

00803fe4 <reset>:

void reset(TickData* d) {
  803fe4:	defffe04 	addi	sp,sp,-8
  803fe8:	df000115 	stw	fp,4(sp)
  803fec:	df000104 	addi	fp,sp,4
  803ff0:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  803ff4:	e0bfff17 	ldw	r2,-4(fp)
  803ff8:	00c00044 	movi	r3,1
  803ffc:	10c01ac5 	stb	r3,107(r2)
  d->_TERM = 0;
  804000:	e0bfff17 	ldw	r2,-4(fp)
  804004:	10002b05 	stb	zero,172(r2)
  d->_region0_Atrium_VentricleTimer = 0.0;
  804008:	e0bfff17 	ldw	r2,-4(fp)
  80400c:	10000015 	stw	zero,0(r2)
  804010:	10000115 	stw	zero,4(r2)
  d->_region0_Atrium_AtriumTimer = 0.0;
  804014:	e0bfff17 	ldw	r2,-4(fp)
  804018:	10000215 	stw	zero,8(r2)
  80401c:	10000315 	stw	zero,12(r2)
  d->deltaT = 0.0;
  804020:	e0bfff17 	ldw	r2,-4(fp)
  804024:	10000415 	stw	zero,16(r2)
  804028:	10000515 	stw	zero,20(r2)
  d->sleepT = 0.0;
  80402c:	e0bfff17 	ldw	r2,-4(fp)
  804030:	10000615 	stw	zero,24(r2)
  804034:	10000715 	stw	zero,28(r2)
  d->_pg36 = 0;
  804038:	e0bfff17 	ldw	r2,-4(fp)
  80403c:	10002b45 	stb	zero,173(r2)
  d->_pg59 = 0;
  804040:	e0bfff17 	ldw	r2,-4(fp)
  804044:	10002b85 	stb	zero,174(r2)
  d->_pg45 = 0;
  804048:	e0bfff17 	ldw	r2,-4(fp)
  80404c:	10002bc5 	stb	zero,175(r2)
  d->_pg14 = 0;
  804050:	e0bfff17 	ldw	r2,-4(fp)
  804054:	10002c05 	stb	zero,176(r2)
  d->_pg33 = 0;
  804058:	e0bfff17 	ldw	r2,-4(fp)
  80405c:	10002c45 	stb	zero,177(r2)
  d->_pg38_e5 = 0;
  804060:	e0bfff17 	ldw	r2,-4(fp)
  804064:	10002c85 	stb	zero,178(r2)
  d->_pg7 = 0;
  804068:	e0bfff17 	ldw	r2,-4(fp)
  80406c:	10002cc5 	stb	zero,179(r2)
  d->_pg41 = 0;
  804070:	e0bfff17 	ldw	r2,-4(fp)
  804074:	10002d05 	stb	zero,180(r2)
  d->_pg14_e2 = 0;
  804078:	e0bfff17 	ldw	r2,-4(fp)
  80407c:	10002d45 	stb	zero,181(r2)
  d->_pg54 = 0;
  804080:	e0bfff17 	ldw	r2,-4(fp)
  804084:	10002d85 	stb	zero,182(r2)
  d->_pg52 = 0;
  804088:	e0bfff17 	ldw	r2,-4(fp)
  80408c:	10002dc5 	stb	zero,183(r2)
  d->_pg64_e3 = 0;
  804090:	e0bfff17 	ldw	r2,-4(fp)
  804094:	10002e05 	stb	zero,184(r2)
  d->_pg99_e7 = 0;
  804098:	e0bfff17 	ldw	r2,-4(fp)
  80409c:	10002e45 	stb	zero,185(r2)
  d->_pg3 = 0;
  8040a0:	e0bfff17 	ldw	r2,-4(fp)
  8040a4:	10002e85 	stb	zero,186(r2)
  d->_pg108 = 0;
  8040a8:	e0bfff17 	ldw	r2,-4(fp)
  8040ac:	10002ec5 	stb	zero,187(r2)
  d->_pg13 = 0;
  8040b0:	e0bfff17 	ldw	r2,-4(fp)
  8040b4:	10002f05 	stb	zero,188(r2)
  d->_pg20 = 0;
  8040b8:	e0bfff17 	ldw	r2,-4(fp)
  8040bc:	10002f45 	stb	zero,189(r2)
  d->_pg26 = 0;
  8040c0:	e0bfff17 	ldw	r2,-4(fp)
  8040c4:	10002f85 	stb	zero,190(r2)
  d->_pg31 = 0;
  8040c8:	e0bfff17 	ldw	r2,-4(fp)
  8040cc:	10002fc5 	stb	zero,191(r2)
}
  8040d0:	0001883a 	nop
  8040d4:	e037883a 	mov	sp,fp
  8040d8:	df000017 	ldw	fp,0(sp)
  8040dc:	dec00104 	addi	sp,sp,4
  8040e0:	f800283a 	ret

008040e4 <tick>:

void tick(TickData* d) {
  8040e4:	defffd04 	addi	sp,sp,-12
  8040e8:	dfc00215 	stw	ra,8(sp)
  8040ec:	df000115 	stw	fp,4(sp)
  8040f0:	df000104 	addi	fp,sp,4
  8040f4:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  8040f8:	e13fff17 	ldw	r4,-4(fp)
  8040fc:	08002900 	call	800290 <logic>

  d->_pg36 = d->_g36;
  804100:	e0bfff17 	ldw	r2,-4(fp)
  804104:	10c00fc3 	ldbu	r3,63(r2)
  804108:	e0bfff17 	ldw	r2,-4(fp)
  80410c:	10c02b45 	stb	r3,173(r2)
  d->_pg59 = d->_g59;
  804110:	e0bfff17 	ldw	r2,-4(fp)
  804114:	10c013c3 	ldbu	r3,79(r2)
  804118:	e0bfff17 	ldw	r2,-4(fp)
  80411c:	10c02b85 	stb	r3,174(r2)
  d->_pg45 = d->_g45;
  804120:	e0bfff17 	ldw	r2,-4(fp)
  804124:	10c01143 	ldbu	r3,69(r2)
  804128:	e0bfff17 	ldw	r2,-4(fp)
  80412c:	10c02bc5 	stb	r3,175(r2)
  d->_pg14 = d->_g14;
  804130:	e0bfff17 	ldw	r2,-4(fp)
  804134:	10c00c03 	ldbu	r3,48(r2)
  804138:	e0bfff17 	ldw	r2,-4(fp)
  80413c:	10c02c05 	stb	r3,176(r2)
  d->_pg33 = d->_g33;
  804140:	e0bfff17 	ldw	r2,-4(fp)
  804144:	10c00f83 	ldbu	r3,62(r2)
  804148:	e0bfff17 	ldw	r2,-4(fp)
  80414c:	10c02c45 	stb	r3,177(r2)
  d->_pg38_e5 = d->_g38_e5;
  804150:	e0bfff17 	ldw	r2,-4(fp)
  804154:	10c02903 	ldbu	r3,164(r2)
  804158:	e0bfff17 	ldw	r2,-4(fp)
  80415c:	10c02c85 	stb	r3,178(r2)
  d->_pg7 = d->_g7;
  804160:	e0bfff17 	ldw	r2,-4(fp)
  804164:	10c00ac3 	ldbu	r3,43(r2)
  804168:	e0bfff17 	ldw	r2,-4(fp)
  80416c:	10c02cc5 	stb	r3,179(r2)
  d->_pg41 = d->_g41;
  804170:	e0bfff17 	ldw	r2,-4(fp)
  804174:	10c01103 	ldbu	r3,68(r2)
  804178:	e0bfff17 	ldw	r2,-4(fp)
  80417c:	10c02d05 	stb	r3,180(r2)
  d->_pg14_e2 = d->_g14_e2;
  804180:	e0bfff17 	ldw	r2,-4(fp)
  804184:	10c02843 	ldbu	r3,161(r2)
  804188:	e0bfff17 	ldw	r2,-4(fp)
  80418c:	10c02d45 	stb	r3,181(r2)
  d->_pg54 = d->_g54;
  804190:	e0bfff17 	ldw	r2,-4(fp)
  804194:	10c01303 	ldbu	r3,76(r2)
  804198:	e0bfff17 	ldw	r2,-4(fp)
  80419c:	10c02d85 	stb	r3,182(r2)
  d->_pg52 = d->_g52;
  8041a0:	e0bfff17 	ldw	r2,-4(fp)
  8041a4:	10c01283 	ldbu	r3,74(r2)
  8041a8:	e0bfff17 	ldw	r2,-4(fp)
  8041ac:	10c02dc5 	stb	r3,183(r2)
  d->_pg64_e3 = d->_g64_e3;
  8041b0:	e0bfff17 	ldw	r2,-4(fp)
  8041b4:	10c029c3 	ldbu	r3,167(r2)
  8041b8:	e0bfff17 	ldw	r2,-4(fp)
  8041bc:	10c02e05 	stb	r3,184(r2)
  d->_pg99_e7 = d->_g99_e7;
  8041c0:	e0bfff17 	ldw	r2,-4(fp)
  8041c4:	10c02ac3 	ldbu	r3,171(r2)
  8041c8:	e0bfff17 	ldw	r2,-4(fp)
  8041cc:	10c02e45 	stb	r3,185(r2)
  d->_pg3 = d->_g3;
  8041d0:	e0bfff17 	ldw	r2,-4(fp)
  8041d4:	10c00a43 	ldbu	r3,41(r2)
  8041d8:	e0bfff17 	ldw	r2,-4(fp)
  8041dc:	10c02e85 	stb	r3,186(r2)
  d->_pg108 = d->_g108;
  8041e0:	e0bfff17 	ldw	r2,-4(fp)
  8041e4:	10c01a03 	ldbu	r3,104(r2)
  8041e8:	e0bfff17 	ldw	r2,-4(fp)
  8041ec:	10c02ec5 	stb	r3,187(r2)
  d->_pg13 = d->_g13;
  8041f0:	e0bfff17 	ldw	r2,-4(fp)
  8041f4:	10c00bc3 	ldbu	r3,47(r2)
  8041f8:	e0bfff17 	ldw	r2,-4(fp)
  8041fc:	10c02f05 	stb	r3,188(r2)
  d->_pg20 = d->_g20;
  804200:	e0bfff17 	ldw	r2,-4(fp)
  804204:	10c00d03 	ldbu	r3,52(r2)
  804208:	e0bfff17 	ldw	r2,-4(fp)
  80420c:	10c02f45 	stb	r3,189(r2)
  d->_pg26 = d->_g26;
  804210:	e0bfff17 	ldw	r2,-4(fp)
  804214:	10c00e43 	ldbu	r3,57(r2)
  804218:	e0bfff17 	ldw	r2,-4(fp)
  80421c:	10c02f85 	stb	r3,190(r2)
  d->_pg31 = d->_g31;
  804220:	e0bfff17 	ldw	r2,-4(fp)
  804224:	10c00f03 	ldbu	r3,60(r2)
  804228:	e0bfff17 	ldw	r2,-4(fp)
  80422c:	10c02fc5 	stb	r3,191(r2)
  d->_GO = 0;
  804230:	e0bfff17 	ldw	r2,-4(fp)
  804234:	10001ac5 	stb	zero,107(r2)
}
  804238:	0001883a 	nop
  80423c:	e037883a 	mov	sp,fp
  804240:	dfc00117 	ldw	ra,4(sp)
  804244:	df000017 	ldw	fp,0(sp)
  804248:	dec00204 	addi	sp,sp,8
  80424c:	f800283a 	ret

00804250 <timerISR>:
#include <altera_avalon_pio_regs.h>
#include <alt_types.h>

#include "../inc/chart.h"

alt_u32 timerISR(void* context){
  804250:	defffd04 	addi	sp,sp,-12
  804254:	df000215 	stw	fp,8(sp)
  804258:	df000204 	addi	fp,sp,8
  80425c:	e13fff15 	stw	r4,-4(fp)
	int* timeCount = (int*) context;
  804260:	e0bfff17 	ldw	r2,-4(fp)
  804264:	e0bffe15 	stw	r2,-8(fp)
	(*timeCount)++;
  804268:	e0bffe17 	ldw	r2,-8(fp)
  80426c:	10800017 	ldw	r2,0(r2)
  804270:	10c00044 	addi	r3,r2,1
  804274:	e0bffe17 	ldw	r2,-8(fp)
  804278:	10c00015 	stw	r3,0(r2)
	return 1; // next time out is 1ms
  80427c:	00800044 	movi	r2,1
}
  804280:	e037883a 	mov	sp,fp
  804284:	df000017 	ldw	fp,0(sp)
  804288:	dec00104 	addi	sp,sp,4
  80428c:	f800283a 	ret

00804290 <keyISR>:

void keyISR(void* context, alt_u32 id){
  804290:	defffb04 	addi	sp,sp,-20
  804294:	dfc00415 	stw	ra,16(sp)
  804298:	df000315 	stw	fp,12(sp)
  80429c:	df000304 	addi	fp,sp,12
  8042a0:	e13ffe15 	stw	r4,-8(fp)
  8042a4:	e17fff15 	stw	r5,-4(fp)
	int* temp = (void*) context;
  8042a8:	e0bffe17 	ldw	r2,-8(fp)
  8042ac:	e0bffd15 	stw	r2,-12(fp)
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  8042b0:	00804074 	movhi	r2,257
  8042b4:	10842b04 	addi	r2,r2,4268
  8042b8:	10c00037 	ldwio	r3,0(r2)
  8042bc:	e0bffd17 	ldw	r2,-12(fp)
  8042c0:	10c00015 	stw	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  8042c4:	0007883a 	mov	r3,zero
  8042c8:	00804074 	movhi	r2,257
  8042cc:	10842b04 	addi	r2,r2,4268
  8042d0:	10c00035 	stwio	r3,0(r2)
	printf("button: %i\n", *temp);
  8042d4:	e0bffd17 	ldw	r2,-12(fp)
  8042d8:	10800017 	ldw	r2,0(r2)
  8042dc:	100b883a 	mov	r5,r2
  8042e0:	01002074 	movhi	r4,129
  8042e4:	21142d04 	addi	r4,r4,20660
  8042e8:	08060c00 	call	8060c0 <printf>
}
  8042ec:	0001883a 	nop
  8042f0:	e037883a 	mov	sp,fp
  8042f4:	dfc00117 	ldw	ra,4(sp)
  8042f8:	df000017 	ldw	fp,0(sp)
  8042fc:	dec00204 	addi	sp,sp,8
  804300:	f800283a 	ret

00804304 <main>:

int main()
{
  804304:	deffc104 	addi	sp,sp,-252
  804308:	dfc03e15 	stw	ra,248(sp)
  80430c:	df003d15 	stw	fp,244(sp)
  804310:	df003d04 	addi	fp,sp,244
	printf("Pacemaker\n");
  804314:	01002074 	movhi	r4,129
  804318:	21143004 	addi	r4,r4,20672
  80431c:	08061bc0 	call	8061bc <puts>

	// Button init
	int key = 0;
  804320:	e03fc715 	stw	zero,-228(fp)
	void* keysContext = (void*) &key;
  804324:	e0bfc704 	addi	r2,fp,-228
  804328:	e0bfc515 	stw	r2,-236(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  80432c:	0007883a 	mov	r3,zero
  804330:	00804074 	movhi	r2,257
  804334:	10842b04 	addi	r2,r2,4268
  804338:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7);
  80433c:	00c001c4 	movi	r3,7
  804340:	00804074 	movhi	r2,257
  804344:	10842a04 	addi	r2,r2,4264
  804348:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(KEYS_IRQ, keysContext, keyISR);
  80434c:	01802034 	movhi	r6,128
  804350:	3190a404 	addi	r6,r6,17040
  804354:	e17fc517 	ldw	r5,-236(fp)
  804358:	01000104 	movi	r4,4
  80435c:	08111640 	call	811164 <alt_irq_register>

	// SC Chart Init
	TickData data;
	reset(&data);
  804360:	e0bfc804 	addi	r2,fp,-224
  804364:	1009883a 	mov	r4,r2
  804368:	0803fe40 	call	803fe4 <reset>
	tick(&data);
  80436c:	e0bfc804 	addi	r2,fp,-224
  804370:	1009883a 	mov	r4,r2
  804374:	08040e40 	call	8040e4 <tick>

	// Timer Init
	alt_alarm ticker;
	uint64_t systemTime = 0;
  804378:	e03ffe15 	stw	zero,-8(fp)
  80437c:	e03fff15 	stw	zero,-4(fp)
	void* timerContext = (void*) &systemTime;
  804380:	e0bffe04 	addi	r2,fp,-8
  804384:	e0bfc615 	stw	r2,-232(fp)
	alt_alarm_start(&ticker, 1, timerISR, timerContext);
  804388:	e0bff804 	addi	r2,fp,-32
  80438c:	e1ffc617 	ldw	r7,-232(fp)
  804390:	01802034 	movhi	r6,128
  804394:	31909404 	addi	r6,r6,16976
  804398:	01400044 	movi	r5,1
  80439c:	1009883a 	mov	r4,r2
  8043a0:	0810e140 	call	810e14 <alt_alarm_start>
	uint64_t prevTime = 0;
  8043a4:	e03fc315 	stw	zero,-244(fp)
  8043a8:	e03fc415 	stw	zero,-240(fp)

	// Reset LED
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x00);
  8043ac:	0007883a 	mov	r3,zero
  8043b0:	00804074 	movhi	r2,257
  8043b4:	10841c04 	addi	r2,r2,4208
  8043b8:	10c00035 	stwio	r3,0(r2)

	while(1){
	 // update time
		  data.deltaT = systemTime - prevTime;
  8043bc:	e13ffe17 	ldw	r4,-8(fp)
  8043c0:	e17fff17 	ldw	r5,-4(fp)
  8043c4:	e1bfc317 	ldw	r6,-244(fp)
  8043c8:	e1ffc417 	ldw	r7,-240(fp)
  8043cc:	2185c83a 	sub	r2,r4,r6
  8043d0:	2091803a 	cmpltu	r8,r4,r2
  8043d4:	29c7c83a 	sub	r3,r5,r7
  8043d8:	1a09c83a 	sub	r4,r3,r8
  8043dc:	2007883a 	mov	r3,r4
  8043e0:	100b883a 	mov	r5,r2
  8043e4:	180d883a 	mov	r6,r3
  8043e8:	2809883a 	mov	r4,r5
  8043ec:	300b883a 	mov	r5,r6
  8043f0:	08044840 	call	804484 <__floatundidf>
  8043f4:	1009883a 	mov	r4,r2
  8043f8:	180b883a 	mov	r5,r3
  8043fc:	e13fcc15 	stw	r4,-208(fp)
  804400:	e17fcd15 	stw	r5,-204(fp)
		  prevTime = systemTime;
  804404:	e0bffe17 	ldw	r2,-8(fp)
  804408:	e0bfc315 	stw	r2,-244(fp)
  80440c:	e0bfff17 	ldw	r2,-4(fp)
  804410:	e0bfc415 	stw	r2,-240(fp)

		  // update inputs

		  tick(&data);
  804414:	e0bfc804 	addi	r2,fp,-224
  804418:	1009883a 	mov	r4,r2
  80441c:	08040e40 	call	8040e4 <tick>

		  // update outputs
		  if(data.AP){
  804420:	e0bfd083 	ldbu	r2,-190(fp)
  804424:	10803fcc 	andi	r2,r2,255
  804428:	1080201c 	xori	r2,r2,128
  80442c:	10bfe004 	addi	r2,r2,-128
  804430:	10000526 	beq	r2,zero,804448 <main+0x144>
			  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x01);
  804434:	00c00044 	movi	r3,1
  804438:	00804074 	movhi	r2,257
  80443c:	10842004 	addi	r2,r2,4224
  804440:	10c00035 	stwio	r3,0(r2)
  804444:	003fdd06 	br	8043bc <__alt_mem_onchip_mem+0xff7fc3bc>
		  } else if (data.VP){
  804448:	e0bfd0c3 	ldbu	r2,-189(fp)
  80444c:	10803fcc 	andi	r2,r2,255
  804450:	1080201c 	xori	r2,r2,128
  804454:	10bfe004 	addi	r2,r2,-128
  804458:	10000526 	beq	r2,zero,804470 <main+0x16c>
			  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x02);
  80445c:	00c00084 	movi	r3,2
  804460:	00804074 	movhi	r2,257
  804464:	10842004 	addi	r2,r2,4224
  804468:	10c00035 	stwio	r3,0(r2)
  80446c:	003fd306 	br	8043bc <__alt_mem_onchip_mem+0xff7fc3bc>
		  } else {
			  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x00);
  804470:	0007883a 	mov	r3,zero
  804474:	00804074 	movhi	r2,257
  804478:	10842004 	addi	r2,r2,4224
  80447c:	10c00035 	stwio	r3,0(r2)
		  }
	  }
  804480:	003fce06 	br	8043bc <__alt_mem_onchip_mem+0xff7fc3bc>

00804484 <__floatundidf>:
  804484:	defffc04 	addi	sp,sp,-16
  804488:	dc800215 	stw	r18,8(sp)
  80448c:	2025883a 	mov	r18,r4
  804490:	2809883a 	mov	r4,r5
  804494:	dfc00315 	stw	ra,12(sp)
  804498:	dc400115 	stw	r17,4(sp)
  80449c:	dc000015 	stw	r16,0(sp)
  8044a0:	0805f840 	call	805f84 <__floatunsidf>
  8044a4:	000d883a 	mov	r6,zero
  8044a8:	01d07c34 	movhi	r7,16880
  8044ac:	180b883a 	mov	r5,r3
  8044b0:	1009883a 	mov	r4,r2
  8044b4:	0804f700 	call	804f70 <__muldf3>
  8044b8:	9009883a 	mov	r4,r18
  8044bc:	1023883a 	mov	r17,r2
  8044c0:	1821883a 	mov	r16,r3
  8044c4:	0805f840 	call	805f84 <__floatunsidf>
  8044c8:	880d883a 	mov	r6,r17
  8044cc:	800f883a 	mov	r7,r16
  8044d0:	1009883a 	mov	r4,r2
  8044d4:	180b883a 	mov	r5,r3
  8044d8:	08044f40 	call	8044f4 <__adddf3>
  8044dc:	dfc00317 	ldw	ra,12(sp)
  8044e0:	dc800217 	ldw	r18,8(sp)
  8044e4:	dc400117 	ldw	r17,4(sp)
  8044e8:	dc000017 	ldw	r16,0(sp)
  8044ec:	dec00404 	addi	sp,sp,16
  8044f0:	f800283a 	ret

008044f4 <__adddf3>:
  8044f4:	02c00434 	movhi	r11,16
  8044f8:	5affffc4 	addi	r11,r11,-1
  8044fc:	2806d7fa 	srli	r3,r5,31
  804500:	2ad4703a 	and	r10,r5,r11
  804504:	3ad2703a 	and	r9,r7,r11
  804508:	3804d53a 	srli	r2,r7,20
  80450c:	3018d77a 	srli	r12,r6,29
  804510:	280ad53a 	srli	r5,r5,20
  804514:	501490fa 	slli	r10,r10,3
  804518:	2010d77a 	srli	r8,r4,29
  80451c:	481290fa 	slli	r9,r9,3
  804520:	380ed7fa 	srli	r7,r7,31
  804524:	defffb04 	addi	sp,sp,-20
  804528:	dc800215 	stw	r18,8(sp)
  80452c:	dc400115 	stw	r17,4(sp)
  804530:	dc000015 	stw	r16,0(sp)
  804534:	dfc00415 	stw	ra,16(sp)
  804538:	dcc00315 	stw	r19,12(sp)
  80453c:	1c803fcc 	andi	r18,r3,255
  804540:	2c01ffcc 	andi	r16,r5,2047
  804544:	5210b03a 	or	r8,r10,r8
  804548:	202290fa 	slli	r17,r4,3
  80454c:	1081ffcc 	andi	r2,r2,2047
  804550:	4b12b03a 	or	r9,r9,r12
  804554:	300c90fa 	slli	r6,r6,3
  804558:	91c07526 	beq	r18,r7,804730 <__adddf3+0x23c>
  80455c:	8087c83a 	sub	r3,r16,r2
  804560:	00c0ab0e 	bge	zero,r3,804810 <__adddf3+0x31c>
  804564:	10002a1e 	bne	r2,zero,804610 <__adddf3+0x11c>
  804568:	4984b03a 	or	r2,r9,r6
  80456c:	1000961e 	bne	r2,zero,8047c8 <__adddf3+0x2d4>
  804570:	888001cc 	andi	r2,r17,7
  804574:	10000726 	beq	r2,zero,804594 <__adddf3+0xa0>
  804578:	888003cc 	andi	r2,r17,15
  80457c:	00c00104 	movi	r3,4
  804580:	10c00426 	beq	r2,r3,804594 <__adddf3+0xa0>
  804584:	88c7883a 	add	r3,r17,r3
  804588:	1c63803a 	cmpltu	r17,r3,r17
  80458c:	4451883a 	add	r8,r8,r17
  804590:	1823883a 	mov	r17,r3
  804594:	4080202c 	andhi	r2,r8,128
  804598:	10005926 	beq	r2,zero,804700 <__adddf3+0x20c>
  80459c:	84000044 	addi	r16,r16,1
  8045a0:	0081ffc4 	movi	r2,2047
  8045a4:	8080ba26 	beq	r16,r2,804890 <__adddf3+0x39c>
  8045a8:	00bfe034 	movhi	r2,65408
  8045ac:	10bfffc4 	addi	r2,r2,-1
  8045b0:	4090703a 	and	r8,r8,r2
  8045b4:	4004977a 	slli	r2,r8,29
  8045b8:	4010927a 	slli	r8,r8,9
  8045bc:	8822d0fa 	srli	r17,r17,3
  8045c0:	8401ffcc 	andi	r16,r16,2047
  8045c4:	4010d33a 	srli	r8,r8,12
  8045c8:	9007883a 	mov	r3,r18
  8045cc:	1444b03a 	or	r2,r2,r17
  8045d0:	8401ffcc 	andi	r16,r16,2047
  8045d4:	8020953a 	slli	r16,r16,20
  8045d8:	18c03fcc 	andi	r3,r3,255
  8045dc:	01000434 	movhi	r4,16
  8045e0:	213fffc4 	addi	r4,r4,-1
  8045e4:	180697fa 	slli	r3,r3,31
  8045e8:	4110703a 	and	r8,r8,r4
  8045ec:	4410b03a 	or	r8,r8,r16
  8045f0:	40c6b03a 	or	r3,r8,r3
  8045f4:	dfc00417 	ldw	ra,16(sp)
  8045f8:	dcc00317 	ldw	r19,12(sp)
  8045fc:	dc800217 	ldw	r18,8(sp)
  804600:	dc400117 	ldw	r17,4(sp)
  804604:	dc000017 	ldw	r16,0(sp)
  804608:	dec00504 	addi	sp,sp,20
  80460c:	f800283a 	ret
  804610:	0081ffc4 	movi	r2,2047
  804614:	80bfd626 	beq	r16,r2,804570 <__alt_mem_onchip_mem+0xff7fc570>
  804618:	4a402034 	orhi	r9,r9,128
  80461c:	00800e04 	movi	r2,56
  804620:	10c09f16 	blt	r2,r3,8048a0 <__adddf3+0x3ac>
  804624:	008007c4 	movi	r2,31
  804628:	10c0c216 	blt	r2,r3,804934 <__adddf3+0x440>
  80462c:	00800804 	movi	r2,32
  804630:	10c5c83a 	sub	r2,r2,r3
  804634:	488a983a 	sll	r5,r9,r2
  804638:	30c8d83a 	srl	r4,r6,r3
  80463c:	3084983a 	sll	r2,r6,r2
  804640:	48c6d83a 	srl	r3,r9,r3
  804644:	290cb03a 	or	r6,r5,r4
  804648:	1004c03a 	cmpne	r2,r2,zero
  80464c:	308cb03a 	or	r6,r6,r2
  804650:	898dc83a 	sub	r6,r17,r6
  804654:	89a3803a 	cmpltu	r17,r17,r6
  804658:	40d1c83a 	sub	r8,r8,r3
  80465c:	4451c83a 	sub	r8,r8,r17
  804660:	3023883a 	mov	r17,r6
  804664:	4080202c 	andhi	r2,r8,128
  804668:	10002326 	beq	r2,zero,8046f8 <__adddf3+0x204>
  80466c:	04c02034 	movhi	r19,128
  804670:	9cffffc4 	addi	r19,r19,-1
  804674:	44e6703a 	and	r19,r8,r19
  804678:	98007626 	beq	r19,zero,804854 <__adddf3+0x360>
  80467c:	9809883a 	mov	r4,r19
  804680:	080602c0 	call	80602c <__clzsi2>
  804684:	10fffe04 	addi	r3,r2,-8
  804688:	010007c4 	movi	r4,31
  80468c:	20c07716 	blt	r4,r3,80486c <__adddf3+0x378>
  804690:	00800804 	movi	r2,32
  804694:	10c5c83a 	sub	r2,r2,r3
  804698:	8884d83a 	srl	r2,r17,r2
  80469c:	98d0983a 	sll	r8,r19,r3
  8046a0:	88e2983a 	sll	r17,r17,r3
  8046a4:	1204b03a 	or	r2,r2,r8
  8046a8:	1c007416 	blt	r3,r16,80487c <__adddf3+0x388>
  8046ac:	1c21c83a 	sub	r16,r3,r16
  8046b0:	82000044 	addi	r8,r16,1
  8046b4:	00c007c4 	movi	r3,31
  8046b8:	1a009116 	blt	r3,r8,804900 <__adddf3+0x40c>
  8046bc:	00c00804 	movi	r3,32
  8046c0:	1a07c83a 	sub	r3,r3,r8
  8046c4:	8a08d83a 	srl	r4,r17,r8
  8046c8:	88e2983a 	sll	r17,r17,r3
  8046cc:	10c6983a 	sll	r3,r2,r3
  8046d0:	1210d83a 	srl	r8,r2,r8
  8046d4:	8804c03a 	cmpne	r2,r17,zero
  8046d8:	1906b03a 	or	r3,r3,r4
  8046dc:	18a2b03a 	or	r17,r3,r2
  8046e0:	0021883a 	mov	r16,zero
  8046e4:	003fa206 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  8046e8:	1890b03a 	or	r8,r3,r2
  8046ec:	40017d26 	beq	r8,zero,804ce4 <__adddf3+0x7f0>
  8046f0:	1011883a 	mov	r8,r2
  8046f4:	1823883a 	mov	r17,r3
  8046f8:	888001cc 	andi	r2,r17,7
  8046fc:	103f9e1e 	bne	r2,zero,804578 <__alt_mem_onchip_mem+0xff7fc578>
  804700:	4004977a 	slli	r2,r8,29
  804704:	8822d0fa 	srli	r17,r17,3
  804708:	4010d0fa 	srli	r8,r8,3
  80470c:	9007883a 	mov	r3,r18
  804710:	1444b03a 	or	r2,r2,r17
  804714:	0101ffc4 	movi	r4,2047
  804718:	81002426 	beq	r16,r4,8047ac <__adddf3+0x2b8>
  80471c:	8120703a 	and	r16,r16,r4
  804720:	01000434 	movhi	r4,16
  804724:	213fffc4 	addi	r4,r4,-1
  804728:	4110703a 	and	r8,r8,r4
  80472c:	003fa806 	br	8045d0 <__alt_mem_onchip_mem+0xff7fc5d0>
  804730:	8089c83a 	sub	r4,r16,r2
  804734:	01005e0e 	bge	zero,r4,8048b0 <__adddf3+0x3bc>
  804738:	10002b26 	beq	r2,zero,8047e8 <__adddf3+0x2f4>
  80473c:	0081ffc4 	movi	r2,2047
  804740:	80bf8b26 	beq	r16,r2,804570 <__alt_mem_onchip_mem+0xff7fc570>
  804744:	4a402034 	orhi	r9,r9,128
  804748:	00800e04 	movi	r2,56
  80474c:	1100a40e 	bge	r2,r4,8049e0 <__adddf3+0x4ec>
  804750:	498cb03a 	or	r6,r9,r6
  804754:	300ac03a 	cmpne	r5,r6,zero
  804758:	0013883a 	mov	r9,zero
  80475c:	2c4b883a 	add	r5,r5,r17
  804760:	2c63803a 	cmpltu	r17,r5,r17
  804764:	4a11883a 	add	r8,r9,r8
  804768:	8a11883a 	add	r8,r17,r8
  80476c:	2823883a 	mov	r17,r5
  804770:	4080202c 	andhi	r2,r8,128
  804774:	103fe026 	beq	r2,zero,8046f8 <__alt_mem_onchip_mem+0xff7fc6f8>
  804778:	84000044 	addi	r16,r16,1
  80477c:	0081ffc4 	movi	r2,2047
  804780:	8080d226 	beq	r16,r2,804acc <__adddf3+0x5d8>
  804784:	00bfe034 	movhi	r2,65408
  804788:	10bfffc4 	addi	r2,r2,-1
  80478c:	4090703a 	and	r8,r8,r2
  804790:	880ad07a 	srli	r5,r17,1
  804794:	400897fa 	slli	r4,r8,31
  804798:	88c0004c 	andi	r3,r17,1
  80479c:	28e2b03a 	or	r17,r5,r3
  8047a0:	4010d07a 	srli	r8,r8,1
  8047a4:	2462b03a 	or	r17,r4,r17
  8047a8:	003f7106 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  8047ac:	4088b03a 	or	r4,r8,r2
  8047b0:	20014526 	beq	r4,zero,804cc8 <__adddf3+0x7d4>
  8047b4:	01000434 	movhi	r4,16
  8047b8:	42000234 	orhi	r8,r8,8
  8047bc:	213fffc4 	addi	r4,r4,-1
  8047c0:	4110703a 	and	r8,r8,r4
  8047c4:	003f8206 	br	8045d0 <__alt_mem_onchip_mem+0xff7fc5d0>
  8047c8:	18ffffc4 	addi	r3,r3,-1
  8047cc:	1800491e 	bne	r3,zero,8048f4 <__adddf3+0x400>
  8047d0:	898bc83a 	sub	r5,r17,r6
  8047d4:	8963803a 	cmpltu	r17,r17,r5
  8047d8:	4251c83a 	sub	r8,r8,r9
  8047dc:	4451c83a 	sub	r8,r8,r17
  8047e0:	2823883a 	mov	r17,r5
  8047e4:	003f9f06 	br	804664 <__alt_mem_onchip_mem+0xff7fc664>
  8047e8:	4984b03a 	or	r2,r9,r6
  8047ec:	103f6026 	beq	r2,zero,804570 <__alt_mem_onchip_mem+0xff7fc570>
  8047f0:	213fffc4 	addi	r4,r4,-1
  8047f4:	2000931e 	bne	r4,zero,804a44 <__adddf3+0x550>
  8047f8:	898d883a 	add	r6,r17,r6
  8047fc:	3463803a 	cmpltu	r17,r6,r17
  804800:	4251883a 	add	r8,r8,r9
  804804:	8a11883a 	add	r8,r17,r8
  804808:	3023883a 	mov	r17,r6
  80480c:	003fd806 	br	804770 <__alt_mem_onchip_mem+0xff7fc770>
  804810:	1800541e 	bne	r3,zero,804964 <__adddf3+0x470>
  804814:	80800044 	addi	r2,r16,1
  804818:	1081ffcc 	andi	r2,r2,2047
  80481c:	00c00044 	movi	r3,1
  804820:	1880a00e 	bge	r3,r2,804aa4 <__adddf3+0x5b0>
  804824:	8989c83a 	sub	r4,r17,r6
  804828:	8905803a 	cmpltu	r2,r17,r4
  80482c:	4267c83a 	sub	r19,r8,r9
  804830:	98a7c83a 	sub	r19,r19,r2
  804834:	9880202c 	andhi	r2,r19,128
  804838:	10006326 	beq	r2,zero,8049c8 <__adddf3+0x4d4>
  80483c:	3463c83a 	sub	r17,r6,r17
  804840:	4a07c83a 	sub	r3,r9,r8
  804844:	344d803a 	cmpltu	r6,r6,r17
  804848:	19a7c83a 	sub	r19,r3,r6
  80484c:	3825883a 	mov	r18,r7
  804850:	983f8a1e 	bne	r19,zero,80467c <__alt_mem_onchip_mem+0xff7fc67c>
  804854:	8809883a 	mov	r4,r17
  804858:	080602c0 	call	80602c <__clzsi2>
  80485c:	10800804 	addi	r2,r2,32
  804860:	10fffe04 	addi	r3,r2,-8
  804864:	010007c4 	movi	r4,31
  804868:	20ff890e 	bge	r4,r3,804690 <__alt_mem_onchip_mem+0xff7fc690>
  80486c:	10bff604 	addi	r2,r2,-40
  804870:	8884983a 	sll	r2,r17,r2
  804874:	0023883a 	mov	r17,zero
  804878:	1c3f8c0e 	bge	r3,r16,8046ac <__alt_mem_onchip_mem+0xff7fc6ac>
  80487c:	023fe034 	movhi	r8,65408
  804880:	423fffc4 	addi	r8,r8,-1
  804884:	80e1c83a 	sub	r16,r16,r3
  804888:	1210703a 	and	r8,r2,r8
  80488c:	003f3806 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804890:	9007883a 	mov	r3,r18
  804894:	0011883a 	mov	r8,zero
  804898:	0005883a 	mov	r2,zero
  80489c:	003f4c06 	br	8045d0 <__alt_mem_onchip_mem+0xff7fc5d0>
  8048a0:	498cb03a 	or	r6,r9,r6
  8048a4:	300cc03a 	cmpne	r6,r6,zero
  8048a8:	0007883a 	mov	r3,zero
  8048ac:	003f6806 	br	804650 <__alt_mem_onchip_mem+0xff7fc650>
  8048b0:	20009c1e 	bne	r4,zero,804b24 <__adddf3+0x630>
  8048b4:	80800044 	addi	r2,r16,1
  8048b8:	1141ffcc 	andi	r5,r2,2047
  8048bc:	01000044 	movi	r4,1
  8048c0:	2140670e 	bge	r4,r5,804a60 <__adddf3+0x56c>
  8048c4:	0101ffc4 	movi	r4,2047
  8048c8:	11007f26 	beq	r2,r4,804ac8 <__adddf3+0x5d4>
  8048cc:	898d883a 	add	r6,r17,r6
  8048d0:	4247883a 	add	r3,r8,r9
  8048d4:	3451803a 	cmpltu	r8,r6,r17
  8048d8:	40d1883a 	add	r8,r8,r3
  8048dc:	402297fa 	slli	r17,r8,31
  8048e0:	300cd07a 	srli	r6,r6,1
  8048e4:	4010d07a 	srli	r8,r8,1
  8048e8:	1021883a 	mov	r16,r2
  8048ec:	89a2b03a 	or	r17,r17,r6
  8048f0:	003f1f06 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  8048f4:	0081ffc4 	movi	r2,2047
  8048f8:	80bf481e 	bne	r16,r2,80461c <__alt_mem_onchip_mem+0xff7fc61c>
  8048fc:	003f1c06 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804900:	843ff844 	addi	r16,r16,-31
  804904:	01000804 	movi	r4,32
  804908:	1406d83a 	srl	r3,r2,r16
  80490c:	41005026 	beq	r8,r4,804a50 <__adddf3+0x55c>
  804910:	01001004 	movi	r4,64
  804914:	2211c83a 	sub	r8,r4,r8
  804918:	1204983a 	sll	r2,r2,r8
  80491c:	88a2b03a 	or	r17,r17,r2
  804920:	8822c03a 	cmpne	r17,r17,zero
  804924:	1c62b03a 	or	r17,r3,r17
  804928:	0011883a 	mov	r8,zero
  80492c:	0021883a 	mov	r16,zero
  804930:	003f7106 	br	8046f8 <__alt_mem_onchip_mem+0xff7fc6f8>
  804934:	193ff804 	addi	r4,r3,-32
  804938:	00800804 	movi	r2,32
  80493c:	4908d83a 	srl	r4,r9,r4
  804940:	18804526 	beq	r3,r2,804a58 <__adddf3+0x564>
  804944:	00801004 	movi	r2,64
  804948:	10c5c83a 	sub	r2,r2,r3
  80494c:	4886983a 	sll	r3,r9,r2
  804950:	198cb03a 	or	r6,r3,r6
  804954:	300cc03a 	cmpne	r6,r6,zero
  804958:	218cb03a 	or	r6,r4,r6
  80495c:	0007883a 	mov	r3,zero
  804960:	003f3b06 	br	804650 <__alt_mem_onchip_mem+0xff7fc650>
  804964:	80002a26 	beq	r16,zero,804a10 <__adddf3+0x51c>
  804968:	0101ffc4 	movi	r4,2047
  80496c:	11006826 	beq	r2,r4,804b10 <__adddf3+0x61c>
  804970:	00c7c83a 	sub	r3,zero,r3
  804974:	42002034 	orhi	r8,r8,128
  804978:	01000e04 	movi	r4,56
  80497c:	20c07c16 	blt	r4,r3,804b70 <__adddf3+0x67c>
  804980:	010007c4 	movi	r4,31
  804984:	20c0da16 	blt	r4,r3,804cf0 <__adddf3+0x7fc>
  804988:	01000804 	movi	r4,32
  80498c:	20c9c83a 	sub	r4,r4,r3
  804990:	4114983a 	sll	r10,r8,r4
  804994:	88cad83a 	srl	r5,r17,r3
  804998:	8908983a 	sll	r4,r17,r4
  80499c:	40c6d83a 	srl	r3,r8,r3
  8049a0:	5162b03a 	or	r17,r10,r5
  8049a4:	2008c03a 	cmpne	r4,r4,zero
  8049a8:	8922b03a 	or	r17,r17,r4
  8049ac:	3463c83a 	sub	r17,r6,r17
  8049b0:	48c7c83a 	sub	r3,r9,r3
  8049b4:	344d803a 	cmpltu	r6,r6,r17
  8049b8:	1991c83a 	sub	r8,r3,r6
  8049bc:	1021883a 	mov	r16,r2
  8049c0:	3825883a 	mov	r18,r7
  8049c4:	003f2706 	br	804664 <__alt_mem_onchip_mem+0xff7fc664>
  8049c8:	24d0b03a 	or	r8,r4,r19
  8049cc:	40001b1e 	bne	r8,zero,804a3c <__adddf3+0x548>
  8049d0:	0005883a 	mov	r2,zero
  8049d4:	0007883a 	mov	r3,zero
  8049d8:	0021883a 	mov	r16,zero
  8049dc:	003f4d06 	br	804714 <__alt_mem_onchip_mem+0xff7fc714>
  8049e0:	008007c4 	movi	r2,31
  8049e4:	11003c16 	blt	r2,r4,804ad8 <__adddf3+0x5e4>
  8049e8:	00800804 	movi	r2,32
  8049ec:	1105c83a 	sub	r2,r2,r4
  8049f0:	488e983a 	sll	r7,r9,r2
  8049f4:	310ad83a 	srl	r5,r6,r4
  8049f8:	3084983a 	sll	r2,r6,r2
  8049fc:	4912d83a 	srl	r9,r9,r4
  804a00:	394ab03a 	or	r5,r7,r5
  804a04:	1004c03a 	cmpne	r2,r2,zero
  804a08:	288ab03a 	or	r5,r5,r2
  804a0c:	003f5306 	br	80475c <__alt_mem_onchip_mem+0xff7fc75c>
  804a10:	4448b03a 	or	r4,r8,r17
  804a14:	20003e26 	beq	r4,zero,804b10 <__adddf3+0x61c>
  804a18:	00c6303a 	nor	r3,zero,r3
  804a1c:	18003a1e 	bne	r3,zero,804b08 <__adddf3+0x614>
  804a20:	3463c83a 	sub	r17,r6,r17
  804a24:	4a07c83a 	sub	r3,r9,r8
  804a28:	344d803a 	cmpltu	r6,r6,r17
  804a2c:	1991c83a 	sub	r8,r3,r6
  804a30:	1021883a 	mov	r16,r2
  804a34:	3825883a 	mov	r18,r7
  804a38:	003f0a06 	br	804664 <__alt_mem_onchip_mem+0xff7fc664>
  804a3c:	2023883a 	mov	r17,r4
  804a40:	003f0d06 	br	804678 <__alt_mem_onchip_mem+0xff7fc678>
  804a44:	0081ffc4 	movi	r2,2047
  804a48:	80bf3f1e 	bne	r16,r2,804748 <__alt_mem_onchip_mem+0xff7fc748>
  804a4c:	003ec806 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804a50:	0005883a 	mov	r2,zero
  804a54:	003fb106 	br	80491c <__alt_mem_onchip_mem+0xff7fc91c>
  804a58:	0007883a 	mov	r3,zero
  804a5c:	003fbc06 	br	804950 <__alt_mem_onchip_mem+0xff7fc950>
  804a60:	4444b03a 	or	r2,r8,r17
  804a64:	8000871e 	bne	r16,zero,804c84 <__adddf3+0x790>
  804a68:	1000ba26 	beq	r2,zero,804d54 <__adddf3+0x860>
  804a6c:	4984b03a 	or	r2,r9,r6
  804a70:	103ebf26 	beq	r2,zero,804570 <__alt_mem_onchip_mem+0xff7fc570>
  804a74:	8985883a 	add	r2,r17,r6
  804a78:	4247883a 	add	r3,r8,r9
  804a7c:	1451803a 	cmpltu	r8,r2,r17
  804a80:	40d1883a 	add	r8,r8,r3
  804a84:	40c0202c 	andhi	r3,r8,128
  804a88:	1023883a 	mov	r17,r2
  804a8c:	183f1a26 	beq	r3,zero,8046f8 <__alt_mem_onchip_mem+0xff7fc6f8>
  804a90:	00bfe034 	movhi	r2,65408
  804a94:	10bfffc4 	addi	r2,r2,-1
  804a98:	2021883a 	mov	r16,r4
  804a9c:	4090703a 	and	r8,r8,r2
  804aa0:	003eb306 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804aa4:	4444b03a 	or	r2,r8,r17
  804aa8:	8000291e 	bne	r16,zero,804b50 <__adddf3+0x65c>
  804aac:	10004b1e 	bne	r2,zero,804bdc <__adddf3+0x6e8>
  804ab0:	4990b03a 	or	r8,r9,r6
  804ab4:	40008b26 	beq	r8,zero,804ce4 <__adddf3+0x7f0>
  804ab8:	4811883a 	mov	r8,r9
  804abc:	3023883a 	mov	r17,r6
  804ac0:	3825883a 	mov	r18,r7
  804ac4:	003eaa06 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804ac8:	1021883a 	mov	r16,r2
  804acc:	0011883a 	mov	r8,zero
  804ad0:	0005883a 	mov	r2,zero
  804ad4:	003f0f06 	br	804714 <__alt_mem_onchip_mem+0xff7fc714>
  804ad8:	217ff804 	addi	r5,r4,-32
  804adc:	00800804 	movi	r2,32
  804ae0:	494ad83a 	srl	r5,r9,r5
  804ae4:	20807d26 	beq	r4,r2,804cdc <__adddf3+0x7e8>
  804ae8:	00801004 	movi	r2,64
  804aec:	1109c83a 	sub	r4,r2,r4
  804af0:	4912983a 	sll	r9,r9,r4
  804af4:	498cb03a 	or	r6,r9,r6
  804af8:	300cc03a 	cmpne	r6,r6,zero
  804afc:	298ab03a 	or	r5,r5,r6
  804b00:	0013883a 	mov	r9,zero
  804b04:	003f1506 	br	80475c <__alt_mem_onchip_mem+0xff7fc75c>
  804b08:	0101ffc4 	movi	r4,2047
  804b0c:	113f9a1e 	bne	r2,r4,804978 <__alt_mem_onchip_mem+0xff7fc978>
  804b10:	4811883a 	mov	r8,r9
  804b14:	3023883a 	mov	r17,r6
  804b18:	1021883a 	mov	r16,r2
  804b1c:	3825883a 	mov	r18,r7
  804b20:	003e9306 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804b24:	8000161e 	bne	r16,zero,804b80 <__adddf3+0x68c>
  804b28:	444ab03a 	or	r5,r8,r17
  804b2c:	28005126 	beq	r5,zero,804c74 <__adddf3+0x780>
  804b30:	0108303a 	nor	r4,zero,r4
  804b34:	20004d1e 	bne	r4,zero,804c6c <__adddf3+0x778>
  804b38:	89a3883a 	add	r17,r17,r6
  804b3c:	4253883a 	add	r9,r8,r9
  804b40:	898d803a 	cmpltu	r6,r17,r6
  804b44:	3251883a 	add	r8,r6,r9
  804b48:	1021883a 	mov	r16,r2
  804b4c:	003f0806 	br	804770 <__alt_mem_onchip_mem+0xff7fc770>
  804b50:	1000301e 	bne	r2,zero,804c14 <__adddf3+0x720>
  804b54:	4984b03a 	or	r2,r9,r6
  804b58:	10007126 	beq	r2,zero,804d20 <__adddf3+0x82c>
  804b5c:	4811883a 	mov	r8,r9
  804b60:	3023883a 	mov	r17,r6
  804b64:	3825883a 	mov	r18,r7
  804b68:	0401ffc4 	movi	r16,2047
  804b6c:	003e8006 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804b70:	4462b03a 	or	r17,r8,r17
  804b74:	8822c03a 	cmpne	r17,r17,zero
  804b78:	0007883a 	mov	r3,zero
  804b7c:	003f8b06 	br	8049ac <__alt_mem_onchip_mem+0xff7fc9ac>
  804b80:	0141ffc4 	movi	r5,2047
  804b84:	11403b26 	beq	r2,r5,804c74 <__adddf3+0x780>
  804b88:	0109c83a 	sub	r4,zero,r4
  804b8c:	42002034 	orhi	r8,r8,128
  804b90:	01400e04 	movi	r5,56
  804b94:	29006716 	blt	r5,r4,804d34 <__adddf3+0x840>
  804b98:	014007c4 	movi	r5,31
  804b9c:	29007016 	blt	r5,r4,804d60 <__adddf3+0x86c>
  804ba0:	01400804 	movi	r5,32
  804ba4:	290bc83a 	sub	r5,r5,r4
  804ba8:	4154983a 	sll	r10,r8,r5
  804bac:	890ed83a 	srl	r7,r17,r4
  804bb0:	894a983a 	sll	r5,r17,r5
  804bb4:	4108d83a 	srl	r4,r8,r4
  804bb8:	51e2b03a 	or	r17,r10,r7
  804bbc:	280ac03a 	cmpne	r5,r5,zero
  804bc0:	8962b03a 	or	r17,r17,r5
  804bc4:	89a3883a 	add	r17,r17,r6
  804bc8:	2253883a 	add	r9,r4,r9
  804bcc:	898d803a 	cmpltu	r6,r17,r6
  804bd0:	3251883a 	add	r8,r6,r9
  804bd4:	1021883a 	mov	r16,r2
  804bd8:	003ee506 	br	804770 <__alt_mem_onchip_mem+0xff7fc770>
  804bdc:	4984b03a 	or	r2,r9,r6
  804be0:	103e6326 	beq	r2,zero,804570 <__alt_mem_onchip_mem+0xff7fc570>
  804be4:	8987c83a 	sub	r3,r17,r6
  804be8:	88c9803a 	cmpltu	r4,r17,r3
  804bec:	4245c83a 	sub	r2,r8,r9
  804bf0:	1105c83a 	sub	r2,r2,r4
  804bf4:	1100202c 	andhi	r4,r2,128
  804bf8:	203ebb26 	beq	r4,zero,8046e8 <__alt_mem_onchip_mem+0xff7fc6e8>
  804bfc:	3463c83a 	sub	r17,r6,r17
  804c00:	4a07c83a 	sub	r3,r9,r8
  804c04:	344d803a 	cmpltu	r6,r6,r17
  804c08:	1991c83a 	sub	r8,r3,r6
  804c0c:	3825883a 	mov	r18,r7
  804c10:	003e5706 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804c14:	4984b03a 	or	r2,r9,r6
  804c18:	10002e26 	beq	r2,zero,804cd4 <__adddf3+0x7e0>
  804c1c:	4004d0fa 	srli	r2,r8,3
  804c20:	8822d0fa 	srli	r17,r17,3
  804c24:	4010977a 	slli	r8,r8,29
  804c28:	10c0022c 	andhi	r3,r2,8
  804c2c:	4462b03a 	or	r17,r8,r17
  804c30:	18000826 	beq	r3,zero,804c54 <__adddf3+0x760>
  804c34:	4808d0fa 	srli	r4,r9,3
  804c38:	20c0022c 	andhi	r3,r4,8
  804c3c:	1800051e 	bne	r3,zero,804c54 <__adddf3+0x760>
  804c40:	300cd0fa 	srli	r6,r6,3
  804c44:	4806977a 	slli	r3,r9,29
  804c48:	2005883a 	mov	r2,r4
  804c4c:	3825883a 	mov	r18,r7
  804c50:	19a2b03a 	or	r17,r3,r6
  804c54:	8810d77a 	srli	r8,r17,29
  804c58:	100490fa 	slli	r2,r2,3
  804c5c:	882290fa 	slli	r17,r17,3
  804c60:	0401ffc4 	movi	r16,2047
  804c64:	4090b03a 	or	r8,r8,r2
  804c68:	003e4106 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804c6c:	0141ffc4 	movi	r5,2047
  804c70:	117fc71e 	bne	r2,r5,804b90 <__alt_mem_onchip_mem+0xff7fcb90>
  804c74:	4811883a 	mov	r8,r9
  804c78:	3023883a 	mov	r17,r6
  804c7c:	1021883a 	mov	r16,r2
  804c80:	003e3b06 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804c84:	10002f26 	beq	r2,zero,804d44 <__adddf3+0x850>
  804c88:	4984b03a 	or	r2,r9,r6
  804c8c:	10001126 	beq	r2,zero,804cd4 <__adddf3+0x7e0>
  804c90:	4004d0fa 	srli	r2,r8,3
  804c94:	8822d0fa 	srli	r17,r17,3
  804c98:	4010977a 	slli	r8,r8,29
  804c9c:	10c0022c 	andhi	r3,r2,8
  804ca0:	4462b03a 	or	r17,r8,r17
  804ca4:	183feb26 	beq	r3,zero,804c54 <__alt_mem_onchip_mem+0xff7fcc54>
  804ca8:	4808d0fa 	srli	r4,r9,3
  804cac:	20c0022c 	andhi	r3,r4,8
  804cb0:	183fe81e 	bne	r3,zero,804c54 <__alt_mem_onchip_mem+0xff7fcc54>
  804cb4:	300cd0fa 	srli	r6,r6,3
  804cb8:	4806977a 	slli	r3,r9,29
  804cbc:	2005883a 	mov	r2,r4
  804cc0:	19a2b03a 	or	r17,r3,r6
  804cc4:	003fe306 	br	804c54 <__alt_mem_onchip_mem+0xff7fcc54>
  804cc8:	0011883a 	mov	r8,zero
  804ccc:	0005883a 	mov	r2,zero
  804cd0:	003e3f06 	br	8045d0 <__alt_mem_onchip_mem+0xff7fc5d0>
  804cd4:	0401ffc4 	movi	r16,2047
  804cd8:	003e2506 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804cdc:	0013883a 	mov	r9,zero
  804ce0:	003f8406 	br	804af4 <__alt_mem_onchip_mem+0xff7fcaf4>
  804ce4:	0005883a 	mov	r2,zero
  804ce8:	0007883a 	mov	r3,zero
  804cec:	003e8906 	br	804714 <__alt_mem_onchip_mem+0xff7fc714>
  804cf0:	197ff804 	addi	r5,r3,-32
  804cf4:	01000804 	movi	r4,32
  804cf8:	414ad83a 	srl	r5,r8,r5
  804cfc:	19002426 	beq	r3,r4,804d90 <__adddf3+0x89c>
  804d00:	01001004 	movi	r4,64
  804d04:	20c7c83a 	sub	r3,r4,r3
  804d08:	40c6983a 	sll	r3,r8,r3
  804d0c:	1c46b03a 	or	r3,r3,r17
  804d10:	1806c03a 	cmpne	r3,r3,zero
  804d14:	28e2b03a 	or	r17,r5,r3
  804d18:	0007883a 	mov	r3,zero
  804d1c:	003f2306 	br	8049ac <__alt_mem_onchip_mem+0xff7fc9ac>
  804d20:	0007883a 	mov	r3,zero
  804d24:	5811883a 	mov	r8,r11
  804d28:	00bfffc4 	movi	r2,-1
  804d2c:	0401ffc4 	movi	r16,2047
  804d30:	003e7806 	br	804714 <__alt_mem_onchip_mem+0xff7fc714>
  804d34:	4462b03a 	or	r17,r8,r17
  804d38:	8822c03a 	cmpne	r17,r17,zero
  804d3c:	0009883a 	mov	r4,zero
  804d40:	003fa006 	br	804bc4 <__alt_mem_onchip_mem+0xff7fcbc4>
  804d44:	4811883a 	mov	r8,r9
  804d48:	3023883a 	mov	r17,r6
  804d4c:	0401ffc4 	movi	r16,2047
  804d50:	003e0706 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804d54:	4811883a 	mov	r8,r9
  804d58:	3023883a 	mov	r17,r6
  804d5c:	003e0406 	br	804570 <__alt_mem_onchip_mem+0xff7fc570>
  804d60:	21fff804 	addi	r7,r4,-32
  804d64:	01400804 	movi	r5,32
  804d68:	41ced83a 	srl	r7,r8,r7
  804d6c:	21400a26 	beq	r4,r5,804d98 <__adddf3+0x8a4>
  804d70:	01401004 	movi	r5,64
  804d74:	2909c83a 	sub	r4,r5,r4
  804d78:	4108983a 	sll	r4,r8,r4
  804d7c:	2448b03a 	or	r4,r4,r17
  804d80:	2008c03a 	cmpne	r4,r4,zero
  804d84:	3922b03a 	or	r17,r7,r4
  804d88:	0009883a 	mov	r4,zero
  804d8c:	003f8d06 	br	804bc4 <__alt_mem_onchip_mem+0xff7fcbc4>
  804d90:	0007883a 	mov	r3,zero
  804d94:	003fdd06 	br	804d0c <__alt_mem_onchip_mem+0xff7fcd0c>
  804d98:	0009883a 	mov	r4,zero
  804d9c:	003ff706 	br	804d7c <__alt_mem_onchip_mem+0xff7fcd7c>

00804da0 <__gedf2>:
  804da0:	2804d53a 	srli	r2,r5,20
  804da4:	3806d53a 	srli	r3,r7,20
  804da8:	02000434 	movhi	r8,16
  804dac:	423fffc4 	addi	r8,r8,-1
  804db0:	1081ffcc 	andi	r2,r2,2047
  804db4:	0241ffc4 	movi	r9,2047
  804db8:	2a14703a 	and	r10,r5,r8
  804dbc:	18c1ffcc 	andi	r3,r3,2047
  804dc0:	3a10703a 	and	r8,r7,r8
  804dc4:	280ad7fa 	srli	r5,r5,31
  804dc8:	380ed7fa 	srli	r7,r7,31
  804dcc:	12401d26 	beq	r2,r9,804e44 <__gedf2+0xa4>
  804dd0:	0241ffc4 	movi	r9,2047
  804dd4:	1a401226 	beq	r3,r9,804e20 <__gedf2+0x80>
  804dd8:	1000081e 	bne	r2,zero,804dfc <__gedf2+0x5c>
  804ddc:	2296b03a 	or	r11,r4,r10
  804de0:	5813003a 	cmpeq	r9,r11,zero
  804de4:	1800091e 	bne	r3,zero,804e0c <__gedf2+0x6c>
  804de8:	3218b03a 	or	r12,r6,r8
  804dec:	6000071e 	bne	r12,zero,804e0c <__gedf2+0x6c>
  804df0:	0005883a 	mov	r2,zero
  804df4:	5800101e 	bne	r11,zero,804e38 <__gedf2+0x98>
  804df8:	f800283a 	ret
  804dfc:	18000c1e 	bne	r3,zero,804e30 <__gedf2+0x90>
  804e00:	3212b03a 	or	r9,r6,r8
  804e04:	48000c26 	beq	r9,zero,804e38 <__gedf2+0x98>
  804e08:	0013883a 	mov	r9,zero
  804e0c:	39c03fcc 	andi	r7,r7,255
  804e10:	48000826 	beq	r9,zero,804e34 <__gedf2+0x94>
  804e14:	38000926 	beq	r7,zero,804e3c <__gedf2+0x9c>
  804e18:	00800044 	movi	r2,1
  804e1c:	f800283a 	ret
  804e20:	3212b03a 	or	r9,r6,r8
  804e24:	483fec26 	beq	r9,zero,804dd8 <__alt_mem_onchip_mem+0xff7fcdd8>
  804e28:	00bfff84 	movi	r2,-2
  804e2c:	f800283a 	ret
  804e30:	39c03fcc 	andi	r7,r7,255
  804e34:	29c00626 	beq	r5,r7,804e50 <__gedf2+0xb0>
  804e38:	283ff726 	beq	r5,zero,804e18 <__alt_mem_onchip_mem+0xff7fce18>
  804e3c:	00bfffc4 	movi	r2,-1
  804e40:	f800283a 	ret
  804e44:	2292b03a 	or	r9,r4,r10
  804e48:	483fe126 	beq	r9,zero,804dd0 <__alt_mem_onchip_mem+0xff7fcdd0>
  804e4c:	003ff606 	br	804e28 <__alt_mem_onchip_mem+0xff7fce28>
  804e50:	18bff916 	blt	r3,r2,804e38 <__alt_mem_onchip_mem+0xff7fce38>
  804e54:	10c00316 	blt	r2,r3,804e64 <__gedf2+0xc4>
  804e58:	42bff736 	bltu	r8,r10,804e38 <__alt_mem_onchip_mem+0xff7fce38>
  804e5c:	52000326 	beq	r10,r8,804e6c <__gedf2+0xcc>
  804e60:	5200042e 	bgeu	r10,r8,804e74 <__gedf2+0xd4>
  804e64:	283fec1e 	bne	r5,zero,804e18 <__alt_mem_onchip_mem+0xff7fce18>
  804e68:	003ff406 	br	804e3c <__alt_mem_onchip_mem+0xff7fce3c>
  804e6c:	313ff236 	bltu	r6,r4,804e38 <__alt_mem_onchip_mem+0xff7fce38>
  804e70:	21bffc36 	bltu	r4,r6,804e64 <__alt_mem_onchip_mem+0xff7fce64>
  804e74:	0005883a 	mov	r2,zero
  804e78:	f800283a 	ret

00804e7c <__ledf2>:
  804e7c:	2804d53a 	srli	r2,r5,20
  804e80:	3810d53a 	srli	r8,r7,20
  804e84:	00c00434 	movhi	r3,16
  804e88:	18ffffc4 	addi	r3,r3,-1
  804e8c:	1081ffcc 	andi	r2,r2,2047
  804e90:	0241ffc4 	movi	r9,2047
  804e94:	28d4703a 	and	r10,r5,r3
  804e98:	4201ffcc 	andi	r8,r8,2047
  804e9c:	38c6703a 	and	r3,r7,r3
  804ea0:	280ad7fa 	srli	r5,r5,31
  804ea4:	380ed7fa 	srli	r7,r7,31
  804ea8:	12401f26 	beq	r2,r9,804f28 <__ledf2+0xac>
  804eac:	0241ffc4 	movi	r9,2047
  804eb0:	42401426 	beq	r8,r9,804f04 <__ledf2+0x88>
  804eb4:	1000091e 	bne	r2,zero,804edc <__ledf2+0x60>
  804eb8:	2296b03a 	or	r11,r4,r10
  804ebc:	5813003a 	cmpeq	r9,r11,zero
  804ec0:	29403fcc 	andi	r5,r5,255
  804ec4:	40000a1e 	bne	r8,zero,804ef0 <__ledf2+0x74>
  804ec8:	30d8b03a 	or	r12,r6,r3
  804ecc:	6000081e 	bne	r12,zero,804ef0 <__ledf2+0x74>
  804ed0:	0005883a 	mov	r2,zero
  804ed4:	5800111e 	bne	r11,zero,804f1c <__ledf2+0xa0>
  804ed8:	f800283a 	ret
  804edc:	29403fcc 	andi	r5,r5,255
  804ee0:	40000c1e 	bne	r8,zero,804f14 <__ledf2+0x98>
  804ee4:	30d2b03a 	or	r9,r6,r3
  804ee8:	48000c26 	beq	r9,zero,804f1c <__ledf2+0xa0>
  804eec:	0013883a 	mov	r9,zero
  804ef0:	39c03fcc 	andi	r7,r7,255
  804ef4:	48000826 	beq	r9,zero,804f18 <__ledf2+0x9c>
  804ef8:	38001126 	beq	r7,zero,804f40 <__ledf2+0xc4>
  804efc:	00800044 	movi	r2,1
  804f00:	f800283a 	ret
  804f04:	30d2b03a 	or	r9,r6,r3
  804f08:	483fea26 	beq	r9,zero,804eb4 <__alt_mem_onchip_mem+0xff7fceb4>
  804f0c:	00800084 	movi	r2,2
  804f10:	f800283a 	ret
  804f14:	39c03fcc 	andi	r7,r7,255
  804f18:	39400726 	beq	r7,r5,804f38 <__ledf2+0xbc>
  804f1c:	2800081e 	bne	r5,zero,804f40 <__ledf2+0xc4>
  804f20:	00800044 	movi	r2,1
  804f24:	f800283a 	ret
  804f28:	2292b03a 	or	r9,r4,r10
  804f2c:	483fdf26 	beq	r9,zero,804eac <__alt_mem_onchip_mem+0xff7fceac>
  804f30:	00800084 	movi	r2,2
  804f34:	f800283a 	ret
  804f38:	4080030e 	bge	r8,r2,804f48 <__ledf2+0xcc>
  804f3c:	383fef26 	beq	r7,zero,804efc <__alt_mem_onchip_mem+0xff7fcefc>
  804f40:	00bfffc4 	movi	r2,-1
  804f44:	f800283a 	ret
  804f48:	123feb16 	blt	r2,r8,804ef8 <__alt_mem_onchip_mem+0xff7fcef8>
  804f4c:	1abff336 	bltu	r3,r10,804f1c <__alt_mem_onchip_mem+0xff7fcf1c>
  804f50:	50c00326 	beq	r10,r3,804f60 <__ledf2+0xe4>
  804f54:	50c0042e 	bgeu	r10,r3,804f68 <__ledf2+0xec>
  804f58:	283fe81e 	bne	r5,zero,804efc <__alt_mem_onchip_mem+0xff7fcefc>
  804f5c:	003ff806 	br	804f40 <__alt_mem_onchip_mem+0xff7fcf40>
  804f60:	313fee36 	bltu	r6,r4,804f1c <__alt_mem_onchip_mem+0xff7fcf1c>
  804f64:	21bffc36 	bltu	r4,r6,804f58 <__alt_mem_onchip_mem+0xff7fcf58>
  804f68:	0005883a 	mov	r2,zero
  804f6c:	f800283a 	ret

00804f70 <__muldf3>:
  804f70:	defff304 	addi	sp,sp,-52
  804f74:	2804d53a 	srli	r2,r5,20
  804f78:	dd800915 	stw	r22,36(sp)
  804f7c:	282cd7fa 	srli	r22,r5,31
  804f80:	dc000315 	stw	r16,12(sp)
  804f84:	04000434 	movhi	r16,16
  804f88:	dd400815 	stw	r21,32(sp)
  804f8c:	dc800515 	stw	r18,20(sp)
  804f90:	843fffc4 	addi	r16,r16,-1
  804f94:	dfc00c15 	stw	ra,48(sp)
  804f98:	df000b15 	stw	fp,44(sp)
  804f9c:	ddc00a15 	stw	r23,40(sp)
  804fa0:	dd000715 	stw	r20,28(sp)
  804fa4:	dcc00615 	stw	r19,24(sp)
  804fa8:	dc400415 	stw	r17,16(sp)
  804fac:	1481ffcc 	andi	r18,r2,2047
  804fb0:	2c20703a 	and	r16,r5,r16
  804fb4:	b02b883a 	mov	r21,r22
  804fb8:	b2403fcc 	andi	r9,r22,255
  804fbc:	90006026 	beq	r18,zero,805140 <__muldf3+0x1d0>
  804fc0:	0081ffc4 	movi	r2,2047
  804fc4:	2029883a 	mov	r20,r4
  804fc8:	90803626 	beq	r18,r2,8050a4 <__muldf3+0x134>
  804fcc:	80800434 	orhi	r2,r16,16
  804fd0:	100490fa 	slli	r2,r2,3
  804fd4:	2020d77a 	srli	r16,r4,29
  804fd8:	202890fa 	slli	r20,r4,3
  804fdc:	94bf0044 	addi	r18,r18,-1023
  804fe0:	80a0b03a 	or	r16,r16,r2
  804fe4:	0027883a 	mov	r19,zero
  804fe8:	0039883a 	mov	fp,zero
  804fec:	3804d53a 	srli	r2,r7,20
  804ff0:	382ed7fa 	srli	r23,r7,31
  804ff4:	04400434 	movhi	r17,16
  804ff8:	8c7fffc4 	addi	r17,r17,-1
  804ffc:	1081ffcc 	andi	r2,r2,2047
  805000:	3011883a 	mov	r8,r6
  805004:	3c62703a 	and	r17,r7,r17
  805008:	ba803fcc 	andi	r10,r23,255
  80500c:	10006d26 	beq	r2,zero,8051c4 <__muldf3+0x254>
  805010:	00c1ffc4 	movi	r3,2047
  805014:	10c06526 	beq	r2,r3,8051ac <__muldf3+0x23c>
  805018:	88c00434 	orhi	r3,r17,16
  80501c:	180690fa 	slli	r3,r3,3
  805020:	3022d77a 	srli	r17,r6,29
  805024:	301090fa 	slli	r8,r6,3
  805028:	10bf0044 	addi	r2,r2,-1023
  80502c:	88e2b03a 	or	r17,r17,r3
  805030:	000b883a 	mov	r5,zero
  805034:	9085883a 	add	r2,r18,r2
  805038:	2cc8b03a 	or	r4,r5,r19
  80503c:	00c003c4 	movi	r3,15
  805040:	bdacf03a 	xor	r22,r23,r22
  805044:	12c00044 	addi	r11,r2,1
  805048:	19009936 	bltu	r3,r4,8052b0 <__muldf3+0x340>
  80504c:	200890ba 	slli	r4,r4,2
  805050:	00c02034 	movhi	r3,128
  805054:	18d41904 	addi	r3,r3,20580
  805058:	20c9883a 	add	r4,r4,r3
  80505c:	20c00017 	ldw	r3,0(r4)
  805060:	1800683a 	jmp	r3
  805064:	008052b0 	cmpltui	r2,zero,330
  805068:	008050c4 	movi	r2,323
  80506c:	008050c4 	movi	r2,323
  805070:	008050c0 	call	8050c <__reset-0x77faf4>
  805074:	0080528c 	andi	r2,zero,330
  805078:	0080528c 	andi	r2,zero,330
  80507c:	00805274 	movhi	r2,329
  805080:	008050c0 	call	8050c <__reset-0x77faf4>
  805084:	0080528c 	andi	r2,zero,330
  805088:	00805274 	movhi	r2,329
  80508c:	0080528c 	andi	r2,zero,330
  805090:	008050c0 	call	8050c <__reset-0x77faf4>
  805094:	0080529c 	xori	r2,zero,330
  805098:	0080529c 	xori	r2,zero,330
  80509c:	0080529c 	xori	r2,zero,330
  8050a0:	008054b8 	rdprs	r2,zero,338
  8050a4:	2404b03a 	or	r2,r4,r16
  8050a8:	10006f1e 	bne	r2,zero,805268 <__muldf3+0x2f8>
  8050ac:	04c00204 	movi	r19,8
  8050b0:	0021883a 	mov	r16,zero
  8050b4:	0029883a 	mov	r20,zero
  8050b8:	07000084 	movi	fp,2
  8050bc:	003fcb06 	br	804fec <__alt_mem_onchip_mem+0xff7fcfec>
  8050c0:	502d883a 	mov	r22,r10
  8050c4:	00800084 	movi	r2,2
  8050c8:	28805726 	beq	r5,r2,805228 <__muldf3+0x2b8>
  8050cc:	008000c4 	movi	r2,3
  8050d0:	28816626 	beq	r5,r2,80566c <__muldf3+0x6fc>
  8050d4:	00800044 	movi	r2,1
  8050d8:	2881411e 	bne	r5,r2,8055e0 <__muldf3+0x670>
  8050dc:	b02b883a 	mov	r21,r22
  8050e0:	0005883a 	mov	r2,zero
  8050e4:	000b883a 	mov	r5,zero
  8050e8:	0029883a 	mov	r20,zero
  8050ec:	1004953a 	slli	r2,r2,20
  8050f0:	a8c03fcc 	andi	r3,r21,255
  8050f4:	04400434 	movhi	r17,16
  8050f8:	8c7fffc4 	addi	r17,r17,-1
  8050fc:	180697fa 	slli	r3,r3,31
  805100:	2c4a703a 	and	r5,r5,r17
  805104:	288ab03a 	or	r5,r5,r2
  805108:	28c6b03a 	or	r3,r5,r3
  80510c:	a005883a 	mov	r2,r20
  805110:	dfc00c17 	ldw	ra,48(sp)
  805114:	df000b17 	ldw	fp,44(sp)
  805118:	ddc00a17 	ldw	r23,40(sp)
  80511c:	dd800917 	ldw	r22,36(sp)
  805120:	dd400817 	ldw	r21,32(sp)
  805124:	dd000717 	ldw	r20,28(sp)
  805128:	dcc00617 	ldw	r19,24(sp)
  80512c:	dc800517 	ldw	r18,20(sp)
  805130:	dc400417 	ldw	r17,16(sp)
  805134:	dc000317 	ldw	r16,12(sp)
  805138:	dec00d04 	addi	sp,sp,52
  80513c:	f800283a 	ret
  805140:	2404b03a 	or	r2,r4,r16
  805144:	2027883a 	mov	r19,r4
  805148:	10004226 	beq	r2,zero,805254 <__muldf3+0x2e4>
  80514c:	8000fc26 	beq	r16,zero,805540 <__muldf3+0x5d0>
  805150:	8009883a 	mov	r4,r16
  805154:	d9800215 	stw	r6,8(sp)
  805158:	d9c00015 	stw	r7,0(sp)
  80515c:	da400115 	stw	r9,4(sp)
  805160:	080602c0 	call	80602c <__clzsi2>
  805164:	d9800217 	ldw	r6,8(sp)
  805168:	d9c00017 	ldw	r7,0(sp)
  80516c:	da400117 	ldw	r9,4(sp)
  805170:	113ffd44 	addi	r4,r2,-11
  805174:	00c00704 	movi	r3,28
  805178:	1900ed16 	blt	r3,r4,805530 <__muldf3+0x5c0>
  80517c:	00c00744 	movi	r3,29
  805180:	147ffe04 	addi	r17,r2,-8
  805184:	1907c83a 	sub	r3,r3,r4
  805188:	8460983a 	sll	r16,r16,r17
  80518c:	98c6d83a 	srl	r3,r19,r3
  805190:	9c68983a 	sll	r20,r19,r17
  805194:	1c20b03a 	or	r16,r3,r16
  805198:	1080fcc4 	addi	r2,r2,1011
  80519c:	00a5c83a 	sub	r18,zero,r2
  8051a0:	0027883a 	mov	r19,zero
  8051a4:	0039883a 	mov	fp,zero
  8051a8:	003f9006 	br	804fec <__alt_mem_onchip_mem+0xff7fcfec>
  8051ac:	3446b03a 	or	r3,r6,r17
  8051b0:	1800261e 	bne	r3,zero,80524c <__muldf3+0x2dc>
  8051b4:	0023883a 	mov	r17,zero
  8051b8:	0011883a 	mov	r8,zero
  8051bc:	01400084 	movi	r5,2
  8051c0:	003f9c06 	br	805034 <__alt_mem_onchip_mem+0xff7fd034>
  8051c4:	3446b03a 	or	r3,r6,r17
  8051c8:	18001c26 	beq	r3,zero,80523c <__muldf3+0x2cc>
  8051cc:	8800ce26 	beq	r17,zero,805508 <__muldf3+0x598>
  8051d0:	8809883a 	mov	r4,r17
  8051d4:	d9800215 	stw	r6,8(sp)
  8051d8:	da400115 	stw	r9,4(sp)
  8051dc:	da800015 	stw	r10,0(sp)
  8051e0:	080602c0 	call	80602c <__clzsi2>
  8051e4:	d9800217 	ldw	r6,8(sp)
  8051e8:	da400117 	ldw	r9,4(sp)
  8051ec:	da800017 	ldw	r10,0(sp)
  8051f0:	113ffd44 	addi	r4,r2,-11
  8051f4:	00c00704 	movi	r3,28
  8051f8:	1900bf16 	blt	r3,r4,8054f8 <__muldf3+0x588>
  8051fc:	00c00744 	movi	r3,29
  805200:	123ffe04 	addi	r8,r2,-8
  805204:	1907c83a 	sub	r3,r3,r4
  805208:	8a22983a 	sll	r17,r17,r8
  80520c:	30c6d83a 	srl	r3,r6,r3
  805210:	3210983a 	sll	r8,r6,r8
  805214:	1c62b03a 	or	r17,r3,r17
  805218:	1080fcc4 	addi	r2,r2,1011
  80521c:	0085c83a 	sub	r2,zero,r2
  805220:	000b883a 	mov	r5,zero
  805224:	003f8306 	br	805034 <__alt_mem_onchip_mem+0xff7fd034>
  805228:	b02b883a 	mov	r21,r22
  80522c:	0081ffc4 	movi	r2,2047
  805230:	000b883a 	mov	r5,zero
  805234:	0029883a 	mov	r20,zero
  805238:	003fac06 	br	8050ec <__alt_mem_onchip_mem+0xff7fd0ec>
  80523c:	0023883a 	mov	r17,zero
  805240:	0011883a 	mov	r8,zero
  805244:	01400044 	movi	r5,1
  805248:	003f7a06 	br	805034 <__alt_mem_onchip_mem+0xff7fd034>
  80524c:	014000c4 	movi	r5,3
  805250:	003f7806 	br	805034 <__alt_mem_onchip_mem+0xff7fd034>
  805254:	04c00104 	movi	r19,4
  805258:	0021883a 	mov	r16,zero
  80525c:	0029883a 	mov	r20,zero
  805260:	07000044 	movi	fp,1
  805264:	003f6106 	br	804fec <__alt_mem_onchip_mem+0xff7fcfec>
  805268:	04c00304 	movi	r19,12
  80526c:	070000c4 	movi	fp,3
  805270:	003f5e06 	br	804fec <__alt_mem_onchip_mem+0xff7fcfec>
  805274:	01400434 	movhi	r5,16
  805278:	002b883a 	mov	r21,zero
  80527c:	297fffc4 	addi	r5,r5,-1
  805280:	053fffc4 	movi	r20,-1
  805284:	0081ffc4 	movi	r2,2047
  805288:	003f9806 	br	8050ec <__alt_mem_onchip_mem+0xff7fd0ec>
  80528c:	8023883a 	mov	r17,r16
  805290:	a011883a 	mov	r8,r20
  805294:	e00b883a 	mov	r5,fp
  805298:	003f8a06 	br	8050c4 <__alt_mem_onchip_mem+0xff7fd0c4>
  80529c:	8023883a 	mov	r17,r16
  8052a0:	a011883a 	mov	r8,r20
  8052a4:	482d883a 	mov	r22,r9
  8052a8:	e00b883a 	mov	r5,fp
  8052ac:	003f8506 	br	8050c4 <__alt_mem_onchip_mem+0xff7fd0c4>
  8052b0:	a00ad43a 	srli	r5,r20,16
  8052b4:	401ad43a 	srli	r13,r8,16
  8052b8:	a53fffcc 	andi	r20,r20,65535
  8052bc:	423fffcc 	andi	r8,r8,65535
  8052c0:	4519383a 	mul	r12,r8,r20
  8052c4:	4147383a 	mul	r3,r8,r5
  8052c8:	6d09383a 	mul	r4,r13,r20
  8052cc:	600cd43a 	srli	r6,r12,16
  8052d0:	2b5d383a 	mul	r14,r5,r13
  8052d4:	20c9883a 	add	r4,r4,r3
  8052d8:	310d883a 	add	r6,r6,r4
  8052dc:	30c0022e 	bgeu	r6,r3,8052e8 <__muldf3+0x378>
  8052e0:	00c00074 	movhi	r3,1
  8052e4:	70dd883a 	add	r14,r14,r3
  8052e8:	8826d43a 	srli	r19,r17,16
  8052ec:	8bffffcc 	andi	r15,r17,65535
  8052f0:	7d23383a 	mul	r17,r15,r20
  8052f4:	7949383a 	mul	r4,r15,r5
  8052f8:	9d29383a 	mul	r20,r19,r20
  8052fc:	8814d43a 	srli	r10,r17,16
  805300:	3012943a 	slli	r9,r6,16
  805304:	a129883a 	add	r20,r20,r4
  805308:	633fffcc 	andi	r12,r12,65535
  80530c:	5515883a 	add	r10,r10,r20
  805310:	3006d43a 	srli	r3,r6,16
  805314:	4b13883a 	add	r9,r9,r12
  805318:	2ccb383a 	mul	r5,r5,r19
  80531c:	5100022e 	bgeu	r10,r4,805328 <__muldf3+0x3b8>
  805320:	01000074 	movhi	r4,1
  805324:	290b883a 	add	r5,r5,r4
  805328:	802ad43a 	srli	r21,r16,16
  80532c:	843fffcc 	andi	r16,r16,65535
  805330:	440d383a 	mul	r6,r8,r16
  805334:	4565383a 	mul	r18,r8,r21
  805338:	8349383a 	mul	r4,r16,r13
  80533c:	500e943a 	slli	r7,r10,16
  805340:	3010d43a 	srli	r8,r6,16
  805344:	5028d43a 	srli	r20,r10,16
  805348:	2489883a 	add	r4,r4,r18
  80534c:	8abfffcc 	andi	r10,r17,65535
  805350:	3a95883a 	add	r10,r7,r10
  805354:	4119883a 	add	r12,r8,r4
  805358:	a169883a 	add	r20,r20,r5
  80535c:	1a87883a 	add	r3,r3,r10
  805360:	6d5b383a 	mul	r13,r13,r21
  805364:	6480022e 	bgeu	r12,r18,805370 <__muldf3+0x400>
  805368:	01000074 	movhi	r4,1
  80536c:	691b883a 	add	r13,r13,r4
  805370:	7c25383a 	mul	r18,r15,r16
  805374:	7d4b383a 	mul	r5,r15,r21
  805378:	84cf383a 	mul	r7,r16,r19
  80537c:	901ed43a 	srli	r15,r18,16
  805380:	6008d43a 	srli	r4,r12,16
  805384:	6010943a 	slli	r8,r12,16
  805388:	394f883a 	add	r7,r7,r5
  80538c:	333fffcc 	andi	r12,r6,65535
  805390:	79df883a 	add	r15,r15,r7
  805394:	235b883a 	add	r13,r4,r13
  805398:	9d63383a 	mul	r17,r19,r21
  80539c:	4309883a 	add	r4,r8,r12
  8053a0:	7940022e 	bgeu	r15,r5,8053ac <__muldf3+0x43c>
  8053a4:	01400074 	movhi	r5,1
  8053a8:	8963883a 	add	r17,r17,r5
  8053ac:	780a943a 	slli	r5,r15,16
  8053b0:	91bfffcc 	andi	r6,r18,65535
  8053b4:	70c7883a 	add	r3,r14,r3
  8053b8:	298d883a 	add	r6,r5,r6
  8053bc:	1a8f803a 	cmpltu	r7,r3,r10
  8053c0:	350b883a 	add	r5,r6,r20
  8053c4:	20c7883a 	add	r3,r4,r3
  8053c8:	3955883a 	add	r10,r7,r5
  8053cc:	1909803a 	cmpltu	r4,r3,r4
  8053d0:	6a91883a 	add	r8,r13,r10
  8053d4:	780cd43a 	srli	r6,r15,16
  8053d8:	2219883a 	add	r12,r4,r8
  8053dc:	2d0b803a 	cmpltu	r5,r5,r20
  8053e0:	51cf803a 	cmpltu	r7,r10,r7
  8053e4:	29ceb03a 	or	r7,r5,r7
  8053e8:	4351803a 	cmpltu	r8,r8,r13
  8053ec:	610b803a 	cmpltu	r5,r12,r4
  8053f0:	4148b03a 	or	r4,r8,r5
  8053f4:	398f883a 	add	r7,r7,r6
  8053f8:	3909883a 	add	r4,r7,r4
  8053fc:	1810927a 	slli	r8,r3,9
  805400:	2449883a 	add	r4,r4,r17
  805404:	2008927a 	slli	r4,r4,9
  805408:	6022d5fa 	srli	r17,r12,23
  80540c:	1806d5fa 	srli	r3,r3,23
  805410:	4252b03a 	or	r9,r8,r9
  805414:	600a927a 	slli	r5,r12,9
  805418:	4810c03a 	cmpne	r8,r9,zero
  80541c:	2462b03a 	or	r17,r4,r17
  805420:	40c6b03a 	or	r3,r8,r3
  805424:	8900402c 	andhi	r4,r17,256
  805428:	1950b03a 	or	r8,r3,r5
  80542c:	20000726 	beq	r4,zero,80544c <__muldf3+0x4dc>
  805430:	4006d07a 	srli	r3,r8,1
  805434:	880497fa 	slli	r2,r17,31
  805438:	4200004c 	andi	r8,r8,1
  80543c:	8822d07a 	srli	r17,r17,1
  805440:	1a10b03a 	or	r8,r3,r8
  805444:	1210b03a 	or	r8,r2,r8
  805448:	5805883a 	mov	r2,r11
  80544c:	1140ffc4 	addi	r5,r2,1023
  805450:	0140440e 	bge	zero,r5,805564 <__muldf3+0x5f4>
  805454:	40c001cc 	andi	r3,r8,7
  805458:	18000726 	beq	r3,zero,805478 <__muldf3+0x508>
  80545c:	40c003cc 	andi	r3,r8,15
  805460:	01000104 	movi	r4,4
  805464:	19000426 	beq	r3,r4,805478 <__muldf3+0x508>
  805468:	4107883a 	add	r3,r8,r4
  80546c:	1a11803a 	cmpltu	r8,r3,r8
  805470:	8a23883a 	add	r17,r17,r8
  805474:	1811883a 	mov	r8,r3
  805478:	88c0402c 	andhi	r3,r17,256
  80547c:	18000426 	beq	r3,zero,805490 <__muldf3+0x520>
  805480:	11410004 	addi	r5,r2,1024
  805484:	00bfc034 	movhi	r2,65280
  805488:	10bfffc4 	addi	r2,r2,-1
  80548c:	88a2703a 	and	r17,r17,r2
  805490:	0081ff84 	movi	r2,2046
  805494:	117f6416 	blt	r2,r5,805228 <__alt_mem_onchip_mem+0xff7fd228>
  805498:	8828977a 	slli	r20,r17,29
  80549c:	4010d0fa 	srli	r8,r8,3
  8054a0:	8822927a 	slli	r17,r17,9
  8054a4:	2881ffcc 	andi	r2,r5,2047
  8054a8:	a228b03a 	or	r20,r20,r8
  8054ac:	880ad33a 	srli	r5,r17,12
  8054b0:	b02b883a 	mov	r21,r22
  8054b4:	003f0d06 	br	8050ec <__alt_mem_onchip_mem+0xff7fd0ec>
  8054b8:	8080022c 	andhi	r2,r16,8
  8054bc:	10000926 	beq	r2,zero,8054e4 <__muldf3+0x574>
  8054c0:	8880022c 	andhi	r2,r17,8
  8054c4:	1000071e 	bne	r2,zero,8054e4 <__muldf3+0x574>
  8054c8:	00800434 	movhi	r2,16
  8054cc:	89400234 	orhi	r5,r17,8
  8054d0:	10bfffc4 	addi	r2,r2,-1
  8054d4:	b82b883a 	mov	r21,r23
  8054d8:	288a703a 	and	r5,r5,r2
  8054dc:	4029883a 	mov	r20,r8
  8054e0:	003f6806 	br	805284 <__alt_mem_onchip_mem+0xff7fd284>
  8054e4:	00800434 	movhi	r2,16
  8054e8:	81400234 	orhi	r5,r16,8
  8054ec:	10bfffc4 	addi	r2,r2,-1
  8054f0:	288a703a 	and	r5,r5,r2
  8054f4:	003f6306 	br	805284 <__alt_mem_onchip_mem+0xff7fd284>
  8054f8:	147ff604 	addi	r17,r2,-40
  8054fc:	3462983a 	sll	r17,r6,r17
  805500:	0011883a 	mov	r8,zero
  805504:	003f4406 	br	805218 <__alt_mem_onchip_mem+0xff7fd218>
  805508:	3009883a 	mov	r4,r6
  80550c:	d9800215 	stw	r6,8(sp)
  805510:	da400115 	stw	r9,4(sp)
  805514:	da800015 	stw	r10,0(sp)
  805518:	080602c0 	call	80602c <__clzsi2>
  80551c:	10800804 	addi	r2,r2,32
  805520:	da800017 	ldw	r10,0(sp)
  805524:	da400117 	ldw	r9,4(sp)
  805528:	d9800217 	ldw	r6,8(sp)
  80552c:	003f3006 	br	8051f0 <__alt_mem_onchip_mem+0xff7fd1f0>
  805530:	143ff604 	addi	r16,r2,-40
  805534:	9c20983a 	sll	r16,r19,r16
  805538:	0029883a 	mov	r20,zero
  80553c:	003f1606 	br	805198 <__alt_mem_onchip_mem+0xff7fd198>
  805540:	d9800215 	stw	r6,8(sp)
  805544:	d9c00015 	stw	r7,0(sp)
  805548:	da400115 	stw	r9,4(sp)
  80554c:	080602c0 	call	80602c <__clzsi2>
  805550:	10800804 	addi	r2,r2,32
  805554:	da400117 	ldw	r9,4(sp)
  805558:	d9c00017 	ldw	r7,0(sp)
  80555c:	d9800217 	ldw	r6,8(sp)
  805560:	003f0306 	br	805170 <__alt_mem_onchip_mem+0xff7fd170>
  805564:	00c00044 	movi	r3,1
  805568:	1947c83a 	sub	r3,r3,r5
  80556c:	00800e04 	movi	r2,56
  805570:	10feda16 	blt	r2,r3,8050dc <__alt_mem_onchip_mem+0xff7fd0dc>
  805574:	008007c4 	movi	r2,31
  805578:	10c01b16 	blt	r2,r3,8055e8 <__muldf3+0x678>
  80557c:	00800804 	movi	r2,32
  805580:	10c5c83a 	sub	r2,r2,r3
  805584:	888a983a 	sll	r5,r17,r2
  805588:	40c8d83a 	srl	r4,r8,r3
  80558c:	4084983a 	sll	r2,r8,r2
  805590:	88e2d83a 	srl	r17,r17,r3
  805594:	2906b03a 	or	r3,r5,r4
  805598:	1004c03a 	cmpne	r2,r2,zero
  80559c:	1886b03a 	or	r3,r3,r2
  8055a0:	188001cc 	andi	r2,r3,7
  8055a4:	10000726 	beq	r2,zero,8055c4 <__muldf3+0x654>
  8055a8:	188003cc 	andi	r2,r3,15
  8055ac:	01000104 	movi	r4,4
  8055b0:	11000426 	beq	r2,r4,8055c4 <__muldf3+0x654>
  8055b4:	1805883a 	mov	r2,r3
  8055b8:	10c00104 	addi	r3,r2,4
  8055bc:	1885803a 	cmpltu	r2,r3,r2
  8055c0:	88a3883a 	add	r17,r17,r2
  8055c4:	8880202c 	andhi	r2,r17,128
  8055c8:	10001c26 	beq	r2,zero,80563c <__muldf3+0x6cc>
  8055cc:	b02b883a 	mov	r21,r22
  8055d0:	00800044 	movi	r2,1
  8055d4:	000b883a 	mov	r5,zero
  8055d8:	0029883a 	mov	r20,zero
  8055dc:	003ec306 	br	8050ec <__alt_mem_onchip_mem+0xff7fd0ec>
  8055e0:	5805883a 	mov	r2,r11
  8055e4:	003f9906 	br	80544c <__alt_mem_onchip_mem+0xff7fd44c>
  8055e8:	00bff844 	movi	r2,-31
  8055ec:	1145c83a 	sub	r2,r2,r5
  8055f0:	8888d83a 	srl	r4,r17,r2
  8055f4:	00800804 	movi	r2,32
  8055f8:	18801a26 	beq	r3,r2,805664 <__muldf3+0x6f4>
  8055fc:	00801004 	movi	r2,64
  805600:	10c5c83a 	sub	r2,r2,r3
  805604:	8884983a 	sll	r2,r17,r2
  805608:	1204b03a 	or	r2,r2,r8
  80560c:	1004c03a 	cmpne	r2,r2,zero
  805610:	2084b03a 	or	r2,r4,r2
  805614:	144001cc 	andi	r17,r2,7
  805618:	88000d1e 	bne	r17,zero,805650 <__muldf3+0x6e0>
  80561c:	000b883a 	mov	r5,zero
  805620:	1028d0fa 	srli	r20,r2,3
  805624:	b02b883a 	mov	r21,r22
  805628:	0005883a 	mov	r2,zero
  80562c:	a468b03a 	or	r20,r20,r17
  805630:	003eae06 	br	8050ec <__alt_mem_onchip_mem+0xff7fd0ec>
  805634:	1007883a 	mov	r3,r2
  805638:	0023883a 	mov	r17,zero
  80563c:	880a927a 	slli	r5,r17,9
  805640:	1805883a 	mov	r2,r3
  805644:	8822977a 	slli	r17,r17,29
  805648:	280ad33a 	srli	r5,r5,12
  80564c:	003ff406 	br	805620 <__alt_mem_onchip_mem+0xff7fd620>
  805650:	10c003cc 	andi	r3,r2,15
  805654:	01000104 	movi	r4,4
  805658:	193ff626 	beq	r3,r4,805634 <__alt_mem_onchip_mem+0xff7fd634>
  80565c:	0023883a 	mov	r17,zero
  805660:	003fd506 	br	8055b8 <__alt_mem_onchip_mem+0xff7fd5b8>
  805664:	0005883a 	mov	r2,zero
  805668:	003fe706 	br	805608 <__alt_mem_onchip_mem+0xff7fd608>
  80566c:	00800434 	movhi	r2,16
  805670:	89400234 	orhi	r5,r17,8
  805674:	10bfffc4 	addi	r2,r2,-1
  805678:	b02b883a 	mov	r21,r22
  80567c:	288a703a 	and	r5,r5,r2
  805680:	4029883a 	mov	r20,r8
  805684:	003eff06 	br	805284 <__alt_mem_onchip_mem+0xff7fd284>

00805688 <__subdf3>:
  805688:	02000434 	movhi	r8,16
  80568c:	423fffc4 	addi	r8,r8,-1
  805690:	defffb04 	addi	sp,sp,-20
  805694:	2a14703a 	and	r10,r5,r8
  805698:	3812d53a 	srli	r9,r7,20
  80569c:	3a10703a 	and	r8,r7,r8
  8056a0:	2006d77a 	srli	r3,r4,29
  8056a4:	3004d77a 	srli	r2,r6,29
  8056a8:	dc000015 	stw	r16,0(sp)
  8056ac:	501490fa 	slli	r10,r10,3
  8056b0:	2820d53a 	srli	r16,r5,20
  8056b4:	401090fa 	slli	r8,r8,3
  8056b8:	dc800215 	stw	r18,8(sp)
  8056bc:	dc400115 	stw	r17,4(sp)
  8056c0:	dfc00415 	stw	ra,16(sp)
  8056c4:	202290fa 	slli	r17,r4,3
  8056c8:	dcc00315 	stw	r19,12(sp)
  8056cc:	4a41ffcc 	andi	r9,r9,2047
  8056d0:	0101ffc4 	movi	r4,2047
  8056d4:	2824d7fa 	srli	r18,r5,31
  8056d8:	8401ffcc 	andi	r16,r16,2047
  8056dc:	50c6b03a 	or	r3,r10,r3
  8056e0:	380ed7fa 	srli	r7,r7,31
  8056e4:	408ab03a 	or	r5,r8,r2
  8056e8:	300c90fa 	slli	r6,r6,3
  8056ec:	49009626 	beq	r9,r4,805948 <__subdf3+0x2c0>
  8056f0:	39c0005c 	xori	r7,r7,1
  8056f4:	8245c83a 	sub	r2,r16,r9
  8056f8:	3c807426 	beq	r7,r18,8058cc <__subdf3+0x244>
  8056fc:	0080af0e 	bge	zero,r2,8059bc <__subdf3+0x334>
  805700:	48002a1e 	bne	r9,zero,8057ac <__subdf3+0x124>
  805704:	2988b03a 	or	r4,r5,r6
  805708:	20009a1e 	bne	r4,zero,805974 <__subdf3+0x2ec>
  80570c:	888001cc 	andi	r2,r17,7
  805710:	10000726 	beq	r2,zero,805730 <__subdf3+0xa8>
  805714:	888003cc 	andi	r2,r17,15
  805718:	01000104 	movi	r4,4
  80571c:	11000426 	beq	r2,r4,805730 <__subdf3+0xa8>
  805720:	890b883a 	add	r5,r17,r4
  805724:	2c63803a 	cmpltu	r17,r5,r17
  805728:	1c47883a 	add	r3,r3,r17
  80572c:	2823883a 	mov	r17,r5
  805730:	1880202c 	andhi	r2,r3,128
  805734:	10005926 	beq	r2,zero,80589c <__subdf3+0x214>
  805738:	84000044 	addi	r16,r16,1
  80573c:	0081ffc4 	movi	r2,2047
  805740:	8080be26 	beq	r16,r2,805a3c <__subdf3+0x3b4>
  805744:	017fe034 	movhi	r5,65408
  805748:	297fffc4 	addi	r5,r5,-1
  80574c:	1946703a 	and	r3,r3,r5
  805750:	1804977a 	slli	r2,r3,29
  805754:	1806927a 	slli	r3,r3,9
  805758:	8822d0fa 	srli	r17,r17,3
  80575c:	8401ffcc 	andi	r16,r16,2047
  805760:	180ad33a 	srli	r5,r3,12
  805764:	9100004c 	andi	r4,r18,1
  805768:	1444b03a 	or	r2,r2,r17
  80576c:	80c1ffcc 	andi	r3,r16,2047
  805770:	1820953a 	slli	r16,r3,20
  805774:	20c03fcc 	andi	r3,r4,255
  805778:	180897fa 	slli	r4,r3,31
  80577c:	00c00434 	movhi	r3,16
  805780:	18ffffc4 	addi	r3,r3,-1
  805784:	28c6703a 	and	r3,r5,r3
  805788:	1c06b03a 	or	r3,r3,r16
  80578c:	1906b03a 	or	r3,r3,r4
  805790:	dfc00417 	ldw	ra,16(sp)
  805794:	dcc00317 	ldw	r19,12(sp)
  805798:	dc800217 	ldw	r18,8(sp)
  80579c:	dc400117 	ldw	r17,4(sp)
  8057a0:	dc000017 	ldw	r16,0(sp)
  8057a4:	dec00504 	addi	sp,sp,20
  8057a8:	f800283a 	ret
  8057ac:	0101ffc4 	movi	r4,2047
  8057b0:	813fd626 	beq	r16,r4,80570c <__alt_mem_onchip_mem+0xff7fd70c>
  8057b4:	29402034 	orhi	r5,r5,128
  8057b8:	01000e04 	movi	r4,56
  8057bc:	2080a316 	blt	r4,r2,805a4c <__subdf3+0x3c4>
  8057c0:	010007c4 	movi	r4,31
  8057c4:	2080c616 	blt	r4,r2,805ae0 <__subdf3+0x458>
  8057c8:	01000804 	movi	r4,32
  8057cc:	2089c83a 	sub	r4,r4,r2
  8057d0:	2910983a 	sll	r8,r5,r4
  8057d4:	308ed83a 	srl	r7,r6,r2
  8057d8:	3108983a 	sll	r4,r6,r4
  8057dc:	2884d83a 	srl	r2,r5,r2
  8057e0:	41ccb03a 	or	r6,r8,r7
  8057e4:	2008c03a 	cmpne	r4,r4,zero
  8057e8:	310cb03a 	or	r6,r6,r4
  8057ec:	898dc83a 	sub	r6,r17,r6
  8057f0:	89a3803a 	cmpltu	r17,r17,r6
  8057f4:	1887c83a 	sub	r3,r3,r2
  8057f8:	1c47c83a 	sub	r3,r3,r17
  8057fc:	3023883a 	mov	r17,r6
  805800:	1880202c 	andhi	r2,r3,128
  805804:	10002326 	beq	r2,zero,805894 <__subdf3+0x20c>
  805808:	04c02034 	movhi	r19,128
  80580c:	9cffffc4 	addi	r19,r19,-1
  805810:	1ce6703a 	and	r19,r3,r19
  805814:	98007a26 	beq	r19,zero,805a00 <__subdf3+0x378>
  805818:	9809883a 	mov	r4,r19
  80581c:	080602c0 	call	80602c <__clzsi2>
  805820:	113ffe04 	addi	r4,r2,-8
  805824:	00c007c4 	movi	r3,31
  805828:	19007b16 	blt	r3,r4,805a18 <__subdf3+0x390>
  80582c:	00800804 	movi	r2,32
  805830:	1105c83a 	sub	r2,r2,r4
  805834:	8884d83a 	srl	r2,r17,r2
  805838:	9906983a 	sll	r3,r19,r4
  80583c:	8922983a 	sll	r17,r17,r4
  805840:	10c4b03a 	or	r2,r2,r3
  805844:	24007816 	blt	r4,r16,805a28 <__subdf3+0x3a0>
  805848:	2421c83a 	sub	r16,r4,r16
  80584c:	80c00044 	addi	r3,r16,1
  805850:	010007c4 	movi	r4,31
  805854:	20c09516 	blt	r4,r3,805aac <__subdf3+0x424>
  805858:	01400804 	movi	r5,32
  80585c:	28cbc83a 	sub	r5,r5,r3
  805860:	88c8d83a 	srl	r4,r17,r3
  805864:	8962983a 	sll	r17,r17,r5
  805868:	114a983a 	sll	r5,r2,r5
  80586c:	10c6d83a 	srl	r3,r2,r3
  805870:	8804c03a 	cmpne	r2,r17,zero
  805874:	290ab03a 	or	r5,r5,r4
  805878:	28a2b03a 	or	r17,r5,r2
  80587c:	0021883a 	mov	r16,zero
  805880:	003fa206 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805884:	2090b03a 	or	r8,r4,r2
  805888:	40018e26 	beq	r8,zero,805ec4 <__subdf3+0x83c>
  80588c:	1007883a 	mov	r3,r2
  805890:	2023883a 	mov	r17,r4
  805894:	888001cc 	andi	r2,r17,7
  805898:	103f9e1e 	bne	r2,zero,805714 <__alt_mem_onchip_mem+0xff7fd714>
  80589c:	1804977a 	slli	r2,r3,29
  8058a0:	8822d0fa 	srli	r17,r17,3
  8058a4:	1810d0fa 	srli	r8,r3,3
  8058a8:	9100004c 	andi	r4,r18,1
  8058ac:	1444b03a 	or	r2,r2,r17
  8058b0:	00c1ffc4 	movi	r3,2047
  8058b4:	80c02826 	beq	r16,r3,805958 <__subdf3+0x2d0>
  8058b8:	01400434 	movhi	r5,16
  8058bc:	297fffc4 	addi	r5,r5,-1
  8058c0:	80e0703a 	and	r16,r16,r3
  8058c4:	414a703a 	and	r5,r8,r5
  8058c8:	003fa806 	br	80576c <__alt_mem_onchip_mem+0xff7fd76c>
  8058cc:	0080630e 	bge	zero,r2,805a5c <__subdf3+0x3d4>
  8058d0:	48003026 	beq	r9,zero,805994 <__subdf3+0x30c>
  8058d4:	0101ffc4 	movi	r4,2047
  8058d8:	813f8c26 	beq	r16,r4,80570c <__alt_mem_onchip_mem+0xff7fd70c>
  8058dc:	29402034 	orhi	r5,r5,128
  8058e0:	01000e04 	movi	r4,56
  8058e4:	2080a90e 	bge	r4,r2,805b8c <__subdf3+0x504>
  8058e8:	298cb03a 	or	r6,r5,r6
  8058ec:	3012c03a 	cmpne	r9,r6,zero
  8058f0:	0005883a 	mov	r2,zero
  8058f4:	4c53883a 	add	r9,r9,r17
  8058f8:	4c63803a 	cmpltu	r17,r9,r17
  8058fc:	10c7883a 	add	r3,r2,r3
  805900:	88c7883a 	add	r3,r17,r3
  805904:	4823883a 	mov	r17,r9
  805908:	1880202c 	andhi	r2,r3,128
  80590c:	1000d026 	beq	r2,zero,805c50 <__subdf3+0x5c8>
  805910:	84000044 	addi	r16,r16,1
  805914:	0081ffc4 	movi	r2,2047
  805918:	8080fe26 	beq	r16,r2,805d14 <__subdf3+0x68c>
  80591c:	00bfe034 	movhi	r2,65408
  805920:	10bfffc4 	addi	r2,r2,-1
  805924:	1886703a 	and	r3,r3,r2
  805928:	880ad07a 	srli	r5,r17,1
  80592c:	180497fa 	slli	r2,r3,31
  805930:	8900004c 	andi	r4,r17,1
  805934:	2922b03a 	or	r17,r5,r4
  805938:	1806d07a 	srli	r3,r3,1
  80593c:	1462b03a 	or	r17,r2,r17
  805940:	3825883a 	mov	r18,r7
  805944:	003f7106 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805948:	2984b03a 	or	r2,r5,r6
  80594c:	103f6826 	beq	r2,zero,8056f0 <__alt_mem_onchip_mem+0xff7fd6f0>
  805950:	39c03fcc 	andi	r7,r7,255
  805954:	003f6706 	br	8056f4 <__alt_mem_onchip_mem+0xff7fd6f4>
  805958:	4086b03a 	or	r3,r8,r2
  80595c:	18015226 	beq	r3,zero,805ea8 <__subdf3+0x820>
  805960:	00c00434 	movhi	r3,16
  805964:	41400234 	orhi	r5,r8,8
  805968:	18ffffc4 	addi	r3,r3,-1
  80596c:	28ca703a 	and	r5,r5,r3
  805970:	003f7e06 	br	80576c <__alt_mem_onchip_mem+0xff7fd76c>
  805974:	10bfffc4 	addi	r2,r2,-1
  805978:	1000491e 	bne	r2,zero,805aa0 <__subdf3+0x418>
  80597c:	898fc83a 	sub	r7,r17,r6
  805980:	89e3803a 	cmpltu	r17,r17,r7
  805984:	1947c83a 	sub	r3,r3,r5
  805988:	1c47c83a 	sub	r3,r3,r17
  80598c:	3823883a 	mov	r17,r7
  805990:	003f9b06 	br	805800 <__alt_mem_onchip_mem+0xff7fd800>
  805994:	2988b03a 	or	r4,r5,r6
  805998:	203f5c26 	beq	r4,zero,80570c <__alt_mem_onchip_mem+0xff7fd70c>
  80599c:	10bfffc4 	addi	r2,r2,-1
  8059a0:	1000931e 	bne	r2,zero,805bf0 <__subdf3+0x568>
  8059a4:	898d883a 	add	r6,r17,r6
  8059a8:	3463803a 	cmpltu	r17,r6,r17
  8059ac:	1947883a 	add	r3,r3,r5
  8059b0:	88c7883a 	add	r3,r17,r3
  8059b4:	3023883a 	mov	r17,r6
  8059b8:	003fd306 	br	805908 <__alt_mem_onchip_mem+0xff7fd908>
  8059bc:	1000541e 	bne	r2,zero,805b10 <__subdf3+0x488>
  8059c0:	80800044 	addi	r2,r16,1
  8059c4:	1081ffcc 	andi	r2,r2,2047
  8059c8:	01000044 	movi	r4,1
  8059cc:	2080a20e 	bge	r4,r2,805c58 <__subdf3+0x5d0>
  8059d0:	8989c83a 	sub	r4,r17,r6
  8059d4:	8905803a 	cmpltu	r2,r17,r4
  8059d8:	1967c83a 	sub	r19,r3,r5
  8059dc:	98a7c83a 	sub	r19,r19,r2
  8059e0:	9880202c 	andhi	r2,r19,128
  8059e4:	10006326 	beq	r2,zero,805b74 <__subdf3+0x4ec>
  8059e8:	3463c83a 	sub	r17,r6,r17
  8059ec:	28c7c83a 	sub	r3,r5,r3
  8059f0:	344d803a 	cmpltu	r6,r6,r17
  8059f4:	19a7c83a 	sub	r19,r3,r6
  8059f8:	3825883a 	mov	r18,r7
  8059fc:	983f861e 	bne	r19,zero,805818 <__alt_mem_onchip_mem+0xff7fd818>
  805a00:	8809883a 	mov	r4,r17
  805a04:	080602c0 	call	80602c <__clzsi2>
  805a08:	10800804 	addi	r2,r2,32
  805a0c:	113ffe04 	addi	r4,r2,-8
  805a10:	00c007c4 	movi	r3,31
  805a14:	193f850e 	bge	r3,r4,80582c <__alt_mem_onchip_mem+0xff7fd82c>
  805a18:	10bff604 	addi	r2,r2,-40
  805a1c:	8884983a 	sll	r2,r17,r2
  805a20:	0023883a 	mov	r17,zero
  805a24:	243f880e 	bge	r4,r16,805848 <__alt_mem_onchip_mem+0xff7fd848>
  805a28:	00ffe034 	movhi	r3,65408
  805a2c:	18ffffc4 	addi	r3,r3,-1
  805a30:	8121c83a 	sub	r16,r16,r4
  805a34:	10c6703a 	and	r3,r2,r3
  805a38:	003f3406 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805a3c:	9100004c 	andi	r4,r18,1
  805a40:	000b883a 	mov	r5,zero
  805a44:	0005883a 	mov	r2,zero
  805a48:	003f4806 	br	80576c <__alt_mem_onchip_mem+0xff7fd76c>
  805a4c:	298cb03a 	or	r6,r5,r6
  805a50:	300cc03a 	cmpne	r6,r6,zero
  805a54:	0005883a 	mov	r2,zero
  805a58:	003f6406 	br	8057ec <__alt_mem_onchip_mem+0xff7fd7ec>
  805a5c:	10009a1e 	bne	r2,zero,805cc8 <__subdf3+0x640>
  805a60:	82400044 	addi	r9,r16,1
  805a64:	4881ffcc 	andi	r2,r9,2047
  805a68:	02800044 	movi	r10,1
  805a6c:	5080670e 	bge	r10,r2,805c0c <__subdf3+0x584>
  805a70:	0081ffc4 	movi	r2,2047
  805a74:	4880af26 	beq	r9,r2,805d34 <__subdf3+0x6ac>
  805a78:	898d883a 	add	r6,r17,r6
  805a7c:	1945883a 	add	r2,r3,r5
  805a80:	3447803a 	cmpltu	r3,r6,r17
  805a84:	1887883a 	add	r3,r3,r2
  805a88:	182297fa 	slli	r17,r3,31
  805a8c:	300cd07a 	srli	r6,r6,1
  805a90:	1806d07a 	srli	r3,r3,1
  805a94:	4821883a 	mov	r16,r9
  805a98:	89a2b03a 	or	r17,r17,r6
  805a9c:	003f1b06 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805aa0:	0101ffc4 	movi	r4,2047
  805aa4:	813f441e 	bne	r16,r4,8057b8 <__alt_mem_onchip_mem+0xff7fd7b8>
  805aa8:	003f1806 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805aac:	843ff844 	addi	r16,r16,-31
  805ab0:	01400804 	movi	r5,32
  805ab4:	1408d83a 	srl	r4,r2,r16
  805ab8:	19405026 	beq	r3,r5,805bfc <__subdf3+0x574>
  805abc:	01401004 	movi	r5,64
  805ac0:	28c7c83a 	sub	r3,r5,r3
  805ac4:	10c4983a 	sll	r2,r2,r3
  805ac8:	88a2b03a 	or	r17,r17,r2
  805acc:	8822c03a 	cmpne	r17,r17,zero
  805ad0:	2462b03a 	or	r17,r4,r17
  805ad4:	0007883a 	mov	r3,zero
  805ad8:	0021883a 	mov	r16,zero
  805adc:	003f6d06 	br	805894 <__alt_mem_onchip_mem+0xff7fd894>
  805ae0:	11fff804 	addi	r7,r2,-32
  805ae4:	01000804 	movi	r4,32
  805ae8:	29ced83a 	srl	r7,r5,r7
  805aec:	11004526 	beq	r2,r4,805c04 <__subdf3+0x57c>
  805af0:	01001004 	movi	r4,64
  805af4:	2089c83a 	sub	r4,r4,r2
  805af8:	2904983a 	sll	r2,r5,r4
  805afc:	118cb03a 	or	r6,r2,r6
  805b00:	300cc03a 	cmpne	r6,r6,zero
  805b04:	398cb03a 	or	r6,r7,r6
  805b08:	0005883a 	mov	r2,zero
  805b0c:	003f3706 	br	8057ec <__alt_mem_onchip_mem+0xff7fd7ec>
  805b10:	80002a26 	beq	r16,zero,805bbc <__subdf3+0x534>
  805b14:	0101ffc4 	movi	r4,2047
  805b18:	49006626 	beq	r9,r4,805cb4 <__subdf3+0x62c>
  805b1c:	0085c83a 	sub	r2,zero,r2
  805b20:	18c02034 	orhi	r3,r3,128
  805b24:	01000e04 	movi	r4,56
  805b28:	20807e16 	blt	r4,r2,805d24 <__subdf3+0x69c>
  805b2c:	010007c4 	movi	r4,31
  805b30:	2080e716 	blt	r4,r2,805ed0 <__subdf3+0x848>
  805b34:	01000804 	movi	r4,32
  805b38:	2089c83a 	sub	r4,r4,r2
  805b3c:	1914983a 	sll	r10,r3,r4
  805b40:	8890d83a 	srl	r8,r17,r2
  805b44:	8908983a 	sll	r4,r17,r4
  805b48:	1884d83a 	srl	r2,r3,r2
  805b4c:	5222b03a 	or	r17,r10,r8
  805b50:	2006c03a 	cmpne	r3,r4,zero
  805b54:	88e2b03a 	or	r17,r17,r3
  805b58:	3463c83a 	sub	r17,r6,r17
  805b5c:	2885c83a 	sub	r2,r5,r2
  805b60:	344d803a 	cmpltu	r6,r6,r17
  805b64:	1187c83a 	sub	r3,r2,r6
  805b68:	4821883a 	mov	r16,r9
  805b6c:	3825883a 	mov	r18,r7
  805b70:	003f2306 	br	805800 <__alt_mem_onchip_mem+0xff7fd800>
  805b74:	24d0b03a 	or	r8,r4,r19
  805b78:	40001b1e 	bne	r8,zero,805be8 <__subdf3+0x560>
  805b7c:	0005883a 	mov	r2,zero
  805b80:	0009883a 	mov	r4,zero
  805b84:	0021883a 	mov	r16,zero
  805b88:	003f4906 	br	8058b0 <__alt_mem_onchip_mem+0xff7fd8b0>
  805b8c:	010007c4 	movi	r4,31
  805b90:	20803a16 	blt	r4,r2,805c7c <__subdf3+0x5f4>
  805b94:	01000804 	movi	r4,32
  805b98:	2089c83a 	sub	r4,r4,r2
  805b9c:	2912983a 	sll	r9,r5,r4
  805ba0:	3090d83a 	srl	r8,r6,r2
  805ba4:	3108983a 	sll	r4,r6,r4
  805ba8:	2884d83a 	srl	r2,r5,r2
  805bac:	4a12b03a 	or	r9,r9,r8
  805bb0:	2008c03a 	cmpne	r4,r4,zero
  805bb4:	4912b03a 	or	r9,r9,r4
  805bb8:	003f4e06 	br	8058f4 <__alt_mem_onchip_mem+0xff7fd8f4>
  805bbc:	1c48b03a 	or	r4,r3,r17
  805bc0:	20003c26 	beq	r4,zero,805cb4 <__subdf3+0x62c>
  805bc4:	0084303a 	nor	r2,zero,r2
  805bc8:	1000381e 	bne	r2,zero,805cac <__subdf3+0x624>
  805bcc:	3463c83a 	sub	r17,r6,r17
  805bd0:	28c5c83a 	sub	r2,r5,r3
  805bd4:	344d803a 	cmpltu	r6,r6,r17
  805bd8:	1187c83a 	sub	r3,r2,r6
  805bdc:	4821883a 	mov	r16,r9
  805be0:	3825883a 	mov	r18,r7
  805be4:	003f0606 	br	805800 <__alt_mem_onchip_mem+0xff7fd800>
  805be8:	2023883a 	mov	r17,r4
  805bec:	003f0906 	br	805814 <__alt_mem_onchip_mem+0xff7fd814>
  805bf0:	0101ffc4 	movi	r4,2047
  805bf4:	813f3a1e 	bne	r16,r4,8058e0 <__alt_mem_onchip_mem+0xff7fd8e0>
  805bf8:	003ec406 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805bfc:	0005883a 	mov	r2,zero
  805c00:	003fb106 	br	805ac8 <__alt_mem_onchip_mem+0xff7fdac8>
  805c04:	0005883a 	mov	r2,zero
  805c08:	003fbc06 	br	805afc <__alt_mem_onchip_mem+0xff7fdafc>
  805c0c:	1c44b03a 	or	r2,r3,r17
  805c10:	80008e1e 	bne	r16,zero,805e4c <__subdf3+0x7c4>
  805c14:	1000c826 	beq	r2,zero,805f38 <__subdf3+0x8b0>
  805c18:	2984b03a 	or	r2,r5,r6
  805c1c:	103ebb26 	beq	r2,zero,80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805c20:	8989883a 	add	r4,r17,r6
  805c24:	1945883a 	add	r2,r3,r5
  805c28:	2447803a 	cmpltu	r3,r4,r17
  805c2c:	1887883a 	add	r3,r3,r2
  805c30:	1880202c 	andhi	r2,r3,128
  805c34:	2023883a 	mov	r17,r4
  805c38:	103f1626 	beq	r2,zero,805894 <__alt_mem_onchip_mem+0xff7fd894>
  805c3c:	00bfe034 	movhi	r2,65408
  805c40:	10bfffc4 	addi	r2,r2,-1
  805c44:	5021883a 	mov	r16,r10
  805c48:	1886703a 	and	r3,r3,r2
  805c4c:	003eaf06 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805c50:	3825883a 	mov	r18,r7
  805c54:	003f0f06 	br	805894 <__alt_mem_onchip_mem+0xff7fd894>
  805c58:	1c44b03a 	or	r2,r3,r17
  805c5c:	8000251e 	bne	r16,zero,805cf4 <__subdf3+0x66c>
  805c60:	1000661e 	bne	r2,zero,805dfc <__subdf3+0x774>
  805c64:	2990b03a 	or	r8,r5,r6
  805c68:	40009626 	beq	r8,zero,805ec4 <__subdf3+0x83c>
  805c6c:	2807883a 	mov	r3,r5
  805c70:	3023883a 	mov	r17,r6
  805c74:	3825883a 	mov	r18,r7
  805c78:	003ea406 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805c7c:	127ff804 	addi	r9,r2,-32
  805c80:	01000804 	movi	r4,32
  805c84:	2a52d83a 	srl	r9,r5,r9
  805c88:	11008c26 	beq	r2,r4,805ebc <__subdf3+0x834>
  805c8c:	01001004 	movi	r4,64
  805c90:	2085c83a 	sub	r2,r4,r2
  805c94:	2884983a 	sll	r2,r5,r2
  805c98:	118cb03a 	or	r6,r2,r6
  805c9c:	300cc03a 	cmpne	r6,r6,zero
  805ca0:	4992b03a 	or	r9,r9,r6
  805ca4:	0005883a 	mov	r2,zero
  805ca8:	003f1206 	br	8058f4 <__alt_mem_onchip_mem+0xff7fd8f4>
  805cac:	0101ffc4 	movi	r4,2047
  805cb0:	493f9c1e 	bne	r9,r4,805b24 <__alt_mem_onchip_mem+0xff7fdb24>
  805cb4:	2807883a 	mov	r3,r5
  805cb8:	3023883a 	mov	r17,r6
  805cbc:	4821883a 	mov	r16,r9
  805cc0:	3825883a 	mov	r18,r7
  805cc4:	003e9106 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805cc8:	80001f1e 	bne	r16,zero,805d48 <__subdf3+0x6c0>
  805ccc:	1c48b03a 	or	r4,r3,r17
  805cd0:	20005a26 	beq	r4,zero,805e3c <__subdf3+0x7b4>
  805cd4:	0084303a 	nor	r2,zero,r2
  805cd8:	1000561e 	bne	r2,zero,805e34 <__subdf3+0x7ac>
  805cdc:	89a3883a 	add	r17,r17,r6
  805ce0:	1945883a 	add	r2,r3,r5
  805ce4:	898d803a 	cmpltu	r6,r17,r6
  805ce8:	3087883a 	add	r3,r6,r2
  805cec:	4821883a 	mov	r16,r9
  805cf0:	003f0506 	br	805908 <__alt_mem_onchip_mem+0xff7fd908>
  805cf4:	10002b1e 	bne	r2,zero,805da4 <__subdf3+0x71c>
  805cf8:	2984b03a 	or	r2,r5,r6
  805cfc:	10008026 	beq	r2,zero,805f00 <__subdf3+0x878>
  805d00:	2807883a 	mov	r3,r5
  805d04:	3023883a 	mov	r17,r6
  805d08:	3825883a 	mov	r18,r7
  805d0c:	0401ffc4 	movi	r16,2047
  805d10:	003e7e06 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805d14:	3809883a 	mov	r4,r7
  805d18:	0011883a 	mov	r8,zero
  805d1c:	0005883a 	mov	r2,zero
  805d20:	003ee306 	br	8058b0 <__alt_mem_onchip_mem+0xff7fd8b0>
  805d24:	1c62b03a 	or	r17,r3,r17
  805d28:	8822c03a 	cmpne	r17,r17,zero
  805d2c:	0005883a 	mov	r2,zero
  805d30:	003f8906 	br	805b58 <__alt_mem_onchip_mem+0xff7fdb58>
  805d34:	3809883a 	mov	r4,r7
  805d38:	4821883a 	mov	r16,r9
  805d3c:	0011883a 	mov	r8,zero
  805d40:	0005883a 	mov	r2,zero
  805d44:	003eda06 	br	8058b0 <__alt_mem_onchip_mem+0xff7fd8b0>
  805d48:	0101ffc4 	movi	r4,2047
  805d4c:	49003b26 	beq	r9,r4,805e3c <__subdf3+0x7b4>
  805d50:	0085c83a 	sub	r2,zero,r2
  805d54:	18c02034 	orhi	r3,r3,128
  805d58:	01000e04 	movi	r4,56
  805d5c:	20806e16 	blt	r4,r2,805f18 <__subdf3+0x890>
  805d60:	010007c4 	movi	r4,31
  805d64:	20807716 	blt	r4,r2,805f44 <__subdf3+0x8bc>
  805d68:	01000804 	movi	r4,32
  805d6c:	2089c83a 	sub	r4,r4,r2
  805d70:	1914983a 	sll	r10,r3,r4
  805d74:	8890d83a 	srl	r8,r17,r2
  805d78:	8908983a 	sll	r4,r17,r4
  805d7c:	1884d83a 	srl	r2,r3,r2
  805d80:	5222b03a 	or	r17,r10,r8
  805d84:	2006c03a 	cmpne	r3,r4,zero
  805d88:	88e2b03a 	or	r17,r17,r3
  805d8c:	89a3883a 	add	r17,r17,r6
  805d90:	1145883a 	add	r2,r2,r5
  805d94:	898d803a 	cmpltu	r6,r17,r6
  805d98:	3087883a 	add	r3,r6,r2
  805d9c:	4821883a 	mov	r16,r9
  805da0:	003ed906 	br	805908 <__alt_mem_onchip_mem+0xff7fd908>
  805da4:	2984b03a 	or	r2,r5,r6
  805da8:	10004226 	beq	r2,zero,805eb4 <__subdf3+0x82c>
  805dac:	1808d0fa 	srli	r4,r3,3
  805db0:	8822d0fa 	srli	r17,r17,3
  805db4:	1806977a 	slli	r3,r3,29
  805db8:	2080022c 	andhi	r2,r4,8
  805dbc:	1c62b03a 	or	r17,r3,r17
  805dc0:	10000826 	beq	r2,zero,805de4 <__subdf3+0x75c>
  805dc4:	2812d0fa 	srli	r9,r5,3
  805dc8:	4880022c 	andhi	r2,r9,8
  805dcc:	1000051e 	bne	r2,zero,805de4 <__subdf3+0x75c>
  805dd0:	300cd0fa 	srli	r6,r6,3
  805dd4:	2804977a 	slli	r2,r5,29
  805dd8:	4809883a 	mov	r4,r9
  805ddc:	3825883a 	mov	r18,r7
  805de0:	11a2b03a 	or	r17,r2,r6
  805de4:	8806d77a 	srli	r3,r17,29
  805de8:	200890fa 	slli	r4,r4,3
  805dec:	882290fa 	slli	r17,r17,3
  805df0:	0401ffc4 	movi	r16,2047
  805df4:	1906b03a 	or	r3,r3,r4
  805df8:	003e4406 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805dfc:	2984b03a 	or	r2,r5,r6
  805e00:	103e4226 	beq	r2,zero,80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805e04:	8989c83a 	sub	r4,r17,r6
  805e08:	8911803a 	cmpltu	r8,r17,r4
  805e0c:	1945c83a 	sub	r2,r3,r5
  805e10:	1205c83a 	sub	r2,r2,r8
  805e14:	1200202c 	andhi	r8,r2,128
  805e18:	403e9a26 	beq	r8,zero,805884 <__alt_mem_onchip_mem+0xff7fd884>
  805e1c:	3463c83a 	sub	r17,r6,r17
  805e20:	28c5c83a 	sub	r2,r5,r3
  805e24:	344d803a 	cmpltu	r6,r6,r17
  805e28:	1187c83a 	sub	r3,r2,r6
  805e2c:	3825883a 	mov	r18,r7
  805e30:	003e3606 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805e34:	0101ffc4 	movi	r4,2047
  805e38:	493fc71e 	bne	r9,r4,805d58 <__alt_mem_onchip_mem+0xff7fdd58>
  805e3c:	2807883a 	mov	r3,r5
  805e40:	3023883a 	mov	r17,r6
  805e44:	4821883a 	mov	r16,r9
  805e48:	003e3006 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805e4c:	10003626 	beq	r2,zero,805f28 <__subdf3+0x8a0>
  805e50:	2984b03a 	or	r2,r5,r6
  805e54:	10001726 	beq	r2,zero,805eb4 <__subdf3+0x82c>
  805e58:	1808d0fa 	srli	r4,r3,3
  805e5c:	8822d0fa 	srli	r17,r17,3
  805e60:	1806977a 	slli	r3,r3,29
  805e64:	2080022c 	andhi	r2,r4,8
  805e68:	1c62b03a 	or	r17,r3,r17
  805e6c:	10000726 	beq	r2,zero,805e8c <__subdf3+0x804>
  805e70:	2812d0fa 	srli	r9,r5,3
  805e74:	4880022c 	andhi	r2,r9,8
  805e78:	1000041e 	bne	r2,zero,805e8c <__subdf3+0x804>
  805e7c:	300cd0fa 	srli	r6,r6,3
  805e80:	2804977a 	slli	r2,r5,29
  805e84:	4809883a 	mov	r4,r9
  805e88:	11a2b03a 	or	r17,r2,r6
  805e8c:	8806d77a 	srli	r3,r17,29
  805e90:	200890fa 	slli	r4,r4,3
  805e94:	882290fa 	slli	r17,r17,3
  805e98:	3825883a 	mov	r18,r7
  805e9c:	1906b03a 	or	r3,r3,r4
  805ea0:	0401ffc4 	movi	r16,2047
  805ea4:	003e1906 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805ea8:	000b883a 	mov	r5,zero
  805eac:	0005883a 	mov	r2,zero
  805eb0:	003e2e06 	br	80576c <__alt_mem_onchip_mem+0xff7fd76c>
  805eb4:	0401ffc4 	movi	r16,2047
  805eb8:	003e1406 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805ebc:	0005883a 	mov	r2,zero
  805ec0:	003f7506 	br	805c98 <__alt_mem_onchip_mem+0xff7fdc98>
  805ec4:	0005883a 	mov	r2,zero
  805ec8:	0009883a 	mov	r4,zero
  805ecc:	003e7806 	br	8058b0 <__alt_mem_onchip_mem+0xff7fd8b0>
  805ed0:	123ff804 	addi	r8,r2,-32
  805ed4:	01000804 	movi	r4,32
  805ed8:	1a10d83a 	srl	r8,r3,r8
  805edc:	11002526 	beq	r2,r4,805f74 <__subdf3+0x8ec>
  805ee0:	01001004 	movi	r4,64
  805ee4:	2085c83a 	sub	r2,r4,r2
  805ee8:	1884983a 	sll	r2,r3,r2
  805eec:	1444b03a 	or	r2,r2,r17
  805ef0:	1004c03a 	cmpne	r2,r2,zero
  805ef4:	40a2b03a 	or	r17,r8,r2
  805ef8:	0005883a 	mov	r2,zero
  805efc:	003f1606 	br	805b58 <__alt_mem_onchip_mem+0xff7fdb58>
  805f00:	02000434 	movhi	r8,16
  805f04:	0009883a 	mov	r4,zero
  805f08:	423fffc4 	addi	r8,r8,-1
  805f0c:	00bfffc4 	movi	r2,-1
  805f10:	0401ffc4 	movi	r16,2047
  805f14:	003e6606 	br	8058b0 <__alt_mem_onchip_mem+0xff7fd8b0>
  805f18:	1c62b03a 	or	r17,r3,r17
  805f1c:	8822c03a 	cmpne	r17,r17,zero
  805f20:	0005883a 	mov	r2,zero
  805f24:	003f9906 	br	805d8c <__alt_mem_onchip_mem+0xff7fdd8c>
  805f28:	2807883a 	mov	r3,r5
  805f2c:	3023883a 	mov	r17,r6
  805f30:	0401ffc4 	movi	r16,2047
  805f34:	003df506 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805f38:	2807883a 	mov	r3,r5
  805f3c:	3023883a 	mov	r17,r6
  805f40:	003df206 	br	80570c <__alt_mem_onchip_mem+0xff7fd70c>
  805f44:	123ff804 	addi	r8,r2,-32
  805f48:	01000804 	movi	r4,32
  805f4c:	1a10d83a 	srl	r8,r3,r8
  805f50:	11000a26 	beq	r2,r4,805f7c <__subdf3+0x8f4>
  805f54:	01001004 	movi	r4,64
  805f58:	2085c83a 	sub	r2,r4,r2
  805f5c:	1884983a 	sll	r2,r3,r2
  805f60:	1444b03a 	or	r2,r2,r17
  805f64:	1004c03a 	cmpne	r2,r2,zero
  805f68:	40a2b03a 	or	r17,r8,r2
  805f6c:	0005883a 	mov	r2,zero
  805f70:	003f8606 	br	805d8c <__alt_mem_onchip_mem+0xff7fdd8c>
  805f74:	0005883a 	mov	r2,zero
  805f78:	003fdc06 	br	805eec <__alt_mem_onchip_mem+0xff7fdeec>
  805f7c:	0005883a 	mov	r2,zero
  805f80:	003ff706 	br	805f60 <__alt_mem_onchip_mem+0xff7fdf60>

00805f84 <__floatunsidf>:
  805f84:	defffe04 	addi	sp,sp,-8
  805f88:	dc000015 	stw	r16,0(sp)
  805f8c:	dfc00115 	stw	ra,4(sp)
  805f90:	2021883a 	mov	r16,r4
  805f94:	20002226 	beq	r4,zero,806020 <__floatunsidf+0x9c>
  805f98:	080602c0 	call	80602c <__clzsi2>
  805f9c:	01010784 	movi	r4,1054
  805fa0:	2089c83a 	sub	r4,r4,r2
  805fa4:	01810cc4 	movi	r6,1075
  805fa8:	310dc83a 	sub	r6,r6,r4
  805fac:	00c007c4 	movi	r3,31
  805fb0:	1980120e 	bge	r3,r6,805ffc <__floatunsidf+0x78>
  805fb4:	00c104c4 	movi	r3,1043
  805fb8:	1907c83a 	sub	r3,r3,r4
  805fbc:	80ca983a 	sll	r5,r16,r3
  805fc0:	00800434 	movhi	r2,16
  805fc4:	10bfffc4 	addi	r2,r2,-1
  805fc8:	2101ffcc 	andi	r4,r4,2047
  805fcc:	0021883a 	mov	r16,zero
  805fd0:	288a703a 	and	r5,r5,r2
  805fd4:	2008953a 	slli	r4,r4,20
  805fd8:	00c00434 	movhi	r3,16
  805fdc:	18ffffc4 	addi	r3,r3,-1
  805fe0:	28c6703a 	and	r3,r5,r3
  805fe4:	8005883a 	mov	r2,r16
  805fe8:	1906b03a 	or	r3,r3,r4
  805fec:	dfc00117 	ldw	ra,4(sp)
  805ff0:	dc000017 	ldw	r16,0(sp)
  805ff4:	dec00204 	addi	sp,sp,8
  805ff8:	f800283a 	ret
  805ffc:	00c002c4 	movi	r3,11
  806000:	188bc83a 	sub	r5,r3,r2
  806004:	814ad83a 	srl	r5,r16,r5
  806008:	00c00434 	movhi	r3,16
  80600c:	18ffffc4 	addi	r3,r3,-1
  806010:	81a0983a 	sll	r16,r16,r6
  806014:	2101ffcc 	andi	r4,r4,2047
  806018:	28ca703a 	and	r5,r5,r3
  80601c:	003fed06 	br	805fd4 <__alt_mem_onchip_mem+0xff7fdfd4>
  806020:	0009883a 	mov	r4,zero
  806024:	000b883a 	mov	r5,zero
  806028:	003fea06 	br	805fd4 <__alt_mem_onchip_mem+0xff7fdfd4>

0080602c <__clzsi2>:
  80602c:	00bfffd4 	movui	r2,65535
  806030:	11000536 	bltu	r2,r4,806048 <__clzsi2+0x1c>
  806034:	00803fc4 	movi	r2,255
  806038:	11000f36 	bltu	r2,r4,806078 <__clzsi2+0x4c>
  80603c:	00800804 	movi	r2,32
  806040:	0007883a 	mov	r3,zero
  806044:	00000506 	br	80605c <__clzsi2+0x30>
  806048:	00804034 	movhi	r2,256
  80604c:	10bfffc4 	addi	r2,r2,-1
  806050:	11000c2e 	bgeu	r2,r4,806084 <__clzsi2+0x58>
  806054:	00800204 	movi	r2,8
  806058:	00c00604 	movi	r3,24
  80605c:	20c8d83a 	srl	r4,r4,r3
  806060:	00c02074 	movhi	r3,129
  806064:	18d43284 	addi	r3,r3,20682
  806068:	1909883a 	add	r4,r3,r4
  80606c:	20c00003 	ldbu	r3,0(r4)
  806070:	10c5c83a 	sub	r2,r2,r3
  806074:	f800283a 	ret
  806078:	00800604 	movi	r2,24
  80607c:	00c00204 	movi	r3,8
  806080:	003ff606 	br	80605c <__alt_mem_onchip_mem+0xff7fe05c>
  806084:	00800404 	movi	r2,16
  806088:	1007883a 	mov	r3,r2
  80608c:	003ff306 	br	80605c <__alt_mem_onchip_mem+0xff7fe05c>

00806090 <_printf_r>:
  806090:	defffd04 	addi	sp,sp,-12
  806094:	2805883a 	mov	r2,r5
  806098:	dfc00015 	stw	ra,0(sp)
  80609c:	d9800115 	stw	r6,4(sp)
  8060a0:	d9c00215 	stw	r7,8(sp)
  8060a4:	21400217 	ldw	r5,8(r4)
  8060a8:	d9c00104 	addi	r7,sp,4
  8060ac:	100d883a 	mov	r6,r2
  8060b0:	08062680 	call	806268 <___vfprintf_internal_r>
  8060b4:	dfc00017 	ldw	ra,0(sp)
  8060b8:	dec00304 	addi	sp,sp,12
  8060bc:	f800283a 	ret

008060c0 <printf>:
  8060c0:	defffc04 	addi	sp,sp,-16
  8060c4:	dfc00015 	stw	ra,0(sp)
  8060c8:	d9400115 	stw	r5,4(sp)
  8060cc:	d9800215 	stw	r6,8(sp)
  8060d0:	d9c00315 	stw	r7,12(sp)
  8060d4:	00802074 	movhi	r2,129
  8060d8:	109cbc04 	addi	r2,r2,29424
  8060dc:	10800017 	ldw	r2,0(r2)
  8060e0:	200b883a 	mov	r5,r4
  8060e4:	d9800104 	addi	r6,sp,4
  8060e8:	11000217 	ldw	r4,8(r2)
  8060ec:	08084600 	call	808460 <__vfprintf_internal>
  8060f0:	dfc00017 	ldw	ra,0(sp)
  8060f4:	dec00404 	addi	sp,sp,16
  8060f8:	f800283a 	ret

008060fc <_puts_r>:
  8060fc:	defff604 	addi	sp,sp,-40
  806100:	dc000715 	stw	r16,28(sp)
  806104:	2021883a 	mov	r16,r4
  806108:	2809883a 	mov	r4,r5
  80610c:	dc400815 	stw	r17,32(sp)
  806110:	dfc00915 	stw	ra,36(sp)
  806114:	2823883a 	mov	r17,r5
  806118:	08061d00 	call	8061d0 <strlen>
  80611c:	10c00044 	addi	r3,r2,1
  806120:	d8800115 	stw	r2,4(sp)
  806124:	00802074 	movhi	r2,129
  806128:	10947304 	addi	r2,r2,20940
  80612c:	d8800215 	stw	r2,8(sp)
  806130:	00800044 	movi	r2,1
  806134:	d8800315 	stw	r2,12(sp)
  806138:	00800084 	movi	r2,2
  80613c:	dc400015 	stw	r17,0(sp)
  806140:	d8c00615 	stw	r3,24(sp)
  806144:	dec00415 	stw	sp,16(sp)
  806148:	d8800515 	stw	r2,20(sp)
  80614c:	80000226 	beq	r16,zero,806158 <_puts_r+0x5c>
  806150:	80800e17 	ldw	r2,56(r16)
  806154:	10001426 	beq	r2,zero,8061a8 <_puts_r+0xac>
  806158:	81400217 	ldw	r5,8(r16)
  80615c:	2880030b 	ldhu	r2,12(r5)
  806160:	10c8000c 	andi	r3,r2,8192
  806164:	1800061e 	bne	r3,zero,806180 <_puts_r+0x84>
  806168:	29001917 	ldw	r4,100(r5)
  80616c:	00f7ffc4 	movi	r3,-8193
  806170:	10880014 	ori	r2,r2,8192
  806174:	20c6703a 	and	r3,r4,r3
  806178:	2880030d 	sth	r2,12(r5)
  80617c:	28c01915 	stw	r3,100(r5)
  806180:	d9800404 	addi	r6,sp,16
  806184:	8009883a 	mov	r4,r16
  806188:	080a9900 	call	80a990 <__sfvwrite_r>
  80618c:	1000091e 	bne	r2,zero,8061b4 <_puts_r+0xb8>
  806190:	00800284 	movi	r2,10
  806194:	dfc00917 	ldw	ra,36(sp)
  806198:	dc400817 	ldw	r17,32(sp)
  80619c:	dc000717 	ldw	r16,28(sp)
  8061a0:	dec00a04 	addi	sp,sp,40
  8061a4:	f800283a 	ret
  8061a8:	8009883a 	mov	r4,r16
  8061ac:	080a50c0 	call	80a50c <__sinit>
  8061b0:	003fe906 	br	806158 <__alt_mem_onchip_mem+0xff7fe158>
  8061b4:	00bfffc4 	movi	r2,-1
  8061b8:	003ff606 	br	806194 <__alt_mem_onchip_mem+0xff7fe194>

008061bc <puts>:
  8061bc:	00802074 	movhi	r2,129
  8061c0:	109cbc04 	addi	r2,r2,29424
  8061c4:	200b883a 	mov	r5,r4
  8061c8:	11000017 	ldw	r4,0(r2)
  8061cc:	08060fc1 	jmpi	8060fc <_puts_r>

008061d0 <strlen>:
  8061d0:	208000cc 	andi	r2,r4,3
  8061d4:	10002026 	beq	r2,zero,806258 <strlen+0x88>
  8061d8:	20800007 	ldb	r2,0(r4)
  8061dc:	10002026 	beq	r2,zero,806260 <strlen+0x90>
  8061e0:	2005883a 	mov	r2,r4
  8061e4:	00000206 	br	8061f0 <strlen+0x20>
  8061e8:	10c00007 	ldb	r3,0(r2)
  8061ec:	18001826 	beq	r3,zero,806250 <strlen+0x80>
  8061f0:	10800044 	addi	r2,r2,1
  8061f4:	10c000cc 	andi	r3,r2,3
  8061f8:	183ffb1e 	bne	r3,zero,8061e8 <__alt_mem_onchip_mem+0xff7fe1e8>
  8061fc:	10c00017 	ldw	r3,0(r2)
  806200:	01ffbff4 	movhi	r7,65279
  806204:	39ffbfc4 	addi	r7,r7,-257
  806208:	00ca303a 	nor	r5,zero,r3
  80620c:	01a02074 	movhi	r6,32897
  806210:	19c7883a 	add	r3,r3,r7
  806214:	31a02004 	addi	r6,r6,-32640
  806218:	1946703a 	and	r3,r3,r5
  80621c:	1986703a 	and	r3,r3,r6
  806220:	1800091e 	bne	r3,zero,806248 <strlen+0x78>
  806224:	10800104 	addi	r2,r2,4
  806228:	10c00017 	ldw	r3,0(r2)
  80622c:	19cb883a 	add	r5,r3,r7
  806230:	00c6303a 	nor	r3,zero,r3
  806234:	28c6703a 	and	r3,r5,r3
  806238:	1986703a 	and	r3,r3,r6
  80623c:	183ff926 	beq	r3,zero,806224 <__alt_mem_onchip_mem+0xff7fe224>
  806240:	00000106 	br	806248 <strlen+0x78>
  806244:	10800044 	addi	r2,r2,1
  806248:	10c00007 	ldb	r3,0(r2)
  80624c:	183ffd1e 	bne	r3,zero,806244 <__alt_mem_onchip_mem+0xff7fe244>
  806250:	1105c83a 	sub	r2,r2,r4
  806254:	f800283a 	ret
  806258:	2005883a 	mov	r2,r4
  80625c:	003fe706 	br	8061fc <__alt_mem_onchip_mem+0xff7fe1fc>
  806260:	0005883a 	mov	r2,zero
  806264:	f800283a 	ret

00806268 <___vfprintf_internal_r>:
  806268:	deffb804 	addi	sp,sp,-288
  80626c:	dfc04715 	stw	ra,284(sp)
  806270:	ddc04515 	stw	r23,276(sp)
  806274:	dd404315 	stw	r21,268(sp)
  806278:	d9002c15 	stw	r4,176(sp)
  80627c:	282f883a 	mov	r23,r5
  806280:	302b883a 	mov	r21,r6
  806284:	d9c02d15 	stw	r7,180(sp)
  806288:	df004615 	stw	fp,280(sp)
  80628c:	dd804415 	stw	r22,272(sp)
  806290:	dd004215 	stw	r20,264(sp)
  806294:	dcc04115 	stw	r19,260(sp)
  806298:	dc804015 	stw	r18,256(sp)
  80629c:	dc403f15 	stw	r17,252(sp)
  8062a0:	dc003e15 	stw	r16,248(sp)
  8062a4:	080b0800 	call	80b080 <_localeconv_r>
  8062a8:	10800017 	ldw	r2,0(r2)
  8062ac:	1009883a 	mov	r4,r2
  8062b0:	d8803415 	stw	r2,208(sp)
  8062b4:	08061d00 	call	8061d0 <strlen>
  8062b8:	d8803715 	stw	r2,220(sp)
  8062bc:	d8802c17 	ldw	r2,176(sp)
  8062c0:	10000226 	beq	r2,zero,8062cc <___vfprintf_internal_r+0x64>
  8062c4:	10800e17 	ldw	r2,56(r2)
  8062c8:	1000f926 	beq	r2,zero,8066b0 <___vfprintf_internal_r+0x448>
  8062cc:	b880030b 	ldhu	r2,12(r23)
  8062d0:	10c8000c 	andi	r3,r2,8192
  8062d4:	1800061e 	bne	r3,zero,8062f0 <___vfprintf_internal_r+0x88>
  8062d8:	b9001917 	ldw	r4,100(r23)
  8062dc:	00f7ffc4 	movi	r3,-8193
  8062e0:	10880014 	ori	r2,r2,8192
  8062e4:	20c6703a 	and	r3,r4,r3
  8062e8:	b880030d 	sth	r2,12(r23)
  8062ec:	b8c01915 	stw	r3,100(r23)
  8062f0:	10c0020c 	andi	r3,r2,8
  8062f4:	1800c126 	beq	r3,zero,8065fc <___vfprintf_internal_r+0x394>
  8062f8:	b8c00417 	ldw	r3,16(r23)
  8062fc:	1800bf26 	beq	r3,zero,8065fc <___vfprintf_internal_r+0x394>
  806300:	1080068c 	andi	r2,r2,26
  806304:	00c00284 	movi	r3,10
  806308:	10c0c426 	beq	r2,r3,80661c <___vfprintf_internal_r+0x3b4>
  80630c:	d8c00404 	addi	r3,sp,16
  806310:	05002074 	movhi	r20,129
  806314:	d9001e04 	addi	r4,sp,120
  806318:	a5148484 	addi	r20,r20,21010
  80631c:	d8c01e15 	stw	r3,120(sp)
  806320:	d8002015 	stw	zero,128(sp)
  806324:	d8001f15 	stw	zero,124(sp)
  806328:	d8003315 	stw	zero,204(sp)
  80632c:	d8003615 	stw	zero,216(sp)
  806330:	d8003815 	stw	zero,224(sp)
  806334:	1811883a 	mov	r8,r3
  806338:	d8003915 	stw	zero,228(sp)
  80633c:	d8003a15 	stw	zero,232(sp)
  806340:	d8002f15 	stw	zero,188(sp)
  806344:	d9002815 	stw	r4,160(sp)
  806348:	a8800007 	ldb	r2,0(r21)
  80634c:	10027b26 	beq	r2,zero,806d3c <___vfprintf_internal_r+0xad4>
  806350:	00c00944 	movi	r3,37
  806354:	a821883a 	mov	r16,r21
  806358:	10c0021e 	bne	r2,r3,806364 <___vfprintf_internal_r+0xfc>
  80635c:	00001406 	br	8063b0 <___vfprintf_internal_r+0x148>
  806360:	10c00326 	beq	r2,r3,806370 <___vfprintf_internal_r+0x108>
  806364:	84000044 	addi	r16,r16,1
  806368:	80800007 	ldb	r2,0(r16)
  80636c:	103ffc1e 	bne	r2,zero,806360 <__alt_mem_onchip_mem+0xff7fe360>
  806370:	8563c83a 	sub	r17,r16,r21
  806374:	88000e26 	beq	r17,zero,8063b0 <___vfprintf_internal_r+0x148>
  806378:	d8c02017 	ldw	r3,128(sp)
  80637c:	d8801f17 	ldw	r2,124(sp)
  806380:	45400015 	stw	r21,0(r8)
  806384:	1c47883a 	add	r3,r3,r17
  806388:	10800044 	addi	r2,r2,1
  80638c:	d8c02015 	stw	r3,128(sp)
  806390:	44400115 	stw	r17,4(r8)
  806394:	d8801f15 	stw	r2,124(sp)
  806398:	00c001c4 	movi	r3,7
  80639c:	1880a716 	blt	r3,r2,80663c <___vfprintf_internal_r+0x3d4>
  8063a0:	42000204 	addi	r8,r8,8
  8063a4:	d9402f17 	ldw	r5,188(sp)
  8063a8:	2c4b883a 	add	r5,r5,r17
  8063ac:	d9402f15 	stw	r5,188(sp)
  8063b0:	80800007 	ldb	r2,0(r16)
  8063b4:	1000a826 	beq	r2,zero,806658 <___vfprintf_internal_r+0x3f0>
  8063b8:	84400047 	ldb	r17,1(r16)
  8063bc:	00bfffc4 	movi	r2,-1
  8063c0:	85400044 	addi	r21,r16,1
  8063c4:	d8002785 	stb	zero,158(sp)
  8063c8:	0007883a 	mov	r3,zero
  8063cc:	000f883a 	mov	r7,zero
  8063d0:	d8802915 	stw	r2,164(sp)
  8063d4:	d8003115 	stw	zero,196(sp)
  8063d8:	0025883a 	mov	r18,zero
  8063dc:	01401604 	movi	r5,88
  8063e0:	01800244 	movi	r6,9
  8063e4:	02800a84 	movi	r10,42
  8063e8:	02401b04 	movi	r9,108
  8063ec:	ad400044 	addi	r21,r21,1
  8063f0:	88bff804 	addi	r2,r17,-32
  8063f4:	28830436 	bltu	r5,r2,807008 <___vfprintf_internal_r+0xda0>
  8063f8:	100490ba 	slli	r2,r2,2
  8063fc:	01002034 	movhi	r4,128
  806400:	21190404 	addi	r4,r4,25616
  806404:	1105883a 	add	r2,r2,r4
  806408:	10800017 	ldw	r2,0(r2)
  80640c:	1000683a 	jmp	r2
  806410:	00806f28 	cmpgeui	r2,zero,444
  806414:	00807008 	cmpgei	r2,zero,448
  806418:	00807008 	cmpgei	r2,zero,448
  80641c:	00806f48 	cmpgei	r2,zero,445
  806420:	00807008 	cmpgei	r2,zero,448
  806424:	00807008 	cmpgei	r2,zero,448
  806428:	00807008 	cmpgei	r2,zero,448
  80642c:	00807008 	cmpgei	r2,zero,448
  806430:	00807008 	cmpgei	r2,zero,448
  806434:	00807008 	cmpgei	r2,zero,448
  806438:	008066bc 	xorhi	r2,zero,410
  80643c:	00806e64 	muli	r2,zero,441
  806440:	00807008 	cmpgei	r2,zero,448
  806444:	00806584 	movi	r2,406
  806448:	008066e4 	muli	r2,zero,411
  80644c:	00807008 	cmpgei	r2,zero,448
  806450:	00806724 	muli	r2,zero,412
  806454:	00806730 	cmpltui	r2,zero,412
  806458:	00806730 	cmpltui	r2,zero,412
  80645c:	00806730 	cmpltui	r2,zero,412
  806460:	00806730 	cmpltui	r2,zero,412
  806464:	00806730 	cmpltui	r2,zero,412
  806468:	00806730 	cmpltui	r2,zero,412
  80646c:	00806730 	cmpltui	r2,zero,412
  806470:	00806730 	cmpltui	r2,zero,412
  806474:	00806730 	cmpltui	r2,zero,412
  806478:	00807008 	cmpgei	r2,zero,448
  80647c:	00807008 	cmpgei	r2,zero,448
  806480:	00807008 	cmpgei	r2,zero,448
  806484:	00807008 	cmpgei	r2,zero,448
  806488:	00807008 	cmpgei	r2,zero,448
  80648c:	00807008 	cmpgei	r2,zero,448
  806490:	00807008 	cmpgei	r2,zero,448
  806494:	00807008 	cmpgei	r2,zero,448
  806498:	00807008 	cmpgei	r2,zero,448
  80649c:	00807008 	cmpgei	r2,zero,448
  8064a0:	00806764 	muli	r2,zero,413
  8064a4:	00806820 	cmpeqi	r2,zero,416
  8064a8:	00807008 	cmpgei	r2,zero,448
  8064ac:	00806820 	cmpeqi	r2,zero,416
  8064b0:	00807008 	cmpgei	r2,zero,448
  8064b4:	00807008 	cmpgei	r2,zero,448
  8064b8:	00807008 	cmpgei	r2,zero,448
  8064bc:	00807008 	cmpgei	r2,zero,448
  8064c0:	008068c0 	call	8068c <__reset-0x77f974>
  8064c4:	00807008 	cmpgei	r2,zero,448
  8064c8:	00807008 	cmpgei	r2,zero,448
  8064cc:	008068cc 	andi	r2,zero,419
  8064d0:	00807008 	cmpgei	r2,zero,448
  8064d4:	00807008 	cmpgei	r2,zero,448
  8064d8:	00807008 	cmpgei	r2,zero,448
  8064dc:	00807008 	cmpgei	r2,zero,448
  8064e0:	00807008 	cmpgei	r2,zero,448
  8064e4:	00806d44 	movi	r2,437
  8064e8:	00807008 	cmpgei	r2,zero,448
  8064ec:	00807008 	cmpgei	r2,zero,448
  8064f0:	00806da4 	muli	r2,zero,438
  8064f4:	00807008 	cmpgei	r2,zero,448
  8064f8:	00807008 	cmpgei	r2,zero,448
  8064fc:	00807008 	cmpgei	r2,zero,448
  806500:	00807008 	cmpgei	r2,zero,448
  806504:	00807008 	cmpgei	r2,zero,448
  806508:	00807008 	cmpgei	r2,zero,448
  80650c:	00807008 	cmpgei	r2,zero,448
  806510:	00807008 	cmpgei	r2,zero,448
  806514:	00807008 	cmpgei	r2,zero,448
  806518:	00807008 	cmpgei	r2,zero,448
  80651c:	00806fb4 	movhi	r2,446
  806520:	00806f54 	movui	r2,445
  806524:	00806820 	cmpeqi	r2,zero,416
  806528:	00806820 	cmpeqi	r2,zero,416
  80652c:	00806820 	cmpeqi	r2,zero,416
  806530:	00806f64 	muli	r2,zero,445
  806534:	00806f54 	movui	r2,445
  806538:	00807008 	cmpgei	r2,zero,448
  80653c:	00807008 	cmpgei	r2,zero,448
  806540:	00806f70 	cmpltui	r2,zero,445
  806544:	00807008 	cmpgei	r2,zero,448
  806548:	00806f80 	call	806f8 <__reset-0x77f908>
  80654c:	00806e54 	movui	r2,441
  806550:	00806590 	cmplti	r2,zero,406
  806554:	00806e74 	movhi	r2,441
  806558:	00807008 	cmpgei	r2,zero,448
  80655c:	00806e80 	call	806e8 <__reset-0x77f918>
  806560:	00807008 	cmpgei	r2,zero,448
  806564:	00806edc 	xori	r2,zero,443
  806568:	00807008 	cmpgei	r2,zero,448
  80656c:	00807008 	cmpgei	r2,zero,448
  806570:	00806eec 	andhi	r2,zero,443
  806574:	d9003117 	ldw	r4,196(sp)
  806578:	d8802d15 	stw	r2,180(sp)
  80657c:	0109c83a 	sub	r4,zero,r4
  806580:	d9003115 	stw	r4,196(sp)
  806584:	94800114 	ori	r18,r18,4
  806588:	ac400007 	ldb	r17,0(r21)
  80658c:	003f9706 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  806590:	00800c04 	movi	r2,48
  806594:	d9002d17 	ldw	r4,180(sp)
  806598:	d9402917 	ldw	r5,164(sp)
  80659c:	d8802705 	stb	r2,156(sp)
  8065a0:	00801e04 	movi	r2,120
  8065a4:	d8802745 	stb	r2,157(sp)
  8065a8:	d8002785 	stb	zero,158(sp)
  8065ac:	20c00104 	addi	r3,r4,4
  8065b0:	24c00017 	ldw	r19,0(r4)
  8065b4:	002d883a 	mov	r22,zero
  8065b8:	90800094 	ori	r2,r18,2
  8065bc:	28029a16 	blt	r5,zero,807028 <___vfprintf_internal_r+0xdc0>
  8065c0:	00bfdfc4 	movi	r2,-129
  8065c4:	90a4703a 	and	r18,r18,r2
  8065c8:	d8c02d15 	stw	r3,180(sp)
  8065cc:	94800094 	ori	r18,r18,2
  8065d0:	9802871e 	bne	r19,zero,806ff0 <___vfprintf_internal_r+0xd88>
  8065d4:	00802074 	movhi	r2,129
  8065d8:	10947d04 	addi	r2,r2,20980
  8065dc:	d8803915 	stw	r2,228(sp)
  8065e0:	04401e04 	movi	r17,120
  8065e4:	d8802917 	ldw	r2,164(sp)
  8065e8:	0039883a 	mov	fp,zero
  8065ec:	1001e926 	beq	r2,zero,806d94 <___vfprintf_internal_r+0xb2c>
  8065f0:	0027883a 	mov	r19,zero
  8065f4:	002d883a 	mov	r22,zero
  8065f8:	00020506 	br	806e10 <___vfprintf_internal_r+0xba8>
  8065fc:	d9002c17 	ldw	r4,176(sp)
  806600:	b80b883a 	mov	r5,r23
  806604:	08085380 	call	808538 <__swsetup_r>
  806608:	1005ac1e 	bne	r2,zero,807cbc <___vfprintf_internal_r+0x1a54>
  80660c:	b880030b 	ldhu	r2,12(r23)
  806610:	00c00284 	movi	r3,10
  806614:	1080068c 	andi	r2,r2,26
  806618:	10ff3c1e 	bne	r2,r3,80630c <__alt_mem_onchip_mem+0xff7fe30c>
  80661c:	b880038f 	ldh	r2,14(r23)
  806620:	103f3a16 	blt	r2,zero,80630c <__alt_mem_onchip_mem+0xff7fe30c>
  806624:	d9c02d17 	ldw	r7,180(sp)
  806628:	d9002c17 	ldw	r4,176(sp)
  80662c:	a80d883a 	mov	r6,r21
  806630:	b80b883a 	mov	r5,r23
  806634:	080847c0 	call	80847c <__sbprintf>
  806638:	00001106 	br	806680 <___vfprintf_internal_r+0x418>
  80663c:	d9002c17 	ldw	r4,176(sp)
  806640:	d9801e04 	addi	r6,sp,120
  806644:	b80b883a 	mov	r5,r23
  806648:	080d8640 	call	80d864 <__sprint_r>
  80664c:	1000081e 	bne	r2,zero,806670 <___vfprintf_internal_r+0x408>
  806650:	da000404 	addi	r8,sp,16
  806654:	003f5306 	br	8063a4 <__alt_mem_onchip_mem+0xff7fe3a4>
  806658:	d8802017 	ldw	r2,128(sp)
  80665c:	10000426 	beq	r2,zero,806670 <___vfprintf_internal_r+0x408>
  806660:	d9002c17 	ldw	r4,176(sp)
  806664:	d9801e04 	addi	r6,sp,120
  806668:	b80b883a 	mov	r5,r23
  80666c:	080d8640 	call	80d864 <__sprint_r>
  806670:	b880030b 	ldhu	r2,12(r23)
  806674:	1080100c 	andi	r2,r2,64
  806678:	1005901e 	bne	r2,zero,807cbc <___vfprintf_internal_r+0x1a54>
  80667c:	d8802f17 	ldw	r2,188(sp)
  806680:	dfc04717 	ldw	ra,284(sp)
  806684:	df004617 	ldw	fp,280(sp)
  806688:	ddc04517 	ldw	r23,276(sp)
  80668c:	dd804417 	ldw	r22,272(sp)
  806690:	dd404317 	ldw	r21,268(sp)
  806694:	dd004217 	ldw	r20,264(sp)
  806698:	dcc04117 	ldw	r19,260(sp)
  80669c:	dc804017 	ldw	r18,256(sp)
  8066a0:	dc403f17 	ldw	r17,252(sp)
  8066a4:	dc003e17 	ldw	r16,248(sp)
  8066a8:	dec04804 	addi	sp,sp,288
  8066ac:	f800283a 	ret
  8066b0:	d9002c17 	ldw	r4,176(sp)
  8066b4:	080a50c0 	call	80a50c <__sinit>
  8066b8:	003f0406 	br	8062cc <__alt_mem_onchip_mem+0xff7fe2cc>
  8066bc:	d8802d17 	ldw	r2,180(sp)
  8066c0:	d9002d17 	ldw	r4,180(sp)
  8066c4:	10800017 	ldw	r2,0(r2)
  8066c8:	d8803115 	stw	r2,196(sp)
  8066cc:	20800104 	addi	r2,r4,4
  8066d0:	d9003117 	ldw	r4,196(sp)
  8066d4:	203fa716 	blt	r4,zero,806574 <__alt_mem_onchip_mem+0xff7fe574>
  8066d8:	d8802d15 	stw	r2,180(sp)
  8066dc:	ac400007 	ldb	r17,0(r21)
  8066e0:	003f4206 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  8066e4:	ac400007 	ldb	r17,0(r21)
  8066e8:	aac00044 	addi	r11,r21,1
  8066ec:	8a872826 	beq	r17,r10,808390 <___vfprintf_internal_r+0x2128>
  8066f0:	88bff404 	addi	r2,r17,-48
  8066f4:	0009883a 	mov	r4,zero
  8066f8:	30867d36 	bltu	r6,r2,8080f0 <___vfprintf_internal_r+0x1e88>
  8066fc:	5c400007 	ldb	r17,0(r11)
  806700:	210002a4 	muli	r4,r4,10
  806704:	5d400044 	addi	r21,r11,1
  806708:	a817883a 	mov	r11,r21
  80670c:	2089883a 	add	r4,r4,r2
  806710:	88bff404 	addi	r2,r17,-48
  806714:	30bff92e 	bgeu	r6,r2,8066fc <__alt_mem_onchip_mem+0xff7fe6fc>
  806718:	2005c916 	blt	r4,zero,807e40 <___vfprintf_internal_r+0x1bd8>
  80671c:	d9002915 	stw	r4,164(sp)
  806720:	003f3306 	br	8063f0 <__alt_mem_onchip_mem+0xff7fe3f0>
  806724:	94802014 	ori	r18,r18,128
  806728:	ac400007 	ldb	r17,0(r21)
  80672c:	003f2f06 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  806730:	a809883a 	mov	r4,r21
  806734:	d8003115 	stw	zero,196(sp)
  806738:	88bff404 	addi	r2,r17,-48
  80673c:	0017883a 	mov	r11,zero
  806740:	24400007 	ldb	r17,0(r4)
  806744:	5ac002a4 	muli	r11,r11,10
  806748:	ad400044 	addi	r21,r21,1
  80674c:	a809883a 	mov	r4,r21
  806750:	12d7883a 	add	r11,r2,r11
  806754:	88bff404 	addi	r2,r17,-48
  806758:	30bff92e 	bgeu	r6,r2,806740 <__alt_mem_onchip_mem+0xff7fe740>
  80675c:	dac03115 	stw	r11,196(sp)
  806760:	003f2306 	br	8063f0 <__alt_mem_onchip_mem+0xff7fe3f0>
  806764:	18c03fcc 	andi	r3,r3,255
  806768:	18072b1e 	bne	r3,zero,808418 <___vfprintf_internal_r+0x21b0>
  80676c:	94800414 	ori	r18,r18,16
  806770:	9080080c 	andi	r2,r18,32
  806774:	10037b26 	beq	r2,zero,807564 <___vfprintf_internal_r+0x12fc>
  806778:	d9402d17 	ldw	r5,180(sp)
  80677c:	28800117 	ldw	r2,4(r5)
  806780:	2cc00017 	ldw	r19,0(r5)
  806784:	29400204 	addi	r5,r5,8
  806788:	d9402d15 	stw	r5,180(sp)
  80678c:	102d883a 	mov	r22,r2
  806790:	10044b16 	blt	r2,zero,8078c0 <___vfprintf_internal_r+0x1658>
  806794:	d9402917 	ldw	r5,164(sp)
  806798:	df002783 	ldbu	fp,158(sp)
  80679c:	2803bc16 	blt	r5,zero,807690 <___vfprintf_internal_r+0x1428>
  8067a0:	00ffdfc4 	movi	r3,-129
  8067a4:	9d84b03a 	or	r2,r19,r22
  8067a8:	90e4703a 	and	r18,r18,r3
  8067ac:	10017726 	beq	r2,zero,806d8c <___vfprintf_internal_r+0xb24>
  8067b0:	b0038326 	beq	r22,zero,8075c0 <___vfprintf_internal_r+0x1358>
  8067b4:	dc402a15 	stw	r17,168(sp)
  8067b8:	dc001e04 	addi	r16,sp,120
  8067bc:	b023883a 	mov	r17,r22
  8067c0:	402d883a 	mov	r22,r8
  8067c4:	9809883a 	mov	r4,r19
  8067c8:	880b883a 	mov	r5,r17
  8067cc:	01800284 	movi	r6,10
  8067d0:	000f883a 	mov	r7,zero
  8067d4:	080fc5c0 	call	80fc5c <__umoddi3>
  8067d8:	10800c04 	addi	r2,r2,48
  8067dc:	843fffc4 	addi	r16,r16,-1
  8067e0:	9809883a 	mov	r4,r19
  8067e4:	880b883a 	mov	r5,r17
  8067e8:	80800005 	stb	r2,0(r16)
  8067ec:	01800284 	movi	r6,10
  8067f0:	000f883a 	mov	r7,zero
  8067f4:	080f6e40 	call	80f6e4 <__udivdi3>
  8067f8:	1027883a 	mov	r19,r2
  8067fc:	10c4b03a 	or	r2,r2,r3
  806800:	1823883a 	mov	r17,r3
  806804:	103fef1e 	bne	r2,zero,8067c4 <__alt_mem_onchip_mem+0xff7fe7c4>
  806808:	d8c02817 	ldw	r3,160(sp)
  80680c:	dc402a17 	ldw	r17,168(sp)
  806810:	b011883a 	mov	r8,r22
  806814:	1c07c83a 	sub	r3,r3,r16
  806818:	d8c02e15 	stw	r3,184(sp)
  80681c:	00005906 	br	806984 <___vfprintf_internal_r+0x71c>
  806820:	18c03fcc 	andi	r3,r3,255
  806824:	1806fa1e 	bne	r3,zero,808410 <___vfprintf_internal_r+0x21a8>
  806828:	9080020c 	andi	r2,r18,8
  80682c:	10048a26 	beq	r2,zero,807a58 <___vfprintf_internal_r+0x17f0>
  806830:	d8c02d17 	ldw	r3,180(sp)
  806834:	d9002d17 	ldw	r4,180(sp)
  806838:	d9402d17 	ldw	r5,180(sp)
  80683c:	18c00017 	ldw	r3,0(r3)
  806840:	21000117 	ldw	r4,4(r4)
  806844:	29400204 	addi	r5,r5,8
  806848:	d8c03615 	stw	r3,216(sp)
  80684c:	d9003815 	stw	r4,224(sp)
  806850:	d9402d15 	stw	r5,180(sp)
  806854:	d9003617 	ldw	r4,216(sp)
  806858:	d9403817 	ldw	r5,224(sp)
  80685c:	da003d15 	stw	r8,244(sp)
  806860:	04000044 	movi	r16,1
  806864:	080d4880 	call	80d488 <__fpclassifyd>
  806868:	da003d17 	ldw	r8,244(sp)
  80686c:	14041f1e 	bne	r2,r16,8078ec <___vfprintf_internal_r+0x1684>
  806870:	d9003617 	ldw	r4,216(sp)
  806874:	d9403817 	ldw	r5,224(sp)
  806878:	000d883a 	mov	r6,zero
  80687c:	000f883a 	mov	r7,zero
  806880:	0804e7c0 	call	804e7c <__ledf2>
  806884:	da003d17 	ldw	r8,244(sp)
  806888:	1005be16 	blt	r2,zero,807f84 <___vfprintf_internal_r+0x1d1c>
  80688c:	df002783 	ldbu	fp,158(sp)
  806890:	008011c4 	movi	r2,71
  806894:	1445330e 	bge	r2,r17,807d64 <___vfprintf_internal_r+0x1afc>
  806898:	04002074 	movhi	r16,129
  80689c:	84147504 	addi	r16,r16,20948
  8068a0:	00c000c4 	movi	r3,3
  8068a4:	00bfdfc4 	movi	r2,-129
  8068a8:	d8c02a15 	stw	r3,168(sp)
  8068ac:	90a4703a 	and	r18,r18,r2
  8068b0:	d8c02e15 	stw	r3,184(sp)
  8068b4:	d8002915 	stw	zero,164(sp)
  8068b8:	d8003215 	stw	zero,200(sp)
  8068bc:	00003706 	br	80699c <___vfprintf_internal_r+0x734>
  8068c0:	94800214 	ori	r18,r18,8
  8068c4:	ac400007 	ldb	r17,0(r21)
  8068c8:	003ec806 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  8068cc:	18c03fcc 	andi	r3,r3,255
  8068d0:	1806db1e 	bne	r3,zero,808440 <___vfprintf_internal_r+0x21d8>
  8068d4:	94800414 	ori	r18,r18,16
  8068d8:	9080080c 	andi	r2,r18,32
  8068dc:	1002d826 	beq	r2,zero,807440 <___vfprintf_internal_r+0x11d8>
  8068e0:	d9402d17 	ldw	r5,180(sp)
  8068e4:	d8c02917 	ldw	r3,164(sp)
  8068e8:	d8002785 	stb	zero,158(sp)
  8068ec:	28800204 	addi	r2,r5,8
  8068f0:	2cc00017 	ldw	r19,0(r5)
  8068f4:	2d800117 	ldw	r22,4(r5)
  8068f8:	18048f16 	blt	r3,zero,807b38 <___vfprintf_internal_r+0x18d0>
  8068fc:	013fdfc4 	movi	r4,-129
  806900:	9d86b03a 	or	r3,r19,r22
  806904:	d8802d15 	stw	r2,180(sp)
  806908:	9124703a 	and	r18,r18,r4
  80690c:	1802d91e 	bne	r3,zero,807474 <___vfprintf_internal_r+0x120c>
  806910:	d8c02917 	ldw	r3,164(sp)
  806914:	0039883a 	mov	fp,zero
  806918:	1805c326 	beq	r3,zero,808028 <___vfprintf_internal_r+0x1dc0>
  80691c:	0027883a 	mov	r19,zero
  806920:	002d883a 	mov	r22,zero
  806924:	dc001e04 	addi	r16,sp,120
  806928:	9806d0fa 	srli	r3,r19,3
  80692c:	b008977a 	slli	r4,r22,29
  806930:	b02cd0fa 	srli	r22,r22,3
  806934:	9cc001cc 	andi	r19,r19,7
  806938:	98800c04 	addi	r2,r19,48
  80693c:	843fffc4 	addi	r16,r16,-1
  806940:	20e6b03a 	or	r19,r4,r3
  806944:	80800005 	stb	r2,0(r16)
  806948:	9d86b03a 	or	r3,r19,r22
  80694c:	183ff61e 	bne	r3,zero,806928 <__alt_mem_onchip_mem+0xff7fe928>
  806950:	90c0004c 	andi	r3,r18,1
  806954:	18013b26 	beq	r3,zero,806e44 <___vfprintf_internal_r+0xbdc>
  806958:	10803fcc 	andi	r2,r2,255
  80695c:	1080201c 	xori	r2,r2,128
  806960:	10bfe004 	addi	r2,r2,-128
  806964:	00c00c04 	movi	r3,48
  806968:	10c13626 	beq	r2,r3,806e44 <___vfprintf_internal_r+0xbdc>
  80696c:	80ffffc5 	stb	r3,-1(r16)
  806970:	d8c02817 	ldw	r3,160(sp)
  806974:	80bfffc4 	addi	r2,r16,-1
  806978:	1021883a 	mov	r16,r2
  80697c:	1887c83a 	sub	r3,r3,r2
  806980:	d8c02e15 	stw	r3,184(sp)
  806984:	d8802e17 	ldw	r2,184(sp)
  806988:	d9002917 	ldw	r4,164(sp)
  80698c:	1100010e 	bge	r2,r4,806994 <___vfprintf_internal_r+0x72c>
  806990:	2005883a 	mov	r2,r4
  806994:	d8802a15 	stw	r2,168(sp)
  806998:	d8003215 	stw	zero,200(sp)
  80699c:	e7003fcc 	andi	fp,fp,255
  8069a0:	e700201c 	xori	fp,fp,128
  8069a4:	e73fe004 	addi	fp,fp,-128
  8069a8:	e0000326 	beq	fp,zero,8069b8 <___vfprintf_internal_r+0x750>
  8069ac:	d8c02a17 	ldw	r3,168(sp)
  8069b0:	18c00044 	addi	r3,r3,1
  8069b4:	d8c02a15 	stw	r3,168(sp)
  8069b8:	90c0008c 	andi	r3,r18,2
  8069bc:	d8c02b15 	stw	r3,172(sp)
  8069c0:	18000326 	beq	r3,zero,8069d0 <___vfprintf_internal_r+0x768>
  8069c4:	d8c02a17 	ldw	r3,168(sp)
  8069c8:	18c00084 	addi	r3,r3,2
  8069cc:	d8c02a15 	stw	r3,168(sp)
  8069d0:	90c0210c 	andi	r3,r18,132
  8069d4:	d8c03015 	stw	r3,192(sp)
  8069d8:	1801a31e 	bne	r3,zero,807068 <___vfprintf_internal_r+0xe00>
  8069dc:	d9003117 	ldw	r4,196(sp)
  8069e0:	d8c02a17 	ldw	r3,168(sp)
  8069e4:	20e7c83a 	sub	r19,r4,r3
  8069e8:	04c19f0e 	bge	zero,r19,807068 <___vfprintf_internal_r+0xe00>
  8069ec:	02400404 	movi	r9,16
  8069f0:	d8c02017 	ldw	r3,128(sp)
  8069f4:	d8801f17 	ldw	r2,124(sp)
  8069f8:	4cc50d0e 	bge	r9,r19,807e30 <___vfprintf_internal_r+0x1bc8>
  8069fc:	01402074 	movhi	r5,129
  806a00:	29548884 	addi	r5,r5,21026
  806a04:	dc403b15 	stw	r17,236(sp)
  806a08:	d9403515 	stw	r5,212(sp)
  806a0c:	9823883a 	mov	r17,r19
  806a10:	482d883a 	mov	r22,r9
  806a14:	9027883a 	mov	r19,r18
  806a18:	070001c4 	movi	fp,7
  806a1c:	8025883a 	mov	r18,r16
  806a20:	dc002c17 	ldw	r16,176(sp)
  806a24:	00000306 	br	806a34 <___vfprintf_internal_r+0x7cc>
  806a28:	8c7ffc04 	addi	r17,r17,-16
  806a2c:	42000204 	addi	r8,r8,8
  806a30:	b440130e 	bge	r22,r17,806a80 <___vfprintf_internal_r+0x818>
  806a34:	01002074 	movhi	r4,129
  806a38:	18c00404 	addi	r3,r3,16
  806a3c:	10800044 	addi	r2,r2,1
  806a40:	21148884 	addi	r4,r4,21026
  806a44:	41000015 	stw	r4,0(r8)
  806a48:	45800115 	stw	r22,4(r8)
  806a4c:	d8c02015 	stw	r3,128(sp)
  806a50:	d8801f15 	stw	r2,124(sp)
  806a54:	e0bff40e 	bge	fp,r2,806a28 <__alt_mem_onchip_mem+0xff7fea28>
  806a58:	d9801e04 	addi	r6,sp,120
  806a5c:	b80b883a 	mov	r5,r23
  806a60:	8009883a 	mov	r4,r16
  806a64:	080d8640 	call	80d864 <__sprint_r>
  806a68:	103f011e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  806a6c:	8c7ffc04 	addi	r17,r17,-16
  806a70:	d8c02017 	ldw	r3,128(sp)
  806a74:	d8801f17 	ldw	r2,124(sp)
  806a78:	da000404 	addi	r8,sp,16
  806a7c:	b47fed16 	blt	r22,r17,806a34 <__alt_mem_onchip_mem+0xff7fea34>
  806a80:	9021883a 	mov	r16,r18
  806a84:	9825883a 	mov	r18,r19
  806a88:	8827883a 	mov	r19,r17
  806a8c:	dc403b17 	ldw	r17,236(sp)
  806a90:	d9403517 	ldw	r5,212(sp)
  806a94:	98c7883a 	add	r3,r19,r3
  806a98:	10800044 	addi	r2,r2,1
  806a9c:	41400015 	stw	r5,0(r8)
  806aa0:	44c00115 	stw	r19,4(r8)
  806aa4:	d8c02015 	stw	r3,128(sp)
  806aa8:	d8801f15 	stw	r2,124(sp)
  806aac:	010001c4 	movi	r4,7
  806ab0:	2082a316 	blt	r4,r2,807540 <___vfprintf_internal_r+0x12d8>
  806ab4:	df002787 	ldb	fp,158(sp)
  806ab8:	42000204 	addi	r8,r8,8
  806abc:	e0000c26 	beq	fp,zero,806af0 <___vfprintf_internal_r+0x888>
  806ac0:	d8801f17 	ldw	r2,124(sp)
  806ac4:	d9002784 	addi	r4,sp,158
  806ac8:	18c00044 	addi	r3,r3,1
  806acc:	10800044 	addi	r2,r2,1
  806ad0:	41000015 	stw	r4,0(r8)
  806ad4:	01000044 	movi	r4,1
  806ad8:	41000115 	stw	r4,4(r8)
  806adc:	d8c02015 	stw	r3,128(sp)
  806ae0:	d8801f15 	stw	r2,124(sp)
  806ae4:	010001c4 	movi	r4,7
  806ae8:	20823c16 	blt	r4,r2,8073dc <___vfprintf_internal_r+0x1174>
  806aec:	42000204 	addi	r8,r8,8
  806af0:	d8802b17 	ldw	r2,172(sp)
  806af4:	10000c26 	beq	r2,zero,806b28 <___vfprintf_internal_r+0x8c0>
  806af8:	d8801f17 	ldw	r2,124(sp)
  806afc:	d9002704 	addi	r4,sp,156
  806b00:	18c00084 	addi	r3,r3,2
  806b04:	10800044 	addi	r2,r2,1
  806b08:	41000015 	stw	r4,0(r8)
  806b0c:	01000084 	movi	r4,2
  806b10:	41000115 	stw	r4,4(r8)
  806b14:	d8c02015 	stw	r3,128(sp)
  806b18:	d8801f15 	stw	r2,124(sp)
  806b1c:	010001c4 	movi	r4,7
  806b20:	20823616 	blt	r4,r2,8073fc <___vfprintf_internal_r+0x1194>
  806b24:	42000204 	addi	r8,r8,8
  806b28:	d9003017 	ldw	r4,192(sp)
  806b2c:	00802004 	movi	r2,128
  806b30:	20819926 	beq	r4,r2,807198 <___vfprintf_internal_r+0xf30>
  806b34:	d9402917 	ldw	r5,164(sp)
  806b38:	d8802e17 	ldw	r2,184(sp)
  806b3c:	28adc83a 	sub	r22,r5,r2
  806b40:	0580310e 	bge	zero,r22,806c08 <___vfprintf_internal_r+0x9a0>
  806b44:	07000404 	movi	fp,16
  806b48:	d8801f17 	ldw	r2,124(sp)
  806b4c:	e584140e 	bge	fp,r22,807ba0 <___vfprintf_internal_r+0x1938>
  806b50:	01402074 	movhi	r5,129
  806b54:	29548484 	addi	r5,r5,21010
  806b58:	dc402915 	stw	r17,164(sp)
  806b5c:	d9402b15 	stw	r5,172(sp)
  806b60:	b023883a 	mov	r17,r22
  806b64:	04c001c4 	movi	r19,7
  806b68:	a82d883a 	mov	r22,r21
  806b6c:	902b883a 	mov	r21,r18
  806b70:	8025883a 	mov	r18,r16
  806b74:	dc002c17 	ldw	r16,176(sp)
  806b78:	00000306 	br	806b88 <___vfprintf_internal_r+0x920>
  806b7c:	8c7ffc04 	addi	r17,r17,-16
  806b80:	42000204 	addi	r8,r8,8
  806b84:	e440110e 	bge	fp,r17,806bcc <___vfprintf_internal_r+0x964>
  806b88:	18c00404 	addi	r3,r3,16
  806b8c:	10800044 	addi	r2,r2,1
  806b90:	45000015 	stw	r20,0(r8)
  806b94:	47000115 	stw	fp,4(r8)
  806b98:	d8c02015 	stw	r3,128(sp)
  806b9c:	d8801f15 	stw	r2,124(sp)
  806ba0:	98bff60e 	bge	r19,r2,806b7c <__alt_mem_onchip_mem+0xff7feb7c>
  806ba4:	d9801e04 	addi	r6,sp,120
  806ba8:	b80b883a 	mov	r5,r23
  806bac:	8009883a 	mov	r4,r16
  806bb0:	080d8640 	call	80d864 <__sprint_r>
  806bb4:	103eae1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  806bb8:	8c7ffc04 	addi	r17,r17,-16
  806bbc:	d8c02017 	ldw	r3,128(sp)
  806bc0:	d8801f17 	ldw	r2,124(sp)
  806bc4:	da000404 	addi	r8,sp,16
  806bc8:	e47fef16 	blt	fp,r17,806b88 <__alt_mem_onchip_mem+0xff7feb88>
  806bcc:	9021883a 	mov	r16,r18
  806bd0:	a825883a 	mov	r18,r21
  806bd4:	b02b883a 	mov	r21,r22
  806bd8:	882d883a 	mov	r22,r17
  806bdc:	dc402917 	ldw	r17,164(sp)
  806be0:	d9002b17 	ldw	r4,172(sp)
  806be4:	1d87883a 	add	r3,r3,r22
  806be8:	10800044 	addi	r2,r2,1
  806bec:	41000015 	stw	r4,0(r8)
  806bf0:	45800115 	stw	r22,4(r8)
  806bf4:	d8c02015 	stw	r3,128(sp)
  806bf8:	d8801f15 	stw	r2,124(sp)
  806bfc:	010001c4 	movi	r4,7
  806c00:	2081ee16 	blt	r4,r2,8073bc <___vfprintf_internal_r+0x1154>
  806c04:	42000204 	addi	r8,r8,8
  806c08:	9080400c 	andi	r2,r18,256
  806c0c:	1001181e 	bne	r2,zero,807070 <___vfprintf_internal_r+0xe08>
  806c10:	d9402e17 	ldw	r5,184(sp)
  806c14:	d8801f17 	ldw	r2,124(sp)
  806c18:	44000015 	stw	r16,0(r8)
  806c1c:	1947883a 	add	r3,r3,r5
  806c20:	10800044 	addi	r2,r2,1
  806c24:	41400115 	stw	r5,4(r8)
  806c28:	d8c02015 	stw	r3,128(sp)
  806c2c:	d8801f15 	stw	r2,124(sp)
  806c30:	010001c4 	movi	r4,7
  806c34:	2081d316 	blt	r4,r2,807384 <___vfprintf_internal_r+0x111c>
  806c38:	42000204 	addi	r8,r8,8
  806c3c:	9480010c 	andi	r18,r18,4
  806c40:	90003226 	beq	r18,zero,806d0c <___vfprintf_internal_r+0xaa4>
  806c44:	d9403117 	ldw	r5,196(sp)
  806c48:	d8802a17 	ldw	r2,168(sp)
  806c4c:	28a1c83a 	sub	r16,r5,r2
  806c50:	04002e0e 	bge	zero,r16,806d0c <___vfprintf_internal_r+0xaa4>
  806c54:	04400404 	movi	r17,16
  806c58:	d8801f17 	ldw	r2,124(sp)
  806c5c:	8c04a20e 	bge	r17,r16,807ee8 <___vfprintf_internal_r+0x1c80>
  806c60:	01402074 	movhi	r5,129
  806c64:	29548884 	addi	r5,r5,21026
  806c68:	d9403515 	stw	r5,212(sp)
  806c6c:	048001c4 	movi	r18,7
  806c70:	dcc02c17 	ldw	r19,176(sp)
  806c74:	00000306 	br	806c84 <___vfprintf_internal_r+0xa1c>
  806c78:	843ffc04 	addi	r16,r16,-16
  806c7c:	42000204 	addi	r8,r8,8
  806c80:	8c00130e 	bge	r17,r16,806cd0 <___vfprintf_internal_r+0xa68>
  806c84:	01002074 	movhi	r4,129
  806c88:	18c00404 	addi	r3,r3,16
  806c8c:	10800044 	addi	r2,r2,1
  806c90:	21148884 	addi	r4,r4,21026
  806c94:	41000015 	stw	r4,0(r8)
  806c98:	44400115 	stw	r17,4(r8)
  806c9c:	d8c02015 	stw	r3,128(sp)
  806ca0:	d8801f15 	stw	r2,124(sp)
  806ca4:	90bff40e 	bge	r18,r2,806c78 <__alt_mem_onchip_mem+0xff7fec78>
  806ca8:	d9801e04 	addi	r6,sp,120
  806cac:	b80b883a 	mov	r5,r23
  806cb0:	9809883a 	mov	r4,r19
  806cb4:	080d8640 	call	80d864 <__sprint_r>
  806cb8:	103e6d1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  806cbc:	843ffc04 	addi	r16,r16,-16
  806cc0:	d8c02017 	ldw	r3,128(sp)
  806cc4:	d8801f17 	ldw	r2,124(sp)
  806cc8:	da000404 	addi	r8,sp,16
  806ccc:	8c3fed16 	blt	r17,r16,806c84 <__alt_mem_onchip_mem+0xff7fec84>
  806cd0:	d9403517 	ldw	r5,212(sp)
  806cd4:	1c07883a 	add	r3,r3,r16
  806cd8:	10800044 	addi	r2,r2,1
  806cdc:	41400015 	stw	r5,0(r8)
  806ce0:	44000115 	stw	r16,4(r8)
  806ce4:	d8c02015 	stw	r3,128(sp)
  806ce8:	d8801f15 	stw	r2,124(sp)
  806cec:	010001c4 	movi	r4,7
  806cf0:	2080060e 	bge	r4,r2,806d0c <___vfprintf_internal_r+0xaa4>
  806cf4:	d9002c17 	ldw	r4,176(sp)
  806cf8:	d9801e04 	addi	r6,sp,120
  806cfc:	b80b883a 	mov	r5,r23
  806d00:	080d8640 	call	80d864 <__sprint_r>
  806d04:	103e5a1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  806d08:	d8c02017 	ldw	r3,128(sp)
  806d0c:	d8803117 	ldw	r2,196(sp)
  806d10:	d9002a17 	ldw	r4,168(sp)
  806d14:	1100010e 	bge	r2,r4,806d1c <___vfprintf_internal_r+0xab4>
  806d18:	2005883a 	mov	r2,r4
  806d1c:	d9402f17 	ldw	r5,188(sp)
  806d20:	288b883a 	add	r5,r5,r2
  806d24:	d9402f15 	stw	r5,188(sp)
  806d28:	18019e1e 	bne	r3,zero,8073a4 <___vfprintf_internal_r+0x113c>
  806d2c:	a8800007 	ldb	r2,0(r21)
  806d30:	d8001f15 	stw	zero,124(sp)
  806d34:	da000404 	addi	r8,sp,16
  806d38:	103d851e 	bne	r2,zero,806350 <__alt_mem_onchip_mem+0xff7fe350>
  806d3c:	a821883a 	mov	r16,r21
  806d40:	003d9b06 	br	8063b0 <__alt_mem_onchip_mem+0xff7fe3b0>
  806d44:	18c03fcc 	andi	r3,r3,255
  806d48:	1805c11e 	bne	r3,zero,808450 <___vfprintf_internal_r+0x21e8>
  806d4c:	94800414 	ori	r18,r18,16
  806d50:	9080080c 	andi	r2,r18,32
  806d54:	10020c26 	beq	r2,zero,807588 <___vfprintf_internal_r+0x1320>
  806d58:	d8802d17 	ldw	r2,180(sp)
  806d5c:	d9002917 	ldw	r4,164(sp)
  806d60:	d8002785 	stb	zero,158(sp)
  806d64:	10c00204 	addi	r3,r2,8
  806d68:	14c00017 	ldw	r19,0(r2)
  806d6c:	15800117 	ldw	r22,4(r2)
  806d70:	20040f16 	blt	r4,zero,807db0 <___vfprintf_internal_r+0x1b48>
  806d74:	013fdfc4 	movi	r4,-129
  806d78:	9d84b03a 	or	r2,r19,r22
  806d7c:	d8c02d15 	stw	r3,180(sp)
  806d80:	9124703a 	and	r18,r18,r4
  806d84:	0039883a 	mov	fp,zero
  806d88:	103e891e 	bne	r2,zero,8067b0 <__alt_mem_onchip_mem+0xff7fe7b0>
  806d8c:	d9002917 	ldw	r4,164(sp)
  806d90:	2002c11e 	bne	r4,zero,807898 <___vfprintf_internal_r+0x1630>
  806d94:	d8002915 	stw	zero,164(sp)
  806d98:	d8002e15 	stw	zero,184(sp)
  806d9c:	dc001e04 	addi	r16,sp,120
  806da0:	003ef806 	br	806984 <__alt_mem_onchip_mem+0xff7fe984>
  806da4:	18c03fcc 	andi	r3,r3,255
  806da8:	18059d1e 	bne	r3,zero,808420 <___vfprintf_internal_r+0x21b8>
  806dac:	01402074 	movhi	r5,129
  806db0:	29547804 	addi	r5,r5,20960
  806db4:	d9403915 	stw	r5,228(sp)
  806db8:	9080080c 	andi	r2,r18,32
  806dbc:	10005226 	beq	r2,zero,806f08 <___vfprintf_internal_r+0xca0>
  806dc0:	d8802d17 	ldw	r2,180(sp)
  806dc4:	14c00017 	ldw	r19,0(r2)
  806dc8:	15800117 	ldw	r22,4(r2)
  806dcc:	10800204 	addi	r2,r2,8
  806dd0:	d8802d15 	stw	r2,180(sp)
  806dd4:	9080004c 	andi	r2,r18,1
  806dd8:	10019026 	beq	r2,zero,80741c <___vfprintf_internal_r+0x11b4>
  806ddc:	9d84b03a 	or	r2,r19,r22
  806de0:	10036926 	beq	r2,zero,807b88 <___vfprintf_internal_r+0x1920>
  806de4:	d8c02917 	ldw	r3,164(sp)
  806de8:	00800c04 	movi	r2,48
  806dec:	d8802705 	stb	r2,156(sp)
  806df0:	dc402745 	stb	r17,157(sp)
  806df4:	d8002785 	stb	zero,158(sp)
  806df8:	90800094 	ori	r2,r18,2
  806dfc:	18045d16 	blt	r3,zero,807f74 <___vfprintf_internal_r+0x1d0c>
  806e00:	00bfdfc4 	movi	r2,-129
  806e04:	90a4703a 	and	r18,r18,r2
  806e08:	94800094 	ori	r18,r18,2
  806e0c:	0039883a 	mov	fp,zero
  806e10:	d9003917 	ldw	r4,228(sp)
  806e14:	dc001e04 	addi	r16,sp,120
  806e18:	988003cc 	andi	r2,r19,15
  806e1c:	b006973a 	slli	r3,r22,28
  806e20:	2085883a 	add	r2,r4,r2
  806e24:	9826d13a 	srli	r19,r19,4
  806e28:	10800003 	ldbu	r2,0(r2)
  806e2c:	b02cd13a 	srli	r22,r22,4
  806e30:	843fffc4 	addi	r16,r16,-1
  806e34:	1ce6b03a 	or	r19,r3,r19
  806e38:	80800005 	stb	r2,0(r16)
  806e3c:	9d84b03a 	or	r2,r19,r22
  806e40:	103ff51e 	bne	r2,zero,806e18 <__alt_mem_onchip_mem+0xff7fee18>
  806e44:	d8c02817 	ldw	r3,160(sp)
  806e48:	1c07c83a 	sub	r3,r3,r16
  806e4c:	d8c02e15 	stw	r3,184(sp)
  806e50:	003ecc06 	br	806984 <__alt_mem_onchip_mem+0xff7fe984>
  806e54:	18c03fcc 	andi	r3,r3,255
  806e58:	183e9f26 	beq	r3,zero,8068d8 <__alt_mem_onchip_mem+0xff7fe8d8>
  806e5c:	d9c02785 	stb	r7,158(sp)
  806e60:	003e9d06 	br	8068d8 <__alt_mem_onchip_mem+0xff7fe8d8>
  806e64:	00c00044 	movi	r3,1
  806e68:	01c00ac4 	movi	r7,43
  806e6c:	ac400007 	ldb	r17,0(r21)
  806e70:	003d5e06 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  806e74:	94800814 	ori	r18,r18,32
  806e78:	ac400007 	ldb	r17,0(r21)
  806e7c:	003d5b06 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  806e80:	d8c02d17 	ldw	r3,180(sp)
  806e84:	d8002785 	stb	zero,158(sp)
  806e88:	1c000017 	ldw	r16,0(r3)
  806e8c:	1cc00104 	addi	r19,r3,4
  806e90:	80041926 	beq	r16,zero,807ef8 <___vfprintf_internal_r+0x1c90>
  806e94:	d9002917 	ldw	r4,164(sp)
  806e98:	2003d016 	blt	r4,zero,807ddc <___vfprintf_internal_r+0x1b74>
  806e9c:	200d883a 	mov	r6,r4
  806ea0:	000b883a 	mov	r5,zero
  806ea4:	8009883a 	mov	r4,r16
  806ea8:	da003d15 	stw	r8,244(sp)
  806eac:	080ba780 	call	80ba78 <memchr>
  806eb0:	da003d17 	ldw	r8,244(sp)
  806eb4:	10045426 	beq	r2,zero,808008 <___vfprintf_internal_r+0x1da0>
  806eb8:	1405c83a 	sub	r2,r2,r16
  806ebc:	d8802e15 	stw	r2,184(sp)
  806ec0:	1003cc16 	blt	r2,zero,807df4 <___vfprintf_internal_r+0x1b8c>
  806ec4:	df002783 	ldbu	fp,158(sp)
  806ec8:	d8802a15 	stw	r2,168(sp)
  806ecc:	dcc02d15 	stw	r19,180(sp)
  806ed0:	d8002915 	stw	zero,164(sp)
  806ed4:	d8003215 	stw	zero,200(sp)
  806ed8:	003eb006 	br	80699c <__alt_mem_onchip_mem+0xff7fe99c>
  806edc:	18c03fcc 	andi	r3,r3,255
  806ee0:	183f9b26 	beq	r3,zero,806d50 <__alt_mem_onchip_mem+0xff7fed50>
  806ee4:	d9c02785 	stb	r7,158(sp)
  806ee8:	003f9906 	br	806d50 <__alt_mem_onchip_mem+0xff7fed50>
  806eec:	18c03fcc 	andi	r3,r3,255
  806ef0:	1805551e 	bne	r3,zero,808448 <___vfprintf_internal_r+0x21e0>
  806ef4:	01402074 	movhi	r5,129
  806ef8:	29547d04 	addi	r5,r5,20980
  806efc:	d9403915 	stw	r5,228(sp)
  806f00:	9080080c 	andi	r2,r18,32
  806f04:	103fae1e 	bne	r2,zero,806dc0 <__alt_mem_onchip_mem+0xff7fedc0>
  806f08:	9080040c 	andi	r2,r18,16
  806f0c:	1002de26 	beq	r2,zero,807a88 <___vfprintf_internal_r+0x1820>
  806f10:	d8c02d17 	ldw	r3,180(sp)
  806f14:	002d883a 	mov	r22,zero
  806f18:	1cc00017 	ldw	r19,0(r3)
  806f1c:	18c00104 	addi	r3,r3,4
  806f20:	d8c02d15 	stw	r3,180(sp)
  806f24:	003fab06 	br	806dd4 <__alt_mem_onchip_mem+0xff7fedd4>
  806f28:	38803fcc 	andi	r2,r7,255
  806f2c:	1080201c 	xori	r2,r2,128
  806f30:	10bfe004 	addi	r2,r2,-128
  806f34:	1002d21e 	bne	r2,zero,807a80 <___vfprintf_internal_r+0x1818>
  806f38:	00c00044 	movi	r3,1
  806f3c:	01c00804 	movi	r7,32
  806f40:	ac400007 	ldb	r17,0(r21)
  806f44:	003d2906 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  806f48:	94800054 	ori	r18,r18,1
  806f4c:	ac400007 	ldb	r17,0(r21)
  806f50:	003d2606 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  806f54:	18c03fcc 	andi	r3,r3,255
  806f58:	183e0526 	beq	r3,zero,806770 <__alt_mem_onchip_mem+0xff7fe770>
  806f5c:	d9c02785 	stb	r7,158(sp)
  806f60:	003e0306 	br	806770 <__alt_mem_onchip_mem+0xff7fe770>
  806f64:	94801014 	ori	r18,r18,64
  806f68:	ac400007 	ldb	r17,0(r21)
  806f6c:	003d1f06 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  806f70:	ac400007 	ldb	r17,0(r21)
  806f74:	8a438726 	beq	r17,r9,807d94 <___vfprintf_internal_r+0x1b2c>
  806f78:	94800414 	ori	r18,r18,16
  806f7c:	003d1b06 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  806f80:	18c03fcc 	andi	r3,r3,255
  806f84:	1805341e 	bne	r3,zero,808458 <___vfprintf_internal_r+0x21f0>
  806f88:	9080080c 	andi	r2,r18,32
  806f8c:	1002cd26 	beq	r2,zero,807ac4 <___vfprintf_internal_r+0x185c>
  806f90:	d9402d17 	ldw	r5,180(sp)
  806f94:	d9002f17 	ldw	r4,188(sp)
  806f98:	28800017 	ldw	r2,0(r5)
  806f9c:	2007d7fa 	srai	r3,r4,31
  806fa0:	29400104 	addi	r5,r5,4
  806fa4:	d9402d15 	stw	r5,180(sp)
  806fa8:	11000015 	stw	r4,0(r2)
  806fac:	10c00115 	stw	r3,4(r2)
  806fb0:	003ce506 	br	806348 <__alt_mem_onchip_mem+0xff7fe348>
  806fb4:	d8c02d17 	ldw	r3,180(sp)
  806fb8:	d9002d17 	ldw	r4,180(sp)
  806fbc:	d8002785 	stb	zero,158(sp)
  806fc0:	18800017 	ldw	r2,0(r3)
  806fc4:	21000104 	addi	r4,r4,4
  806fc8:	00c00044 	movi	r3,1
  806fcc:	d8c02a15 	stw	r3,168(sp)
  806fd0:	d8801405 	stb	r2,80(sp)
  806fd4:	d9002d15 	stw	r4,180(sp)
  806fd8:	d8c02e15 	stw	r3,184(sp)
  806fdc:	d8002915 	stw	zero,164(sp)
  806fe0:	d8003215 	stw	zero,200(sp)
  806fe4:	dc001404 	addi	r16,sp,80
  806fe8:	0039883a 	mov	fp,zero
  806fec:	003e7206 	br	8069b8 <__alt_mem_onchip_mem+0xff7fe9b8>
  806ff0:	01002074 	movhi	r4,129
  806ff4:	21147d04 	addi	r4,r4,20980
  806ff8:	0039883a 	mov	fp,zero
  806ffc:	d9003915 	stw	r4,228(sp)
  807000:	04401e04 	movi	r17,120
  807004:	003f8206 	br	806e10 <__alt_mem_onchip_mem+0xff7fee10>
  807008:	18c03fcc 	andi	r3,r3,255
  80700c:	1805061e 	bne	r3,zero,808428 <___vfprintf_internal_r+0x21c0>
  807010:	883d9126 	beq	r17,zero,806658 <__alt_mem_onchip_mem+0xff7fe658>
  807014:	00c00044 	movi	r3,1
  807018:	d8c02a15 	stw	r3,168(sp)
  80701c:	dc401405 	stb	r17,80(sp)
  807020:	d8002785 	stb	zero,158(sp)
  807024:	003fec06 	br	806fd8 <__alt_mem_onchip_mem+0xff7fefd8>
  807028:	01402074 	movhi	r5,129
  80702c:	29547d04 	addi	r5,r5,20980
  807030:	d9403915 	stw	r5,228(sp)
  807034:	d8c02d15 	stw	r3,180(sp)
  807038:	1025883a 	mov	r18,r2
  80703c:	04401e04 	movi	r17,120
  807040:	9d84b03a 	or	r2,r19,r22
  807044:	1000fc1e 	bne	r2,zero,807438 <___vfprintf_internal_r+0x11d0>
  807048:	0039883a 	mov	fp,zero
  80704c:	00800084 	movi	r2,2
  807050:	10803fcc 	andi	r2,r2,255
  807054:	00c00044 	movi	r3,1
  807058:	10c20f26 	beq	r2,r3,807898 <___vfprintf_internal_r+0x1630>
  80705c:	00c00084 	movi	r3,2
  807060:	10fd6326 	beq	r2,r3,8065f0 <__alt_mem_onchip_mem+0xff7fe5f0>
  807064:	003e2d06 	br	80691c <__alt_mem_onchip_mem+0xff7fe91c>
  807068:	d8c02017 	ldw	r3,128(sp)
  80706c:	003e9306 	br	806abc <__alt_mem_onchip_mem+0xff7feabc>
  807070:	00801944 	movi	r2,101
  807074:	14407e0e 	bge	r2,r17,807270 <___vfprintf_internal_r+0x1008>
  807078:	d9003617 	ldw	r4,216(sp)
  80707c:	d9403817 	ldw	r5,224(sp)
  807080:	000d883a 	mov	r6,zero
  807084:	000f883a 	mov	r7,zero
  807088:	d8c03c15 	stw	r3,240(sp)
  80708c:	da003d15 	stw	r8,244(sp)
  807090:	0810c300 	call	810c30 <__eqdf2>
  807094:	d8c03c17 	ldw	r3,240(sp)
  807098:	da003d17 	ldw	r8,244(sp)
  80709c:	1000f71e 	bne	r2,zero,80747c <___vfprintf_internal_r+0x1214>
  8070a0:	d8801f17 	ldw	r2,124(sp)
  8070a4:	01002074 	movhi	r4,129
  8070a8:	21148404 	addi	r4,r4,21008
  8070ac:	18c00044 	addi	r3,r3,1
  8070b0:	10800044 	addi	r2,r2,1
  8070b4:	41000015 	stw	r4,0(r8)
  8070b8:	01000044 	movi	r4,1
  8070bc:	41000115 	stw	r4,4(r8)
  8070c0:	d8c02015 	stw	r3,128(sp)
  8070c4:	d8801f15 	stw	r2,124(sp)
  8070c8:	010001c4 	movi	r4,7
  8070cc:	2082b816 	blt	r4,r2,807bb0 <___vfprintf_internal_r+0x1948>
  8070d0:	42000204 	addi	r8,r8,8
  8070d4:	d8802617 	ldw	r2,152(sp)
  8070d8:	d9403317 	ldw	r5,204(sp)
  8070dc:	11400216 	blt	r2,r5,8070e8 <___vfprintf_internal_r+0xe80>
  8070e0:	9080004c 	andi	r2,r18,1
  8070e4:	103ed526 	beq	r2,zero,806c3c <__alt_mem_onchip_mem+0xff7fec3c>
  8070e8:	d8803717 	ldw	r2,220(sp)
  8070ec:	d9003417 	ldw	r4,208(sp)
  8070f0:	d9403717 	ldw	r5,220(sp)
  8070f4:	1887883a 	add	r3,r3,r2
  8070f8:	d8801f17 	ldw	r2,124(sp)
  8070fc:	41000015 	stw	r4,0(r8)
  807100:	41400115 	stw	r5,4(r8)
  807104:	10800044 	addi	r2,r2,1
  807108:	d8c02015 	stw	r3,128(sp)
  80710c:	d8801f15 	stw	r2,124(sp)
  807110:	010001c4 	movi	r4,7
  807114:	20832916 	blt	r4,r2,807dbc <___vfprintf_internal_r+0x1b54>
  807118:	42000204 	addi	r8,r8,8
  80711c:	d8803317 	ldw	r2,204(sp)
  807120:	143fffc4 	addi	r16,r2,-1
  807124:	043ec50e 	bge	zero,r16,806c3c <__alt_mem_onchip_mem+0xff7fec3c>
  807128:	04400404 	movi	r17,16
  80712c:	d8801f17 	ldw	r2,124(sp)
  807130:	8c00880e 	bge	r17,r16,807354 <___vfprintf_internal_r+0x10ec>
  807134:	01402074 	movhi	r5,129
  807138:	29548484 	addi	r5,r5,21010
  80713c:	d9402b15 	stw	r5,172(sp)
  807140:	058001c4 	movi	r22,7
  807144:	dcc02c17 	ldw	r19,176(sp)
  807148:	00000306 	br	807158 <___vfprintf_internal_r+0xef0>
  80714c:	42000204 	addi	r8,r8,8
  807150:	843ffc04 	addi	r16,r16,-16
  807154:	8c00820e 	bge	r17,r16,807360 <___vfprintf_internal_r+0x10f8>
  807158:	18c00404 	addi	r3,r3,16
  80715c:	10800044 	addi	r2,r2,1
  807160:	45000015 	stw	r20,0(r8)
  807164:	44400115 	stw	r17,4(r8)
  807168:	d8c02015 	stw	r3,128(sp)
  80716c:	d8801f15 	stw	r2,124(sp)
  807170:	b0bff60e 	bge	r22,r2,80714c <__alt_mem_onchip_mem+0xff7ff14c>
  807174:	d9801e04 	addi	r6,sp,120
  807178:	b80b883a 	mov	r5,r23
  80717c:	9809883a 	mov	r4,r19
  807180:	080d8640 	call	80d864 <__sprint_r>
  807184:	103d3a1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807188:	d8c02017 	ldw	r3,128(sp)
  80718c:	d8801f17 	ldw	r2,124(sp)
  807190:	da000404 	addi	r8,sp,16
  807194:	003fee06 	br	807150 <__alt_mem_onchip_mem+0xff7ff150>
  807198:	d9403117 	ldw	r5,196(sp)
  80719c:	d8802a17 	ldw	r2,168(sp)
  8071a0:	28adc83a 	sub	r22,r5,r2
  8071a4:	05be630e 	bge	zero,r22,806b34 <__alt_mem_onchip_mem+0xff7feb34>
  8071a8:	07000404 	movi	fp,16
  8071ac:	d8801f17 	ldw	r2,124(sp)
  8071b0:	e5838f0e 	bge	fp,r22,807ff0 <___vfprintf_internal_r+0x1d88>
  8071b4:	01402074 	movhi	r5,129
  8071b8:	29548484 	addi	r5,r5,21010
  8071bc:	dc403015 	stw	r17,192(sp)
  8071c0:	d9402b15 	stw	r5,172(sp)
  8071c4:	b023883a 	mov	r17,r22
  8071c8:	04c001c4 	movi	r19,7
  8071cc:	a82d883a 	mov	r22,r21
  8071d0:	902b883a 	mov	r21,r18
  8071d4:	8025883a 	mov	r18,r16
  8071d8:	dc002c17 	ldw	r16,176(sp)
  8071dc:	00000306 	br	8071ec <___vfprintf_internal_r+0xf84>
  8071e0:	8c7ffc04 	addi	r17,r17,-16
  8071e4:	42000204 	addi	r8,r8,8
  8071e8:	e440110e 	bge	fp,r17,807230 <___vfprintf_internal_r+0xfc8>
  8071ec:	18c00404 	addi	r3,r3,16
  8071f0:	10800044 	addi	r2,r2,1
  8071f4:	45000015 	stw	r20,0(r8)
  8071f8:	47000115 	stw	fp,4(r8)
  8071fc:	d8c02015 	stw	r3,128(sp)
  807200:	d8801f15 	stw	r2,124(sp)
  807204:	98bff60e 	bge	r19,r2,8071e0 <__alt_mem_onchip_mem+0xff7ff1e0>
  807208:	d9801e04 	addi	r6,sp,120
  80720c:	b80b883a 	mov	r5,r23
  807210:	8009883a 	mov	r4,r16
  807214:	080d8640 	call	80d864 <__sprint_r>
  807218:	103d151e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  80721c:	8c7ffc04 	addi	r17,r17,-16
  807220:	d8c02017 	ldw	r3,128(sp)
  807224:	d8801f17 	ldw	r2,124(sp)
  807228:	da000404 	addi	r8,sp,16
  80722c:	e47fef16 	blt	fp,r17,8071ec <__alt_mem_onchip_mem+0xff7ff1ec>
  807230:	9021883a 	mov	r16,r18
  807234:	a825883a 	mov	r18,r21
  807238:	b02b883a 	mov	r21,r22
  80723c:	882d883a 	mov	r22,r17
  807240:	dc403017 	ldw	r17,192(sp)
  807244:	d9002b17 	ldw	r4,172(sp)
  807248:	1d87883a 	add	r3,r3,r22
  80724c:	10800044 	addi	r2,r2,1
  807250:	41000015 	stw	r4,0(r8)
  807254:	45800115 	stw	r22,4(r8)
  807258:	d8c02015 	stw	r3,128(sp)
  80725c:	d8801f15 	stw	r2,124(sp)
  807260:	010001c4 	movi	r4,7
  807264:	20818e16 	blt	r4,r2,8078a0 <___vfprintf_internal_r+0x1638>
  807268:	42000204 	addi	r8,r8,8
  80726c:	003e3106 	br	806b34 <__alt_mem_onchip_mem+0xff7feb34>
  807270:	d9403317 	ldw	r5,204(sp)
  807274:	00800044 	movi	r2,1
  807278:	18c00044 	addi	r3,r3,1
  80727c:	1141530e 	bge	r2,r5,8077cc <___vfprintf_internal_r+0x1564>
  807280:	dc401f17 	ldw	r17,124(sp)
  807284:	00800044 	movi	r2,1
  807288:	40800115 	stw	r2,4(r8)
  80728c:	8c400044 	addi	r17,r17,1
  807290:	44000015 	stw	r16,0(r8)
  807294:	d8c02015 	stw	r3,128(sp)
  807298:	dc401f15 	stw	r17,124(sp)
  80729c:	008001c4 	movi	r2,7
  8072a0:	14416b16 	blt	r2,r17,807850 <___vfprintf_internal_r+0x15e8>
  8072a4:	42000204 	addi	r8,r8,8
  8072a8:	d8803717 	ldw	r2,220(sp)
  8072ac:	d9003417 	ldw	r4,208(sp)
  8072b0:	8c400044 	addi	r17,r17,1
  8072b4:	10c7883a 	add	r3,r2,r3
  8072b8:	40800115 	stw	r2,4(r8)
  8072bc:	41000015 	stw	r4,0(r8)
  8072c0:	d8c02015 	stw	r3,128(sp)
  8072c4:	dc401f15 	stw	r17,124(sp)
  8072c8:	008001c4 	movi	r2,7
  8072cc:	14416916 	blt	r2,r17,807874 <___vfprintf_internal_r+0x160c>
  8072d0:	45800204 	addi	r22,r8,8
  8072d4:	d9003617 	ldw	r4,216(sp)
  8072d8:	d9403817 	ldw	r5,224(sp)
  8072dc:	000d883a 	mov	r6,zero
  8072e0:	000f883a 	mov	r7,zero
  8072e4:	d8c03c15 	stw	r3,240(sp)
  8072e8:	0810c300 	call	810c30 <__eqdf2>
  8072ec:	d8c03c17 	ldw	r3,240(sp)
  8072f0:	1000bc26 	beq	r2,zero,8075e4 <___vfprintf_internal_r+0x137c>
  8072f4:	d9403317 	ldw	r5,204(sp)
  8072f8:	84000044 	addi	r16,r16,1
  8072fc:	8c400044 	addi	r17,r17,1
  807300:	28bfffc4 	addi	r2,r5,-1
  807304:	1887883a 	add	r3,r3,r2
  807308:	b0800115 	stw	r2,4(r22)
  80730c:	b4000015 	stw	r16,0(r22)
  807310:	d8c02015 	stw	r3,128(sp)
  807314:	dc401f15 	stw	r17,124(sp)
  807318:	008001c4 	movi	r2,7
  80731c:	14414316 	blt	r2,r17,80782c <___vfprintf_internal_r+0x15c4>
  807320:	b5800204 	addi	r22,r22,8
  807324:	d9003a17 	ldw	r4,232(sp)
  807328:	df0022c4 	addi	fp,sp,139
  80732c:	8c400044 	addi	r17,r17,1
  807330:	20c7883a 	add	r3,r4,r3
  807334:	b7000015 	stw	fp,0(r22)
  807338:	b1000115 	stw	r4,4(r22)
  80733c:	d8c02015 	stw	r3,128(sp)
  807340:	dc401f15 	stw	r17,124(sp)
  807344:	008001c4 	movi	r2,7
  807348:	14400e16 	blt	r2,r17,807384 <___vfprintf_internal_r+0x111c>
  80734c:	b2000204 	addi	r8,r22,8
  807350:	003e3a06 	br	806c3c <__alt_mem_onchip_mem+0xff7fec3c>
  807354:	01002074 	movhi	r4,129
  807358:	21148484 	addi	r4,r4,21010
  80735c:	d9002b15 	stw	r4,172(sp)
  807360:	d9002b17 	ldw	r4,172(sp)
  807364:	1c07883a 	add	r3,r3,r16
  807368:	44000115 	stw	r16,4(r8)
  80736c:	41000015 	stw	r4,0(r8)
  807370:	10800044 	addi	r2,r2,1
  807374:	d8c02015 	stw	r3,128(sp)
  807378:	d8801f15 	stw	r2,124(sp)
  80737c:	010001c4 	movi	r4,7
  807380:	20be2d0e 	bge	r4,r2,806c38 <__alt_mem_onchip_mem+0xff7fec38>
  807384:	d9002c17 	ldw	r4,176(sp)
  807388:	d9801e04 	addi	r6,sp,120
  80738c:	b80b883a 	mov	r5,r23
  807390:	080d8640 	call	80d864 <__sprint_r>
  807394:	103cb61e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807398:	d8c02017 	ldw	r3,128(sp)
  80739c:	da000404 	addi	r8,sp,16
  8073a0:	003e2606 	br	806c3c <__alt_mem_onchip_mem+0xff7fec3c>
  8073a4:	d9002c17 	ldw	r4,176(sp)
  8073a8:	d9801e04 	addi	r6,sp,120
  8073ac:	b80b883a 	mov	r5,r23
  8073b0:	080d8640 	call	80d864 <__sprint_r>
  8073b4:	103e5d26 	beq	r2,zero,806d2c <__alt_mem_onchip_mem+0xff7fed2c>
  8073b8:	003cad06 	br	806670 <__alt_mem_onchip_mem+0xff7fe670>
  8073bc:	d9002c17 	ldw	r4,176(sp)
  8073c0:	d9801e04 	addi	r6,sp,120
  8073c4:	b80b883a 	mov	r5,r23
  8073c8:	080d8640 	call	80d864 <__sprint_r>
  8073cc:	103ca81e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  8073d0:	d8c02017 	ldw	r3,128(sp)
  8073d4:	da000404 	addi	r8,sp,16
  8073d8:	003e0b06 	br	806c08 <__alt_mem_onchip_mem+0xff7fec08>
  8073dc:	d9002c17 	ldw	r4,176(sp)
  8073e0:	d9801e04 	addi	r6,sp,120
  8073e4:	b80b883a 	mov	r5,r23
  8073e8:	080d8640 	call	80d864 <__sprint_r>
  8073ec:	103ca01e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  8073f0:	d8c02017 	ldw	r3,128(sp)
  8073f4:	da000404 	addi	r8,sp,16
  8073f8:	003dbd06 	br	806af0 <__alt_mem_onchip_mem+0xff7feaf0>
  8073fc:	d9002c17 	ldw	r4,176(sp)
  807400:	d9801e04 	addi	r6,sp,120
  807404:	b80b883a 	mov	r5,r23
  807408:	080d8640 	call	80d864 <__sprint_r>
  80740c:	103c981e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807410:	d8c02017 	ldw	r3,128(sp)
  807414:	da000404 	addi	r8,sp,16
  807418:	003dc306 	br	806b28 <__alt_mem_onchip_mem+0xff7feb28>
  80741c:	d8802917 	ldw	r2,164(sp)
  807420:	d8002785 	stb	zero,158(sp)
  807424:	103f0616 	blt	r2,zero,807040 <__alt_mem_onchip_mem+0xff7ff040>
  807428:	00ffdfc4 	movi	r3,-129
  80742c:	9d84b03a 	or	r2,r19,r22
  807430:	90e4703a 	and	r18,r18,r3
  807434:	103c6b26 	beq	r2,zero,8065e4 <__alt_mem_onchip_mem+0xff7fe5e4>
  807438:	0039883a 	mov	fp,zero
  80743c:	003e7406 	br	806e10 <__alt_mem_onchip_mem+0xff7fee10>
  807440:	9080040c 	andi	r2,r18,16
  807444:	1001b326 	beq	r2,zero,807b14 <___vfprintf_internal_r+0x18ac>
  807448:	d9002d17 	ldw	r4,180(sp)
  80744c:	d9402917 	ldw	r5,164(sp)
  807450:	d8002785 	stb	zero,158(sp)
  807454:	20800104 	addi	r2,r4,4
  807458:	24c00017 	ldw	r19,0(r4)
  80745c:	002d883a 	mov	r22,zero
  807460:	2801b516 	blt	r5,zero,807b38 <___vfprintf_internal_r+0x18d0>
  807464:	00ffdfc4 	movi	r3,-129
  807468:	d8802d15 	stw	r2,180(sp)
  80746c:	90e4703a 	and	r18,r18,r3
  807470:	983d2726 	beq	r19,zero,806910 <__alt_mem_onchip_mem+0xff7fe910>
  807474:	0039883a 	mov	fp,zero
  807478:	003d2a06 	br	806924 <__alt_mem_onchip_mem+0xff7fe924>
  80747c:	dc402617 	ldw	r17,152(sp)
  807480:	0441d30e 	bge	zero,r17,807bd0 <___vfprintf_internal_r+0x1968>
  807484:	dc403217 	ldw	r17,200(sp)
  807488:	d8803317 	ldw	r2,204(sp)
  80748c:	1440010e 	bge	r2,r17,807494 <___vfprintf_internal_r+0x122c>
  807490:	1023883a 	mov	r17,r2
  807494:	04400a0e 	bge	zero,r17,8074c0 <___vfprintf_internal_r+0x1258>
  807498:	d8801f17 	ldw	r2,124(sp)
  80749c:	1c47883a 	add	r3,r3,r17
  8074a0:	44000015 	stw	r16,0(r8)
  8074a4:	10800044 	addi	r2,r2,1
  8074a8:	44400115 	stw	r17,4(r8)
  8074ac:	d8c02015 	stw	r3,128(sp)
  8074b0:	d8801f15 	stw	r2,124(sp)
  8074b4:	010001c4 	movi	r4,7
  8074b8:	20826516 	blt	r4,r2,807e50 <___vfprintf_internal_r+0x1be8>
  8074bc:	42000204 	addi	r8,r8,8
  8074c0:	88026116 	blt	r17,zero,807e48 <___vfprintf_internal_r+0x1be0>
  8074c4:	d9003217 	ldw	r4,200(sp)
  8074c8:	2463c83a 	sub	r17,r4,r17
  8074cc:	04407b0e 	bge	zero,r17,8076bc <___vfprintf_internal_r+0x1454>
  8074d0:	05800404 	movi	r22,16
  8074d4:	d8801f17 	ldw	r2,124(sp)
  8074d8:	b4419d0e 	bge	r22,r17,807b50 <___vfprintf_internal_r+0x18e8>
  8074dc:	01002074 	movhi	r4,129
  8074e0:	21148484 	addi	r4,r4,21010
  8074e4:	d9002b15 	stw	r4,172(sp)
  8074e8:	070001c4 	movi	fp,7
  8074ec:	dcc02c17 	ldw	r19,176(sp)
  8074f0:	00000306 	br	807500 <___vfprintf_internal_r+0x1298>
  8074f4:	42000204 	addi	r8,r8,8
  8074f8:	8c7ffc04 	addi	r17,r17,-16
  8074fc:	b441970e 	bge	r22,r17,807b5c <___vfprintf_internal_r+0x18f4>
  807500:	18c00404 	addi	r3,r3,16
  807504:	10800044 	addi	r2,r2,1
  807508:	45000015 	stw	r20,0(r8)
  80750c:	45800115 	stw	r22,4(r8)
  807510:	d8c02015 	stw	r3,128(sp)
  807514:	d8801f15 	stw	r2,124(sp)
  807518:	e0bff60e 	bge	fp,r2,8074f4 <__alt_mem_onchip_mem+0xff7ff4f4>
  80751c:	d9801e04 	addi	r6,sp,120
  807520:	b80b883a 	mov	r5,r23
  807524:	9809883a 	mov	r4,r19
  807528:	080d8640 	call	80d864 <__sprint_r>
  80752c:	103c501e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807530:	d8c02017 	ldw	r3,128(sp)
  807534:	d8801f17 	ldw	r2,124(sp)
  807538:	da000404 	addi	r8,sp,16
  80753c:	003fee06 	br	8074f8 <__alt_mem_onchip_mem+0xff7ff4f8>
  807540:	d9002c17 	ldw	r4,176(sp)
  807544:	d9801e04 	addi	r6,sp,120
  807548:	b80b883a 	mov	r5,r23
  80754c:	080d8640 	call	80d864 <__sprint_r>
  807550:	103c471e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807554:	d8c02017 	ldw	r3,128(sp)
  807558:	df002787 	ldb	fp,158(sp)
  80755c:	da000404 	addi	r8,sp,16
  807560:	003d5606 	br	806abc <__alt_mem_onchip_mem+0xff7feabc>
  807564:	9080040c 	andi	r2,r18,16
  807568:	10016126 	beq	r2,zero,807af0 <___vfprintf_internal_r+0x1888>
  80756c:	d8802d17 	ldw	r2,180(sp)
  807570:	14c00017 	ldw	r19,0(r2)
  807574:	10800104 	addi	r2,r2,4
  807578:	d8802d15 	stw	r2,180(sp)
  80757c:	982dd7fa 	srai	r22,r19,31
  807580:	b005883a 	mov	r2,r22
  807584:	003c8206 	br	806790 <__alt_mem_onchip_mem+0xff7fe790>
  807588:	9080040c 	andi	r2,r18,16
  80758c:	10003526 	beq	r2,zero,807664 <___vfprintf_internal_r+0x13fc>
  807590:	d9402d17 	ldw	r5,180(sp)
  807594:	d8c02917 	ldw	r3,164(sp)
  807598:	d8002785 	stb	zero,158(sp)
  80759c:	28800104 	addi	r2,r5,4
  8075a0:	2cc00017 	ldw	r19,0(r5)
  8075a4:	002d883a 	mov	r22,zero
  8075a8:	18003716 	blt	r3,zero,807688 <___vfprintf_internal_r+0x1420>
  8075ac:	00ffdfc4 	movi	r3,-129
  8075b0:	d8802d15 	stw	r2,180(sp)
  8075b4:	90e4703a 	and	r18,r18,r3
  8075b8:	0039883a 	mov	fp,zero
  8075bc:	983df326 	beq	r19,zero,806d8c <__alt_mem_onchip_mem+0xff7fed8c>
  8075c0:	00800244 	movi	r2,9
  8075c4:	14fc7b36 	bltu	r2,r19,8067b4 <__alt_mem_onchip_mem+0xff7fe7b4>
  8075c8:	d8c02817 	ldw	r3,160(sp)
  8075cc:	dc001dc4 	addi	r16,sp,119
  8075d0:	9cc00c04 	addi	r19,r19,48
  8075d4:	1c07c83a 	sub	r3,r3,r16
  8075d8:	dcc01dc5 	stb	r19,119(sp)
  8075dc:	d8c02e15 	stw	r3,184(sp)
  8075e0:	003ce806 	br	806984 <__alt_mem_onchip_mem+0xff7fe984>
  8075e4:	d8803317 	ldw	r2,204(sp)
  8075e8:	143fffc4 	addi	r16,r2,-1
  8075ec:	043f4d0e 	bge	zero,r16,807324 <__alt_mem_onchip_mem+0xff7ff324>
  8075f0:	07000404 	movi	fp,16
  8075f4:	e400810e 	bge	fp,r16,8077fc <___vfprintf_internal_r+0x1594>
  8075f8:	01402074 	movhi	r5,129
  8075fc:	29548484 	addi	r5,r5,21010
  807600:	d9402b15 	stw	r5,172(sp)
  807604:	01c001c4 	movi	r7,7
  807608:	dcc02c17 	ldw	r19,176(sp)
  80760c:	00000306 	br	80761c <___vfprintf_internal_r+0x13b4>
  807610:	b5800204 	addi	r22,r22,8
  807614:	843ffc04 	addi	r16,r16,-16
  807618:	e4007b0e 	bge	fp,r16,807808 <___vfprintf_internal_r+0x15a0>
  80761c:	18c00404 	addi	r3,r3,16
  807620:	8c400044 	addi	r17,r17,1
  807624:	b5000015 	stw	r20,0(r22)
  807628:	b7000115 	stw	fp,4(r22)
  80762c:	d8c02015 	stw	r3,128(sp)
  807630:	dc401f15 	stw	r17,124(sp)
  807634:	3c7ff60e 	bge	r7,r17,807610 <__alt_mem_onchip_mem+0xff7ff610>
  807638:	d9801e04 	addi	r6,sp,120
  80763c:	b80b883a 	mov	r5,r23
  807640:	9809883a 	mov	r4,r19
  807644:	d9c03c15 	stw	r7,240(sp)
  807648:	080d8640 	call	80d864 <__sprint_r>
  80764c:	d9c03c17 	ldw	r7,240(sp)
  807650:	103c071e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807654:	d8c02017 	ldw	r3,128(sp)
  807658:	dc401f17 	ldw	r17,124(sp)
  80765c:	dd800404 	addi	r22,sp,16
  807660:	003fec06 	br	807614 <__alt_mem_onchip_mem+0xff7ff614>
  807664:	9080100c 	andi	r2,r18,64
  807668:	d8002785 	stb	zero,158(sp)
  80766c:	10010e26 	beq	r2,zero,807aa8 <___vfprintf_internal_r+0x1840>
  807670:	d9002d17 	ldw	r4,180(sp)
  807674:	d9402917 	ldw	r5,164(sp)
  807678:	002d883a 	mov	r22,zero
  80767c:	20800104 	addi	r2,r4,4
  807680:	24c0000b 	ldhu	r19,0(r4)
  807684:	283fc90e 	bge	r5,zero,8075ac <__alt_mem_onchip_mem+0xff7ff5ac>
  807688:	d8802d15 	stw	r2,180(sp)
  80768c:	0039883a 	mov	fp,zero
  807690:	9d84b03a 	or	r2,r19,r22
  807694:	103c461e 	bne	r2,zero,8067b0 <__alt_mem_onchip_mem+0xff7fe7b0>
  807698:	00800044 	movi	r2,1
  80769c:	003e6c06 	br	807050 <__alt_mem_onchip_mem+0xff7ff050>
  8076a0:	d9002c17 	ldw	r4,176(sp)
  8076a4:	d9801e04 	addi	r6,sp,120
  8076a8:	b80b883a 	mov	r5,r23
  8076ac:	080d8640 	call	80d864 <__sprint_r>
  8076b0:	103bef1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  8076b4:	d8c02017 	ldw	r3,128(sp)
  8076b8:	da000404 	addi	r8,sp,16
  8076bc:	d9003217 	ldw	r4,200(sp)
  8076c0:	d8802617 	ldw	r2,152(sp)
  8076c4:	d9403317 	ldw	r5,204(sp)
  8076c8:	8123883a 	add	r17,r16,r4
  8076cc:	11400216 	blt	r2,r5,8076d8 <___vfprintf_internal_r+0x1470>
  8076d0:	9100004c 	andi	r4,r18,1
  8076d4:	20000d26 	beq	r4,zero,80770c <___vfprintf_internal_r+0x14a4>
  8076d8:	d9003717 	ldw	r4,220(sp)
  8076dc:	d9403417 	ldw	r5,208(sp)
  8076e0:	1907883a 	add	r3,r3,r4
  8076e4:	d9001f17 	ldw	r4,124(sp)
  8076e8:	41400015 	stw	r5,0(r8)
  8076ec:	d9403717 	ldw	r5,220(sp)
  8076f0:	21000044 	addi	r4,r4,1
  8076f4:	d8c02015 	stw	r3,128(sp)
  8076f8:	41400115 	stw	r5,4(r8)
  8076fc:	d9001f15 	stw	r4,124(sp)
  807700:	014001c4 	movi	r5,7
  807704:	2901e816 	blt	r5,r4,807ea8 <___vfprintf_internal_r+0x1c40>
  807708:	42000204 	addi	r8,r8,8
  80770c:	d9003317 	ldw	r4,204(sp)
  807710:	8121883a 	add	r16,r16,r4
  807714:	2085c83a 	sub	r2,r4,r2
  807718:	8461c83a 	sub	r16,r16,r17
  80771c:	1400010e 	bge	r2,r16,807724 <___vfprintf_internal_r+0x14bc>
  807720:	1021883a 	mov	r16,r2
  807724:	04000a0e 	bge	zero,r16,807750 <___vfprintf_internal_r+0x14e8>
  807728:	d9001f17 	ldw	r4,124(sp)
  80772c:	1c07883a 	add	r3,r3,r16
  807730:	44400015 	stw	r17,0(r8)
  807734:	21000044 	addi	r4,r4,1
  807738:	44000115 	stw	r16,4(r8)
  80773c:	d8c02015 	stw	r3,128(sp)
  807740:	d9001f15 	stw	r4,124(sp)
  807744:	014001c4 	movi	r5,7
  807748:	2901fb16 	blt	r5,r4,807f38 <___vfprintf_internal_r+0x1cd0>
  80774c:	42000204 	addi	r8,r8,8
  807750:	8001f716 	blt	r16,zero,807f30 <___vfprintf_internal_r+0x1cc8>
  807754:	1421c83a 	sub	r16,r2,r16
  807758:	043d380e 	bge	zero,r16,806c3c <__alt_mem_onchip_mem+0xff7fec3c>
  80775c:	04400404 	movi	r17,16
  807760:	d8801f17 	ldw	r2,124(sp)
  807764:	8c3efb0e 	bge	r17,r16,807354 <__alt_mem_onchip_mem+0xff7ff354>
  807768:	01402074 	movhi	r5,129
  80776c:	29548484 	addi	r5,r5,21010
  807770:	d9402b15 	stw	r5,172(sp)
  807774:	058001c4 	movi	r22,7
  807778:	dcc02c17 	ldw	r19,176(sp)
  80777c:	00000306 	br	80778c <___vfprintf_internal_r+0x1524>
  807780:	42000204 	addi	r8,r8,8
  807784:	843ffc04 	addi	r16,r16,-16
  807788:	8c3ef50e 	bge	r17,r16,807360 <__alt_mem_onchip_mem+0xff7ff360>
  80778c:	18c00404 	addi	r3,r3,16
  807790:	10800044 	addi	r2,r2,1
  807794:	45000015 	stw	r20,0(r8)
  807798:	44400115 	stw	r17,4(r8)
  80779c:	d8c02015 	stw	r3,128(sp)
  8077a0:	d8801f15 	stw	r2,124(sp)
  8077a4:	b0bff60e 	bge	r22,r2,807780 <__alt_mem_onchip_mem+0xff7ff780>
  8077a8:	d9801e04 	addi	r6,sp,120
  8077ac:	b80b883a 	mov	r5,r23
  8077b0:	9809883a 	mov	r4,r19
  8077b4:	080d8640 	call	80d864 <__sprint_r>
  8077b8:	103bad1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  8077bc:	d8c02017 	ldw	r3,128(sp)
  8077c0:	d8801f17 	ldw	r2,124(sp)
  8077c4:	da000404 	addi	r8,sp,16
  8077c8:	003fee06 	br	807784 <__alt_mem_onchip_mem+0xff7ff784>
  8077cc:	9088703a 	and	r4,r18,r2
  8077d0:	203eab1e 	bne	r4,zero,807280 <__alt_mem_onchip_mem+0xff7ff280>
  8077d4:	dc401f17 	ldw	r17,124(sp)
  8077d8:	40800115 	stw	r2,4(r8)
  8077dc:	44000015 	stw	r16,0(r8)
  8077e0:	8c400044 	addi	r17,r17,1
  8077e4:	d8c02015 	stw	r3,128(sp)
  8077e8:	dc401f15 	stw	r17,124(sp)
  8077ec:	008001c4 	movi	r2,7
  8077f0:	14400e16 	blt	r2,r17,80782c <___vfprintf_internal_r+0x15c4>
  8077f4:	45800204 	addi	r22,r8,8
  8077f8:	003eca06 	br	807324 <__alt_mem_onchip_mem+0xff7ff324>
  8077fc:	01002074 	movhi	r4,129
  807800:	21148484 	addi	r4,r4,21010
  807804:	d9002b15 	stw	r4,172(sp)
  807808:	d8802b17 	ldw	r2,172(sp)
  80780c:	1c07883a 	add	r3,r3,r16
  807810:	8c400044 	addi	r17,r17,1
  807814:	b0800015 	stw	r2,0(r22)
  807818:	b4000115 	stw	r16,4(r22)
  80781c:	d8c02015 	stw	r3,128(sp)
  807820:	dc401f15 	stw	r17,124(sp)
  807824:	008001c4 	movi	r2,7
  807828:	147ebd0e 	bge	r2,r17,807320 <__alt_mem_onchip_mem+0xff7ff320>
  80782c:	d9002c17 	ldw	r4,176(sp)
  807830:	d9801e04 	addi	r6,sp,120
  807834:	b80b883a 	mov	r5,r23
  807838:	080d8640 	call	80d864 <__sprint_r>
  80783c:	103b8c1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807840:	d8c02017 	ldw	r3,128(sp)
  807844:	dc401f17 	ldw	r17,124(sp)
  807848:	dd800404 	addi	r22,sp,16
  80784c:	003eb506 	br	807324 <__alt_mem_onchip_mem+0xff7ff324>
  807850:	d9002c17 	ldw	r4,176(sp)
  807854:	d9801e04 	addi	r6,sp,120
  807858:	b80b883a 	mov	r5,r23
  80785c:	080d8640 	call	80d864 <__sprint_r>
  807860:	103b831e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807864:	d8c02017 	ldw	r3,128(sp)
  807868:	dc401f17 	ldw	r17,124(sp)
  80786c:	da000404 	addi	r8,sp,16
  807870:	003e8d06 	br	8072a8 <__alt_mem_onchip_mem+0xff7ff2a8>
  807874:	d9002c17 	ldw	r4,176(sp)
  807878:	d9801e04 	addi	r6,sp,120
  80787c:	b80b883a 	mov	r5,r23
  807880:	080d8640 	call	80d864 <__sprint_r>
  807884:	103b7a1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807888:	d8c02017 	ldw	r3,128(sp)
  80788c:	dc401f17 	ldw	r17,124(sp)
  807890:	dd800404 	addi	r22,sp,16
  807894:	003e8f06 	br	8072d4 <__alt_mem_onchip_mem+0xff7ff2d4>
  807898:	0027883a 	mov	r19,zero
  80789c:	003f4a06 	br	8075c8 <__alt_mem_onchip_mem+0xff7ff5c8>
  8078a0:	d9002c17 	ldw	r4,176(sp)
  8078a4:	d9801e04 	addi	r6,sp,120
  8078a8:	b80b883a 	mov	r5,r23
  8078ac:	080d8640 	call	80d864 <__sprint_r>
  8078b0:	103b6f1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  8078b4:	d8c02017 	ldw	r3,128(sp)
  8078b8:	da000404 	addi	r8,sp,16
  8078bc:	003c9d06 	br	806b34 <__alt_mem_onchip_mem+0xff7feb34>
  8078c0:	04e7c83a 	sub	r19,zero,r19
  8078c4:	9804c03a 	cmpne	r2,r19,zero
  8078c8:	05adc83a 	sub	r22,zero,r22
  8078cc:	b0adc83a 	sub	r22,r22,r2
  8078d0:	d8802917 	ldw	r2,164(sp)
  8078d4:	07000b44 	movi	fp,45
  8078d8:	df002785 	stb	fp,158(sp)
  8078dc:	10017b16 	blt	r2,zero,807ecc <___vfprintf_internal_r+0x1c64>
  8078e0:	00bfdfc4 	movi	r2,-129
  8078e4:	90a4703a 	and	r18,r18,r2
  8078e8:	003bb106 	br	8067b0 <__alt_mem_onchip_mem+0xff7fe7b0>
  8078ec:	d9003617 	ldw	r4,216(sp)
  8078f0:	d9403817 	ldw	r5,224(sp)
  8078f4:	da003d15 	stw	r8,244(sp)
  8078f8:	080d4880 	call	80d488 <__fpclassifyd>
  8078fc:	da003d17 	ldw	r8,244(sp)
  807900:	1000f026 	beq	r2,zero,807cc4 <___vfprintf_internal_r+0x1a5c>
  807904:	d9002917 	ldw	r4,164(sp)
  807908:	05bff7c4 	movi	r22,-33
  80790c:	00bfffc4 	movi	r2,-1
  807910:	8dac703a 	and	r22,r17,r22
  807914:	20820026 	beq	r4,r2,808118 <___vfprintf_internal_r+0x1eb0>
  807918:	008011c4 	movi	r2,71
  80791c:	b081f726 	beq	r22,r2,8080fc <___vfprintf_internal_r+0x1e94>
  807920:	d9003817 	ldw	r4,224(sp)
  807924:	90c04014 	ori	r3,r18,256
  807928:	d8c02b15 	stw	r3,172(sp)
  80792c:	20021516 	blt	r4,zero,808184 <___vfprintf_internal_r+0x1f1c>
  807930:	dcc03817 	ldw	r19,224(sp)
  807934:	d8002a05 	stb	zero,168(sp)
  807938:	00801984 	movi	r2,102
  80793c:	8881f926 	beq	r17,r2,808124 <___vfprintf_internal_r+0x1ebc>
  807940:	00801184 	movi	r2,70
  807944:	88821c26 	beq	r17,r2,8081b8 <___vfprintf_internal_r+0x1f50>
  807948:	00801144 	movi	r2,69
  80794c:	b081ef26 	beq	r22,r2,80810c <___vfprintf_internal_r+0x1ea4>
  807950:	d8c02917 	ldw	r3,164(sp)
  807954:	d8802104 	addi	r2,sp,132
  807958:	d8800315 	stw	r2,12(sp)
  80795c:	d9403617 	ldw	r5,216(sp)
  807960:	d8802504 	addi	r2,sp,148
  807964:	d9002c17 	ldw	r4,176(sp)
  807968:	d8800215 	stw	r2,8(sp)
  80796c:	d8802604 	addi	r2,sp,152
  807970:	d8c00015 	stw	r3,0(sp)
  807974:	d8800115 	stw	r2,4(sp)
  807978:	01c00084 	movi	r7,2
  80797c:	980d883a 	mov	r6,r19
  807980:	d8c03c15 	stw	r3,240(sp)
  807984:	da003d15 	stw	r8,244(sp)
  807988:	080888c0 	call	80888c <_dtoa_r>
  80798c:	1021883a 	mov	r16,r2
  807990:	008019c4 	movi	r2,103
  807994:	d8c03c17 	ldw	r3,240(sp)
  807998:	da003d17 	ldw	r8,244(sp)
  80799c:	88817126 	beq	r17,r2,807f64 <___vfprintf_internal_r+0x1cfc>
  8079a0:	008011c4 	movi	r2,71
  8079a4:	88829226 	beq	r17,r2,8083f0 <___vfprintf_internal_r+0x2188>
  8079a8:	80f9883a 	add	fp,r16,r3
  8079ac:	d9003617 	ldw	r4,216(sp)
  8079b0:	000d883a 	mov	r6,zero
  8079b4:	000f883a 	mov	r7,zero
  8079b8:	980b883a 	mov	r5,r19
  8079bc:	da003d15 	stw	r8,244(sp)
  8079c0:	0810c300 	call	810c30 <__eqdf2>
  8079c4:	da003d17 	ldw	r8,244(sp)
  8079c8:	10018d26 	beq	r2,zero,808000 <___vfprintf_internal_r+0x1d98>
  8079cc:	d8802117 	ldw	r2,132(sp)
  8079d0:	1700062e 	bgeu	r2,fp,8079ec <___vfprintf_internal_r+0x1784>
  8079d4:	01000c04 	movi	r4,48
  8079d8:	10c00044 	addi	r3,r2,1
  8079dc:	d8c02115 	stw	r3,132(sp)
  8079e0:	11000005 	stb	r4,0(r2)
  8079e4:	d8802117 	ldw	r2,132(sp)
  8079e8:	173ffb36 	bltu	r2,fp,8079d8 <__alt_mem_onchip_mem+0xff7ff9d8>
  8079ec:	1405c83a 	sub	r2,r2,r16
  8079f0:	d8803315 	stw	r2,204(sp)
  8079f4:	008011c4 	movi	r2,71
  8079f8:	b0817626 	beq	r22,r2,807fd4 <___vfprintf_internal_r+0x1d6c>
  8079fc:	00801944 	movi	r2,101
  807a00:	1442810e 	bge	r2,r17,808408 <___vfprintf_internal_r+0x21a0>
  807a04:	d8c02617 	ldw	r3,152(sp)
  807a08:	00801984 	movi	r2,102
  807a0c:	d8c03215 	stw	r3,200(sp)
  807a10:	8881fe26 	beq	r17,r2,80820c <___vfprintf_internal_r+0x1fa4>
  807a14:	d8c03217 	ldw	r3,200(sp)
  807a18:	d9003317 	ldw	r4,204(sp)
  807a1c:	1901dd16 	blt	r3,r4,808194 <___vfprintf_internal_r+0x1f2c>
  807a20:	9480004c 	andi	r18,r18,1
  807a24:	90022b1e 	bne	r18,zero,8082d4 <___vfprintf_internal_r+0x206c>
  807a28:	1805883a 	mov	r2,r3
  807a2c:	18028016 	blt	r3,zero,808430 <___vfprintf_internal_r+0x21c8>
  807a30:	d8c03217 	ldw	r3,200(sp)
  807a34:	044019c4 	movi	r17,103
  807a38:	d8c02e15 	stw	r3,184(sp)
  807a3c:	df002a07 	ldb	fp,168(sp)
  807a40:	e001531e 	bne	fp,zero,807f90 <___vfprintf_internal_r+0x1d28>
  807a44:	df002783 	ldbu	fp,158(sp)
  807a48:	d8802a15 	stw	r2,168(sp)
  807a4c:	dc802b17 	ldw	r18,172(sp)
  807a50:	d8002915 	stw	zero,164(sp)
  807a54:	003bd106 	br	80699c <__alt_mem_onchip_mem+0xff7fe99c>
  807a58:	d8802d17 	ldw	r2,180(sp)
  807a5c:	d8c02d17 	ldw	r3,180(sp)
  807a60:	d9002d17 	ldw	r4,180(sp)
  807a64:	10800017 	ldw	r2,0(r2)
  807a68:	18c00117 	ldw	r3,4(r3)
  807a6c:	21000204 	addi	r4,r4,8
  807a70:	d8803615 	stw	r2,216(sp)
  807a74:	d8c03815 	stw	r3,224(sp)
  807a78:	d9002d15 	stw	r4,180(sp)
  807a7c:	003b7506 	br	806854 <__alt_mem_onchip_mem+0xff7fe854>
  807a80:	ac400007 	ldb	r17,0(r21)
  807a84:	003a5906 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  807a88:	9080100c 	andi	r2,r18,64
  807a8c:	1000a826 	beq	r2,zero,807d30 <___vfprintf_internal_r+0x1ac8>
  807a90:	d9002d17 	ldw	r4,180(sp)
  807a94:	002d883a 	mov	r22,zero
  807a98:	24c0000b 	ldhu	r19,0(r4)
  807a9c:	21000104 	addi	r4,r4,4
  807aa0:	d9002d15 	stw	r4,180(sp)
  807aa4:	003ccb06 	br	806dd4 <__alt_mem_onchip_mem+0xff7fedd4>
  807aa8:	d8c02d17 	ldw	r3,180(sp)
  807aac:	d9002917 	ldw	r4,164(sp)
  807ab0:	002d883a 	mov	r22,zero
  807ab4:	18800104 	addi	r2,r3,4
  807ab8:	1cc00017 	ldw	r19,0(r3)
  807abc:	203ebb0e 	bge	r4,zero,8075ac <__alt_mem_onchip_mem+0xff7ff5ac>
  807ac0:	003ef106 	br	807688 <__alt_mem_onchip_mem+0xff7ff688>
  807ac4:	9080040c 	andi	r2,r18,16
  807ac8:	1000921e 	bne	r2,zero,807d14 <___vfprintf_internal_r+0x1aac>
  807acc:	9480100c 	andi	r18,r18,64
  807ad0:	90013926 	beq	r18,zero,807fb8 <___vfprintf_internal_r+0x1d50>
  807ad4:	d9002d17 	ldw	r4,180(sp)
  807ad8:	d9402f17 	ldw	r5,188(sp)
  807adc:	20800017 	ldw	r2,0(r4)
  807ae0:	21000104 	addi	r4,r4,4
  807ae4:	d9002d15 	stw	r4,180(sp)
  807ae8:	1140000d 	sth	r5,0(r2)
  807aec:	003a1606 	br	806348 <__alt_mem_onchip_mem+0xff7fe348>
  807af0:	9080100c 	andi	r2,r18,64
  807af4:	10008026 	beq	r2,zero,807cf8 <___vfprintf_internal_r+0x1a90>
  807af8:	d8c02d17 	ldw	r3,180(sp)
  807afc:	1cc0000f 	ldh	r19,0(r3)
  807b00:	18c00104 	addi	r3,r3,4
  807b04:	d8c02d15 	stw	r3,180(sp)
  807b08:	982dd7fa 	srai	r22,r19,31
  807b0c:	b005883a 	mov	r2,r22
  807b10:	003b1f06 	br	806790 <__alt_mem_onchip_mem+0xff7fe790>
  807b14:	9080100c 	andi	r2,r18,64
  807b18:	d8002785 	stb	zero,158(sp)
  807b1c:	10008a1e 	bne	r2,zero,807d48 <___vfprintf_internal_r+0x1ae0>
  807b20:	d9402d17 	ldw	r5,180(sp)
  807b24:	d8c02917 	ldw	r3,164(sp)
  807b28:	002d883a 	mov	r22,zero
  807b2c:	28800104 	addi	r2,r5,4
  807b30:	2cc00017 	ldw	r19,0(r5)
  807b34:	183e4b0e 	bge	r3,zero,807464 <__alt_mem_onchip_mem+0xff7ff464>
  807b38:	9d86b03a 	or	r3,r19,r22
  807b3c:	d8802d15 	stw	r2,180(sp)
  807b40:	183e4c1e 	bne	r3,zero,807474 <__alt_mem_onchip_mem+0xff7ff474>
  807b44:	0039883a 	mov	fp,zero
  807b48:	0005883a 	mov	r2,zero
  807b4c:	003d4006 	br	807050 <__alt_mem_onchip_mem+0xff7ff050>
  807b50:	01402074 	movhi	r5,129
  807b54:	29548484 	addi	r5,r5,21010
  807b58:	d9402b15 	stw	r5,172(sp)
  807b5c:	d9402b17 	ldw	r5,172(sp)
  807b60:	1c47883a 	add	r3,r3,r17
  807b64:	10800044 	addi	r2,r2,1
  807b68:	41400015 	stw	r5,0(r8)
  807b6c:	44400115 	stw	r17,4(r8)
  807b70:	d8c02015 	stw	r3,128(sp)
  807b74:	d8801f15 	stw	r2,124(sp)
  807b78:	010001c4 	movi	r4,7
  807b7c:	20bec816 	blt	r4,r2,8076a0 <__alt_mem_onchip_mem+0xff7ff6a0>
  807b80:	42000204 	addi	r8,r8,8
  807b84:	003ecd06 	br	8076bc <__alt_mem_onchip_mem+0xff7ff6bc>
  807b88:	d9002917 	ldw	r4,164(sp)
  807b8c:	d8002785 	stb	zero,158(sp)
  807b90:	203d2d16 	blt	r4,zero,807048 <__alt_mem_onchip_mem+0xff7ff048>
  807b94:	00bfdfc4 	movi	r2,-129
  807b98:	90a4703a 	and	r18,r18,r2
  807b9c:	003a9106 	br	8065e4 <__alt_mem_onchip_mem+0xff7fe5e4>
  807ba0:	01002074 	movhi	r4,129
  807ba4:	21148484 	addi	r4,r4,21010
  807ba8:	d9002b15 	stw	r4,172(sp)
  807bac:	003c0c06 	br	806be0 <__alt_mem_onchip_mem+0xff7febe0>
  807bb0:	d9002c17 	ldw	r4,176(sp)
  807bb4:	d9801e04 	addi	r6,sp,120
  807bb8:	b80b883a 	mov	r5,r23
  807bbc:	080d8640 	call	80d864 <__sprint_r>
  807bc0:	103aab1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807bc4:	d8c02017 	ldw	r3,128(sp)
  807bc8:	da000404 	addi	r8,sp,16
  807bcc:	003d4106 	br	8070d4 <__alt_mem_onchip_mem+0xff7ff0d4>
  807bd0:	d8801f17 	ldw	r2,124(sp)
  807bd4:	01402074 	movhi	r5,129
  807bd8:	01000044 	movi	r4,1
  807bdc:	18c00044 	addi	r3,r3,1
  807be0:	10800044 	addi	r2,r2,1
  807be4:	29548404 	addi	r5,r5,21008
  807be8:	41000115 	stw	r4,4(r8)
  807bec:	41400015 	stw	r5,0(r8)
  807bf0:	d8c02015 	stw	r3,128(sp)
  807bf4:	d8801f15 	stw	r2,124(sp)
  807bf8:	010001c4 	movi	r4,7
  807bfc:	20805c16 	blt	r4,r2,807d70 <___vfprintf_internal_r+0x1b08>
  807c00:	42000204 	addi	r8,r8,8
  807c04:	8800041e 	bne	r17,zero,807c18 <___vfprintf_internal_r+0x19b0>
  807c08:	d8803317 	ldw	r2,204(sp)
  807c0c:	1000021e 	bne	r2,zero,807c18 <___vfprintf_internal_r+0x19b0>
  807c10:	9080004c 	andi	r2,r18,1
  807c14:	103c0926 	beq	r2,zero,806c3c <__alt_mem_onchip_mem+0xff7fec3c>
  807c18:	d9003717 	ldw	r4,220(sp)
  807c1c:	d8801f17 	ldw	r2,124(sp)
  807c20:	d9403417 	ldw	r5,208(sp)
  807c24:	20c7883a 	add	r3,r4,r3
  807c28:	10800044 	addi	r2,r2,1
  807c2c:	41000115 	stw	r4,4(r8)
  807c30:	41400015 	stw	r5,0(r8)
  807c34:	d8c02015 	stw	r3,128(sp)
  807c38:	d8801f15 	stw	r2,124(sp)
  807c3c:	010001c4 	movi	r4,7
  807c40:	20812116 	blt	r4,r2,8080c8 <___vfprintf_internal_r+0x1e60>
  807c44:	42000204 	addi	r8,r8,8
  807c48:	0463c83a 	sub	r17,zero,r17
  807c4c:	0440730e 	bge	zero,r17,807e1c <___vfprintf_internal_r+0x1bb4>
  807c50:	05800404 	movi	r22,16
  807c54:	b440860e 	bge	r22,r17,807e70 <___vfprintf_internal_r+0x1c08>
  807c58:	01402074 	movhi	r5,129
  807c5c:	29548484 	addi	r5,r5,21010
  807c60:	d9402b15 	stw	r5,172(sp)
  807c64:	070001c4 	movi	fp,7
  807c68:	dcc02c17 	ldw	r19,176(sp)
  807c6c:	00000306 	br	807c7c <___vfprintf_internal_r+0x1a14>
  807c70:	42000204 	addi	r8,r8,8
  807c74:	8c7ffc04 	addi	r17,r17,-16
  807c78:	b440800e 	bge	r22,r17,807e7c <___vfprintf_internal_r+0x1c14>
  807c7c:	18c00404 	addi	r3,r3,16
  807c80:	10800044 	addi	r2,r2,1
  807c84:	45000015 	stw	r20,0(r8)
  807c88:	45800115 	stw	r22,4(r8)
  807c8c:	d8c02015 	stw	r3,128(sp)
  807c90:	d8801f15 	stw	r2,124(sp)
  807c94:	e0bff60e 	bge	fp,r2,807c70 <__alt_mem_onchip_mem+0xff7ffc70>
  807c98:	d9801e04 	addi	r6,sp,120
  807c9c:	b80b883a 	mov	r5,r23
  807ca0:	9809883a 	mov	r4,r19
  807ca4:	080d8640 	call	80d864 <__sprint_r>
  807ca8:	103a711e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807cac:	d8c02017 	ldw	r3,128(sp)
  807cb0:	d8801f17 	ldw	r2,124(sp)
  807cb4:	da000404 	addi	r8,sp,16
  807cb8:	003fee06 	br	807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807cbc:	00bfffc4 	movi	r2,-1
  807cc0:	003a6f06 	br	806680 <__alt_mem_onchip_mem+0xff7fe680>
  807cc4:	008011c4 	movi	r2,71
  807cc8:	1440b816 	blt	r2,r17,807fac <___vfprintf_internal_r+0x1d44>
  807ccc:	04002074 	movhi	r16,129
  807cd0:	84147604 	addi	r16,r16,20952
  807cd4:	00c000c4 	movi	r3,3
  807cd8:	00bfdfc4 	movi	r2,-129
  807cdc:	d8c02a15 	stw	r3,168(sp)
  807ce0:	90a4703a 	and	r18,r18,r2
  807ce4:	df002783 	ldbu	fp,158(sp)
  807ce8:	d8c02e15 	stw	r3,184(sp)
  807cec:	d8002915 	stw	zero,164(sp)
  807cf0:	d8003215 	stw	zero,200(sp)
  807cf4:	003b2906 	br	80699c <__alt_mem_onchip_mem+0xff7fe99c>
  807cf8:	d9002d17 	ldw	r4,180(sp)
  807cfc:	24c00017 	ldw	r19,0(r4)
  807d00:	21000104 	addi	r4,r4,4
  807d04:	d9002d15 	stw	r4,180(sp)
  807d08:	982dd7fa 	srai	r22,r19,31
  807d0c:	b005883a 	mov	r2,r22
  807d10:	003a9f06 	br	806790 <__alt_mem_onchip_mem+0xff7fe790>
  807d14:	d9402d17 	ldw	r5,180(sp)
  807d18:	d8c02f17 	ldw	r3,188(sp)
  807d1c:	28800017 	ldw	r2,0(r5)
  807d20:	29400104 	addi	r5,r5,4
  807d24:	d9402d15 	stw	r5,180(sp)
  807d28:	10c00015 	stw	r3,0(r2)
  807d2c:	00398606 	br	806348 <__alt_mem_onchip_mem+0xff7fe348>
  807d30:	d9402d17 	ldw	r5,180(sp)
  807d34:	002d883a 	mov	r22,zero
  807d38:	2cc00017 	ldw	r19,0(r5)
  807d3c:	29400104 	addi	r5,r5,4
  807d40:	d9402d15 	stw	r5,180(sp)
  807d44:	003c2306 	br	806dd4 <__alt_mem_onchip_mem+0xff7fedd4>
  807d48:	d8c02d17 	ldw	r3,180(sp)
  807d4c:	d9002917 	ldw	r4,164(sp)
  807d50:	002d883a 	mov	r22,zero
  807d54:	18800104 	addi	r2,r3,4
  807d58:	1cc0000b 	ldhu	r19,0(r3)
  807d5c:	203dc10e 	bge	r4,zero,807464 <__alt_mem_onchip_mem+0xff7ff464>
  807d60:	003f7506 	br	807b38 <__alt_mem_onchip_mem+0xff7ffb38>
  807d64:	04002074 	movhi	r16,129
  807d68:	84147404 	addi	r16,r16,20944
  807d6c:	003acc06 	br	8068a0 <__alt_mem_onchip_mem+0xff7fe8a0>
  807d70:	d9002c17 	ldw	r4,176(sp)
  807d74:	d9801e04 	addi	r6,sp,120
  807d78:	b80b883a 	mov	r5,r23
  807d7c:	080d8640 	call	80d864 <__sprint_r>
  807d80:	103a3b1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807d84:	dc402617 	ldw	r17,152(sp)
  807d88:	d8c02017 	ldw	r3,128(sp)
  807d8c:	da000404 	addi	r8,sp,16
  807d90:	003f9c06 	br	807c04 <__alt_mem_onchip_mem+0xff7ffc04>
  807d94:	ac400043 	ldbu	r17,1(r21)
  807d98:	94800814 	ori	r18,r18,32
  807d9c:	ad400044 	addi	r21,r21,1
  807da0:	8c403fcc 	andi	r17,r17,255
  807da4:	8c40201c 	xori	r17,r17,128
  807da8:	8c7fe004 	addi	r17,r17,-128
  807dac:	00398f06 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  807db0:	d8c02d15 	stw	r3,180(sp)
  807db4:	0039883a 	mov	fp,zero
  807db8:	003e3506 	br	807690 <__alt_mem_onchip_mem+0xff7ff690>
  807dbc:	d9002c17 	ldw	r4,176(sp)
  807dc0:	d9801e04 	addi	r6,sp,120
  807dc4:	b80b883a 	mov	r5,r23
  807dc8:	080d8640 	call	80d864 <__sprint_r>
  807dcc:	103a281e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807dd0:	d8c02017 	ldw	r3,128(sp)
  807dd4:	da000404 	addi	r8,sp,16
  807dd8:	003cd006 	br	80711c <__alt_mem_onchip_mem+0xff7ff11c>
  807ddc:	8009883a 	mov	r4,r16
  807de0:	da003d15 	stw	r8,244(sp)
  807de4:	08061d00 	call	8061d0 <strlen>
  807de8:	d8802e15 	stw	r2,184(sp)
  807dec:	da003d17 	ldw	r8,244(sp)
  807df0:	103c340e 	bge	r2,zero,806ec4 <__alt_mem_onchip_mem+0xff7feec4>
  807df4:	0005883a 	mov	r2,zero
  807df8:	003c3206 	br	806ec4 <__alt_mem_onchip_mem+0xff7feec4>
  807dfc:	d9002c17 	ldw	r4,176(sp)
  807e00:	d9801e04 	addi	r6,sp,120
  807e04:	b80b883a 	mov	r5,r23
  807e08:	080d8640 	call	80d864 <__sprint_r>
  807e0c:	103a181e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807e10:	d8c02017 	ldw	r3,128(sp)
  807e14:	d8801f17 	ldw	r2,124(sp)
  807e18:	da000404 	addi	r8,sp,16
  807e1c:	d9403317 	ldw	r5,204(sp)
  807e20:	10800044 	addi	r2,r2,1
  807e24:	44000015 	stw	r16,0(r8)
  807e28:	28c7883a 	add	r3,r5,r3
  807e2c:	003b7d06 	br	806c24 <__alt_mem_onchip_mem+0xff7fec24>
  807e30:	01002074 	movhi	r4,129
  807e34:	21148884 	addi	r4,r4,21026
  807e38:	d9003515 	stw	r4,212(sp)
  807e3c:	003b1406 	br	806a90 <__alt_mem_onchip_mem+0xff7fea90>
  807e40:	013fffc4 	movi	r4,-1
  807e44:	003a3506 	br	80671c <__alt_mem_onchip_mem+0xff7fe71c>
  807e48:	0023883a 	mov	r17,zero
  807e4c:	003d9d06 	br	8074c4 <__alt_mem_onchip_mem+0xff7ff4c4>
  807e50:	d9002c17 	ldw	r4,176(sp)
  807e54:	d9801e04 	addi	r6,sp,120
  807e58:	b80b883a 	mov	r5,r23
  807e5c:	080d8640 	call	80d864 <__sprint_r>
  807e60:	103a031e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807e64:	d8c02017 	ldw	r3,128(sp)
  807e68:	da000404 	addi	r8,sp,16
  807e6c:	003d9406 	br	8074c0 <__alt_mem_onchip_mem+0xff7ff4c0>
  807e70:	01002074 	movhi	r4,129
  807e74:	21148484 	addi	r4,r4,21010
  807e78:	d9002b15 	stw	r4,172(sp)
  807e7c:	d9002b17 	ldw	r4,172(sp)
  807e80:	1c47883a 	add	r3,r3,r17
  807e84:	10800044 	addi	r2,r2,1
  807e88:	41000015 	stw	r4,0(r8)
  807e8c:	44400115 	stw	r17,4(r8)
  807e90:	d8c02015 	stw	r3,128(sp)
  807e94:	d8801f15 	stw	r2,124(sp)
  807e98:	010001c4 	movi	r4,7
  807e9c:	20bfd716 	blt	r4,r2,807dfc <__alt_mem_onchip_mem+0xff7ffdfc>
  807ea0:	42000204 	addi	r8,r8,8
  807ea4:	003fdd06 	br	807e1c <__alt_mem_onchip_mem+0xff7ffe1c>
  807ea8:	d9002c17 	ldw	r4,176(sp)
  807eac:	d9801e04 	addi	r6,sp,120
  807eb0:	b80b883a 	mov	r5,r23
  807eb4:	080d8640 	call	80d864 <__sprint_r>
  807eb8:	1039ed1e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807ebc:	d8802617 	ldw	r2,152(sp)
  807ec0:	d8c02017 	ldw	r3,128(sp)
  807ec4:	da000404 	addi	r8,sp,16
  807ec8:	003e1006 	br	80770c <__alt_mem_onchip_mem+0xff7ff70c>
  807ecc:	00800044 	movi	r2,1
  807ed0:	10803fcc 	andi	r2,r2,255
  807ed4:	00c00044 	movi	r3,1
  807ed8:	10fa3526 	beq	r2,r3,8067b0 <__alt_mem_onchip_mem+0xff7fe7b0>
  807edc:	00c00084 	movi	r3,2
  807ee0:	10fbcb26 	beq	r2,r3,806e10 <__alt_mem_onchip_mem+0xff7fee10>
  807ee4:	003a8f06 	br	806924 <__alt_mem_onchip_mem+0xff7fe924>
  807ee8:	01002074 	movhi	r4,129
  807eec:	21148884 	addi	r4,r4,21026
  807ef0:	d9003515 	stw	r4,212(sp)
  807ef4:	003b7606 	br	806cd0 <__alt_mem_onchip_mem+0xff7fecd0>
  807ef8:	d8802917 	ldw	r2,164(sp)
  807efc:	00c00184 	movi	r3,6
  807f00:	1880012e 	bgeu	r3,r2,807f08 <___vfprintf_internal_r+0x1ca0>
  807f04:	1805883a 	mov	r2,r3
  807f08:	d8802e15 	stw	r2,184(sp)
  807f0c:	1000ef16 	blt	r2,zero,8082cc <___vfprintf_internal_r+0x2064>
  807f10:	04002074 	movhi	r16,129
  807f14:	d8802a15 	stw	r2,168(sp)
  807f18:	dcc02d15 	stw	r19,180(sp)
  807f1c:	d8002915 	stw	zero,164(sp)
  807f20:	d8003215 	stw	zero,200(sp)
  807f24:	84148204 	addi	r16,r16,21000
  807f28:	0039883a 	mov	fp,zero
  807f2c:	003aa206 	br	8069b8 <__alt_mem_onchip_mem+0xff7fe9b8>
  807f30:	0021883a 	mov	r16,zero
  807f34:	003e0706 	br	807754 <__alt_mem_onchip_mem+0xff7ff754>
  807f38:	d9002c17 	ldw	r4,176(sp)
  807f3c:	d9801e04 	addi	r6,sp,120
  807f40:	b80b883a 	mov	r5,r23
  807f44:	080d8640 	call	80d864 <__sprint_r>
  807f48:	1039c91e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  807f4c:	d8802617 	ldw	r2,152(sp)
  807f50:	d9403317 	ldw	r5,204(sp)
  807f54:	d8c02017 	ldw	r3,128(sp)
  807f58:	da000404 	addi	r8,sp,16
  807f5c:	2885c83a 	sub	r2,r5,r2
  807f60:	003dfb06 	br	807750 <__alt_mem_onchip_mem+0xff7ff750>
  807f64:	9080004c 	andi	r2,r18,1
  807f68:	103e8f1e 	bne	r2,zero,8079a8 <__alt_mem_onchip_mem+0xff7ff9a8>
  807f6c:	d8802117 	ldw	r2,132(sp)
  807f70:	003e9e06 	br	8079ec <__alt_mem_onchip_mem+0xff7ff9ec>
  807f74:	1025883a 	mov	r18,r2
  807f78:	0039883a 	mov	fp,zero
  807f7c:	00800084 	movi	r2,2
  807f80:	003fd306 	br	807ed0 <__alt_mem_onchip_mem+0xff7ffed0>
  807f84:	07000b44 	movi	fp,45
  807f88:	df002785 	stb	fp,158(sp)
  807f8c:	003a4006 	br	806890 <__alt_mem_onchip_mem+0xff7fe890>
  807f90:	00c00b44 	movi	r3,45
  807f94:	d8c02785 	stb	r3,158(sp)
  807f98:	d8802a15 	stw	r2,168(sp)
  807f9c:	dc802b17 	ldw	r18,172(sp)
  807fa0:	d8002915 	stw	zero,164(sp)
  807fa4:	07000b44 	movi	fp,45
  807fa8:	003a8006 	br	8069ac <__alt_mem_onchip_mem+0xff7fe9ac>
  807fac:	04002074 	movhi	r16,129
  807fb0:	84147704 	addi	r16,r16,20956
  807fb4:	003f4706 	br	807cd4 <__alt_mem_onchip_mem+0xff7ffcd4>
  807fb8:	d8c02d17 	ldw	r3,180(sp)
  807fbc:	d9002f17 	ldw	r4,188(sp)
  807fc0:	18800017 	ldw	r2,0(r3)
  807fc4:	18c00104 	addi	r3,r3,4
  807fc8:	d8c02d15 	stw	r3,180(sp)
  807fcc:	11000015 	stw	r4,0(r2)
  807fd0:	0038dd06 	br	806348 <__alt_mem_onchip_mem+0xff7fe348>
  807fd4:	dd802617 	ldw	r22,152(sp)
  807fd8:	00bfff44 	movi	r2,-3
  807fdc:	b0801c16 	blt	r22,r2,808050 <___vfprintf_internal_r+0x1de8>
  807fe0:	d9402917 	ldw	r5,164(sp)
  807fe4:	2d801a16 	blt	r5,r22,808050 <___vfprintf_internal_r+0x1de8>
  807fe8:	dd803215 	stw	r22,200(sp)
  807fec:	003e8906 	br	807a14 <__alt_mem_onchip_mem+0xff7ffa14>
  807ff0:	01002074 	movhi	r4,129
  807ff4:	21148484 	addi	r4,r4,21010
  807ff8:	d9002b15 	stw	r4,172(sp)
  807ffc:	003c9106 	br	807244 <__alt_mem_onchip_mem+0xff7ff244>
  808000:	e005883a 	mov	r2,fp
  808004:	003e7906 	br	8079ec <__alt_mem_onchip_mem+0xff7ff9ec>
  808008:	d9402917 	ldw	r5,164(sp)
  80800c:	df002783 	ldbu	fp,158(sp)
  808010:	dcc02d15 	stw	r19,180(sp)
  808014:	d9402a15 	stw	r5,168(sp)
  808018:	d9402e15 	stw	r5,184(sp)
  80801c:	d8002915 	stw	zero,164(sp)
  808020:	d8003215 	stw	zero,200(sp)
  808024:	003a5d06 	br	80699c <__alt_mem_onchip_mem+0xff7fe99c>
  808028:	9080004c 	andi	r2,r18,1
  80802c:	0039883a 	mov	fp,zero
  808030:	10000426 	beq	r2,zero,808044 <___vfprintf_internal_r+0x1ddc>
  808034:	00800c04 	movi	r2,48
  808038:	dc001dc4 	addi	r16,sp,119
  80803c:	d8801dc5 	stb	r2,119(sp)
  808040:	003b8006 	br	806e44 <__alt_mem_onchip_mem+0xff7fee44>
  808044:	d8002e15 	stw	zero,184(sp)
  808048:	dc001e04 	addi	r16,sp,120
  80804c:	003a4d06 	br	806984 <__alt_mem_onchip_mem+0xff7fe984>
  808050:	8c7fff84 	addi	r17,r17,-2
  808054:	b5bfffc4 	addi	r22,r22,-1
  808058:	dd802615 	stw	r22,152(sp)
  80805c:	dc4022c5 	stb	r17,139(sp)
  808060:	b000bf16 	blt	r22,zero,808360 <___vfprintf_internal_r+0x20f8>
  808064:	00800ac4 	movi	r2,43
  808068:	d8802305 	stb	r2,140(sp)
  80806c:	00800244 	movi	r2,9
  808070:	15807016 	blt	r2,r22,808234 <___vfprintf_internal_r+0x1fcc>
  808074:	00800c04 	movi	r2,48
  808078:	b5800c04 	addi	r22,r22,48
  80807c:	d8802345 	stb	r2,141(sp)
  808080:	dd802385 	stb	r22,142(sp)
  808084:	d88023c4 	addi	r2,sp,143
  808088:	df0022c4 	addi	fp,sp,139
  80808c:	d8c03317 	ldw	r3,204(sp)
  808090:	1739c83a 	sub	fp,r2,fp
  808094:	d9003317 	ldw	r4,204(sp)
  808098:	e0c7883a 	add	r3,fp,r3
  80809c:	df003a15 	stw	fp,232(sp)
  8080a0:	d8c02e15 	stw	r3,184(sp)
  8080a4:	00800044 	movi	r2,1
  8080a8:	1100b30e 	bge	r2,r4,808378 <___vfprintf_internal_r+0x2110>
  8080ac:	d8c02e17 	ldw	r3,184(sp)
  8080b0:	18c00044 	addi	r3,r3,1
  8080b4:	d8c02e15 	stw	r3,184(sp)
  8080b8:	1805883a 	mov	r2,r3
  8080bc:	1800ac16 	blt	r3,zero,808370 <___vfprintf_internal_r+0x2108>
  8080c0:	d8003215 	stw	zero,200(sp)
  8080c4:	003e5d06 	br	807a3c <__alt_mem_onchip_mem+0xff7ffa3c>
  8080c8:	d9002c17 	ldw	r4,176(sp)
  8080cc:	d9801e04 	addi	r6,sp,120
  8080d0:	b80b883a 	mov	r5,r23
  8080d4:	080d8640 	call	80d864 <__sprint_r>
  8080d8:	1039651e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff7fe670>
  8080dc:	dc402617 	ldw	r17,152(sp)
  8080e0:	d8c02017 	ldw	r3,128(sp)
  8080e4:	d8801f17 	ldw	r2,124(sp)
  8080e8:	da000404 	addi	r8,sp,16
  8080ec:	003ed606 	br	807c48 <__alt_mem_onchip_mem+0xff7ffc48>
  8080f0:	582b883a 	mov	r21,r11
  8080f4:	d8002915 	stw	zero,164(sp)
  8080f8:	0038bd06 	br	8063f0 <__alt_mem_onchip_mem+0xff7fe3f0>
  8080fc:	d8802917 	ldw	r2,164(sp)
  808100:	103e071e 	bne	r2,zero,807920 <__alt_mem_onchip_mem+0xff7ff920>
  808104:	dc002915 	stw	r16,164(sp)
  808108:	003e0506 	br	807920 <__alt_mem_onchip_mem+0xff7ff920>
  80810c:	d9002917 	ldw	r4,164(sp)
  808110:	20c00044 	addi	r3,r4,1
  808114:	003e0f06 	br	807954 <__alt_mem_onchip_mem+0xff7ff954>
  808118:	01400184 	movi	r5,6
  80811c:	d9402915 	stw	r5,164(sp)
  808120:	003dff06 	br	807920 <__alt_mem_onchip_mem+0xff7ff920>
  808124:	d8802104 	addi	r2,sp,132
  808128:	d8800315 	stw	r2,12(sp)
  80812c:	d8802504 	addi	r2,sp,148
  808130:	d8800215 	stw	r2,8(sp)
  808134:	d8802604 	addi	r2,sp,152
  808138:	d8800115 	stw	r2,4(sp)
  80813c:	d8802917 	ldw	r2,164(sp)
  808140:	d9403617 	ldw	r5,216(sp)
  808144:	d9002c17 	ldw	r4,176(sp)
  808148:	d8800015 	stw	r2,0(sp)
  80814c:	01c000c4 	movi	r7,3
  808150:	980d883a 	mov	r6,r19
  808154:	da003d15 	stw	r8,244(sp)
  808158:	080888c0 	call	80888c <_dtoa_r>
  80815c:	d8c02917 	ldw	r3,164(sp)
  808160:	da003d17 	ldw	r8,244(sp)
  808164:	1021883a 	mov	r16,r2
  808168:	10f9883a 	add	fp,r2,r3
  80816c:	81000007 	ldb	r4,0(r16)
  808170:	00800c04 	movi	r2,48
  808174:	20805e26 	beq	r4,r2,8082f0 <___vfprintf_internal_r+0x2088>
  808178:	d8c02617 	ldw	r3,152(sp)
  80817c:	e0f9883a 	add	fp,fp,r3
  808180:	003e0a06 	br	8079ac <__alt_mem_onchip_mem+0xff7ff9ac>
  808184:	00c00b44 	movi	r3,45
  808188:	24e0003c 	xorhi	r19,r4,32768
  80818c:	d8c02a05 	stb	r3,168(sp)
  808190:	003de906 	br	807938 <__alt_mem_onchip_mem+0xff7ff938>
  808194:	d8c03217 	ldw	r3,200(sp)
  808198:	00c07a0e 	bge	zero,r3,808384 <___vfprintf_internal_r+0x211c>
  80819c:	00800044 	movi	r2,1
  8081a0:	d9003317 	ldw	r4,204(sp)
  8081a4:	1105883a 	add	r2,r2,r4
  8081a8:	d8802e15 	stw	r2,184(sp)
  8081ac:	10004e16 	blt	r2,zero,8082e8 <___vfprintf_internal_r+0x2080>
  8081b0:	044019c4 	movi	r17,103
  8081b4:	003e2106 	br	807a3c <__alt_mem_onchip_mem+0xff7ffa3c>
  8081b8:	d9002917 	ldw	r4,164(sp)
  8081bc:	d8802104 	addi	r2,sp,132
  8081c0:	d8800315 	stw	r2,12(sp)
  8081c4:	d9000015 	stw	r4,0(sp)
  8081c8:	d8802504 	addi	r2,sp,148
  8081cc:	d9403617 	ldw	r5,216(sp)
  8081d0:	d9002c17 	ldw	r4,176(sp)
  8081d4:	d8800215 	stw	r2,8(sp)
  8081d8:	d8802604 	addi	r2,sp,152
  8081dc:	d8800115 	stw	r2,4(sp)
  8081e0:	01c000c4 	movi	r7,3
  8081e4:	980d883a 	mov	r6,r19
  8081e8:	da003d15 	stw	r8,244(sp)
  8081ec:	080888c0 	call	80888c <_dtoa_r>
  8081f0:	d8c02917 	ldw	r3,164(sp)
  8081f4:	da003d17 	ldw	r8,244(sp)
  8081f8:	1021883a 	mov	r16,r2
  8081fc:	00801184 	movi	r2,70
  808200:	80f9883a 	add	fp,r16,r3
  808204:	88bfd926 	beq	r17,r2,80816c <__alt_mem_onchip_mem+0xff80016c>
  808208:	003de806 	br	8079ac <__alt_mem_onchip_mem+0xff7ff9ac>
  80820c:	d9002917 	ldw	r4,164(sp)
  808210:	00c04d0e 	bge	zero,r3,808348 <___vfprintf_internal_r+0x20e0>
  808214:	2000441e 	bne	r4,zero,808328 <___vfprintf_internal_r+0x20c0>
  808218:	9480004c 	andi	r18,r18,1
  80821c:	9000421e 	bne	r18,zero,808328 <___vfprintf_internal_r+0x20c0>
  808220:	1805883a 	mov	r2,r3
  808224:	18007016 	blt	r3,zero,8083e8 <___vfprintf_internal_r+0x2180>
  808228:	d8c03217 	ldw	r3,200(sp)
  80822c:	d8c02e15 	stw	r3,184(sp)
  808230:	003e0206 	br	807a3c <__alt_mem_onchip_mem+0xff7ffa3c>
  808234:	df0022c4 	addi	fp,sp,139
  808238:	dc002915 	stw	r16,164(sp)
  80823c:	4027883a 	mov	r19,r8
  808240:	e021883a 	mov	r16,fp
  808244:	b009883a 	mov	r4,r22
  808248:	01400284 	movi	r5,10
  80824c:	08102180 	call	810218 <__modsi3>
  808250:	10800c04 	addi	r2,r2,48
  808254:	843fffc4 	addi	r16,r16,-1
  808258:	b009883a 	mov	r4,r22
  80825c:	01400284 	movi	r5,10
  808260:	80800005 	stb	r2,0(r16)
  808264:	08101940 	call	810194 <__divsi3>
  808268:	102d883a 	mov	r22,r2
  80826c:	00800244 	movi	r2,9
  808270:	15bff416 	blt	r2,r22,808244 <__alt_mem_onchip_mem+0xff800244>
  808274:	9811883a 	mov	r8,r19
  808278:	b0800c04 	addi	r2,r22,48
  80827c:	8027883a 	mov	r19,r16
  808280:	997fffc4 	addi	r5,r19,-1
  808284:	98bfffc5 	stb	r2,-1(r19)
  808288:	dc002917 	ldw	r16,164(sp)
  80828c:	2f006a2e 	bgeu	r5,fp,808438 <___vfprintf_internal_r+0x21d0>
  808290:	d9c02384 	addi	r7,sp,142
  808294:	3ccfc83a 	sub	r7,r7,r19
  808298:	d9002344 	addi	r4,sp,141
  80829c:	e1cf883a 	add	r7,fp,r7
  8082a0:	00000106 	br	8082a8 <___vfprintf_internal_r+0x2040>
  8082a4:	28800003 	ldbu	r2,0(r5)
  8082a8:	20800005 	stb	r2,0(r4)
  8082ac:	21000044 	addi	r4,r4,1
  8082b0:	29400044 	addi	r5,r5,1
  8082b4:	393ffb1e 	bne	r7,r4,8082a4 <__alt_mem_onchip_mem+0xff8002a4>
  8082b8:	d8802304 	addi	r2,sp,140
  8082bc:	14c5c83a 	sub	r2,r2,r19
  8082c0:	d8c02344 	addi	r3,sp,141
  8082c4:	1885883a 	add	r2,r3,r2
  8082c8:	003f7006 	br	80808c <__alt_mem_onchip_mem+0xff80008c>
  8082cc:	0005883a 	mov	r2,zero
  8082d0:	003f0f06 	br	807f10 <__alt_mem_onchip_mem+0xff7fff10>
  8082d4:	d8c03217 	ldw	r3,200(sp)
  8082d8:	18c00044 	addi	r3,r3,1
  8082dc:	d8c02e15 	stw	r3,184(sp)
  8082e0:	1805883a 	mov	r2,r3
  8082e4:	183fb20e 	bge	r3,zero,8081b0 <__alt_mem_onchip_mem+0xff8001b0>
  8082e8:	0005883a 	mov	r2,zero
  8082ec:	003fb006 	br	8081b0 <__alt_mem_onchip_mem+0xff8001b0>
  8082f0:	d9003617 	ldw	r4,216(sp)
  8082f4:	000d883a 	mov	r6,zero
  8082f8:	000f883a 	mov	r7,zero
  8082fc:	980b883a 	mov	r5,r19
  808300:	d8c03c15 	stw	r3,240(sp)
  808304:	da003d15 	stw	r8,244(sp)
  808308:	0810c300 	call	810c30 <__eqdf2>
  80830c:	d8c03c17 	ldw	r3,240(sp)
  808310:	da003d17 	ldw	r8,244(sp)
  808314:	103f9826 	beq	r2,zero,808178 <__alt_mem_onchip_mem+0xff800178>
  808318:	00800044 	movi	r2,1
  80831c:	10c7c83a 	sub	r3,r2,r3
  808320:	d8c02615 	stw	r3,152(sp)
  808324:	003f9506 	br	80817c <__alt_mem_onchip_mem+0xff80017c>
  808328:	d9002917 	ldw	r4,164(sp)
  80832c:	d8c03217 	ldw	r3,200(sp)
  808330:	20800044 	addi	r2,r4,1
  808334:	1885883a 	add	r2,r3,r2
  808338:	d8802e15 	stw	r2,184(sp)
  80833c:	103dbf0e 	bge	r2,zero,807a3c <__alt_mem_onchip_mem+0xff7ffa3c>
  808340:	0005883a 	mov	r2,zero
  808344:	003dbd06 	br	807a3c <__alt_mem_onchip_mem+0xff7ffa3c>
  808348:	2000211e 	bne	r4,zero,8083d0 <___vfprintf_internal_r+0x2168>
  80834c:	9480004c 	andi	r18,r18,1
  808350:	90001f1e 	bne	r18,zero,8083d0 <___vfprintf_internal_r+0x2168>
  808354:	00800044 	movi	r2,1
  808358:	d8802e15 	stw	r2,184(sp)
  80835c:	003db706 	br	807a3c <__alt_mem_onchip_mem+0xff7ffa3c>
  808360:	00800b44 	movi	r2,45
  808364:	05adc83a 	sub	r22,zero,r22
  808368:	d8802305 	stb	r2,140(sp)
  80836c:	003f3f06 	br	80806c <__alt_mem_onchip_mem+0xff80006c>
  808370:	0005883a 	mov	r2,zero
  808374:	003f5206 	br	8080c0 <__alt_mem_onchip_mem+0xff8000c0>
  808378:	90a4703a 	and	r18,r18,r2
  80837c:	903f4e26 	beq	r18,zero,8080b8 <__alt_mem_onchip_mem+0xff8000b8>
  808380:	003f4a06 	br	8080ac <__alt_mem_onchip_mem+0xff8000ac>
  808384:	00800084 	movi	r2,2
  808388:	10c5c83a 	sub	r2,r2,r3
  80838c:	003f8406 	br	8081a0 <__alt_mem_onchip_mem+0xff8001a0>
  808390:	d8802d17 	ldw	r2,180(sp)
  808394:	d9002d17 	ldw	r4,180(sp)
  808398:	ac400043 	ldbu	r17,1(r21)
  80839c:	10800017 	ldw	r2,0(r2)
  8083a0:	582b883a 	mov	r21,r11
  8083a4:	d8802915 	stw	r2,164(sp)
  8083a8:	20800104 	addi	r2,r4,4
  8083ac:	d9002917 	ldw	r4,164(sp)
  8083b0:	d8802d15 	stw	r2,180(sp)
  8083b4:	203e7a0e 	bge	r4,zero,807da0 <__alt_mem_onchip_mem+0xff7ffda0>
  8083b8:	8c403fcc 	andi	r17,r17,255
  8083bc:	00bfffc4 	movi	r2,-1
  8083c0:	8c40201c 	xori	r17,r17,128
  8083c4:	d8802915 	stw	r2,164(sp)
  8083c8:	8c7fe004 	addi	r17,r17,-128
  8083cc:	00380706 	br	8063ec <__alt_mem_onchip_mem+0xff7fe3ec>
  8083d0:	d8c02917 	ldw	r3,164(sp)
  8083d4:	18c00084 	addi	r3,r3,2
  8083d8:	d8c02e15 	stw	r3,184(sp)
  8083dc:	1805883a 	mov	r2,r3
  8083e0:	183d960e 	bge	r3,zero,807a3c <__alt_mem_onchip_mem+0xff7ffa3c>
  8083e4:	003fd606 	br	808340 <__alt_mem_onchip_mem+0xff800340>
  8083e8:	0005883a 	mov	r2,zero
  8083ec:	003f8e06 	br	808228 <__alt_mem_onchip_mem+0xff800228>
  8083f0:	9080004c 	andi	r2,r18,1
  8083f4:	103f811e 	bne	r2,zero,8081fc <__alt_mem_onchip_mem+0xff8001fc>
  8083f8:	d8802117 	ldw	r2,132(sp)
  8083fc:	1405c83a 	sub	r2,r2,r16
  808400:	d8803315 	stw	r2,204(sp)
  808404:	b47ef326 	beq	r22,r17,807fd4 <__alt_mem_onchip_mem+0xff7fffd4>
  808408:	dd802617 	ldw	r22,152(sp)
  80840c:	003f1106 	br	808054 <__alt_mem_onchip_mem+0xff800054>
  808410:	d9c02785 	stb	r7,158(sp)
  808414:	00390406 	br	806828 <__alt_mem_onchip_mem+0xff7fe828>
  808418:	d9c02785 	stb	r7,158(sp)
  80841c:	0038d306 	br	80676c <__alt_mem_onchip_mem+0xff7fe76c>
  808420:	d9c02785 	stb	r7,158(sp)
  808424:	003a6106 	br	806dac <__alt_mem_onchip_mem+0xff7fedac>
  808428:	d9c02785 	stb	r7,158(sp)
  80842c:	003af806 	br	807010 <__alt_mem_onchip_mem+0xff7ff010>
  808430:	0005883a 	mov	r2,zero
  808434:	003d7e06 	br	807a30 <__alt_mem_onchip_mem+0xff7ffa30>
  808438:	d8802344 	addi	r2,sp,141
  80843c:	003f1306 	br	80808c <__alt_mem_onchip_mem+0xff80008c>
  808440:	d9c02785 	stb	r7,158(sp)
  808444:	00392306 	br	8068d4 <__alt_mem_onchip_mem+0xff7fe8d4>
  808448:	d9c02785 	stb	r7,158(sp)
  80844c:	003aa906 	br	806ef4 <__alt_mem_onchip_mem+0xff7feef4>
  808450:	d9c02785 	stb	r7,158(sp)
  808454:	003a3d06 	br	806d4c <__alt_mem_onchip_mem+0xff7fed4c>
  808458:	d9c02785 	stb	r7,158(sp)
  80845c:	003aca06 	br	806f88 <__alt_mem_onchip_mem+0xff7fef88>

00808460 <__vfprintf_internal>:
  808460:	00802074 	movhi	r2,129
  808464:	109cbc04 	addi	r2,r2,29424
  808468:	300f883a 	mov	r7,r6
  80846c:	280d883a 	mov	r6,r5
  808470:	200b883a 	mov	r5,r4
  808474:	11000017 	ldw	r4,0(r2)
  808478:	08062681 	jmpi	806268 <___vfprintf_internal_r>

0080847c <__sbprintf>:
  80847c:	2880030b 	ldhu	r2,12(r5)
  808480:	2ac01917 	ldw	r11,100(r5)
  808484:	2a80038b 	ldhu	r10,14(r5)
  808488:	2a400717 	ldw	r9,28(r5)
  80848c:	2a000917 	ldw	r8,36(r5)
  808490:	defee204 	addi	sp,sp,-1144
  808494:	00c10004 	movi	r3,1024
  808498:	dc011a15 	stw	r16,1128(sp)
  80849c:	10bfff4c 	andi	r2,r2,65533
  8084a0:	2821883a 	mov	r16,r5
  8084a4:	d8cb883a 	add	r5,sp,r3
  8084a8:	dc811c15 	stw	r18,1136(sp)
  8084ac:	dc411b15 	stw	r17,1132(sp)
  8084b0:	dfc11d15 	stw	ra,1140(sp)
  8084b4:	2025883a 	mov	r18,r4
  8084b8:	d881030d 	sth	r2,1036(sp)
  8084bc:	dac11915 	stw	r11,1124(sp)
  8084c0:	da81038d 	sth	r10,1038(sp)
  8084c4:	da410715 	stw	r9,1052(sp)
  8084c8:	da010915 	stw	r8,1060(sp)
  8084cc:	dec10015 	stw	sp,1024(sp)
  8084d0:	dec10415 	stw	sp,1040(sp)
  8084d4:	d8c10215 	stw	r3,1032(sp)
  8084d8:	d8c10515 	stw	r3,1044(sp)
  8084dc:	d8010615 	stw	zero,1048(sp)
  8084e0:	08062680 	call	806268 <___vfprintf_internal_r>
  8084e4:	1023883a 	mov	r17,r2
  8084e8:	10000416 	blt	r2,zero,8084fc <__sbprintf+0x80>
  8084ec:	d9410004 	addi	r5,sp,1024
  8084f0:	9009883a 	mov	r4,r18
  8084f4:	080a1300 	call	80a130 <_fflush_r>
  8084f8:	10000d1e 	bne	r2,zero,808530 <__sbprintf+0xb4>
  8084fc:	d881030b 	ldhu	r2,1036(sp)
  808500:	1080100c 	andi	r2,r2,64
  808504:	10000326 	beq	r2,zero,808514 <__sbprintf+0x98>
  808508:	8080030b 	ldhu	r2,12(r16)
  80850c:	10801014 	ori	r2,r2,64
  808510:	8080030d 	sth	r2,12(r16)
  808514:	8805883a 	mov	r2,r17
  808518:	dfc11d17 	ldw	ra,1140(sp)
  80851c:	dc811c17 	ldw	r18,1136(sp)
  808520:	dc411b17 	ldw	r17,1132(sp)
  808524:	dc011a17 	ldw	r16,1128(sp)
  808528:	dec11e04 	addi	sp,sp,1144
  80852c:	f800283a 	ret
  808530:	047fffc4 	movi	r17,-1
  808534:	003ff106 	br	8084fc <__alt_mem_onchip_mem+0xff8004fc>

00808538 <__swsetup_r>:
  808538:	00802074 	movhi	r2,129
  80853c:	defffd04 	addi	sp,sp,-12
  808540:	109cbc04 	addi	r2,r2,29424
  808544:	dc400115 	stw	r17,4(sp)
  808548:	2023883a 	mov	r17,r4
  80854c:	11000017 	ldw	r4,0(r2)
  808550:	dc000015 	stw	r16,0(sp)
  808554:	dfc00215 	stw	ra,8(sp)
  808558:	2821883a 	mov	r16,r5
  80855c:	20000226 	beq	r4,zero,808568 <__swsetup_r+0x30>
  808560:	20800e17 	ldw	r2,56(r4)
  808564:	10003126 	beq	r2,zero,80862c <__swsetup_r+0xf4>
  808568:	8080030b 	ldhu	r2,12(r16)
  80856c:	10c0020c 	andi	r3,r2,8
  808570:	1009883a 	mov	r4,r2
  808574:	18000f26 	beq	r3,zero,8085b4 <__swsetup_r+0x7c>
  808578:	80c00417 	ldw	r3,16(r16)
  80857c:	18001526 	beq	r3,zero,8085d4 <__swsetup_r+0x9c>
  808580:	1100004c 	andi	r4,r2,1
  808584:	20001c1e 	bne	r4,zero,8085f8 <__swsetup_r+0xc0>
  808588:	1080008c 	andi	r2,r2,2
  80858c:	1000291e 	bne	r2,zero,808634 <__swsetup_r+0xfc>
  808590:	80800517 	ldw	r2,20(r16)
  808594:	80800215 	stw	r2,8(r16)
  808598:	18001c26 	beq	r3,zero,80860c <__swsetup_r+0xd4>
  80859c:	0005883a 	mov	r2,zero
  8085a0:	dfc00217 	ldw	ra,8(sp)
  8085a4:	dc400117 	ldw	r17,4(sp)
  8085a8:	dc000017 	ldw	r16,0(sp)
  8085ac:	dec00304 	addi	sp,sp,12
  8085b0:	f800283a 	ret
  8085b4:	2080040c 	andi	r2,r4,16
  8085b8:	10002e26 	beq	r2,zero,808674 <__swsetup_r+0x13c>
  8085bc:	2080010c 	andi	r2,r4,4
  8085c0:	10001e1e 	bne	r2,zero,80863c <__swsetup_r+0x104>
  8085c4:	80c00417 	ldw	r3,16(r16)
  8085c8:	20800214 	ori	r2,r4,8
  8085cc:	8080030d 	sth	r2,12(r16)
  8085d0:	183feb1e 	bne	r3,zero,808580 <__alt_mem_onchip_mem+0xff800580>
  8085d4:	1100a00c 	andi	r4,r2,640
  8085d8:	01408004 	movi	r5,512
  8085dc:	217fe826 	beq	r4,r5,808580 <__alt_mem_onchip_mem+0xff800580>
  8085e0:	800b883a 	mov	r5,r16
  8085e4:	8809883a 	mov	r4,r17
  8085e8:	080b0b00 	call	80b0b0 <__smakebuf_r>
  8085ec:	8080030b 	ldhu	r2,12(r16)
  8085f0:	80c00417 	ldw	r3,16(r16)
  8085f4:	003fe206 	br	808580 <__alt_mem_onchip_mem+0xff800580>
  8085f8:	80800517 	ldw	r2,20(r16)
  8085fc:	80000215 	stw	zero,8(r16)
  808600:	0085c83a 	sub	r2,zero,r2
  808604:	80800615 	stw	r2,24(r16)
  808608:	183fe41e 	bne	r3,zero,80859c <__alt_mem_onchip_mem+0xff80059c>
  80860c:	80c0030b 	ldhu	r3,12(r16)
  808610:	0005883a 	mov	r2,zero
  808614:	1900200c 	andi	r4,r3,128
  808618:	203fe126 	beq	r4,zero,8085a0 <__alt_mem_onchip_mem+0xff8005a0>
  80861c:	18c01014 	ori	r3,r3,64
  808620:	80c0030d 	sth	r3,12(r16)
  808624:	00bfffc4 	movi	r2,-1
  808628:	003fdd06 	br	8085a0 <__alt_mem_onchip_mem+0xff8005a0>
  80862c:	080a50c0 	call	80a50c <__sinit>
  808630:	003fcd06 	br	808568 <__alt_mem_onchip_mem+0xff800568>
  808634:	0005883a 	mov	r2,zero
  808638:	003fd606 	br	808594 <__alt_mem_onchip_mem+0xff800594>
  80863c:	81400c17 	ldw	r5,48(r16)
  808640:	28000626 	beq	r5,zero,80865c <__swsetup_r+0x124>
  808644:	80801004 	addi	r2,r16,64
  808648:	28800326 	beq	r5,r2,808658 <__swsetup_r+0x120>
  80864c:	8809883a 	mov	r4,r17
  808650:	080a6800 	call	80a680 <_free_r>
  808654:	8100030b 	ldhu	r4,12(r16)
  808658:	80000c15 	stw	zero,48(r16)
  80865c:	80c00417 	ldw	r3,16(r16)
  808660:	00bff6c4 	movi	r2,-37
  808664:	1108703a 	and	r4,r2,r4
  808668:	80000115 	stw	zero,4(r16)
  80866c:	80c00015 	stw	r3,0(r16)
  808670:	003fd506 	br	8085c8 <__alt_mem_onchip_mem+0xff8005c8>
  808674:	00800244 	movi	r2,9
  808678:	88800015 	stw	r2,0(r17)
  80867c:	20801014 	ori	r2,r4,64
  808680:	8080030d 	sth	r2,12(r16)
  808684:	00bfffc4 	movi	r2,-1
  808688:	003fc506 	br	8085a0 <__alt_mem_onchip_mem+0xff8005a0>

0080868c <quorem>:
  80868c:	defff704 	addi	sp,sp,-36
  808690:	dc800215 	stw	r18,8(sp)
  808694:	20800417 	ldw	r2,16(r4)
  808698:	2c800417 	ldw	r18,16(r5)
  80869c:	dfc00815 	stw	ra,32(sp)
  8086a0:	ddc00715 	stw	r23,28(sp)
  8086a4:	dd800615 	stw	r22,24(sp)
  8086a8:	dd400515 	stw	r21,20(sp)
  8086ac:	dd000415 	stw	r20,16(sp)
  8086b0:	dcc00315 	stw	r19,12(sp)
  8086b4:	dc400115 	stw	r17,4(sp)
  8086b8:	dc000015 	stw	r16,0(sp)
  8086bc:	14807116 	blt	r2,r18,808884 <quorem+0x1f8>
  8086c0:	94bfffc4 	addi	r18,r18,-1
  8086c4:	94ad883a 	add	r22,r18,r18
  8086c8:	b5ad883a 	add	r22,r22,r22
  8086cc:	2c400504 	addi	r17,r5,20
  8086d0:	8da9883a 	add	r20,r17,r22
  8086d4:	25400504 	addi	r21,r4,20
  8086d8:	282f883a 	mov	r23,r5
  8086dc:	adad883a 	add	r22,r21,r22
  8086e0:	a1400017 	ldw	r5,0(r20)
  8086e4:	2021883a 	mov	r16,r4
  8086e8:	b1000017 	ldw	r4,0(r22)
  8086ec:	29400044 	addi	r5,r5,1
  8086f0:	081028c0 	call	81028c <__udivsi3>
  8086f4:	1027883a 	mov	r19,r2
  8086f8:	10002c26 	beq	r2,zero,8087ac <quorem+0x120>
  8086fc:	a813883a 	mov	r9,r21
  808700:	880b883a 	mov	r5,r17
  808704:	0009883a 	mov	r4,zero
  808708:	000d883a 	mov	r6,zero
  80870c:	2a000017 	ldw	r8,0(r5)
  808710:	49c00017 	ldw	r7,0(r9)
  808714:	29400104 	addi	r5,r5,4
  808718:	40bfffcc 	andi	r2,r8,65535
  80871c:	14c5383a 	mul	r2,r2,r19
  808720:	4010d43a 	srli	r8,r8,16
  808724:	38ffffcc 	andi	r3,r7,65535
  808728:	1105883a 	add	r2,r2,r4
  80872c:	1008d43a 	srli	r4,r2,16
  808730:	44d1383a 	mul	r8,r8,r19
  808734:	198d883a 	add	r6,r3,r6
  808738:	10ffffcc 	andi	r3,r2,65535
  80873c:	30c7c83a 	sub	r3,r6,r3
  808740:	380ed43a 	srli	r7,r7,16
  808744:	4105883a 	add	r2,r8,r4
  808748:	180dd43a 	srai	r6,r3,16
  80874c:	113fffcc 	andi	r4,r2,65535
  808750:	390fc83a 	sub	r7,r7,r4
  808754:	398d883a 	add	r6,r7,r6
  808758:	300e943a 	slli	r7,r6,16
  80875c:	18ffffcc 	andi	r3,r3,65535
  808760:	1008d43a 	srli	r4,r2,16
  808764:	38ceb03a 	or	r7,r7,r3
  808768:	49c00015 	stw	r7,0(r9)
  80876c:	300dd43a 	srai	r6,r6,16
  808770:	4a400104 	addi	r9,r9,4
  808774:	a17fe52e 	bgeu	r20,r5,80870c <__alt_mem_onchip_mem+0xff80070c>
  808778:	b0800017 	ldw	r2,0(r22)
  80877c:	10000b1e 	bne	r2,zero,8087ac <quorem+0x120>
  808780:	b0bfff04 	addi	r2,r22,-4
  808784:	a880082e 	bgeu	r21,r2,8087a8 <quorem+0x11c>
  808788:	b0ffff17 	ldw	r3,-4(r22)
  80878c:	18000326 	beq	r3,zero,80879c <quorem+0x110>
  808790:	00000506 	br	8087a8 <quorem+0x11c>
  808794:	10c00017 	ldw	r3,0(r2)
  808798:	1800031e 	bne	r3,zero,8087a8 <quorem+0x11c>
  80879c:	10bfff04 	addi	r2,r2,-4
  8087a0:	94bfffc4 	addi	r18,r18,-1
  8087a4:	a8bffb36 	bltu	r21,r2,808794 <__alt_mem_onchip_mem+0xff800794>
  8087a8:	84800415 	stw	r18,16(r16)
  8087ac:	b80b883a 	mov	r5,r23
  8087b0:	8009883a 	mov	r4,r16
  8087b4:	080c7f00 	call	80c7f0 <__mcmp>
  8087b8:	10002616 	blt	r2,zero,808854 <quorem+0x1c8>
  8087bc:	9cc00044 	addi	r19,r19,1
  8087c0:	a805883a 	mov	r2,r21
  8087c4:	000b883a 	mov	r5,zero
  8087c8:	11000017 	ldw	r4,0(r2)
  8087cc:	89800017 	ldw	r6,0(r17)
  8087d0:	10800104 	addi	r2,r2,4
  8087d4:	20ffffcc 	andi	r3,r4,65535
  8087d8:	194b883a 	add	r5,r3,r5
  8087dc:	30ffffcc 	andi	r3,r6,65535
  8087e0:	28c7c83a 	sub	r3,r5,r3
  8087e4:	300cd43a 	srli	r6,r6,16
  8087e8:	2008d43a 	srli	r4,r4,16
  8087ec:	180bd43a 	srai	r5,r3,16
  8087f0:	18ffffcc 	andi	r3,r3,65535
  8087f4:	2189c83a 	sub	r4,r4,r6
  8087f8:	2149883a 	add	r4,r4,r5
  8087fc:	200c943a 	slli	r6,r4,16
  808800:	8c400104 	addi	r17,r17,4
  808804:	200bd43a 	srai	r5,r4,16
  808808:	30c6b03a 	or	r3,r6,r3
  80880c:	10ffff15 	stw	r3,-4(r2)
  808810:	a47fed2e 	bgeu	r20,r17,8087c8 <__alt_mem_onchip_mem+0xff8007c8>
  808814:	9485883a 	add	r2,r18,r18
  808818:	1085883a 	add	r2,r2,r2
  80881c:	a887883a 	add	r3,r21,r2
  808820:	18800017 	ldw	r2,0(r3)
  808824:	10000b1e 	bne	r2,zero,808854 <quorem+0x1c8>
  808828:	18bfff04 	addi	r2,r3,-4
  80882c:	a880082e 	bgeu	r21,r2,808850 <quorem+0x1c4>
  808830:	18ffff17 	ldw	r3,-4(r3)
  808834:	18000326 	beq	r3,zero,808844 <quorem+0x1b8>
  808838:	00000506 	br	808850 <quorem+0x1c4>
  80883c:	10c00017 	ldw	r3,0(r2)
  808840:	1800031e 	bne	r3,zero,808850 <quorem+0x1c4>
  808844:	10bfff04 	addi	r2,r2,-4
  808848:	94bfffc4 	addi	r18,r18,-1
  80884c:	a8bffb36 	bltu	r21,r2,80883c <__alt_mem_onchip_mem+0xff80083c>
  808850:	84800415 	stw	r18,16(r16)
  808854:	9805883a 	mov	r2,r19
  808858:	dfc00817 	ldw	ra,32(sp)
  80885c:	ddc00717 	ldw	r23,28(sp)
  808860:	dd800617 	ldw	r22,24(sp)
  808864:	dd400517 	ldw	r21,20(sp)
  808868:	dd000417 	ldw	r20,16(sp)
  80886c:	dcc00317 	ldw	r19,12(sp)
  808870:	dc800217 	ldw	r18,8(sp)
  808874:	dc400117 	ldw	r17,4(sp)
  808878:	dc000017 	ldw	r16,0(sp)
  80887c:	dec00904 	addi	sp,sp,36
  808880:	f800283a 	ret
  808884:	0005883a 	mov	r2,zero
  808888:	003ff306 	br	808858 <__alt_mem_onchip_mem+0xff800858>

0080888c <_dtoa_r>:
  80888c:	20801017 	ldw	r2,64(r4)
  808890:	deffde04 	addi	sp,sp,-136
  808894:	df002015 	stw	fp,128(sp)
  808898:	dcc01b15 	stw	r19,108(sp)
  80889c:	dc801a15 	stw	r18,104(sp)
  8088a0:	dc401915 	stw	r17,100(sp)
  8088a4:	dc001815 	stw	r16,96(sp)
  8088a8:	dfc02115 	stw	ra,132(sp)
  8088ac:	ddc01f15 	stw	r23,124(sp)
  8088b0:	dd801e15 	stw	r22,120(sp)
  8088b4:	dd401d15 	stw	r21,116(sp)
  8088b8:	dd001c15 	stw	r20,112(sp)
  8088bc:	d9c00315 	stw	r7,12(sp)
  8088c0:	2039883a 	mov	fp,r4
  8088c4:	3023883a 	mov	r17,r6
  8088c8:	2825883a 	mov	r18,r5
  8088cc:	dc002417 	ldw	r16,144(sp)
  8088d0:	3027883a 	mov	r19,r6
  8088d4:	10000826 	beq	r2,zero,8088f8 <_dtoa_r+0x6c>
  8088d8:	21801117 	ldw	r6,68(r4)
  8088dc:	00c00044 	movi	r3,1
  8088e0:	100b883a 	mov	r5,r2
  8088e4:	1986983a 	sll	r3,r3,r6
  8088e8:	11800115 	stw	r6,4(r2)
  8088ec:	10c00215 	stw	r3,8(r2)
  8088f0:	080bfd00 	call	80bfd0 <_Bfree>
  8088f4:	e0001015 	stw	zero,64(fp)
  8088f8:	88002e16 	blt	r17,zero,8089b4 <_dtoa_r+0x128>
  8088fc:	80000015 	stw	zero,0(r16)
  808900:	889ffc2c 	andhi	r2,r17,32752
  808904:	00dffc34 	movhi	r3,32752
  808908:	10c01c26 	beq	r2,r3,80897c <_dtoa_r+0xf0>
  80890c:	000d883a 	mov	r6,zero
  808910:	000f883a 	mov	r7,zero
  808914:	9009883a 	mov	r4,r18
  808918:	980b883a 	mov	r5,r19
  80891c:	0810c300 	call	810c30 <__eqdf2>
  808920:	10002b1e 	bne	r2,zero,8089d0 <_dtoa_r+0x144>
  808924:	d9c02317 	ldw	r7,140(sp)
  808928:	00800044 	movi	r2,1
  80892c:	38800015 	stw	r2,0(r7)
  808930:	d8802517 	ldw	r2,148(sp)
  808934:	10019e26 	beq	r2,zero,808fb0 <_dtoa_r+0x724>
  808938:	d8c02517 	ldw	r3,148(sp)
  80893c:	00802074 	movhi	r2,129
  808940:	10948444 	addi	r2,r2,21009
  808944:	18800015 	stw	r2,0(r3)
  808948:	10bfffc4 	addi	r2,r2,-1
  80894c:	dfc02117 	ldw	ra,132(sp)
  808950:	df002017 	ldw	fp,128(sp)
  808954:	ddc01f17 	ldw	r23,124(sp)
  808958:	dd801e17 	ldw	r22,120(sp)
  80895c:	dd401d17 	ldw	r21,116(sp)
  808960:	dd001c17 	ldw	r20,112(sp)
  808964:	dcc01b17 	ldw	r19,108(sp)
  808968:	dc801a17 	ldw	r18,104(sp)
  80896c:	dc401917 	ldw	r17,100(sp)
  808970:	dc001817 	ldw	r16,96(sp)
  808974:	dec02204 	addi	sp,sp,136
  808978:	f800283a 	ret
  80897c:	d8c02317 	ldw	r3,140(sp)
  808980:	0089c3c4 	movi	r2,9999
  808984:	18800015 	stw	r2,0(r3)
  808988:	90017726 	beq	r18,zero,808f68 <_dtoa_r+0x6dc>
  80898c:	00802074 	movhi	r2,129
  808990:	10949004 	addi	r2,r2,21056
  808994:	d9002517 	ldw	r4,148(sp)
  808998:	203fec26 	beq	r4,zero,80894c <__alt_mem_onchip_mem+0xff80094c>
  80899c:	10c000c7 	ldb	r3,3(r2)
  8089a0:	1801781e 	bne	r3,zero,808f84 <_dtoa_r+0x6f8>
  8089a4:	10c000c4 	addi	r3,r2,3
  8089a8:	d9802517 	ldw	r6,148(sp)
  8089ac:	30c00015 	stw	r3,0(r6)
  8089b0:	003fe606 	br	80894c <__alt_mem_onchip_mem+0xff80094c>
  8089b4:	04e00034 	movhi	r19,32768
  8089b8:	9cffffc4 	addi	r19,r19,-1
  8089bc:	00800044 	movi	r2,1
  8089c0:	8ce6703a 	and	r19,r17,r19
  8089c4:	80800015 	stw	r2,0(r16)
  8089c8:	9823883a 	mov	r17,r19
  8089cc:	003fcc06 	br	808900 <__alt_mem_onchip_mem+0xff800900>
  8089d0:	d8800204 	addi	r2,sp,8
  8089d4:	d8800015 	stw	r2,0(sp)
  8089d8:	d9c00104 	addi	r7,sp,4
  8089dc:	900b883a 	mov	r5,r18
  8089e0:	980d883a 	mov	r6,r19
  8089e4:	e009883a 	mov	r4,fp
  8089e8:	8820d53a 	srli	r16,r17,20
  8089ec:	080cbbc0 	call	80cbbc <__d2b>
  8089f0:	d8800915 	stw	r2,36(sp)
  8089f4:	8001651e 	bne	r16,zero,808f8c <_dtoa_r+0x700>
  8089f8:	dd800217 	ldw	r22,8(sp)
  8089fc:	dc000117 	ldw	r16,4(sp)
  808a00:	00800804 	movi	r2,32
  808a04:	b421883a 	add	r16,r22,r16
  808a08:	80c10c84 	addi	r3,r16,1074
  808a0c:	10c2d10e 	bge	r2,r3,809554 <_dtoa_r+0xcc8>
  808a10:	00801004 	movi	r2,64
  808a14:	81010484 	addi	r4,r16,1042
  808a18:	10c7c83a 	sub	r3,r2,r3
  808a1c:	9108d83a 	srl	r4,r18,r4
  808a20:	88e2983a 	sll	r17,r17,r3
  808a24:	2448b03a 	or	r4,r4,r17
  808a28:	0805f840 	call	805f84 <__floatunsidf>
  808a2c:	017f8434 	movhi	r5,65040
  808a30:	01800044 	movi	r6,1
  808a34:	1009883a 	mov	r4,r2
  808a38:	194b883a 	add	r5,r3,r5
  808a3c:	843fffc4 	addi	r16,r16,-1
  808a40:	d9801115 	stw	r6,68(sp)
  808a44:	000d883a 	mov	r6,zero
  808a48:	01cffe34 	movhi	r7,16376
  808a4c:	08056880 	call	805688 <__subdf3>
  808a50:	0198dbf4 	movhi	r6,25455
  808a54:	01cff4f4 	movhi	r7,16339
  808a58:	3190d844 	addi	r6,r6,17249
  808a5c:	39e1e9c4 	addi	r7,r7,-30809
  808a60:	1009883a 	mov	r4,r2
  808a64:	180b883a 	mov	r5,r3
  808a68:	0804f700 	call	804f70 <__muldf3>
  808a6c:	01a2d874 	movhi	r6,35681
  808a70:	01cff1f4 	movhi	r7,16327
  808a74:	31b22cc4 	addi	r6,r6,-14157
  808a78:	39e28a04 	addi	r7,r7,-30168
  808a7c:	180b883a 	mov	r5,r3
  808a80:	1009883a 	mov	r4,r2
  808a84:	08044f40 	call	8044f4 <__adddf3>
  808a88:	8009883a 	mov	r4,r16
  808a8c:	1029883a 	mov	r20,r2
  808a90:	1823883a 	mov	r17,r3
  808a94:	0810d380 	call	810d38 <__floatsidf>
  808a98:	019427f4 	movhi	r6,20639
  808a9c:	01cff4f4 	movhi	r7,16339
  808aa0:	319e7ec4 	addi	r6,r6,31227
  808aa4:	39d104c4 	addi	r7,r7,17427
  808aa8:	1009883a 	mov	r4,r2
  808aac:	180b883a 	mov	r5,r3
  808ab0:	0804f700 	call	804f70 <__muldf3>
  808ab4:	100d883a 	mov	r6,r2
  808ab8:	180f883a 	mov	r7,r3
  808abc:	a009883a 	mov	r4,r20
  808ac0:	880b883a 	mov	r5,r17
  808ac4:	08044f40 	call	8044f4 <__adddf3>
  808ac8:	1009883a 	mov	r4,r2
  808acc:	180b883a 	mov	r5,r3
  808ad0:	1029883a 	mov	r20,r2
  808ad4:	1823883a 	mov	r17,r3
  808ad8:	0810cb80 	call	810cb8 <__fixdfsi>
  808adc:	000d883a 	mov	r6,zero
  808ae0:	000f883a 	mov	r7,zero
  808ae4:	a009883a 	mov	r4,r20
  808ae8:	880b883a 	mov	r5,r17
  808aec:	d8800515 	stw	r2,20(sp)
  808af0:	0804e7c0 	call	804e7c <__ledf2>
  808af4:	10028716 	blt	r2,zero,809514 <_dtoa_r+0xc88>
  808af8:	d8c00517 	ldw	r3,20(sp)
  808afc:	00800584 	movi	r2,22
  808b00:	10c27536 	bltu	r2,r3,8094d8 <_dtoa_r+0xc4c>
  808b04:	180490fa 	slli	r2,r3,3
  808b08:	00c02074 	movhi	r3,129
  808b0c:	18d4ac04 	addi	r3,r3,21168
  808b10:	1885883a 	add	r2,r3,r2
  808b14:	11000017 	ldw	r4,0(r2)
  808b18:	11400117 	ldw	r5,4(r2)
  808b1c:	900d883a 	mov	r6,r18
  808b20:	980f883a 	mov	r7,r19
  808b24:	0804da00 	call	804da0 <__gedf2>
  808b28:	00828d0e 	bge	zero,r2,809560 <_dtoa_r+0xcd4>
  808b2c:	d9000517 	ldw	r4,20(sp)
  808b30:	d8000e15 	stw	zero,56(sp)
  808b34:	213fffc4 	addi	r4,r4,-1
  808b38:	d9000515 	stw	r4,20(sp)
  808b3c:	b42dc83a 	sub	r22,r22,r16
  808b40:	b5bfffc4 	addi	r22,r22,-1
  808b44:	b0026f16 	blt	r22,zero,809504 <_dtoa_r+0xc78>
  808b48:	d8000815 	stw	zero,32(sp)
  808b4c:	d9c00517 	ldw	r7,20(sp)
  808b50:	38026416 	blt	r7,zero,8094e4 <_dtoa_r+0xc58>
  808b54:	b1ed883a 	add	r22,r22,r7
  808b58:	d9c00d15 	stw	r7,52(sp)
  808b5c:	d8000a15 	stw	zero,40(sp)
  808b60:	d9800317 	ldw	r6,12(sp)
  808b64:	00800244 	movi	r2,9
  808b68:	11811436 	bltu	r2,r6,808fbc <_dtoa_r+0x730>
  808b6c:	00800144 	movi	r2,5
  808b70:	1184e10e 	bge	r2,r6,809ef8 <_dtoa_r+0x166c>
  808b74:	31bfff04 	addi	r6,r6,-4
  808b78:	d9800315 	stw	r6,12(sp)
  808b7c:	0023883a 	mov	r17,zero
  808b80:	d9800317 	ldw	r6,12(sp)
  808b84:	008000c4 	movi	r2,3
  808b88:	30836726 	beq	r6,r2,809928 <_dtoa_r+0x109c>
  808b8c:	1183410e 	bge	r2,r6,809894 <_dtoa_r+0x1008>
  808b90:	d9c00317 	ldw	r7,12(sp)
  808b94:	00800104 	movi	r2,4
  808b98:	38827c26 	beq	r7,r2,80958c <_dtoa_r+0xd00>
  808b9c:	00800144 	movi	r2,5
  808ba0:	3884c41e 	bne	r7,r2,809eb4 <_dtoa_r+0x1628>
  808ba4:	00800044 	movi	r2,1
  808ba8:	d8800b15 	stw	r2,44(sp)
  808bac:	d8c00517 	ldw	r3,20(sp)
  808bb0:	d9002217 	ldw	r4,136(sp)
  808bb4:	1907883a 	add	r3,r3,r4
  808bb8:	19800044 	addi	r6,r3,1
  808bbc:	d8c00c15 	stw	r3,48(sp)
  808bc0:	d9800615 	stw	r6,24(sp)
  808bc4:	0183a40e 	bge	zero,r6,809a58 <_dtoa_r+0x11cc>
  808bc8:	d9800617 	ldw	r6,24(sp)
  808bcc:	3021883a 	mov	r16,r6
  808bd0:	e0001115 	stw	zero,68(fp)
  808bd4:	008005c4 	movi	r2,23
  808bd8:	1184c92e 	bgeu	r2,r6,809f00 <_dtoa_r+0x1674>
  808bdc:	00c00044 	movi	r3,1
  808be0:	00800104 	movi	r2,4
  808be4:	1085883a 	add	r2,r2,r2
  808be8:	11000504 	addi	r4,r2,20
  808bec:	180b883a 	mov	r5,r3
  808bf0:	18c00044 	addi	r3,r3,1
  808bf4:	313ffb2e 	bgeu	r6,r4,808be4 <__alt_mem_onchip_mem+0xff800be4>
  808bf8:	e1401115 	stw	r5,68(fp)
  808bfc:	e009883a 	mov	r4,fp
  808c00:	080bf280 	call	80bf28 <_Balloc>
  808c04:	d8800715 	stw	r2,28(sp)
  808c08:	e0801015 	stw	r2,64(fp)
  808c0c:	00800384 	movi	r2,14
  808c10:	1400f736 	bltu	r2,r16,808ff0 <_dtoa_r+0x764>
  808c14:	8800f626 	beq	r17,zero,808ff0 <_dtoa_r+0x764>
  808c18:	d9c00517 	ldw	r7,20(sp)
  808c1c:	01c39a0e 	bge	zero,r7,809a88 <_dtoa_r+0x11fc>
  808c20:	388003cc 	andi	r2,r7,15
  808c24:	100490fa 	slli	r2,r2,3
  808c28:	382bd13a 	srai	r21,r7,4
  808c2c:	00c02074 	movhi	r3,129
  808c30:	18d4ac04 	addi	r3,r3,21168
  808c34:	1885883a 	add	r2,r3,r2
  808c38:	a8c0040c 	andi	r3,r21,16
  808c3c:	12400017 	ldw	r9,0(r2)
  808c40:	12000117 	ldw	r8,4(r2)
  808c44:	18037926 	beq	r3,zero,809a2c <_dtoa_r+0x11a0>
  808c48:	00802074 	movhi	r2,129
  808c4c:	1094a204 	addi	r2,r2,21128
  808c50:	11800817 	ldw	r6,32(r2)
  808c54:	11c00917 	ldw	r7,36(r2)
  808c58:	9009883a 	mov	r4,r18
  808c5c:	980b883a 	mov	r5,r19
  808c60:	da001715 	stw	r8,92(sp)
  808c64:	da401615 	stw	r9,88(sp)
  808c68:	08103480 	call	810348 <__divdf3>
  808c6c:	da001717 	ldw	r8,92(sp)
  808c70:	da401617 	ldw	r9,88(sp)
  808c74:	ad4003cc 	andi	r21,r21,15
  808c78:	040000c4 	movi	r16,3
  808c7c:	1023883a 	mov	r17,r2
  808c80:	1829883a 	mov	r20,r3
  808c84:	a8001126 	beq	r21,zero,808ccc <_dtoa_r+0x440>
  808c88:	05c02074 	movhi	r23,129
  808c8c:	bdd4a204 	addi	r23,r23,21128
  808c90:	4805883a 	mov	r2,r9
  808c94:	4007883a 	mov	r3,r8
  808c98:	a980004c 	andi	r6,r21,1
  808c9c:	1009883a 	mov	r4,r2
  808ca0:	a82bd07a 	srai	r21,r21,1
  808ca4:	180b883a 	mov	r5,r3
  808ca8:	30000426 	beq	r6,zero,808cbc <_dtoa_r+0x430>
  808cac:	b9800017 	ldw	r6,0(r23)
  808cb0:	b9c00117 	ldw	r7,4(r23)
  808cb4:	84000044 	addi	r16,r16,1
  808cb8:	0804f700 	call	804f70 <__muldf3>
  808cbc:	bdc00204 	addi	r23,r23,8
  808cc0:	a83ff51e 	bne	r21,zero,808c98 <__alt_mem_onchip_mem+0xff800c98>
  808cc4:	1013883a 	mov	r9,r2
  808cc8:	1811883a 	mov	r8,r3
  808ccc:	480d883a 	mov	r6,r9
  808cd0:	400f883a 	mov	r7,r8
  808cd4:	8809883a 	mov	r4,r17
  808cd8:	a00b883a 	mov	r5,r20
  808cdc:	08103480 	call	810348 <__divdf3>
  808ce0:	d8800f15 	stw	r2,60(sp)
  808ce4:	d8c01015 	stw	r3,64(sp)
  808ce8:	d8c00e17 	ldw	r3,56(sp)
  808cec:	18000626 	beq	r3,zero,808d08 <_dtoa_r+0x47c>
  808cf0:	d9000f17 	ldw	r4,60(sp)
  808cf4:	d9401017 	ldw	r5,64(sp)
  808cf8:	000d883a 	mov	r6,zero
  808cfc:	01cffc34 	movhi	r7,16368
  808d00:	0804e7c0 	call	804e7c <__ledf2>
  808d04:	10040b16 	blt	r2,zero,809d34 <_dtoa_r+0x14a8>
  808d08:	8009883a 	mov	r4,r16
  808d0c:	0810d380 	call	810d38 <__floatsidf>
  808d10:	d9800f17 	ldw	r6,60(sp)
  808d14:	d9c01017 	ldw	r7,64(sp)
  808d18:	1009883a 	mov	r4,r2
  808d1c:	180b883a 	mov	r5,r3
  808d20:	0804f700 	call	804f70 <__muldf3>
  808d24:	000d883a 	mov	r6,zero
  808d28:	01d00734 	movhi	r7,16412
  808d2c:	1009883a 	mov	r4,r2
  808d30:	180b883a 	mov	r5,r3
  808d34:	08044f40 	call	8044f4 <__adddf3>
  808d38:	1021883a 	mov	r16,r2
  808d3c:	d8800617 	ldw	r2,24(sp)
  808d40:	047f3034 	movhi	r17,64704
  808d44:	1c63883a 	add	r17,r3,r17
  808d48:	10031826 	beq	r2,zero,8099ac <_dtoa_r+0x1120>
  808d4c:	d8c00517 	ldw	r3,20(sp)
  808d50:	db000617 	ldw	r12,24(sp)
  808d54:	d8c01315 	stw	r3,76(sp)
  808d58:	d9000b17 	ldw	r4,44(sp)
  808d5c:	20038f26 	beq	r4,zero,809b9c <_dtoa_r+0x1310>
  808d60:	60bfffc4 	addi	r2,r12,-1
  808d64:	100490fa 	slli	r2,r2,3
  808d68:	00c02074 	movhi	r3,129
  808d6c:	18d4ac04 	addi	r3,r3,21168
  808d70:	1885883a 	add	r2,r3,r2
  808d74:	11800017 	ldw	r6,0(r2)
  808d78:	11c00117 	ldw	r7,4(r2)
  808d7c:	d8800717 	ldw	r2,28(sp)
  808d80:	0009883a 	mov	r4,zero
  808d84:	014ff834 	movhi	r5,16352
  808d88:	db001615 	stw	r12,88(sp)
  808d8c:	15c00044 	addi	r23,r2,1
  808d90:	08103480 	call	810348 <__divdf3>
  808d94:	800d883a 	mov	r6,r16
  808d98:	880f883a 	mov	r7,r17
  808d9c:	1009883a 	mov	r4,r2
  808da0:	180b883a 	mov	r5,r3
  808da4:	08056880 	call	805688 <__subdf3>
  808da8:	d9401017 	ldw	r5,64(sp)
  808dac:	d9000f17 	ldw	r4,60(sp)
  808db0:	102b883a 	mov	r21,r2
  808db4:	d8c01215 	stw	r3,72(sp)
  808db8:	0810cb80 	call	810cb8 <__fixdfsi>
  808dbc:	1009883a 	mov	r4,r2
  808dc0:	1029883a 	mov	r20,r2
  808dc4:	0810d380 	call	810d38 <__floatsidf>
  808dc8:	d9000f17 	ldw	r4,60(sp)
  808dcc:	d9401017 	ldw	r5,64(sp)
  808dd0:	100d883a 	mov	r6,r2
  808dd4:	180f883a 	mov	r7,r3
  808dd8:	08056880 	call	805688 <__subdf3>
  808ddc:	1823883a 	mov	r17,r3
  808de0:	d8c00717 	ldw	r3,28(sp)
  808de4:	d9401217 	ldw	r5,72(sp)
  808de8:	a2000c04 	addi	r8,r20,48
  808dec:	1021883a 	mov	r16,r2
  808df0:	1a000005 	stb	r8,0(r3)
  808df4:	800d883a 	mov	r6,r16
  808df8:	880f883a 	mov	r7,r17
  808dfc:	a809883a 	mov	r4,r21
  808e00:	4029883a 	mov	r20,r8
  808e04:	0804da00 	call	804da0 <__gedf2>
  808e08:	00841d16 	blt	zero,r2,809e80 <_dtoa_r+0x15f4>
  808e0c:	800d883a 	mov	r6,r16
  808e10:	880f883a 	mov	r7,r17
  808e14:	0009883a 	mov	r4,zero
  808e18:	014ffc34 	movhi	r5,16368
  808e1c:	08056880 	call	805688 <__subdf3>
  808e20:	d9401217 	ldw	r5,72(sp)
  808e24:	100d883a 	mov	r6,r2
  808e28:	180f883a 	mov	r7,r3
  808e2c:	a809883a 	mov	r4,r21
  808e30:	0804da00 	call	804da0 <__gedf2>
  808e34:	db001617 	ldw	r12,88(sp)
  808e38:	00840e16 	blt	zero,r2,809e74 <_dtoa_r+0x15e8>
  808e3c:	00800044 	movi	r2,1
  808e40:	13006b0e 	bge	r2,r12,808ff0 <_dtoa_r+0x764>
  808e44:	d9000717 	ldw	r4,28(sp)
  808e48:	dd800f15 	stw	r22,60(sp)
  808e4c:	dcc01015 	stw	r19,64(sp)
  808e50:	2319883a 	add	r12,r4,r12
  808e54:	dcc01217 	ldw	r19,72(sp)
  808e58:	602d883a 	mov	r22,r12
  808e5c:	dc801215 	stw	r18,72(sp)
  808e60:	b825883a 	mov	r18,r23
  808e64:	00000906 	br	808e8c <_dtoa_r+0x600>
  808e68:	08056880 	call	805688 <__subdf3>
  808e6c:	a80d883a 	mov	r6,r21
  808e70:	980f883a 	mov	r7,r19
  808e74:	1009883a 	mov	r4,r2
  808e78:	180b883a 	mov	r5,r3
  808e7c:	0804e7c0 	call	804e7c <__ledf2>
  808e80:	1003e816 	blt	r2,zero,809e24 <_dtoa_r+0x1598>
  808e84:	b825883a 	mov	r18,r23
  808e88:	bd83e926 	beq	r23,r22,809e30 <_dtoa_r+0x15a4>
  808e8c:	a809883a 	mov	r4,r21
  808e90:	980b883a 	mov	r5,r19
  808e94:	000d883a 	mov	r6,zero
  808e98:	01d00934 	movhi	r7,16420
  808e9c:	0804f700 	call	804f70 <__muldf3>
  808ea0:	000d883a 	mov	r6,zero
  808ea4:	01d00934 	movhi	r7,16420
  808ea8:	8009883a 	mov	r4,r16
  808eac:	880b883a 	mov	r5,r17
  808eb0:	102b883a 	mov	r21,r2
  808eb4:	1827883a 	mov	r19,r3
  808eb8:	0804f700 	call	804f70 <__muldf3>
  808ebc:	180b883a 	mov	r5,r3
  808ec0:	1009883a 	mov	r4,r2
  808ec4:	1821883a 	mov	r16,r3
  808ec8:	1023883a 	mov	r17,r2
  808ecc:	0810cb80 	call	810cb8 <__fixdfsi>
  808ed0:	1009883a 	mov	r4,r2
  808ed4:	1029883a 	mov	r20,r2
  808ed8:	0810d380 	call	810d38 <__floatsidf>
  808edc:	8809883a 	mov	r4,r17
  808ee0:	800b883a 	mov	r5,r16
  808ee4:	100d883a 	mov	r6,r2
  808ee8:	180f883a 	mov	r7,r3
  808eec:	08056880 	call	805688 <__subdf3>
  808ef0:	a5000c04 	addi	r20,r20,48
  808ef4:	a80d883a 	mov	r6,r21
  808ef8:	980f883a 	mov	r7,r19
  808efc:	1009883a 	mov	r4,r2
  808f00:	180b883a 	mov	r5,r3
  808f04:	95000005 	stb	r20,0(r18)
  808f08:	1021883a 	mov	r16,r2
  808f0c:	1823883a 	mov	r17,r3
  808f10:	0804e7c0 	call	804e7c <__ledf2>
  808f14:	bdc00044 	addi	r23,r23,1
  808f18:	800d883a 	mov	r6,r16
  808f1c:	880f883a 	mov	r7,r17
  808f20:	0009883a 	mov	r4,zero
  808f24:	014ffc34 	movhi	r5,16368
  808f28:	103fcf0e 	bge	r2,zero,808e68 <__alt_mem_onchip_mem+0xff800e68>
  808f2c:	d8c01317 	ldw	r3,76(sp)
  808f30:	d8c00515 	stw	r3,20(sp)
  808f34:	d9400917 	ldw	r5,36(sp)
  808f38:	e009883a 	mov	r4,fp
  808f3c:	080bfd00 	call	80bfd0 <_Bfree>
  808f40:	d9000517 	ldw	r4,20(sp)
  808f44:	d9802317 	ldw	r6,140(sp)
  808f48:	d9c02517 	ldw	r7,148(sp)
  808f4c:	b8000005 	stb	zero,0(r23)
  808f50:	20800044 	addi	r2,r4,1
  808f54:	30800015 	stw	r2,0(r6)
  808f58:	3802aa26 	beq	r7,zero,809a04 <_dtoa_r+0x1178>
  808f5c:	3dc00015 	stw	r23,0(r7)
  808f60:	d8800717 	ldw	r2,28(sp)
  808f64:	003e7906 	br	80894c <__alt_mem_onchip_mem+0xff80094c>
  808f68:	00800434 	movhi	r2,16
  808f6c:	10bfffc4 	addi	r2,r2,-1
  808f70:	88a2703a 	and	r17,r17,r2
  808f74:	883e851e 	bne	r17,zero,80898c <__alt_mem_onchip_mem+0xff80098c>
  808f78:	00802074 	movhi	r2,129
  808f7c:	10948d04 	addi	r2,r2,21044
  808f80:	003e8406 	br	808994 <__alt_mem_onchip_mem+0xff800994>
  808f84:	10c00204 	addi	r3,r2,8
  808f88:	003e8706 	br	8089a8 <__alt_mem_onchip_mem+0xff8009a8>
  808f8c:	01400434 	movhi	r5,16
  808f90:	297fffc4 	addi	r5,r5,-1
  808f94:	994a703a 	and	r5,r19,r5
  808f98:	9009883a 	mov	r4,r18
  808f9c:	843f0044 	addi	r16,r16,-1023
  808fa0:	294ffc34 	orhi	r5,r5,16368
  808fa4:	dd800217 	ldw	r22,8(sp)
  808fa8:	d8001115 	stw	zero,68(sp)
  808fac:	003ea506 	br	808a44 <__alt_mem_onchip_mem+0xff800a44>
  808fb0:	00802074 	movhi	r2,129
  808fb4:	10948404 	addi	r2,r2,21008
  808fb8:	003e6406 	br	80894c <__alt_mem_onchip_mem+0xff80094c>
  808fbc:	e0001115 	stw	zero,68(fp)
  808fc0:	000b883a 	mov	r5,zero
  808fc4:	e009883a 	mov	r4,fp
  808fc8:	080bf280 	call	80bf28 <_Balloc>
  808fcc:	01bfffc4 	movi	r6,-1
  808fd0:	01c00044 	movi	r7,1
  808fd4:	d8800715 	stw	r2,28(sp)
  808fd8:	d9800c15 	stw	r6,48(sp)
  808fdc:	e0801015 	stw	r2,64(fp)
  808fe0:	d8000315 	stw	zero,12(sp)
  808fe4:	d9c00b15 	stw	r7,44(sp)
  808fe8:	d9800615 	stw	r6,24(sp)
  808fec:	d8002215 	stw	zero,136(sp)
  808ff0:	d8800117 	ldw	r2,4(sp)
  808ff4:	10008916 	blt	r2,zero,80921c <_dtoa_r+0x990>
  808ff8:	d9000517 	ldw	r4,20(sp)
  808ffc:	00c00384 	movi	r3,14
  809000:	19008616 	blt	r3,r4,80921c <_dtoa_r+0x990>
  809004:	200490fa 	slli	r2,r4,3
  809008:	00c02074 	movhi	r3,129
  80900c:	d9802217 	ldw	r6,136(sp)
  809010:	18d4ac04 	addi	r3,r3,21168
  809014:	1885883a 	add	r2,r3,r2
  809018:	14000017 	ldw	r16,0(r2)
  80901c:	14400117 	ldw	r17,4(r2)
  809020:	30016316 	blt	r6,zero,8095b0 <_dtoa_r+0xd24>
  809024:	800d883a 	mov	r6,r16
  809028:	880f883a 	mov	r7,r17
  80902c:	9009883a 	mov	r4,r18
  809030:	980b883a 	mov	r5,r19
  809034:	08103480 	call	810348 <__divdf3>
  809038:	180b883a 	mov	r5,r3
  80903c:	1009883a 	mov	r4,r2
  809040:	0810cb80 	call	810cb8 <__fixdfsi>
  809044:	1009883a 	mov	r4,r2
  809048:	102b883a 	mov	r21,r2
  80904c:	0810d380 	call	810d38 <__floatsidf>
  809050:	800d883a 	mov	r6,r16
  809054:	880f883a 	mov	r7,r17
  809058:	1009883a 	mov	r4,r2
  80905c:	180b883a 	mov	r5,r3
  809060:	0804f700 	call	804f70 <__muldf3>
  809064:	100d883a 	mov	r6,r2
  809068:	180f883a 	mov	r7,r3
  80906c:	9009883a 	mov	r4,r18
  809070:	980b883a 	mov	r5,r19
  809074:	08056880 	call	805688 <__subdf3>
  809078:	d9c00717 	ldw	r7,28(sp)
  80907c:	1009883a 	mov	r4,r2
  809080:	a8800c04 	addi	r2,r21,48
  809084:	38800005 	stb	r2,0(r7)
  809088:	3dc00044 	addi	r23,r7,1
  80908c:	d9c00617 	ldw	r7,24(sp)
  809090:	01800044 	movi	r6,1
  809094:	180b883a 	mov	r5,r3
  809098:	2005883a 	mov	r2,r4
  80909c:	39803826 	beq	r7,r6,809180 <_dtoa_r+0x8f4>
  8090a0:	000d883a 	mov	r6,zero
  8090a4:	01d00934 	movhi	r7,16420
  8090a8:	0804f700 	call	804f70 <__muldf3>
  8090ac:	000d883a 	mov	r6,zero
  8090b0:	000f883a 	mov	r7,zero
  8090b4:	1009883a 	mov	r4,r2
  8090b8:	180b883a 	mov	r5,r3
  8090bc:	1025883a 	mov	r18,r2
  8090c0:	1827883a 	mov	r19,r3
  8090c4:	0810c300 	call	810c30 <__eqdf2>
  8090c8:	103f9a26 	beq	r2,zero,808f34 <__alt_mem_onchip_mem+0xff800f34>
  8090cc:	d9c00617 	ldw	r7,24(sp)
  8090d0:	d8c00717 	ldw	r3,28(sp)
  8090d4:	b829883a 	mov	r20,r23
  8090d8:	38bfffc4 	addi	r2,r7,-1
  8090dc:	18ad883a 	add	r22,r3,r2
  8090e0:	00000a06 	br	80910c <_dtoa_r+0x880>
  8090e4:	0804f700 	call	804f70 <__muldf3>
  8090e8:	000d883a 	mov	r6,zero
  8090ec:	000f883a 	mov	r7,zero
  8090f0:	1009883a 	mov	r4,r2
  8090f4:	180b883a 	mov	r5,r3
  8090f8:	1025883a 	mov	r18,r2
  8090fc:	1827883a 	mov	r19,r3
  809100:	b829883a 	mov	r20,r23
  809104:	0810c300 	call	810c30 <__eqdf2>
  809108:	103f8a26 	beq	r2,zero,808f34 <__alt_mem_onchip_mem+0xff800f34>
  80910c:	800d883a 	mov	r6,r16
  809110:	880f883a 	mov	r7,r17
  809114:	9009883a 	mov	r4,r18
  809118:	980b883a 	mov	r5,r19
  80911c:	08103480 	call	810348 <__divdf3>
  809120:	180b883a 	mov	r5,r3
  809124:	1009883a 	mov	r4,r2
  809128:	0810cb80 	call	810cb8 <__fixdfsi>
  80912c:	1009883a 	mov	r4,r2
  809130:	102b883a 	mov	r21,r2
  809134:	0810d380 	call	810d38 <__floatsidf>
  809138:	800d883a 	mov	r6,r16
  80913c:	880f883a 	mov	r7,r17
  809140:	1009883a 	mov	r4,r2
  809144:	180b883a 	mov	r5,r3
  809148:	0804f700 	call	804f70 <__muldf3>
  80914c:	100d883a 	mov	r6,r2
  809150:	180f883a 	mov	r7,r3
  809154:	9009883a 	mov	r4,r18
  809158:	980b883a 	mov	r5,r19
  80915c:	08056880 	call	805688 <__subdf3>
  809160:	aa000c04 	addi	r8,r21,48
  809164:	a2000005 	stb	r8,0(r20)
  809168:	000d883a 	mov	r6,zero
  80916c:	01d00934 	movhi	r7,16420
  809170:	1009883a 	mov	r4,r2
  809174:	180b883a 	mov	r5,r3
  809178:	a5c00044 	addi	r23,r20,1
  80917c:	b53fd91e 	bne	r22,r20,8090e4 <__alt_mem_onchip_mem+0xff8010e4>
  809180:	100d883a 	mov	r6,r2
  809184:	180f883a 	mov	r7,r3
  809188:	1009883a 	mov	r4,r2
  80918c:	180b883a 	mov	r5,r3
  809190:	08044f40 	call	8044f4 <__adddf3>
  809194:	100d883a 	mov	r6,r2
  809198:	180f883a 	mov	r7,r3
  80919c:	8009883a 	mov	r4,r16
  8091a0:	880b883a 	mov	r5,r17
  8091a4:	1027883a 	mov	r19,r2
  8091a8:	1825883a 	mov	r18,r3
  8091ac:	0804e7c0 	call	804e7c <__ledf2>
  8091b0:	10000816 	blt	r2,zero,8091d4 <_dtoa_r+0x948>
  8091b4:	980d883a 	mov	r6,r19
  8091b8:	900f883a 	mov	r7,r18
  8091bc:	8009883a 	mov	r4,r16
  8091c0:	880b883a 	mov	r5,r17
  8091c4:	0810c300 	call	810c30 <__eqdf2>
  8091c8:	103f5a1e 	bne	r2,zero,808f34 <__alt_mem_onchip_mem+0xff800f34>
  8091cc:	ad40004c 	andi	r21,r21,1
  8091d0:	a83f5826 	beq	r21,zero,808f34 <__alt_mem_onchip_mem+0xff800f34>
  8091d4:	bd3fffc3 	ldbu	r20,-1(r23)
  8091d8:	b8bfffc4 	addi	r2,r23,-1
  8091dc:	1007883a 	mov	r3,r2
  8091e0:	01400e44 	movi	r5,57
  8091e4:	d9800717 	ldw	r6,28(sp)
  8091e8:	00000506 	br	809200 <_dtoa_r+0x974>
  8091ec:	18ffffc4 	addi	r3,r3,-1
  8091f0:	11824726 	beq	r2,r6,809b10 <_dtoa_r+0x1284>
  8091f4:	1d000003 	ldbu	r20,0(r3)
  8091f8:	102f883a 	mov	r23,r2
  8091fc:	10bfffc4 	addi	r2,r2,-1
  809200:	a1003fcc 	andi	r4,r20,255
  809204:	2100201c 	xori	r4,r4,128
  809208:	213fe004 	addi	r4,r4,-128
  80920c:	217ff726 	beq	r4,r5,8091ec <__alt_mem_onchip_mem+0xff8011ec>
  809210:	a2000044 	addi	r8,r20,1
  809214:	12000005 	stb	r8,0(r2)
  809218:	003f4606 	br	808f34 <__alt_mem_onchip_mem+0xff800f34>
  80921c:	d9000b17 	ldw	r4,44(sp)
  809220:	2000c826 	beq	r4,zero,809544 <_dtoa_r+0xcb8>
  809224:	d9800317 	ldw	r6,12(sp)
  809228:	00c00044 	movi	r3,1
  80922c:	1980f90e 	bge	r3,r6,809614 <_dtoa_r+0xd88>
  809230:	d8800617 	ldw	r2,24(sp)
  809234:	d8c00a17 	ldw	r3,40(sp)
  809238:	157fffc4 	addi	r21,r2,-1
  80923c:	1d41f316 	blt	r3,r21,809a0c <_dtoa_r+0x1180>
  809240:	1d6bc83a 	sub	r21,r3,r21
  809244:	d9c00617 	ldw	r7,24(sp)
  809248:	3802aa16 	blt	r7,zero,809cf4 <_dtoa_r+0x1468>
  80924c:	dd000817 	ldw	r20,32(sp)
  809250:	d8800617 	ldw	r2,24(sp)
  809254:	d8c00817 	ldw	r3,32(sp)
  809258:	01400044 	movi	r5,1
  80925c:	e009883a 	mov	r4,fp
  809260:	1887883a 	add	r3,r3,r2
  809264:	d8c00815 	stw	r3,32(sp)
  809268:	b0ad883a 	add	r22,r22,r2
  80926c:	080c3340 	call	80c334 <__i2b>
  809270:	1023883a 	mov	r17,r2
  809274:	a0000826 	beq	r20,zero,809298 <_dtoa_r+0xa0c>
  809278:	0580070e 	bge	zero,r22,809298 <_dtoa_r+0xa0c>
  80927c:	a005883a 	mov	r2,r20
  809280:	b500b916 	blt	r22,r20,809568 <_dtoa_r+0xcdc>
  809284:	d9000817 	ldw	r4,32(sp)
  809288:	a0a9c83a 	sub	r20,r20,r2
  80928c:	b0adc83a 	sub	r22,r22,r2
  809290:	2089c83a 	sub	r4,r4,r2
  809294:	d9000815 	stw	r4,32(sp)
  809298:	d9800a17 	ldw	r6,40(sp)
  80929c:	0181810e 	bge	zero,r6,8098a4 <_dtoa_r+0x1018>
  8092a0:	d9c00b17 	ldw	r7,44(sp)
  8092a4:	3800b326 	beq	r7,zero,809574 <_dtoa_r+0xce8>
  8092a8:	a800b226 	beq	r21,zero,809574 <_dtoa_r+0xce8>
  8092ac:	880b883a 	mov	r5,r17
  8092b0:	a80d883a 	mov	r6,r21
  8092b4:	e009883a 	mov	r4,fp
  8092b8:	080c5680 	call	80c568 <__pow5mult>
  8092bc:	d9800917 	ldw	r6,36(sp)
  8092c0:	100b883a 	mov	r5,r2
  8092c4:	e009883a 	mov	r4,fp
  8092c8:	1023883a 	mov	r17,r2
  8092cc:	080c3700 	call	80c370 <__multiply>
  8092d0:	1021883a 	mov	r16,r2
  8092d4:	d8800a17 	ldw	r2,40(sp)
  8092d8:	d9400917 	ldw	r5,36(sp)
  8092dc:	e009883a 	mov	r4,fp
  8092e0:	1545c83a 	sub	r2,r2,r21
  8092e4:	d8800a15 	stw	r2,40(sp)
  8092e8:	080bfd00 	call	80bfd0 <_Bfree>
  8092ec:	d8c00a17 	ldw	r3,40(sp)
  8092f0:	18009f1e 	bne	r3,zero,809570 <_dtoa_r+0xce4>
  8092f4:	05c00044 	movi	r23,1
  8092f8:	e009883a 	mov	r4,fp
  8092fc:	b80b883a 	mov	r5,r23
  809300:	080c3340 	call	80c334 <__i2b>
  809304:	d9000d17 	ldw	r4,52(sp)
  809308:	102b883a 	mov	r21,r2
  80930c:	2000ce26 	beq	r4,zero,809648 <_dtoa_r+0xdbc>
  809310:	200d883a 	mov	r6,r4
  809314:	100b883a 	mov	r5,r2
  809318:	e009883a 	mov	r4,fp
  80931c:	080c5680 	call	80c568 <__pow5mult>
  809320:	d9800317 	ldw	r6,12(sp)
  809324:	102b883a 	mov	r21,r2
  809328:	b981810e 	bge	r23,r6,809930 <_dtoa_r+0x10a4>
  80932c:	0027883a 	mov	r19,zero
  809330:	a8800417 	ldw	r2,16(r21)
  809334:	05c00804 	movi	r23,32
  809338:	10800104 	addi	r2,r2,4
  80933c:	1085883a 	add	r2,r2,r2
  809340:	1085883a 	add	r2,r2,r2
  809344:	a885883a 	add	r2,r21,r2
  809348:	11000017 	ldw	r4,0(r2)
  80934c:	080c21c0 	call	80c21c <__hi0bits>
  809350:	b885c83a 	sub	r2,r23,r2
  809354:	1585883a 	add	r2,r2,r22
  809358:	108007cc 	andi	r2,r2,31
  80935c:	1000b326 	beq	r2,zero,80962c <_dtoa_r+0xda0>
  809360:	00c00804 	movi	r3,32
  809364:	1887c83a 	sub	r3,r3,r2
  809368:	01000104 	movi	r4,4
  80936c:	20c2cd0e 	bge	r4,r3,809ea4 <_dtoa_r+0x1618>
  809370:	00c00704 	movi	r3,28
  809374:	1885c83a 	sub	r2,r3,r2
  809378:	d8c00817 	ldw	r3,32(sp)
  80937c:	a0a9883a 	add	r20,r20,r2
  809380:	b0ad883a 	add	r22,r22,r2
  809384:	1887883a 	add	r3,r3,r2
  809388:	d8c00815 	stw	r3,32(sp)
  80938c:	d9800817 	ldw	r6,32(sp)
  809390:	0180040e 	bge	zero,r6,8093a4 <_dtoa_r+0xb18>
  809394:	800b883a 	mov	r5,r16
  809398:	e009883a 	mov	r4,fp
  80939c:	080c6a80 	call	80c6a8 <__lshift>
  8093a0:	1021883a 	mov	r16,r2
  8093a4:	0580050e 	bge	zero,r22,8093bc <_dtoa_r+0xb30>
  8093a8:	a80b883a 	mov	r5,r21
  8093ac:	b00d883a 	mov	r6,r22
  8093b0:	e009883a 	mov	r4,fp
  8093b4:	080c6a80 	call	80c6a8 <__lshift>
  8093b8:	102b883a 	mov	r21,r2
  8093bc:	d9c00e17 	ldw	r7,56(sp)
  8093c0:	3801211e 	bne	r7,zero,809848 <_dtoa_r+0xfbc>
  8093c4:	d9800617 	ldw	r6,24(sp)
  8093c8:	0181380e 	bge	zero,r6,8098ac <_dtoa_r+0x1020>
  8093cc:	d8c00b17 	ldw	r3,44(sp)
  8093d0:	1800ab1e 	bne	r3,zero,809680 <_dtoa_r+0xdf4>
  8093d4:	dc800717 	ldw	r18,28(sp)
  8093d8:	dcc00617 	ldw	r19,24(sp)
  8093dc:	9029883a 	mov	r20,r18
  8093e0:	00000206 	br	8093ec <_dtoa_r+0xb60>
  8093e4:	080bff80 	call	80bff8 <__multadd>
  8093e8:	1021883a 	mov	r16,r2
  8093ec:	a80b883a 	mov	r5,r21
  8093f0:	8009883a 	mov	r4,r16
  8093f4:	080868c0 	call	80868c <quorem>
  8093f8:	10800c04 	addi	r2,r2,48
  8093fc:	90800005 	stb	r2,0(r18)
  809400:	94800044 	addi	r18,r18,1
  809404:	9507c83a 	sub	r3,r18,r20
  809408:	000f883a 	mov	r7,zero
  80940c:	01800284 	movi	r6,10
  809410:	800b883a 	mov	r5,r16
  809414:	e009883a 	mov	r4,fp
  809418:	1cfff216 	blt	r3,r19,8093e4 <__alt_mem_onchip_mem+0xff8013e4>
  80941c:	1011883a 	mov	r8,r2
  809420:	d8800617 	ldw	r2,24(sp)
  809424:	0082370e 	bge	zero,r2,809d04 <_dtoa_r+0x1478>
  809428:	d9000717 	ldw	r4,28(sp)
  80942c:	0025883a 	mov	r18,zero
  809430:	20af883a 	add	r23,r4,r2
  809434:	01800044 	movi	r6,1
  809438:	800b883a 	mov	r5,r16
  80943c:	e009883a 	mov	r4,fp
  809440:	da001715 	stw	r8,92(sp)
  809444:	080c6a80 	call	80c6a8 <__lshift>
  809448:	a80b883a 	mov	r5,r21
  80944c:	1009883a 	mov	r4,r2
  809450:	d8800915 	stw	r2,36(sp)
  809454:	080c7f00 	call	80c7f0 <__mcmp>
  809458:	da001717 	ldw	r8,92(sp)
  80945c:	0081800e 	bge	zero,r2,809a60 <_dtoa_r+0x11d4>
  809460:	b93fffc3 	ldbu	r4,-1(r23)
  809464:	b8bfffc4 	addi	r2,r23,-1
  809468:	1007883a 	mov	r3,r2
  80946c:	01800e44 	movi	r6,57
  809470:	d9c00717 	ldw	r7,28(sp)
  809474:	00000506 	br	80948c <_dtoa_r+0xc00>
  809478:	18ffffc4 	addi	r3,r3,-1
  80947c:	11c12326 	beq	r2,r7,80990c <_dtoa_r+0x1080>
  809480:	19000003 	ldbu	r4,0(r3)
  809484:	102f883a 	mov	r23,r2
  809488:	10bfffc4 	addi	r2,r2,-1
  80948c:	21403fcc 	andi	r5,r4,255
  809490:	2940201c 	xori	r5,r5,128
  809494:	297fe004 	addi	r5,r5,-128
  809498:	29bff726 	beq	r5,r6,809478 <__alt_mem_onchip_mem+0xff801478>
  80949c:	21000044 	addi	r4,r4,1
  8094a0:	11000005 	stb	r4,0(r2)
  8094a4:	a80b883a 	mov	r5,r21
  8094a8:	e009883a 	mov	r4,fp
  8094ac:	080bfd00 	call	80bfd0 <_Bfree>
  8094b0:	883ea026 	beq	r17,zero,808f34 <__alt_mem_onchip_mem+0xff800f34>
  8094b4:	90000426 	beq	r18,zero,8094c8 <_dtoa_r+0xc3c>
  8094b8:	94400326 	beq	r18,r17,8094c8 <_dtoa_r+0xc3c>
  8094bc:	900b883a 	mov	r5,r18
  8094c0:	e009883a 	mov	r4,fp
  8094c4:	080bfd00 	call	80bfd0 <_Bfree>
  8094c8:	880b883a 	mov	r5,r17
  8094cc:	e009883a 	mov	r4,fp
  8094d0:	080bfd00 	call	80bfd0 <_Bfree>
  8094d4:	003e9706 	br	808f34 <__alt_mem_onchip_mem+0xff800f34>
  8094d8:	01800044 	movi	r6,1
  8094dc:	d9800e15 	stw	r6,56(sp)
  8094e0:	003d9606 	br	808b3c <__alt_mem_onchip_mem+0xff800b3c>
  8094e4:	d8800817 	ldw	r2,32(sp)
  8094e8:	d8c00517 	ldw	r3,20(sp)
  8094ec:	d8000d15 	stw	zero,52(sp)
  8094f0:	10c5c83a 	sub	r2,r2,r3
  8094f4:	00c9c83a 	sub	r4,zero,r3
  8094f8:	d8800815 	stw	r2,32(sp)
  8094fc:	d9000a15 	stw	r4,40(sp)
  809500:	003d9706 	br	808b60 <__alt_mem_onchip_mem+0xff800b60>
  809504:	05adc83a 	sub	r22,zero,r22
  809508:	dd800815 	stw	r22,32(sp)
  80950c:	002d883a 	mov	r22,zero
  809510:	003d8e06 	br	808b4c <__alt_mem_onchip_mem+0xff800b4c>
  809514:	d9000517 	ldw	r4,20(sp)
  809518:	0810d380 	call	810d38 <__floatsidf>
  80951c:	100d883a 	mov	r6,r2
  809520:	180f883a 	mov	r7,r3
  809524:	a009883a 	mov	r4,r20
  809528:	880b883a 	mov	r5,r17
  80952c:	0810c300 	call	810c30 <__eqdf2>
  809530:	103d7126 	beq	r2,zero,808af8 <__alt_mem_onchip_mem+0xff800af8>
  809534:	d9c00517 	ldw	r7,20(sp)
  809538:	39ffffc4 	addi	r7,r7,-1
  80953c:	d9c00515 	stw	r7,20(sp)
  809540:	003d6d06 	br	808af8 <__alt_mem_onchip_mem+0xff800af8>
  809544:	dd400a17 	ldw	r21,40(sp)
  809548:	dd000817 	ldw	r20,32(sp)
  80954c:	0023883a 	mov	r17,zero
  809550:	003f4806 	br	809274 <__alt_mem_onchip_mem+0xff801274>
  809554:	10e3c83a 	sub	r17,r2,r3
  809558:	9448983a 	sll	r4,r18,r17
  80955c:	003d3206 	br	808a28 <__alt_mem_onchip_mem+0xff800a28>
  809560:	d8000e15 	stw	zero,56(sp)
  809564:	003d7506 	br	808b3c <__alt_mem_onchip_mem+0xff800b3c>
  809568:	b005883a 	mov	r2,r22
  80956c:	003f4506 	br	809284 <__alt_mem_onchip_mem+0xff801284>
  809570:	dc000915 	stw	r16,36(sp)
  809574:	d9800a17 	ldw	r6,40(sp)
  809578:	d9400917 	ldw	r5,36(sp)
  80957c:	e009883a 	mov	r4,fp
  809580:	080c5680 	call	80c568 <__pow5mult>
  809584:	1021883a 	mov	r16,r2
  809588:	003f5a06 	br	8092f4 <__alt_mem_onchip_mem+0xff8012f4>
  80958c:	01c00044 	movi	r7,1
  809590:	d9c00b15 	stw	r7,44(sp)
  809594:	d8802217 	ldw	r2,136(sp)
  809598:	0081280e 	bge	zero,r2,809a3c <_dtoa_r+0x11b0>
  80959c:	100d883a 	mov	r6,r2
  8095a0:	1021883a 	mov	r16,r2
  8095a4:	d8800c15 	stw	r2,48(sp)
  8095a8:	d8800615 	stw	r2,24(sp)
  8095ac:	003d8806 	br	808bd0 <__alt_mem_onchip_mem+0xff800bd0>
  8095b0:	d8800617 	ldw	r2,24(sp)
  8095b4:	00be9b16 	blt	zero,r2,809024 <__alt_mem_onchip_mem+0xff801024>
  8095b8:	10010f1e 	bne	r2,zero,8099f8 <_dtoa_r+0x116c>
  8095bc:	880b883a 	mov	r5,r17
  8095c0:	000d883a 	mov	r6,zero
  8095c4:	01d00534 	movhi	r7,16404
  8095c8:	8009883a 	mov	r4,r16
  8095cc:	0804f700 	call	804f70 <__muldf3>
  8095d0:	900d883a 	mov	r6,r18
  8095d4:	980f883a 	mov	r7,r19
  8095d8:	1009883a 	mov	r4,r2
  8095dc:	180b883a 	mov	r5,r3
  8095e0:	0804da00 	call	804da0 <__gedf2>
  8095e4:	002b883a 	mov	r21,zero
  8095e8:	0023883a 	mov	r17,zero
  8095ec:	1000bf16 	blt	r2,zero,8098ec <_dtoa_r+0x1060>
  8095f0:	d9802217 	ldw	r6,136(sp)
  8095f4:	ddc00717 	ldw	r23,28(sp)
  8095f8:	018c303a 	nor	r6,zero,r6
  8095fc:	d9800515 	stw	r6,20(sp)
  809600:	a80b883a 	mov	r5,r21
  809604:	e009883a 	mov	r4,fp
  809608:	080bfd00 	call	80bfd0 <_Bfree>
  80960c:	883e4926 	beq	r17,zero,808f34 <__alt_mem_onchip_mem+0xff800f34>
  809610:	003fad06 	br	8094c8 <__alt_mem_onchip_mem+0xff8014c8>
  809614:	d9c01117 	ldw	r7,68(sp)
  809618:	3801bc26 	beq	r7,zero,809d0c <_dtoa_r+0x1480>
  80961c:	10810cc4 	addi	r2,r2,1075
  809620:	dd400a17 	ldw	r21,40(sp)
  809624:	dd000817 	ldw	r20,32(sp)
  809628:	003f0a06 	br	809254 <__alt_mem_onchip_mem+0xff801254>
  80962c:	00800704 	movi	r2,28
  809630:	d9000817 	ldw	r4,32(sp)
  809634:	a0a9883a 	add	r20,r20,r2
  809638:	b0ad883a 	add	r22,r22,r2
  80963c:	2089883a 	add	r4,r4,r2
  809640:	d9000815 	stw	r4,32(sp)
  809644:	003f5106 	br	80938c <__alt_mem_onchip_mem+0xff80138c>
  809648:	d8c00317 	ldw	r3,12(sp)
  80964c:	b8c1fc0e 	bge	r23,r3,809e40 <_dtoa_r+0x15b4>
  809650:	0027883a 	mov	r19,zero
  809654:	b805883a 	mov	r2,r23
  809658:	003f3e06 	br	809354 <__alt_mem_onchip_mem+0xff801354>
  80965c:	880b883a 	mov	r5,r17
  809660:	e009883a 	mov	r4,fp
  809664:	000f883a 	mov	r7,zero
  809668:	01800284 	movi	r6,10
  80966c:	080bff80 	call	80bff8 <__multadd>
  809670:	d9000c17 	ldw	r4,48(sp)
  809674:	1023883a 	mov	r17,r2
  809678:	0102040e 	bge	zero,r4,809e8c <_dtoa_r+0x1600>
  80967c:	d9000615 	stw	r4,24(sp)
  809680:	0500050e 	bge	zero,r20,809698 <_dtoa_r+0xe0c>
  809684:	880b883a 	mov	r5,r17
  809688:	a00d883a 	mov	r6,r20
  80968c:	e009883a 	mov	r4,fp
  809690:	080c6a80 	call	80c6a8 <__lshift>
  809694:	1023883a 	mov	r17,r2
  809698:	9801241e 	bne	r19,zero,809b2c <_dtoa_r+0x12a0>
  80969c:	8829883a 	mov	r20,r17
  8096a0:	d9000617 	ldw	r4,24(sp)
  8096a4:	dcc00717 	ldw	r19,28(sp)
  8096a8:	9480004c 	andi	r18,r18,1
  8096ac:	20bfffc4 	addi	r2,r4,-1
  8096b0:	9885883a 	add	r2,r19,r2
  8096b4:	d8800415 	stw	r2,16(sp)
  8096b8:	dc800615 	stw	r18,24(sp)
  8096bc:	a80b883a 	mov	r5,r21
  8096c0:	8009883a 	mov	r4,r16
  8096c4:	080868c0 	call	80868c <quorem>
  8096c8:	880b883a 	mov	r5,r17
  8096cc:	8009883a 	mov	r4,r16
  8096d0:	102f883a 	mov	r23,r2
  8096d4:	080c7f00 	call	80c7f0 <__mcmp>
  8096d8:	a80b883a 	mov	r5,r21
  8096dc:	a00d883a 	mov	r6,r20
  8096e0:	e009883a 	mov	r4,fp
  8096e4:	102d883a 	mov	r22,r2
  8096e8:	080c8500 	call	80c850 <__mdiff>
  8096ec:	1007883a 	mov	r3,r2
  8096f0:	10800317 	ldw	r2,12(r2)
  8096f4:	bc800c04 	addi	r18,r23,48
  8096f8:	180b883a 	mov	r5,r3
  8096fc:	10004e1e 	bne	r2,zero,809838 <_dtoa_r+0xfac>
  809700:	8009883a 	mov	r4,r16
  809704:	d8c01615 	stw	r3,88(sp)
  809708:	080c7f00 	call	80c7f0 <__mcmp>
  80970c:	d8c01617 	ldw	r3,88(sp)
  809710:	e009883a 	mov	r4,fp
  809714:	d8801615 	stw	r2,88(sp)
  809718:	180b883a 	mov	r5,r3
  80971c:	080bfd00 	call	80bfd0 <_Bfree>
  809720:	d8801617 	ldw	r2,88(sp)
  809724:	1000041e 	bne	r2,zero,809738 <_dtoa_r+0xeac>
  809728:	d9800317 	ldw	r6,12(sp)
  80972c:	3000021e 	bne	r6,zero,809738 <_dtoa_r+0xeac>
  809730:	d8c00617 	ldw	r3,24(sp)
  809734:	18003726 	beq	r3,zero,809814 <_dtoa_r+0xf88>
  809738:	b0002016 	blt	r22,zero,8097bc <_dtoa_r+0xf30>
  80973c:	b000041e 	bne	r22,zero,809750 <_dtoa_r+0xec4>
  809740:	d9000317 	ldw	r4,12(sp)
  809744:	2000021e 	bne	r4,zero,809750 <_dtoa_r+0xec4>
  809748:	d8c00617 	ldw	r3,24(sp)
  80974c:	18001b26 	beq	r3,zero,8097bc <_dtoa_r+0xf30>
  809750:	00810716 	blt	zero,r2,809b70 <_dtoa_r+0x12e4>
  809754:	d8c00417 	ldw	r3,16(sp)
  809758:	9d800044 	addi	r22,r19,1
  80975c:	9c800005 	stb	r18,0(r19)
  809760:	b02f883a 	mov	r23,r22
  809764:	98c10626 	beq	r19,r3,809b80 <_dtoa_r+0x12f4>
  809768:	800b883a 	mov	r5,r16
  80976c:	000f883a 	mov	r7,zero
  809770:	01800284 	movi	r6,10
  809774:	e009883a 	mov	r4,fp
  809778:	080bff80 	call	80bff8 <__multadd>
  80977c:	1021883a 	mov	r16,r2
  809780:	000f883a 	mov	r7,zero
  809784:	01800284 	movi	r6,10
  809788:	880b883a 	mov	r5,r17
  80978c:	e009883a 	mov	r4,fp
  809790:	8d002526 	beq	r17,r20,809828 <_dtoa_r+0xf9c>
  809794:	080bff80 	call	80bff8 <__multadd>
  809798:	a00b883a 	mov	r5,r20
  80979c:	000f883a 	mov	r7,zero
  8097a0:	01800284 	movi	r6,10
  8097a4:	e009883a 	mov	r4,fp
  8097a8:	1023883a 	mov	r17,r2
  8097ac:	080bff80 	call	80bff8 <__multadd>
  8097b0:	1029883a 	mov	r20,r2
  8097b4:	b027883a 	mov	r19,r22
  8097b8:	003fc006 	br	8096bc <__alt_mem_onchip_mem+0xff8016bc>
  8097bc:	9011883a 	mov	r8,r18
  8097c0:	00800e0e 	bge	zero,r2,8097fc <_dtoa_r+0xf70>
  8097c4:	800b883a 	mov	r5,r16
  8097c8:	01800044 	movi	r6,1
  8097cc:	e009883a 	mov	r4,fp
  8097d0:	da001715 	stw	r8,92(sp)
  8097d4:	080c6a80 	call	80c6a8 <__lshift>
  8097d8:	a80b883a 	mov	r5,r21
  8097dc:	1009883a 	mov	r4,r2
  8097e0:	1021883a 	mov	r16,r2
  8097e4:	080c7f00 	call	80c7f0 <__mcmp>
  8097e8:	da001717 	ldw	r8,92(sp)
  8097ec:	0081960e 	bge	zero,r2,809e48 <_dtoa_r+0x15bc>
  8097f0:	00800e44 	movi	r2,57
  8097f4:	40817026 	beq	r8,r2,809db8 <_dtoa_r+0x152c>
  8097f8:	ba000c44 	addi	r8,r23,49
  8097fc:	8825883a 	mov	r18,r17
  809800:	9dc00044 	addi	r23,r19,1
  809804:	9a000005 	stb	r8,0(r19)
  809808:	a023883a 	mov	r17,r20
  80980c:	dc000915 	stw	r16,36(sp)
  809810:	003f2406 	br	8094a4 <__alt_mem_onchip_mem+0xff8014a4>
  809814:	00800e44 	movi	r2,57
  809818:	9011883a 	mov	r8,r18
  80981c:	90816626 	beq	r18,r2,809db8 <_dtoa_r+0x152c>
  809820:	05bff516 	blt	zero,r22,8097f8 <__alt_mem_onchip_mem+0xff8017f8>
  809824:	003ff506 	br	8097fc <__alt_mem_onchip_mem+0xff8017fc>
  809828:	080bff80 	call	80bff8 <__multadd>
  80982c:	1023883a 	mov	r17,r2
  809830:	1029883a 	mov	r20,r2
  809834:	003fdf06 	br	8097b4 <__alt_mem_onchip_mem+0xff8017b4>
  809838:	e009883a 	mov	r4,fp
  80983c:	080bfd00 	call	80bfd0 <_Bfree>
  809840:	00800044 	movi	r2,1
  809844:	003fbc06 	br	809738 <__alt_mem_onchip_mem+0xff801738>
  809848:	a80b883a 	mov	r5,r21
  80984c:	8009883a 	mov	r4,r16
  809850:	080c7f00 	call	80c7f0 <__mcmp>
  809854:	103edb0e 	bge	r2,zero,8093c4 <__alt_mem_onchip_mem+0xff8013c4>
  809858:	800b883a 	mov	r5,r16
  80985c:	000f883a 	mov	r7,zero
  809860:	01800284 	movi	r6,10
  809864:	e009883a 	mov	r4,fp
  809868:	080bff80 	call	80bff8 <__multadd>
  80986c:	1021883a 	mov	r16,r2
  809870:	d8800517 	ldw	r2,20(sp)
  809874:	d8c00b17 	ldw	r3,44(sp)
  809878:	10bfffc4 	addi	r2,r2,-1
  80987c:	d8800515 	stw	r2,20(sp)
  809880:	183f761e 	bne	r3,zero,80965c <__alt_mem_onchip_mem+0xff80165c>
  809884:	d9000c17 	ldw	r4,48(sp)
  809888:	0101730e 	bge	zero,r4,809e58 <_dtoa_r+0x15cc>
  80988c:	d9000615 	stw	r4,24(sp)
  809890:	003ed006 	br	8093d4 <__alt_mem_onchip_mem+0xff8013d4>
  809894:	00800084 	movi	r2,2
  809898:	3081861e 	bne	r6,r2,809eb4 <_dtoa_r+0x1628>
  80989c:	d8000b15 	stw	zero,44(sp)
  8098a0:	003f3c06 	br	809594 <__alt_mem_onchip_mem+0xff801594>
  8098a4:	dc000917 	ldw	r16,36(sp)
  8098a8:	003e9206 	br	8092f4 <__alt_mem_onchip_mem+0xff8012f4>
  8098ac:	d9c00317 	ldw	r7,12(sp)
  8098b0:	00800084 	movi	r2,2
  8098b4:	11fec50e 	bge	r2,r7,8093cc <__alt_mem_onchip_mem+0xff8013cc>
  8098b8:	d9000617 	ldw	r4,24(sp)
  8098bc:	20013c1e 	bne	r4,zero,809db0 <_dtoa_r+0x1524>
  8098c0:	a80b883a 	mov	r5,r21
  8098c4:	000f883a 	mov	r7,zero
  8098c8:	01800144 	movi	r6,5
  8098cc:	e009883a 	mov	r4,fp
  8098d0:	080bff80 	call	80bff8 <__multadd>
  8098d4:	100b883a 	mov	r5,r2
  8098d8:	8009883a 	mov	r4,r16
  8098dc:	102b883a 	mov	r21,r2
  8098e0:	080c7f00 	call	80c7f0 <__mcmp>
  8098e4:	dc000915 	stw	r16,36(sp)
  8098e8:	00bf410e 	bge	zero,r2,8095f0 <__alt_mem_onchip_mem+0xff8015f0>
  8098ec:	d9c00717 	ldw	r7,28(sp)
  8098f0:	00800c44 	movi	r2,49
  8098f4:	38800005 	stb	r2,0(r7)
  8098f8:	d8800517 	ldw	r2,20(sp)
  8098fc:	3dc00044 	addi	r23,r7,1
  809900:	10800044 	addi	r2,r2,1
  809904:	d8800515 	stw	r2,20(sp)
  809908:	003f3d06 	br	809600 <__alt_mem_onchip_mem+0xff801600>
  80990c:	d9800517 	ldw	r6,20(sp)
  809910:	d9c00717 	ldw	r7,28(sp)
  809914:	00800c44 	movi	r2,49
  809918:	31800044 	addi	r6,r6,1
  80991c:	d9800515 	stw	r6,20(sp)
  809920:	38800005 	stb	r2,0(r7)
  809924:	003edf06 	br	8094a4 <__alt_mem_onchip_mem+0xff8014a4>
  809928:	d8000b15 	stw	zero,44(sp)
  80992c:	003c9f06 	br	808bac <__alt_mem_onchip_mem+0xff800bac>
  809930:	903e7e1e 	bne	r18,zero,80932c <__alt_mem_onchip_mem+0xff80132c>
  809934:	00800434 	movhi	r2,16
  809938:	10bfffc4 	addi	r2,r2,-1
  80993c:	9884703a 	and	r2,r19,r2
  809940:	1000ea1e 	bne	r2,zero,809cec <_dtoa_r+0x1460>
  809944:	9cdffc2c 	andhi	r19,r19,32752
  809948:	9800e826 	beq	r19,zero,809cec <_dtoa_r+0x1460>
  80994c:	d9c00817 	ldw	r7,32(sp)
  809950:	b5800044 	addi	r22,r22,1
  809954:	04c00044 	movi	r19,1
  809958:	39c00044 	addi	r7,r7,1
  80995c:	d9c00815 	stw	r7,32(sp)
  809960:	d8800d17 	ldw	r2,52(sp)
  809964:	103e721e 	bne	r2,zero,809330 <__alt_mem_onchip_mem+0xff801330>
  809968:	00800044 	movi	r2,1
  80996c:	003e7906 	br	809354 <__alt_mem_onchip_mem+0xff801354>
  809970:	8009883a 	mov	r4,r16
  809974:	0810d380 	call	810d38 <__floatsidf>
  809978:	d9800f17 	ldw	r6,60(sp)
  80997c:	d9c01017 	ldw	r7,64(sp)
  809980:	1009883a 	mov	r4,r2
  809984:	180b883a 	mov	r5,r3
  809988:	0804f700 	call	804f70 <__muldf3>
  80998c:	000d883a 	mov	r6,zero
  809990:	01d00734 	movhi	r7,16412
  809994:	1009883a 	mov	r4,r2
  809998:	180b883a 	mov	r5,r3
  80999c:	08044f40 	call	8044f4 <__adddf3>
  8099a0:	047f3034 	movhi	r17,64704
  8099a4:	1021883a 	mov	r16,r2
  8099a8:	1c63883a 	add	r17,r3,r17
  8099ac:	d9000f17 	ldw	r4,60(sp)
  8099b0:	d9401017 	ldw	r5,64(sp)
  8099b4:	000d883a 	mov	r6,zero
  8099b8:	01d00534 	movhi	r7,16404
  8099bc:	08056880 	call	805688 <__subdf3>
  8099c0:	800d883a 	mov	r6,r16
  8099c4:	880f883a 	mov	r7,r17
  8099c8:	1009883a 	mov	r4,r2
  8099cc:	180b883a 	mov	r5,r3
  8099d0:	102b883a 	mov	r21,r2
  8099d4:	1829883a 	mov	r20,r3
  8099d8:	0804da00 	call	804da0 <__gedf2>
  8099dc:	00806c16 	blt	zero,r2,809b90 <_dtoa_r+0x1304>
  8099e0:	89e0003c 	xorhi	r7,r17,32768
  8099e4:	800d883a 	mov	r6,r16
  8099e8:	a809883a 	mov	r4,r21
  8099ec:	a00b883a 	mov	r5,r20
  8099f0:	0804e7c0 	call	804e7c <__ledf2>
  8099f4:	103d7e0e 	bge	r2,zero,808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  8099f8:	002b883a 	mov	r21,zero
  8099fc:	0023883a 	mov	r17,zero
  809a00:	003efb06 	br	8095f0 <__alt_mem_onchip_mem+0xff8015f0>
  809a04:	d8800717 	ldw	r2,28(sp)
  809a08:	003bd006 	br	80894c <__alt_mem_onchip_mem+0xff80094c>
  809a0c:	d9000a17 	ldw	r4,40(sp)
  809a10:	d9800d17 	ldw	r6,52(sp)
  809a14:	dd400a15 	stw	r21,40(sp)
  809a18:	a905c83a 	sub	r2,r21,r4
  809a1c:	308d883a 	add	r6,r6,r2
  809a20:	d9800d15 	stw	r6,52(sp)
  809a24:	002b883a 	mov	r21,zero
  809a28:	003e0606 	br	809244 <__alt_mem_onchip_mem+0xff801244>
  809a2c:	9023883a 	mov	r17,r18
  809a30:	9829883a 	mov	r20,r19
  809a34:	04000084 	movi	r16,2
  809a38:	003c9206 	br	808c84 <__alt_mem_onchip_mem+0xff800c84>
  809a3c:	04000044 	movi	r16,1
  809a40:	dc000c15 	stw	r16,48(sp)
  809a44:	dc000615 	stw	r16,24(sp)
  809a48:	dc002215 	stw	r16,136(sp)
  809a4c:	e0001115 	stw	zero,68(fp)
  809a50:	000b883a 	mov	r5,zero
  809a54:	003c6906 	br	808bfc <__alt_mem_onchip_mem+0xff800bfc>
  809a58:	3021883a 	mov	r16,r6
  809a5c:	003ffb06 	br	809a4c <__alt_mem_onchip_mem+0xff801a4c>
  809a60:	1000021e 	bne	r2,zero,809a6c <_dtoa_r+0x11e0>
  809a64:	4200004c 	andi	r8,r8,1
  809a68:	403e7d1e 	bne	r8,zero,809460 <__alt_mem_onchip_mem+0xff801460>
  809a6c:	01000c04 	movi	r4,48
  809a70:	00000106 	br	809a78 <_dtoa_r+0x11ec>
  809a74:	102f883a 	mov	r23,r2
  809a78:	b8bfffc4 	addi	r2,r23,-1
  809a7c:	10c00007 	ldb	r3,0(r2)
  809a80:	193ffc26 	beq	r3,r4,809a74 <__alt_mem_onchip_mem+0xff801a74>
  809a84:	003e8706 	br	8094a4 <__alt_mem_onchip_mem+0xff8014a4>
  809a88:	d8800517 	ldw	r2,20(sp)
  809a8c:	00a3c83a 	sub	r17,zero,r2
  809a90:	8800a426 	beq	r17,zero,809d24 <_dtoa_r+0x1498>
  809a94:	888003cc 	andi	r2,r17,15
  809a98:	100490fa 	slli	r2,r2,3
  809a9c:	00c02074 	movhi	r3,129
  809aa0:	18d4ac04 	addi	r3,r3,21168
  809aa4:	1885883a 	add	r2,r3,r2
  809aa8:	11800017 	ldw	r6,0(r2)
  809aac:	11c00117 	ldw	r7,4(r2)
  809ab0:	9009883a 	mov	r4,r18
  809ab4:	980b883a 	mov	r5,r19
  809ab8:	8823d13a 	srai	r17,r17,4
  809abc:	0804f700 	call	804f70 <__muldf3>
  809ac0:	d8800f15 	stw	r2,60(sp)
  809ac4:	d8c01015 	stw	r3,64(sp)
  809ac8:	8800e826 	beq	r17,zero,809e6c <_dtoa_r+0x15e0>
  809acc:	05002074 	movhi	r20,129
  809ad0:	a514a204 	addi	r20,r20,21128
  809ad4:	04000084 	movi	r16,2
  809ad8:	8980004c 	andi	r6,r17,1
  809adc:	1009883a 	mov	r4,r2
  809ae0:	8823d07a 	srai	r17,r17,1
  809ae4:	180b883a 	mov	r5,r3
  809ae8:	30000426 	beq	r6,zero,809afc <_dtoa_r+0x1270>
  809aec:	a1800017 	ldw	r6,0(r20)
  809af0:	a1c00117 	ldw	r7,4(r20)
  809af4:	84000044 	addi	r16,r16,1
  809af8:	0804f700 	call	804f70 <__muldf3>
  809afc:	a5000204 	addi	r20,r20,8
  809b00:	883ff51e 	bne	r17,zero,809ad8 <__alt_mem_onchip_mem+0xff801ad8>
  809b04:	d8800f15 	stw	r2,60(sp)
  809b08:	d8c01015 	stw	r3,64(sp)
  809b0c:	003c7606 	br	808ce8 <__alt_mem_onchip_mem+0xff800ce8>
  809b10:	00c00c04 	movi	r3,48
  809b14:	10c00005 	stb	r3,0(r2)
  809b18:	d8c00517 	ldw	r3,20(sp)
  809b1c:	bd3fffc3 	ldbu	r20,-1(r23)
  809b20:	18c00044 	addi	r3,r3,1
  809b24:	d8c00515 	stw	r3,20(sp)
  809b28:	003db906 	br	809210 <__alt_mem_onchip_mem+0xff801210>
  809b2c:	89400117 	ldw	r5,4(r17)
  809b30:	e009883a 	mov	r4,fp
  809b34:	080bf280 	call	80bf28 <_Balloc>
  809b38:	89800417 	ldw	r6,16(r17)
  809b3c:	89400304 	addi	r5,r17,12
  809b40:	11000304 	addi	r4,r2,12
  809b44:	31800084 	addi	r6,r6,2
  809b48:	318d883a 	add	r6,r6,r6
  809b4c:	318d883a 	add	r6,r6,r6
  809b50:	1027883a 	mov	r19,r2
  809b54:	080bb5c0 	call	80bb5c <memcpy>
  809b58:	01800044 	movi	r6,1
  809b5c:	980b883a 	mov	r5,r19
  809b60:	e009883a 	mov	r4,fp
  809b64:	080c6a80 	call	80c6a8 <__lshift>
  809b68:	1029883a 	mov	r20,r2
  809b6c:	003ecc06 	br	8096a0 <__alt_mem_onchip_mem+0xff8016a0>
  809b70:	00800e44 	movi	r2,57
  809b74:	90809026 	beq	r18,r2,809db8 <_dtoa_r+0x152c>
  809b78:	92000044 	addi	r8,r18,1
  809b7c:	003f1f06 	br	8097fc <__alt_mem_onchip_mem+0xff8017fc>
  809b80:	9011883a 	mov	r8,r18
  809b84:	8825883a 	mov	r18,r17
  809b88:	a023883a 	mov	r17,r20
  809b8c:	003e2906 	br	809434 <__alt_mem_onchip_mem+0xff801434>
  809b90:	002b883a 	mov	r21,zero
  809b94:	0023883a 	mov	r17,zero
  809b98:	003f5406 	br	8098ec <__alt_mem_onchip_mem+0xff8018ec>
  809b9c:	61bfffc4 	addi	r6,r12,-1
  809ba0:	300490fa 	slli	r2,r6,3
  809ba4:	00c02074 	movhi	r3,129
  809ba8:	18d4ac04 	addi	r3,r3,21168
  809bac:	1885883a 	add	r2,r3,r2
  809bb0:	11000017 	ldw	r4,0(r2)
  809bb4:	11400117 	ldw	r5,4(r2)
  809bb8:	d8800717 	ldw	r2,28(sp)
  809bbc:	880f883a 	mov	r7,r17
  809bc0:	d9801215 	stw	r6,72(sp)
  809bc4:	800d883a 	mov	r6,r16
  809bc8:	db001615 	stw	r12,88(sp)
  809bcc:	15c00044 	addi	r23,r2,1
  809bd0:	0804f700 	call	804f70 <__muldf3>
  809bd4:	d9401017 	ldw	r5,64(sp)
  809bd8:	d9000f17 	ldw	r4,60(sp)
  809bdc:	d8c01515 	stw	r3,84(sp)
  809be0:	d8801415 	stw	r2,80(sp)
  809be4:	0810cb80 	call	810cb8 <__fixdfsi>
  809be8:	1009883a 	mov	r4,r2
  809bec:	1021883a 	mov	r16,r2
  809bf0:	0810d380 	call	810d38 <__floatsidf>
  809bf4:	d9000f17 	ldw	r4,60(sp)
  809bf8:	d9401017 	ldw	r5,64(sp)
  809bfc:	100d883a 	mov	r6,r2
  809c00:	180f883a 	mov	r7,r3
  809c04:	08056880 	call	805688 <__subdf3>
  809c08:	1829883a 	mov	r20,r3
  809c0c:	d8c00717 	ldw	r3,28(sp)
  809c10:	84000c04 	addi	r16,r16,48
  809c14:	1023883a 	mov	r17,r2
  809c18:	1c000005 	stb	r16,0(r3)
  809c1c:	db001617 	ldw	r12,88(sp)
  809c20:	00800044 	movi	r2,1
  809c24:	60802226 	beq	r12,r2,809cb0 <_dtoa_r+0x1424>
  809c28:	d9c00717 	ldw	r7,28(sp)
  809c2c:	8805883a 	mov	r2,r17
  809c30:	b82b883a 	mov	r21,r23
  809c34:	3b19883a 	add	r12,r7,r12
  809c38:	6023883a 	mov	r17,r12
  809c3c:	a007883a 	mov	r3,r20
  809c40:	dc800f15 	stw	r18,60(sp)
  809c44:	000d883a 	mov	r6,zero
  809c48:	01d00934 	movhi	r7,16420
  809c4c:	1009883a 	mov	r4,r2
  809c50:	180b883a 	mov	r5,r3
  809c54:	0804f700 	call	804f70 <__muldf3>
  809c58:	180b883a 	mov	r5,r3
  809c5c:	1009883a 	mov	r4,r2
  809c60:	1829883a 	mov	r20,r3
  809c64:	1025883a 	mov	r18,r2
  809c68:	0810cb80 	call	810cb8 <__fixdfsi>
  809c6c:	1009883a 	mov	r4,r2
  809c70:	1021883a 	mov	r16,r2
  809c74:	0810d380 	call	810d38 <__floatsidf>
  809c78:	100d883a 	mov	r6,r2
  809c7c:	180f883a 	mov	r7,r3
  809c80:	9009883a 	mov	r4,r18
  809c84:	a00b883a 	mov	r5,r20
  809c88:	84000c04 	addi	r16,r16,48
  809c8c:	08056880 	call	805688 <__subdf3>
  809c90:	ad400044 	addi	r21,r21,1
  809c94:	ac3fffc5 	stb	r16,-1(r21)
  809c98:	ac7fea1e 	bne	r21,r17,809c44 <__alt_mem_onchip_mem+0xff801c44>
  809c9c:	1023883a 	mov	r17,r2
  809ca0:	d8801217 	ldw	r2,72(sp)
  809ca4:	dc800f17 	ldw	r18,60(sp)
  809ca8:	1829883a 	mov	r20,r3
  809cac:	b8af883a 	add	r23,r23,r2
  809cb0:	d9001417 	ldw	r4,80(sp)
  809cb4:	d9401517 	ldw	r5,84(sp)
  809cb8:	000d883a 	mov	r6,zero
  809cbc:	01cff834 	movhi	r7,16352
  809cc0:	08044f40 	call	8044f4 <__adddf3>
  809cc4:	880d883a 	mov	r6,r17
  809cc8:	a00f883a 	mov	r7,r20
  809ccc:	1009883a 	mov	r4,r2
  809cd0:	180b883a 	mov	r5,r3
  809cd4:	0804e7c0 	call	804e7c <__ledf2>
  809cd8:	10003e0e 	bge	r2,zero,809dd4 <_dtoa_r+0x1548>
  809cdc:	d9001317 	ldw	r4,76(sp)
  809ce0:	bd3fffc3 	ldbu	r20,-1(r23)
  809ce4:	d9000515 	stw	r4,20(sp)
  809ce8:	003d3b06 	br	8091d8 <__alt_mem_onchip_mem+0xff8011d8>
  809cec:	0027883a 	mov	r19,zero
  809cf0:	003f1b06 	br	809960 <__alt_mem_onchip_mem+0xff801960>
  809cf4:	d8800817 	ldw	r2,32(sp)
  809cf8:	11e9c83a 	sub	r20,r2,r7
  809cfc:	0005883a 	mov	r2,zero
  809d00:	003d5406 	br	809254 <__alt_mem_onchip_mem+0xff801254>
  809d04:	00800044 	movi	r2,1
  809d08:	003dc706 	br	809428 <__alt_mem_onchip_mem+0xff801428>
  809d0c:	d8c00217 	ldw	r3,8(sp)
  809d10:	00800d84 	movi	r2,54
  809d14:	dd400a17 	ldw	r21,40(sp)
  809d18:	10c5c83a 	sub	r2,r2,r3
  809d1c:	dd000817 	ldw	r20,32(sp)
  809d20:	003d4c06 	br	809254 <__alt_mem_onchip_mem+0xff801254>
  809d24:	dc800f15 	stw	r18,60(sp)
  809d28:	dcc01015 	stw	r19,64(sp)
  809d2c:	04000084 	movi	r16,2
  809d30:	003bed06 	br	808ce8 <__alt_mem_onchip_mem+0xff800ce8>
  809d34:	d9000617 	ldw	r4,24(sp)
  809d38:	203f0d26 	beq	r4,zero,809970 <__alt_mem_onchip_mem+0xff801970>
  809d3c:	d9800c17 	ldw	r6,48(sp)
  809d40:	01bcab0e 	bge	zero,r6,808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  809d44:	d9401017 	ldw	r5,64(sp)
  809d48:	d9000f17 	ldw	r4,60(sp)
  809d4c:	000d883a 	mov	r6,zero
  809d50:	01d00934 	movhi	r7,16420
  809d54:	0804f700 	call	804f70 <__muldf3>
  809d58:	81000044 	addi	r4,r16,1
  809d5c:	d8800f15 	stw	r2,60(sp)
  809d60:	d8c01015 	stw	r3,64(sp)
  809d64:	0810d380 	call	810d38 <__floatsidf>
  809d68:	d9800f17 	ldw	r6,60(sp)
  809d6c:	d9c01017 	ldw	r7,64(sp)
  809d70:	1009883a 	mov	r4,r2
  809d74:	180b883a 	mov	r5,r3
  809d78:	0804f700 	call	804f70 <__muldf3>
  809d7c:	01d00734 	movhi	r7,16412
  809d80:	000d883a 	mov	r6,zero
  809d84:	1009883a 	mov	r4,r2
  809d88:	180b883a 	mov	r5,r3
  809d8c:	08044f40 	call	8044f4 <__adddf3>
  809d90:	d9c00517 	ldw	r7,20(sp)
  809d94:	047f3034 	movhi	r17,64704
  809d98:	1021883a 	mov	r16,r2
  809d9c:	39ffffc4 	addi	r7,r7,-1
  809da0:	d9c01315 	stw	r7,76(sp)
  809da4:	1c63883a 	add	r17,r3,r17
  809da8:	db000c17 	ldw	r12,48(sp)
  809dac:	003bea06 	br	808d58 <__alt_mem_onchip_mem+0xff800d58>
  809db0:	dc000915 	stw	r16,36(sp)
  809db4:	003e0e06 	br	8095f0 <__alt_mem_onchip_mem+0xff8015f0>
  809db8:	01000e44 	movi	r4,57
  809dbc:	8825883a 	mov	r18,r17
  809dc0:	9dc00044 	addi	r23,r19,1
  809dc4:	99000005 	stb	r4,0(r19)
  809dc8:	a023883a 	mov	r17,r20
  809dcc:	dc000915 	stw	r16,36(sp)
  809dd0:	003da406 	br	809464 <__alt_mem_onchip_mem+0xff801464>
  809dd4:	d9801417 	ldw	r6,80(sp)
  809dd8:	d9c01517 	ldw	r7,84(sp)
  809ddc:	0009883a 	mov	r4,zero
  809de0:	014ff834 	movhi	r5,16352
  809de4:	08056880 	call	805688 <__subdf3>
  809de8:	880d883a 	mov	r6,r17
  809dec:	a00f883a 	mov	r7,r20
  809df0:	1009883a 	mov	r4,r2
  809df4:	180b883a 	mov	r5,r3
  809df8:	0804da00 	call	804da0 <__gedf2>
  809dfc:	00bc7c0e 	bge	zero,r2,808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  809e00:	01000c04 	movi	r4,48
  809e04:	00000106 	br	809e0c <_dtoa_r+0x1580>
  809e08:	102f883a 	mov	r23,r2
  809e0c:	b8bfffc4 	addi	r2,r23,-1
  809e10:	10c00007 	ldb	r3,0(r2)
  809e14:	193ffc26 	beq	r3,r4,809e08 <__alt_mem_onchip_mem+0xff801e08>
  809e18:	d9801317 	ldw	r6,76(sp)
  809e1c:	d9800515 	stw	r6,20(sp)
  809e20:	003c4406 	br	808f34 <__alt_mem_onchip_mem+0xff800f34>
  809e24:	d9801317 	ldw	r6,76(sp)
  809e28:	d9800515 	stw	r6,20(sp)
  809e2c:	003cea06 	br	8091d8 <__alt_mem_onchip_mem+0xff8011d8>
  809e30:	dd800f17 	ldw	r22,60(sp)
  809e34:	dcc01017 	ldw	r19,64(sp)
  809e38:	dc801217 	ldw	r18,72(sp)
  809e3c:	003c6c06 	br	808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  809e40:	903e031e 	bne	r18,zero,809650 <__alt_mem_onchip_mem+0xff801650>
  809e44:	003ebb06 	br	809934 <__alt_mem_onchip_mem+0xff801934>
  809e48:	103e6c1e 	bne	r2,zero,8097fc <__alt_mem_onchip_mem+0xff8017fc>
  809e4c:	4080004c 	andi	r2,r8,1
  809e50:	103e6a26 	beq	r2,zero,8097fc <__alt_mem_onchip_mem+0xff8017fc>
  809e54:	003e6606 	br	8097f0 <__alt_mem_onchip_mem+0xff8017f0>
  809e58:	d8c00317 	ldw	r3,12(sp)
  809e5c:	00800084 	movi	r2,2
  809e60:	10c02916 	blt	r2,r3,809f08 <_dtoa_r+0x167c>
  809e64:	d9000c17 	ldw	r4,48(sp)
  809e68:	003e8806 	br	80988c <__alt_mem_onchip_mem+0xff80188c>
  809e6c:	04000084 	movi	r16,2
  809e70:	003b9d06 	br	808ce8 <__alt_mem_onchip_mem+0xff800ce8>
  809e74:	d9001317 	ldw	r4,76(sp)
  809e78:	d9000515 	stw	r4,20(sp)
  809e7c:	003cd606 	br	8091d8 <__alt_mem_onchip_mem+0xff8011d8>
  809e80:	d8801317 	ldw	r2,76(sp)
  809e84:	d8800515 	stw	r2,20(sp)
  809e88:	003c2a06 	br	808f34 <__alt_mem_onchip_mem+0xff800f34>
  809e8c:	d9800317 	ldw	r6,12(sp)
  809e90:	00800084 	movi	r2,2
  809e94:	11801516 	blt	r2,r6,809eec <_dtoa_r+0x1660>
  809e98:	d9c00c17 	ldw	r7,48(sp)
  809e9c:	d9c00615 	stw	r7,24(sp)
  809ea0:	003df706 	br	809680 <__alt_mem_onchip_mem+0xff801680>
  809ea4:	193d3926 	beq	r3,r4,80938c <__alt_mem_onchip_mem+0xff80138c>
  809ea8:	00c00f04 	movi	r3,60
  809eac:	1885c83a 	sub	r2,r3,r2
  809eb0:	003ddf06 	br	809630 <__alt_mem_onchip_mem+0xff801630>
  809eb4:	e009883a 	mov	r4,fp
  809eb8:	e0001115 	stw	zero,68(fp)
  809ebc:	000b883a 	mov	r5,zero
  809ec0:	080bf280 	call	80bf28 <_Balloc>
  809ec4:	d8800715 	stw	r2,28(sp)
  809ec8:	d8c00717 	ldw	r3,28(sp)
  809ecc:	00bfffc4 	movi	r2,-1
  809ed0:	01000044 	movi	r4,1
  809ed4:	d8800c15 	stw	r2,48(sp)
  809ed8:	e0c01015 	stw	r3,64(fp)
  809edc:	d9000b15 	stw	r4,44(sp)
  809ee0:	d8800615 	stw	r2,24(sp)
  809ee4:	d8002215 	stw	zero,136(sp)
  809ee8:	003c4106 	br	808ff0 <__alt_mem_onchip_mem+0xff800ff0>
  809eec:	d8c00c17 	ldw	r3,48(sp)
  809ef0:	d8c00615 	stw	r3,24(sp)
  809ef4:	003e7006 	br	8098b8 <__alt_mem_onchip_mem+0xff8018b8>
  809ef8:	04400044 	movi	r17,1
  809efc:	003b2006 	br	808b80 <__alt_mem_onchip_mem+0xff800b80>
  809f00:	000b883a 	mov	r5,zero
  809f04:	003b3d06 	br	808bfc <__alt_mem_onchip_mem+0xff800bfc>
  809f08:	d8800c17 	ldw	r2,48(sp)
  809f0c:	d8800615 	stw	r2,24(sp)
  809f10:	003e6906 	br	8098b8 <__alt_mem_onchip_mem+0xff8018b8>

00809f14 <__sflush_r>:
  809f14:	2880030b 	ldhu	r2,12(r5)
  809f18:	defffb04 	addi	sp,sp,-20
  809f1c:	dcc00315 	stw	r19,12(sp)
  809f20:	dc400115 	stw	r17,4(sp)
  809f24:	dfc00415 	stw	ra,16(sp)
  809f28:	dc800215 	stw	r18,8(sp)
  809f2c:	dc000015 	stw	r16,0(sp)
  809f30:	10c0020c 	andi	r3,r2,8
  809f34:	2823883a 	mov	r17,r5
  809f38:	2027883a 	mov	r19,r4
  809f3c:	1800311e 	bne	r3,zero,80a004 <__sflush_r+0xf0>
  809f40:	28c00117 	ldw	r3,4(r5)
  809f44:	10820014 	ori	r2,r2,2048
  809f48:	2880030d 	sth	r2,12(r5)
  809f4c:	00c04b0e 	bge	zero,r3,80a07c <__sflush_r+0x168>
  809f50:	8a000a17 	ldw	r8,40(r17)
  809f54:	40002326 	beq	r8,zero,809fe4 <__sflush_r+0xd0>
  809f58:	9c000017 	ldw	r16,0(r19)
  809f5c:	10c4000c 	andi	r3,r2,4096
  809f60:	98000015 	stw	zero,0(r19)
  809f64:	18004826 	beq	r3,zero,80a088 <__sflush_r+0x174>
  809f68:	89801417 	ldw	r6,80(r17)
  809f6c:	10c0010c 	andi	r3,r2,4
  809f70:	18000626 	beq	r3,zero,809f8c <__sflush_r+0x78>
  809f74:	88c00117 	ldw	r3,4(r17)
  809f78:	88800c17 	ldw	r2,48(r17)
  809f7c:	30cdc83a 	sub	r6,r6,r3
  809f80:	10000226 	beq	r2,zero,809f8c <__sflush_r+0x78>
  809f84:	88800f17 	ldw	r2,60(r17)
  809f88:	308dc83a 	sub	r6,r6,r2
  809f8c:	89400717 	ldw	r5,28(r17)
  809f90:	000f883a 	mov	r7,zero
  809f94:	9809883a 	mov	r4,r19
  809f98:	403ee83a 	callr	r8
  809f9c:	00ffffc4 	movi	r3,-1
  809fa0:	10c04426 	beq	r2,r3,80a0b4 <__sflush_r+0x1a0>
  809fa4:	88c0030b 	ldhu	r3,12(r17)
  809fa8:	89000417 	ldw	r4,16(r17)
  809fac:	88000115 	stw	zero,4(r17)
  809fb0:	197dffcc 	andi	r5,r3,63487
  809fb4:	8940030d 	sth	r5,12(r17)
  809fb8:	89000015 	stw	r4,0(r17)
  809fbc:	18c4000c 	andi	r3,r3,4096
  809fc0:	18002c1e 	bne	r3,zero,80a074 <__sflush_r+0x160>
  809fc4:	89400c17 	ldw	r5,48(r17)
  809fc8:	9c000015 	stw	r16,0(r19)
  809fcc:	28000526 	beq	r5,zero,809fe4 <__sflush_r+0xd0>
  809fd0:	88801004 	addi	r2,r17,64
  809fd4:	28800226 	beq	r5,r2,809fe0 <__sflush_r+0xcc>
  809fd8:	9809883a 	mov	r4,r19
  809fdc:	080a6800 	call	80a680 <_free_r>
  809fe0:	88000c15 	stw	zero,48(r17)
  809fe4:	0005883a 	mov	r2,zero
  809fe8:	dfc00417 	ldw	ra,16(sp)
  809fec:	dcc00317 	ldw	r19,12(sp)
  809ff0:	dc800217 	ldw	r18,8(sp)
  809ff4:	dc400117 	ldw	r17,4(sp)
  809ff8:	dc000017 	ldw	r16,0(sp)
  809ffc:	dec00504 	addi	sp,sp,20
  80a000:	f800283a 	ret
  80a004:	2c800417 	ldw	r18,16(r5)
  80a008:	903ff626 	beq	r18,zero,809fe4 <__alt_mem_onchip_mem+0xff801fe4>
  80a00c:	2c000017 	ldw	r16,0(r5)
  80a010:	108000cc 	andi	r2,r2,3
  80a014:	2c800015 	stw	r18,0(r5)
  80a018:	84a1c83a 	sub	r16,r16,r18
  80a01c:	1000131e 	bne	r2,zero,80a06c <__sflush_r+0x158>
  80a020:	28800517 	ldw	r2,20(r5)
  80a024:	88800215 	stw	r2,8(r17)
  80a028:	04000316 	blt	zero,r16,80a038 <__sflush_r+0x124>
  80a02c:	003fed06 	br	809fe4 <__alt_mem_onchip_mem+0xff801fe4>
  80a030:	90a5883a 	add	r18,r18,r2
  80a034:	043feb0e 	bge	zero,r16,809fe4 <__alt_mem_onchip_mem+0xff801fe4>
  80a038:	88800917 	ldw	r2,36(r17)
  80a03c:	89400717 	ldw	r5,28(r17)
  80a040:	800f883a 	mov	r7,r16
  80a044:	900d883a 	mov	r6,r18
  80a048:	9809883a 	mov	r4,r19
  80a04c:	103ee83a 	callr	r2
  80a050:	80a1c83a 	sub	r16,r16,r2
  80a054:	00bff616 	blt	zero,r2,80a030 <__alt_mem_onchip_mem+0xff802030>
  80a058:	88c0030b 	ldhu	r3,12(r17)
  80a05c:	00bfffc4 	movi	r2,-1
  80a060:	18c01014 	ori	r3,r3,64
  80a064:	88c0030d 	sth	r3,12(r17)
  80a068:	003fdf06 	br	809fe8 <__alt_mem_onchip_mem+0xff801fe8>
  80a06c:	0005883a 	mov	r2,zero
  80a070:	003fec06 	br	80a024 <__alt_mem_onchip_mem+0xff802024>
  80a074:	88801415 	stw	r2,80(r17)
  80a078:	003fd206 	br	809fc4 <__alt_mem_onchip_mem+0xff801fc4>
  80a07c:	28c00f17 	ldw	r3,60(r5)
  80a080:	00ffb316 	blt	zero,r3,809f50 <__alt_mem_onchip_mem+0xff801f50>
  80a084:	003fd706 	br	809fe4 <__alt_mem_onchip_mem+0xff801fe4>
  80a088:	89400717 	ldw	r5,28(r17)
  80a08c:	000d883a 	mov	r6,zero
  80a090:	01c00044 	movi	r7,1
  80a094:	9809883a 	mov	r4,r19
  80a098:	403ee83a 	callr	r8
  80a09c:	100d883a 	mov	r6,r2
  80a0a0:	00bfffc4 	movi	r2,-1
  80a0a4:	30801426 	beq	r6,r2,80a0f8 <__sflush_r+0x1e4>
  80a0a8:	8880030b 	ldhu	r2,12(r17)
  80a0ac:	8a000a17 	ldw	r8,40(r17)
  80a0b0:	003fae06 	br	809f6c <__alt_mem_onchip_mem+0xff801f6c>
  80a0b4:	98c00017 	ldw	r3,0(r19)
  80a0b8:	183fba26 	beq	r3,zero,809fa4 <__alt_mem_onchip_mem+0xff801fa4>
  80a0bc:	01000744 	movi	r4,29
  80a0c0:	19000626 	beq	r3,r4,80a0dc <__sflush_r+0x1c8>
  80a0c4:	01000584 	movi	r4,22
  80a0c8:	19000426 	beq	r3,r4,80a0dc <__sflush_r+0x1c8>
  80a0cc:	88c0030b 	ldhu	r3,12(r17)
  80a0d0:	18c01014 	ori	r3,r3,64
  80a0d4:	88c0030d 	sth	r3,12(r17)
  80a0d8:	003fc306 	br	809fe8 <__alt_mem_onchip_mem+0xff801fe8>
  80a0dc:	8880030b 	ldhu	r2,12(r17)
  80a0e0:	88c00417 	ldw	r3,16(r17)
  80a0e4:	88000115 	stw	zero,4(r17)
  80a0e8:	10bdffcc 	andi	r2,r2,63487
  80a0ec:	8880030d 	sth	r2,12(r17)
  80a0f0:	88c00015 	stw	r3,0(r17)
  80a0f4:	003fb306 	br	809fc4 <__alt_mem_onchip_mem+0xff801fc4>
  80a0f8:	98800017 	ldw	r2,0(r19)
  80a0fc:	103fea26 	beq	r2,zero,80a0a8 <__alt_mem_onchip_mem+0xff8020a8>
  80a100:	00c00744 	movi	r3,29
  80a104:	10c00226 	beq	r2,r3,80a110 <__sflush_r+0x1fc>
  80a108:	00c00584 	movi	r3,22
  80a10c:	10c0031e 	bne	r2,r3,80a11c <__sflush_r+0x208>
  80a110:	9c000015 	stw	r16,0(r19)
  80a114:	0005883a 	mov	r2,zero
  80a118:	003fb306 	br	809fe8 <__alt_mem_onchip_mem+0xff801fe8>
  80a11c:	88c0030b 	ldhu	r3,12(r17)
  80a120:	3005883a 	mov	r2,r6
  80a124:	18c01014 	ori	r3,r3,64
  80a128:	88c0030d 	sth	r3,12(r17)
  80a12c:	003fae06 	br	809fe8 <__alt_mem_onchip_mem+0xff801fe8>

0080a130 <_fflush_r>:
  80a130:	defffd04 	addi	sp,sp,-12
  80a134:	dc000115 	stw	r16,4(sp)
  80a138:	dfc00215 	stw	ra,8(sp)
  80a13c:	2021883a 	mov	r16,r4
  80a140:	20000226 	beq	r4,zero,80a14c <_fflush_r+0x1c>
  80a144:	20800e17 	ldw	r2,56(r4)
  80a148:	10000c26 	beq	r2,zero,80a17c <_fflush_r+0x4c>
  80a14c:	2880030f 	ldh	r2,12(r5)
  80a150:	1000051e 	bne	r2,zero,80a168 <_fflush_r+0x38>
  80a154:	0005883a 	mov	r2,zero
  80a158:	dfc00217 	ldw	ra,8(sp)
  80a15c:	dc000117 	ldw	r16,4(sp)
  80a160:	dec00304 	addi	sp,sp,12
  80a164:	f800283a 	ret
  80a168:	8009883a 	mov	r4,r16
  80a16c:	dfc00217 	ldw	ra,8(sp)
  80a170:	dc000117 	ldw	r16,4(sp)
  80a174:	dec00304 	addi	sp,sp,12
  80a178:	0809f141 	jmpi	809f14 <__sflush_r>
  80a17c:	d9400015 	stw	r5,0(sp)
  80a180:	080a50c0 	call	80a50c <__sinit>
  80a184:	d9400017 	ldw	r5,0(sp)
  80a188:	003ff006 	br	80a14c <__alt_mem_onchip_mem+0xff80214c>

0080a18c <fflush>:
  80a18c:	20000526 	beq	r4,zero,80a1a4 <fflush+0x18>
  80a190:	00802074 	movhi	r2,129
  80a194:	109cbc04 	addi	r2,r2,29424
  80a198:	200b883a 	mov	r5,r4
  80a19c:	11000017 	ldw	r4,0(r2)
  80a1a0:	080a1301 	jmpi	80a130 <_fflush_r>
  80a1a4:	00802074 	movhi	r2,129
  80a1a8:	109cbb04 	addi	r2,r2,29420
  80a1ac:	11000017 	ldw	r4,0(r2)
  80a1b0:	01402074 	movhi	r5,129
  80a1b4:	29684c04 	addi	r5,r5,-24272
  80a1b8:	080af101 	jmpi	80af10 <_fwalk_reent>

0080a1bc <__fp_unlock>:
  80a1bc:	0005883a 	mov	r2,zero
  80a1c0:	f800283a 	ret

0080a1c4 <_cleanup_r>:
  80a1c4:	01402074 	movhi	r5,129
  80a1c8:	297bca04 	addi	r5,r5,-4312
  80a1cc:	080af101 	jmpi	80af10 <_fwalk_reent>

0080a1d0 <__sinit.part.1>:
  80a1d0:	defff704 	addi	sp,sp,-36
  80a1d4:	00c02074 	movhi	r3,129
  80a1d8:	dfc00815 	stw	ra,32(sp)
  80a1dc:	ddc00715 	stw	r23,28(sp)
  80a1e0:	dd800615 	stw	r22,24(sp)
  80a1e4:	dd400515 	stw	r21,20(sp)
  80a1e8:	dd000415 	stw	r20,16(sp)
  80a1ec:	dcc00315 	stw	r19,12(sp)
  80a1f0:	dc800215 	stw	r18,8(sp)
  80a1f4:	dc400115 	stw	r17,4(sp)
  80a1f8:	dc000015 	stw	r16,0(sp)
  80a1fc:	18e87104 	addi	r3,r3,-24124
  80a200:	24000117 	ldw	r16,4(r4)
  80a204:	20c00f15 	stw	r3,60(r4)
  80a208:	2080bb04 	addi	r2,r4,748
  80a20c:	00c000c4 	movi	r3,3
  80a210:	20c0b915 	stw	r3,740(r4)
  80a214:	2080ba15 	stw	r2,744(r4)
  80a218:	2000b815 	stw	zero,736(r4)
  80a21c:	05c00204 	movi	r23,8
  80a220:	00800104 	movi	r2,4
  80a224:	2025883a 	mov	r18,r4
  80a228:	b80d883a 	mov	r6,r23
  80a22c:	81001704 	addi	r4,r16,92
  80a230:	000b883a 	mov	r5,zero
  80a234:	80000015 	stw	zero,0(r16)
  80a238:	80000115 	stw	zero,4(r16)
  80a23c:	80000215 	stw	zero,8(r16)
  80a240:	8080030d 	sth	r2,12(r16)
  80a244:	80001915 	stw	zero,100(r16)
  80a248:	8000038d 	sth	zero,14(r16)
  80a24c:	80000415 	stw	zero,16(r16)
  80a250:	80000515 	stw	zero,20(r16)
  80a254:	80000615 	stw	zero,24(r16)
  80a258:	080be000 	call	80be00 <memset>
  80a25c:	05802074 	movhi	r22,129
  80a260:	94400217 	ldw	r17,8(r18)
  80a264:	05402074 	movhi	r21,129
  80a268:	05002074 	movhi	r20,129
  80a26c:	04c02074 	movhi	r19,129
  80a270:	b5b55404 	addi	r22,r22,-10928
  80a274:	ad756b04 	addi	r21,r21,-10836
  80a278:	a5358a04 	addi	r20,r20,-10712
  80a27c:	9cf5a104 	addi	r19,r19,-10620
  80a280:	85800815 	stw	r22,32(r16)
  80a284:	85400915 	stw	r21,36(r16)
  80a288:	85000a15 	stw	r20,40(r16)
  80a28c:	84c00b15 	stw	r19,44(r16)
  80a290:	84000715 	stw	r16,28(r16)
  80a294:	00800284 	movi	r2,10
  80a298:	8880030d 	sth	r2,12(r17)
  80a29c:	00800044 	movi	r2,1
  80a2a0:	b80d883a 	mov	r6,r23
  80a2a4:	89001704 	addi	r4,r17,92
  80a2a8:	000b883a 	mov	r5,zero
  80a2ac:	88000015 	stw	zero,0(r17)
  80a2b0:	88000115 	stw	zero,4(r17)
  80a2b4:	88000215 	stw	zero,8(r17)
  80a2b8:	88001915 	stw	zero,100(r17)
  80a2bc:	8880038d 	sth	r2,14(r17)
  80a2c0:	88000415 	stw	zero,16(r17)
  80a2c4:	88000515 	stw	zero,20(r17)
  80a2c8:	88000615 	stw	zero,24(r17)
  80a2cc:	080be000 	call	80be00 <memset>
  80a2d0:	94000317 	ldw	r16,12(r18)
  80a2d4:	00800484 	movi	r2,18
  80a2d8:	8c400715 	stw	r17,28(r17)
  80a2dc:	8d800815 	stw	r22,32(r17)
  80a2e0:	8d400915 	stw	r21,36(r17)
  80a2e4:	8d000a15 	stw	r20,40(r17)
  80a2e8:	8cc00b15 	stw	r19,44(r17)
  80a2ec:	8080030d 	sth	r2,12(r16)
  80a2f0:	00800084 	movi	r2,2
  80a2f4:	80000015 	stw	zero,0(r16)
  80a2f8:	80000115 	stw	zero,4(r16)
  80a2fc:	80000215 	stw	zero,8(r16)
  80a300:	80001915 	stw	zero,100(r16)
  80a304:	8080038d 	sth	r2,14(r16)
  80a308:	80000415 	stw	zero,16(r16)
  80a30c:	80000515 	stw	zero,20(r16)
  80a310:	80000615 	stw	zero,24(r16)
  80a314:	b80d883a 	mov	r6,r23
  80a318:	000b883a 	mov	r5,zero
  80a31c:	81001704 	addi	r4,r16,92
  80a320:	080be000 	call	80be00 <memset>
  80a324:	00800044 	movi	r2,1
  80a328:	84000715 	stw	r16,28(r16)
  80a32c:	85800815 	stw	r22,32(r16)
  80a330:	85400915 	stw	r21,36(r16)
  80a334:	85000a15 	stw	r20,40(r16)
  80a338:	84c00b15 	stw	r19,44(r16)
  80a33c:	90800e15 	stw	r2,56(r18)
  80a340:	dfc00817 	ldw	ra,32(sp)
  80a344:	ddc00717 	ldw	r23,28(sp)
  80a348:	dd800617 	ldw	r22,24(sp)
  80a34c:	dd400517 	ldw	r21,20(sp)
  80a350:	dd000417 	ldw	r20,16(sp)
  80a354:	dcc00317 	ldw	r19,12(sp)
  80a358:	dc800217 	ldw	r18,8(sp)
  80a35c:	dc400117 	ldw	r17,4(sp)
  80a360:	dc000017 	ldw	r16,0(sp)
  80a364:	dec00904 	addi	sp,sp,36
  80a368:	f800283a 	ret

0080a36c <__fp_lock>:
  80a36c:	0005883a 	mov	r2,zero
  80a370:	f800283a 	ret

0080a374 <__sfmoreglue>:
  80a374:	defffc04 	addi	sp,sp,-16
  80a378:	dc400115 	stw	r17,4(sp)
  80a37c:	2c7fffc4 	addi	r17,r5,-1
  80a380:	8c401a24 	muli	r17,r17,104
  80a384:	dc800215 	stw	r18,8(sp)
  80a388:	2825883a 	mov	r18,r5
  80a38c:	89401d04 	addi	r5,r17,116
  80a390:	dc000015 	stw	r16,0(sp)
  80a394:	dfc00315 	stw	ra,12(sp)
  80a398:	080b26c0 	call	80b26c <_malloc_r>
  80a39c:	1021883a 	mov	r16,r2
  80a3a0:	10000726 	beq	r2,zero,80a3c0 <__sfmoreglue+0x4c>
  80a3a4:	11000304 	addi	r4,r2,12
  80a3a8:	10000015 	stw	zero,0(r2)
  80a3ac:	14800115 	stw	r18,4(r2)
  80a3b0:	11000215 	stw	r4,8(r2)
  80a3b4:	89801a04 	addi	r6,r17,104
  80a3b8:	000b883a 	mov	r5,zero
  80a3bc:	080be000 	call	80be00 <memset>
  80a3c0:	8005883a 	mov	r2,r16
  80a3c4:	dfc00317 	ldw	ra,12(sp)
  80a3c8:	dc800217 	ldw	r18,8(sp)
  80a3cc:	dc400117 	ldw	r17,4(sp)
  80a3d0:	dc000017 	ldw	r16,0(sp)
  80a3d4:	dec00404 	addi	sp,sp,16
  80a3d8:	f800283a 	ret

0080a3dc <__sfp>:
  80a3dc:	defffb04 	addi	sp,sp,-20
  80a3e0:	dc000015 	stw	r16,0(sp)
  80a3e4:	04002074 	movhi	r16,129
  80a3e8:	841cbb04 	addi	r16,r16,29420
  80a3ec:	dcc00315 	stw	r19,12(sp)
  80a3f0:	2027883a 	mov	r19,r4
  80a3f4:	81000017 	ldw	r4,0(r16)
  80a3f8:	dfc00415 	stw	ra,16(sp)
  80a3fc:	dc800215 	stw	r18,8(sp)
  80a400:	20800e17 	ldw	r2,56(r4)
  80a404:	dc400115 	stw	r17,4(sp)
  80a408:	1000021e 	bne	r2,zero,80a414 <__sfp+0x38>
  80a40c:	080a1d00 	call	80a1d0 <__sinit.part.1>
  80a410:	81000017 	ldw	r4,0(r16)
  80a414:	2480b804 	addi	r18,r4,736
  80a418:	047fffc4 	movi	r17,-1
  80a41c:	91000117 	ldw	r4,4(r18)
  80a420:	94000217 	ldw	r16,8(r18)
  80a424:	213fffc4 	addi	r4,r4,-1
  80a428:	20000a16 	blt	r4,zero,80a454 <__sfp+0x78>
  80a42c:	8080030f 	ldh	r2,12(r16)
  80a430:	10000c26 	beq	r2,zero,80a464 <__sfp+0x88>
  80a434:	80c01d04 	addi	r3,r16,116
  80a438:	00000206 	br	80a444 <__sfp+0x68>
  80a43c:	18bfe60f 	ldh	r2,-104(r3)
  80a440:	10000826 	beq	r2,zero,80a464 <__sfp+0x88>
  80a444:	213fffc4 	addi	r4,r4,-1
  80a448:	1c3ffd04 	addi	r16,r3,-12
  80a44c:	18c01a04 	addi	r3,r3,104
  80a450:	247ffa1e 	bne	r4,r17,80a43c <__alt_mem_onchip_mem+0xff80243c>
  80a454:	90800017 	ldw	r2,0(r18)
  80a458:	10001d26 	beq	r2,zero,80a4d0 <__sfp+0xf4>
  80a45c:	1025883a 	mov	r18,r2
  80a460:	003fee06 	br	80a41c <__alt_mem_onchip_mem+0xff80241c>
  80a464:	00bfffc4 	movi	r2,-1
  80a468:	8080038d 	sth	r2,14(r16)
  80a46c:	00800044 	movi	r2,1
  80a470:	8080030d 	sth	r2,12(r16)
  80a474:	80001915 	stw	zero,100(r16)
  80a478:	80000015 	stw	zero,0(r16)
  80a47c:	80000215 	stw	zero,8(r16)
  80a480:	80000115 	stw	zero,4(r16)
  80a484:	80000415 	stw	zero,16(r16)
  80a488:	80000515 	stw	zero,20(r16)
  80a48c:	80000615 	stw	zero,24(r16)
  80a490:	01800204 	movi	r6,8
  80a494:	000b883a 	mov	r5,zero
  80a498:	81001704 	addi	r4,r16,92
  80a49c:	080be000 	call	80be00 <memset>
  80a4a0:	8005883a 	mov	r2,r16
  80a4a4:	80000c15 	stw	zero,48(r16)
  80a4a8:	80000d15 	stw	zero,52(r16)
  80a4ac:	80001115 	stw	zero,68(r16)
  80a4b0:	80001215 	stw	zero,72(r16)
  80a4b4:	dfc00417 	ldw	ra,16(sp)
  80a4b8:	dcc00317 	ldw	r19,12(sp)
  80a4bc:	dc800217 	ldw	r18,8(sp)
  80a4c0:	dc400117 	ldw	r17,4(sp)
  80a4c4:	dc000017 	ldw	r16,0(sp)
  80a4c8:	dec00504 	addi	sp,sp,20
  80a4cc:	f800283a 	ret
  80a4d0:	01400104 	movi	r5,4
  80a4d4:	9809883a 	mov	r4,r19
  80a4d8:	080a3740 	call	80a374 <__sfmoreglue>
  80a4dc:	90800015 	stw	r2,0(r18)
  80a4e0:	103fde1e 	bne	r2,zero,80a45c <__alt_mem_onchip_mem+0xff80245c>
  80a4e4:	00800304 	movi	r2,12
  80a4e8:	98800015 	stw	r2,0(r19)
  80a4ec:	0005883a 	mov	r2,zero
  80a4f0:	003ff006 	br	80a4b4 <__alt_mem_onchip_mem+0xff8024b4>

0080a4f4 <_cleanup>:
  80a4f4:	00802074 	movhi	r2,129
  80a4f8:	109cbb04 	addi	r2,r2,29420
  80a4fc:	11000017 	ldw	r4,0(r2)
  80a500:	01402074 	movhi	r5,129
  80a504:	297bca04 	addi	r5,r5,-4312
  80a508:	080af101 	jmpi	80af10 <_fwalk_reent>

0080a50c <__sinit>:
  80a50c:	20800e17 	ldw	r2,56(r4)
  80a510:	10000126 	beq	r2,zero,80a518 <__sinit+0xc>
  80a514:	f800283a 	ret
  80a518:	080a1d01 	jmpi	80a1d0 <__sinit.part.1>

0080a51c <__sfp_lock_acquire>:
  80a51c:	f800283a 	ret

0080a520 <__sfp_lock_release>:
  80a520:	f800283a 	ret

0080a524 <__sinit_lock_acquire>:
  80a524:	f800283a 	ret

0080a528 <__sinit_lock_release>:
  80a528:	f800283a 	ret

0080a52c <__fp_lock_all>:
  80a52c:	00802074 	movhi	r2,129
  80a530:	109cbc04 	addi	r2,r2,29424
  80a534:	11000017 	ldw	r4,0(r2)
  80a538:	01402074 	movhi	r5,129
  80a53c:	2968db04 	addi	r5,r5,-23700
  80a540:	080ae4c1 	jmpi	80ae4c <_fwalk>

0080a544 <__fp_unlock_all>:
  80a544:	00802074 	movhi	r2,129
  80a548:	109cbc04 	addi	r2,r2,29424
  80a54c:	11000017 	ldw	r4,0(r2)
  80a550:	01402074 	movhi	r5,129
  80a554:	29686f04 	addi	r5,r5,-24132
  80a558:	080ae4c1 	jmpi	80ae4c <_fwalk>

0080a55c <_malloc_trim_r>:
  80a55c:	defffb04 	addi	sp,sp,-20
  80a560:	dcc00315 	stw	r19,12(sp)
  80a564:	04c02074 	movhi	r19,129
  80a568:	dc800215 	stw	r18,8(sp)
  80a56c:	dc400115 	stw	r17,4(sp)
  80a570:	dc000015 	stw	r16,0(sp)
  80a574:	dfc00415 	stw	ra,16(sp)
  80a578:	2821883a 	mov	r16,r5
  80a57c:	9cd6be04 	addi	r19,r19,23288
  80a580:	2025883a 	mov	r18,r4
  80a584:	081163c0 	call	81163c <__malloc_lock>
  80a588:	98800217 	ldw	r2,8(r19)
  80a58c:	14400117 	ldw	r17,4(r2)
  80a590:	00bfff04 	movi	r2,-4
  80a594:	88a2703a 	and	r17,r17,r2
  80a598:	8c21c83a 	sub	r16,r17,r16
  80a59c:	8403fbc4 	addi	r16,r16,4079
  80a5a0:	8020d33a 	srli	r16,r16,12
  80a5a4:	0083ffc4 	movi	r2,4095
  80a5a8:	843fffc4 	addi	r16,r16,-1
  80a5ac:	8020933a 	slli	r16,r16,12
  80a5b0:	1400060e 	bge	r2,r16,80a5cc <_malloc_trim_r+0x70>
  80a5b4:	000b883a 	mov	r5,zero
  80a5b8:	9009883a 	mov	r4,r18
  80a5bc:	080d4fc0 	call	80d4fc <_sbrk_r>
  80a5c0:	98c00217 	ldw	r3,8(r19)
  80a5c4:	1c47883a 	add	r3,r3,r17
  80a5c8:	10c00a26 	beq	r2,r3,80a5f4 <_malloc_trim_r+0x98>
  80a5cc:	9009883a 	mov	r4,r18
  80a5d0:	08116600 	call	811660 <__malloc_unlock>
  80a5d4:	0005883a 	mov	r2,zero
  80a5d8:	dfc00417 	ldw	ra,16(sp)
  80a5dc:	dcc00317 	ldw	r19,12(sp)
  80a5e0:	dc800217 	ldw	r18,8(sp)
  80a5e4:	dc400117 	ldw	r17,4(sp)
  80a5e8:	dc000017 	ldw	r16,0(sp)
  80a5ec:	dec00504 	addi	sp,sp,20
  80a5f0:	f800283a 	ret
  80a5f4:	040bc83a 	sub	r5,zero,r16
  80a5f8:	9009883a 	mov	r4,r18
  80a5fc:	080d4fc0 	call	80d4fc <_sbrk_r>
  80a600:	00ffffc4 	movi	r3,-1
  80a604:	10c00d26 	beq	r2,r3,80a63c <_malloc_trim_r+0xe0>
  80a608:	00c020b4 	movhi	r3,130
  80a60c:	18e41104 	addi	r3,r3,-28604
  80a610:	18800017 	ldw	r2,0(r3)
  80a614:	99000217 	ldw	r4,8(r19)
  80a618:	8c23c83a 	sub	r17,r17,r16
  80a61c:	8c400054 	ori	r17,r17,1
  80a620:	1421c83a 	sub	r16,r2,r16
  80a624:	24400115 	stw	r17,4(r4)
  80a628:	9009883a 	mov	r4,r18
  80a62c:	1c000015 	stw	r16,0(r3)
  80a630:	08116600 	call	811660 <__malloc_unlock>
  80a634:	00800044 	movi	r2,1
  80a638:	003fe706 	br	80a5d8 <__alt_mem_onchip_mem+0xff8025d8>
  80a63c:	000b883a 	mov	r5,zero
  80a640:	9009883a 	mov	r4,r18
  80a644:	080d4fc0 	call	80d4fc <_sbrk_r>
  80a648:	99000217 	ldw	r4,8(r19)
  80a64c:	014003c4 	movi	r5,15
  80a650:	1107c83a 	sub	r3,r2,r4
  80a654:	28ffdd0e 	bge	r5,r3,80a5cc <__alt_mem_onchip_mem+0xff8025cc>
  80a658:	01402074 	movhi	r5,129
  80a65c:	295cbe04 	addi	r5,r5,29432
  80a660:	29400017 	ldw	r5,0(r5)
  80a664:	18c00054 	ori	r3,r3,1
  80a668:	20c00115 	stw	r3,4(r4)
  80a66c:	00c020b4 	movhi	r3,130
  80a670:	1145c83a 	sub	r2,r2,r5
  80a674:	18e41104 	addi	r3,r3,-28604
  80a678:	18800015 	stw	r2,0(r3)
  80a67c:	003fd306 	br	80a5cc <__alt_mem_onchip_mem+0xff8025cc>

0080a680 <_free_r>:
  80a680:	28004126 	beq	r5,zero,80a788 <_free_r+0x108>
  80a684:	defffd04 	addi	sp,sp,-12
  80a688:	dc400115 	stw	r17,4(sp)
  80a68c:	dc000015 	stw	r16,0(sp)
  80a690:	2023883a 	mov	r17,r4
  80a694:	2821883a 	mov	r16,r5
  80a698:	dfc00215 	stw	ra,8(sp)
  80a69c:	081163c0 	call	81163c <__malloc_lock>
  80a6a0:	81ffff17 	ldw	r7,-4(r16)
  80a6a4:	00bfff84 	movi	r2,-2
  80a6a8:	01002074 	movhi	r4,129
  80a6ac:	81bffe04 	addi	r6,r16,-8
  80a6b0:	3884703a 	and	r2,r7,r2
  80a6b4:	2116be04 	addi	r4,r4,23288
  80a6b8:	308b883a 	add	r5,r6,r2
  80a6bc:	2a400117 	ldw	r9,4(r5)
  80a6c0:	22000217 	ldw	r8,8(r4)
  80a6c4:	00ffff04 	movi	r3,-4
  80a6c8:	48c6703a 	and	r3,r9,r3
  80a6cc:	2a005726 	beq	r5,r8,80a82c <_free_r+0x1ac>
  80a6d0:	28c00115 	stw	r3,4(r5)
  80a6d4:	39c0004c 	andi	r7,r7,1
  80a6d8:	3800091e 	bne	r7,zero,80a700 <_free_r+0x80>
  80a6dc:	823ffe17 	ldw	r8,-8(r16)
  80a6e0:	22400204 	addi	r9,r4,8
  80a6e4:	320dc83a 	sub	r6,r6,r8
  80a6e8:	31c00217 	ldw	r7,8(r6)
  80a6ec:	1205883a 	add	r2,r2,r8
  80a6f0:	3a406526 	beq	r7,r9,80a888 <_free_r+0x208>
  80a6f4:	32000317 	ldw	r8,12(r6)
  80a6f8:	3a000315 	stw	r8,12(r7)
  80a6fc:	41c00215 	stw	r7,8(r8)
  80a700:	28cf883a 	add	r7,r5,r3
  80a704:	39c00117 	ldw	r7,4(r7)
  80a708:	39c0004c 	andi	r7,r7,1
  80a70c:	38003a26 	beq	r7,zero,80a7f8 <_free_r+0x178>
  80a710:	10c00054 	ori	r3,r2,1
  80a714:	30c00115 	stw	r3,4(r6)
  80a718:	3087883a 	add	r3,r6,r2
  80a71c:	18800015 	stw	r2,0(r3)
  80a720:	00c07fc4 	movi	r3,511
  80a724:	18801936 	bltu	r3,r2,80a78c <_free_r+0x10c>
  80a728:	1004d0fa 	srli	r2,r2,3
  80a72c:	01c00044 	movi	r7,1
  80a730:	21400117 	ldw	r5,4(r4)
  80a734:	10c00044 	addi	r3,r2,1
  80a738:	18c7883a 	add	r3,r3,r3
  80a73c:	1005d0ba 	srai	r2,r2,2
  80a740:	18c7883a 	add	r3,r3,r3
  80a744:	18c7883a 	add	r3,r3,r3
  80a748:	1907883a 	add	r3,r3,r4
  80a74c:	3884983a 	sll	r2,r7,r2
  80a750:	19c00017 	ldw	r7,0(r3)
  80a754:	1a3ffe04 	addi	r8,r3,-8
  80a758:	1144b03a 	or	r2,r2,r5
  80a75c:	32000315 	stw	r8,12(r6)
  80a760:	31c00215 	stw	r7,8(r6)
  80a764:	20800115 	stw	r2,4(r4)
  80a768:	19800015 	stw	r6,0(r3)
  80a76c:	39800315 	stw	r6,12(r7)
  80a770:	8809883a 	mov	r4,r17
  80a774:	dfc00217 	ldw	ra,8(sp)
  80a778:	dc400117 	ldw	r17,4(sp)
  80a77c:	dc000017 	ldw	r16,0(sp)
  80a780:	dec00304 	addi	sp,sp,12
  80a784:	08116601 	jmpi	811660 <__malloc_unlock>
  80a788:	f800283a 	ret
  80a78c:	100ad27a 	srli	r5,r2,9
  80a790:	00c00104 	movi	r3,4
  80a794:	19404a36 	bltu	r3,r5,80a8c0 <_free_r+0x240>
  80a798:	100ad1ba 	srli	r5,r2,6
  80a79c:	28c00e44 	addi	r3,r5,57
  80a7a0:	18c7883a 	add	r3,r3,r3
  80a7a4:	29400e04 	addi	r5,r5,56
  80a7a8:	18c7883a 	add	r3,r3,r3
  80a7ac:	18c7883a 	add	r3,r3,r3
  80a7b0:	1909883a 	add	r4,r3,r4
  80a7b4:	20c00017 	ldw	r3,0(r4)
  80a7b8:	01c02074 	movhi	r7,129
  80a7bc:	213ffe04 	addi	r4,r4,-8
  80a7c0:	39d6be04 	addi	r7,r7,23288
  80a7c4:	20c04426 	beq	r4,r3,80a8d8 <_free_r+0x258>
  80a7c8:	01ffff04 	movi	r7,-4
  80a7cc:	19400117 	ldw	r5,4(r3)
  80a7d0:	29ca703a 	and	r5,r5,r7
  80a7d4:	1140022e 	bgeu	r2,r5,80a7e0 <_free_r+0x160>
  80a7d8:	18c00217 	ldw	r3,8(r3)
  80a7dc:	20fffb1e 	bne	r4,r3,80a7cc <__alt_mem_onchip_mem+0xff8027cc>
  80a7e0:	19000317 	ldw	r4,12(r3)
  80a7e4:	31000315 	stw	r4,12(r6)
  80a7e8:	30c00215 	stw	r3,8(r6)
  80a7ec:	21800215 	stw	r6,8(r4)
  80a7f0:	19800315 	stw	r6,12(r3)
  80a7f4:	003fde06 	br	80a770 <__alt_mem_onchip_mem+0xff802770>
  80a7f8:	29c00217 	ldw	r7,8(r5)
  80a7fc:	10c5883a 	add	r2,r2,r3
  80a800:	00c02074 	movhi	r3,129
  80a804:	18d6c004 	addi	r3,r3,23296
  80a808:	38c03b26 	beq	r7,r3,80a8f8 <_free_r+0x278>
  80a80c:	2a000317 	ldw	r8,12(r5)
  80a810:	11400054 	ori	r5,r2,1
  80a814:	3087883a 	add	r3,r6,r2
  80a818:	3a000315 	stw	r8,12(r7)
  80a81c:	41c00215 	stw	r7,8(r8)
  80a820:	31400115 	stw	r5,4(r6)
  80a824:	18800015 	stw	r2,0(r3)
  80a828:	003fbd06 	br	80a720 <__alt_mem_onchip_mem+0xff802720>
  80a82c:	39c0004c 	andi	r7,r7,1
  80a830:	10c5883a 	add	r2,r2,r3
  80a834:	3800071e 	bne	r7,zero,80a854 <_free_r+0x1d4>
  80a838:	81fffe17 	ldw	r7,-8(r16)
  80a83c:	31cdc83a 	sub	r6,r6,r7
  80a840:	30c00317 	ldw	r3,12(r6)
  80a844:	31400217 	ldw	r5,8(r6)
  80a848:	11c5883a 	add	r2,r2,r7
  80a84c:	28c00315 	stw	r3,12(r5)
  80a850:	19400215 	stw	r5,8(r3)
  80a854:	10c00054 	ori	r3,r2,1
  80a858:	30c00115 	stw	r3,4(r6)
  80a85c:	00c02074 	movhi	r3,129
  80a860:	18dcbf04 	addi	r3,r3,29436
  80a864:	18c00017 	ldw	r3,0(r3)
  80a868:	21800215 	stw	r6,8(r4)
  80a86c:	10ffc036 	bltu	r2,r3,80a770 <__alt_mem_onchip_mem+0xff802770>
  80a870:	008020b4 	movhi	r2,130
  80a874:	10a40804 	addi	r2,r2,-28640
  80a878:	11400017 	ldw	r5,0(r2)
  80a87c:	8809883a 	mov	r4,r17
  80a880:	080a55c0 	call	80a55c <_malloc_trim_r>
  80a884:	003fba06 	br	80a770 <__alt_mem_onchip_mem+0xff802770>
  80a888:	28c9883a 	add	r4,r5,r3
  80a88c:	21000117 	ldw	r4,4(r4)
  80a890:	2100004c 	andi	r4,r4,1
  80a894:	2000391e 	bne	r4,zero,80a97c <_free_r+0x2fc>
  80a898:	29c00217 	ldw	r7,8(r5)
  80a89c:	29000317 	ldw	r4,12(r5)
  80a8a0:	1885883a 	add	r2,r3,r2
  80a8a4:	10c00054 	ori	r3,r2,1
  80a8a8:	39000315 	stw	r4,12(r7)
  80a8ac:	21c00215 	stw	r7,8(r4)
  80a8b0:	30c00115 	stw	r3,4(r6)
  80a8b4:	308d883a 	add	r6,r6,r2
  80a8b8:	30800015 	stw	r2,0(r6)
  80a8bc:	003fac06 	br	80a770 <__alt_mem_onchip_mem+0xff802770>
  80a8c0:	00c00504 	movi	r3,20
  80a8c4:	19401536 	bltu	r3,r5,80a91c <_free_r+0x29c>
  80a8c8:	28c01704 	addi	r3,r5,92
  80a8cc:	18c7883a 	add	r3,r3,r3
  80a8d0:	294016c4 	addi	r5,r5,91
  80a8d4:	003fb406 	br	80a7a8 <__alt_mem_onchip_mem+0xff8027a8>
  80a8d8:	280bd0ba 	srai	r5,r5,2
  80a8dc:	00c00044 	movi	r3,1
  80a8e0:	38800117 	ldw	r2,4(r7)
  80a8e4:	194a983a 	sll	r5,r3,r5
  80a8e8:	2007883a 	mov	r3,r4
  80a8ec:	2884b03a 	or	r2,r5,r2
  80a8f0:	38800115 	stw	r2,4(r7)
  80a8f4:	003fbb06 	br	80a7e4 <__alt_mem_onchip_mem+0xff8027e4>
  80a8f8:	21800515 	stw	r6,20(r4)
  80a8fc:	21800415 	stw	r6,16(r4)
  80a900:	10c00054 	ori	r3,r2,1
  80a904:	31c00315 	stw	r7,12(r6)
  80a908:	31c00215 	stw	r7,8(r6)
  80a90c:	30c00115 	stw	r3,4(r6)
  80a910:	308d883a 	add	r6,r6,r2
  80a914:	30800015 	stw	r2,0(r6)
  80a918:	003f9506 	br	80a770 <__alt_mem_onchip_mem+0xff802770>
  80a91c:	00c01504 	movi	r3,84
  80a920:	19400536 	bltu	r3,r5,80a938 <_free_r+0x2b8>
  80a924:	100ad33a 	srli	r5,r2,12
  80a928:	28c01bc4 	addi	r3,r5,111
  80a92c:	18c7883a 	add	r3,r3,r3
  80a930:	29401b84 	addi	r5,r5,110
  80a934:	003f9c06 	br	80a7a8 <__alt_mem_onchip_mem+0xff8027a8>
  80a938:	00c05504 	movi	r3,340
  80a93c:	19400536 	bltu	r3,r5,80a954 <_free_r+0x2d4>
  80a940:	100ad3fa 	srli	r5,r2,15
  80a944:	28c01e04 	addi	r3,r5,120
  80a948:	18c7883a 	add	r3,r3,r3
  80a94c:	29401dc4 	addi	r5,r5,119
  80a950:	003f9506 	br	80a7a8 <__alt_mem_onchip_mem+0xff8027a8>
  80a954:	00c15504 	movi	r3,1364
  80a958:	19400536 	bltu	r3,r5,80a970 <_free_r+0x2f0>
  80a95c:	100ad4ba 	srli	r5,r2,18
  80a960:	28c01f44 	addi	r3,r5,125
  80a964:	18c7883a 	add	r3,r3,r3
  80a968:	29401f04 	addi	r5,r5,124
  80a96c:	003f8e06 	br	80a7a8 <__alt_mem_onchip_mem+0xff8027a8>
  80a970:	00c03f84 	movi	r3,254
  80a974:	01401f84 	movi	r5,126
  80a978:	003f8b06 	br	80a7a8 <__alt_mem_onchip_mem+0xff8027a8>
  80a97c:	10c00054 	ori	r3,r2,1
  80a980:	30c00115 	stw	r3,4(r6)
  80a984:	308d883a 	add	r6,r6,r2
  80a988:	30800015 	stw	r2,0(r6)
  80a98c:	003f7806 	br	80a770 <__alt_mem_onchip_mem+0xff802770>

0080a990 <__sfvwrite_r>:
  80a990:	30800217 	ldw	r2,8(r6)
  80a994:	10006726 	beq	r2,zero,80ab34 <__sfvwrite_r+0x1a4>
  80a998:	28c0030b 	ldhu	r3,12(r5)
  80a99c:	defff404 	addi	sp,sp,-48
  80a9a0:	dd400715 	stw	r21,28(sp)
  80a9a4:	dd000615 	stw	r20,24(sp)
  80a9a8:	dc000215 	stw	r16,8(sp)
  80a9ac:	dfc00b15 	stw	ra,44(sp)
  80a9b0:	df000a15 	stw	fp,40(sp)
  80a9b4:	ddc00915 	stw	r23,36(sp)
  80a9b8:	dd800815 	stw	r22,32(sp)
  80a9bc:	dcc00515 	stw	r19,20(sp)
  80a9c0:	dc800415 	stw	r18,16(sp)
  80a9c4:	dc400315 	stw	r17,12(sp)
  80a9c8:	1880020c 	andi	r2,r3,8
  80a9cc:	2821883a 	mov	r16,r5
  80a9d0:	202b883a 	mov	r21,r4
  80a9d4:	3029883a 	mov	r20,r6
  80a9d8:	10002726 	beq	r2,zero,80aa78 <__sfvwrite_r+0xe8>
  80a9dc:	28800417 	ldw	r2,16(r5)
  80a9e0:	10002526 	beq	r2,zero,80aa78 <__sfvwrite_r+0xe8>
  80a9e4:	1880008c 	andi	r2,r3,2
  80a9e8:	a4400017 	ldw	r17,0(r20)
  80a9ec:	10002a26 	beq	r2,zero,80aa98 <__sfvwrite_r+0x108>
  80a9f0:	05a00034 	movhi	r22,32768
  80a9f4:	0027883a 	mov	r19,zero
  80a9f8:	0025883a 	mov	r18,zero
  80a9fc:	b5bf0004 	addi	r22,r22,-1024
  80aa00:	980d883a 	mov	r6,r19
  80aa04:	a809883a 	mov	r4,r21
  80aa08:	90004626 	beq	r18,zero,80ab24 <__sfvwrite_r+0x194>
  80aa0c:	900f883a 	mov	r7,r18
  80aa10:	b480022e 	bgeu	r22,r18,80aa1c <__sfvwrite_r+0x8c>
  80aa14:	01e00034 	movhi	r7,32768
  80aa18:	39ff0004 	addi	r7,r7,-1024
  80aa1c:	80800917 	ldw	r2,36(r16)
  80aa20:	81400717 	ldw	r5,28(r16)
  80aa24:	103ee83a 	callr	r2
  80aa28:	0080570e 	bge	zero,r2,80ab88 <__sfvwrite_r+0x1f8>
  80aa2c:	a0c00217 	ldw	r3,8(r20)
  80aa30:	98a7883a 	add	r19,r19,r2
  80aa34:	90a5c83a 	sub	r18,r18,r2
  80aa38:	1885c83a 	sub	r2,r3,r2
  80aa3c:	a0800215 	stw	r2,8(r20)
  80aa40:	103fef1e 	bne	r2,zero,80aa00 <__alt_mem_onchip_mem+0xff802a00>
  80aa44:	0005883a 	mov	r2,zero
  80aa48:	dfc00b17 	ldw	ra,44(sp)
  80aa4c:	df000a17 	ldw	fp,40(sp)
  80aa50:	ddc00917 	ldw	r23,36(sp)
  80aa54:	dd800817 	ldw	r22,32(sp)
  80aa58:	dd400717 	ldw	r21,28(sp)
  80aa5c:	dd000617 	ldw	r20,24(sp)
  80aa60:	dcc00517 	ldw	r19,20(sp)
  80aa64:	dc800417 	ldw	r18,16(sp)
  80aa68:	dc400317 	ldw	r17,12(sp)
  80aa6c:	dc000217 	ldw	r16,8(sp)
  80aa70:	dec00c04 	addi	sp,sp,48
  80aa74:	f800283a 	ret
  80aa78:	800b883a 	mov	r5,r16
  80aa7c:	a809883a 	mov	r4,r21
  80aa80:	08085380 	call	808538 <__swsetup_r>
  80aa84:	1000eb1e 	bne	r2,zero,80ae34 <__sfvwrite_r+0x4a4>
  80aa88:	80c0030b 	ldhu	r3,12(r16)
  80aa8c:	a4400017 	ldw	r17,0(r20)
  80aa90:	1880008c 	andi	r2,r3,2
  80aa94:	103fd61e 	bne	r2,zero,80a9f0 <__alt_mem_onchip_mem+0xff8029f0>
  80aa98:	1880004c 	andi	r2,r3,1
  80aa9c:	10003f1e 	bne	r2,zero,80ab9c <__sfvwrite_r+0x20c>
  80aaa0:	0039883a 	mov	fp,zero
  80aaa4:	0025883a 	mov	r18,zero
  80aaa8:	90001a26 	beq	r18,zero,80ab14 <__sfvwrite_r+0x184>
  80aaac:	1880800c 	andi	r2,r3,512
  80aab0:	84c00217 	ldw	r19,8(r16)
  80aab4:	10002126 	beq	r2,zero,80ab3c <__sfvwrite_r+0x1ac>
  80aab8:	982f883a 	mov	r23,r19
  80aabc:	94c09336 	bltu	r18,r19,80ad0c <__sfvwrite_r+0x37c>
  80aac0:	1881200c 	andi	r2,r3,1152
  80aac4:	10009e1e 	bne	r2,zero,80ad40 <__sfvwrite_r+0x3b0>
  80aac8:	81000017 	ldw	r4,0(r16)
  80aacc:	b80d883a 	mov	r6,r23
  80aad0:	e00b883a 	mov	r5,fp
  80aad4:	080bca40 	call	80bca4 <memmove>
  80aad8:	80c00217 	ldw	r3,8(r16)
  80aadc:	81000017 	ldw	r4,0(r16)
  80aae0:	9005883a 	mov	r2,r18
  80aae4:	1ce7c83a 	sub	r19,r3,r19
  80aae8:	25cf883a 	add	r7,r4,r23
  80aaec:	84c00215 	stw	r19,8(r16)
  80aaf0:	81c00015 	stw	r7,0(r16)
  80aaf4:	a0c00217 	ldw	r3,8(r20)
  80aaf8:	e0b9883a 	add	fp,fp,r2
  80aafc:	90a5c83a 	sub	r18,r18,r2
  80ab00:	18a7c83a 	sub	r19,r3,r2
  80ab04:	a4c00215 	stw	r19,8(r20)
  80ab08:	983fce26 	beq	r19,zero,80aa44 <__alt_mem_onchip_mem+0xff802a44>
  80ab0c:	80c0030b 	ldhu	r3,12(r16)
  80ab10:	903fe61e 	bne	r18,zero,80aaac <__alt_mem_onchip_mem+0xff802aac>
  80ab14:	8f000017 	ldw	fp,0(r17)
  80ab18:	8c800117 	ldw	r18,4(r17)
  80ab1c:	8c400204 	addi	r17,r17,8
  80ab20:	003fe106 	br	80aaa8 <__alt_mem_onchip_mem+0xff802aa8>
  80ab24:	8cc00017 	ldw	r19,0(r17)
  80ab28:	8c800117 	ldw	r18,4(r17)
  80ab2c:	8c400204 	addi	r17,r17,8
  80ab30:	003fb306 	br	80aa00 <__alt_mem_onchip_mem+0xff802a00>
  80ab34:	0005883a 	mov	r2,zero
  80ab38:	f800283a 	ret
  80ab3c:	81000017 	ldw	r4,0(r16)
  80ab40:	80800417 	ldw	r2,16(r16)
  80ab44:	11005736 	bltu	r2,r4,80aca4 <__sfvwrite_r+0x314>
  80ab48:	85c00517 	ldw	r23,20(r16)
  80ab4c:	95c05536 	bltu	r18,r23,80aca4 <__sfvwrite_r+0x314>
  80ab50:	00a00034 	movhi	r2,32768
  80ab54:	10bfffc4 	addi	r2,r2,-1
  80ab58:	9009883a 	mov	r4,r18
  80ab5c:	1480012e 	bgeu	r2,r18,80ab64 <__sfvwrite_r+0x1d4>
  80ab60:	1009883a 	mov	r4,r2
  80ab64:	b80b883a 	mov	r5,r23
  80ab68:	08101940 	call	810194 <__divsi3>
  80ab6c:	15cf383a 	mul	r7,r2,r23
  80ab70:	81400717 	ldw	r5,28(r16)
  80ab74:	80800917 	ldw	r2,36(r16)
  80ab78:	e00d883a 	mov	r6,fp
  80ab7c:	a809883a 	mov	r4,r21
  80ab80:	103ee83a 	callr	r2
  80ab84:	00bfdb16 	blt	zero,r2,80aaf4 <__alt_mem_onchip_mem+0xff802af4>
  80ab88:	8080030b 	ldhu	r2,12(r16)
  80ab8c:	10801014 	ori	r2,r2,64
  80ab90:	8080030d 	sth	r2,12(r16)
  80ab94:	00bfffc4 	movi	r2,-1
  80ab98:	003fab06 	br	80aa48 <__alt_mem_onchip_mem+0xff802a48>
  80ab9c:	0027883a 	mov	r19,zero
  80aba0:	0011883a 	mov	r8,zero
  80aba4:	0039883a 	mov	fp,zero
  80aba8:	0025883a 	mov	r18,zero
  80abac:	90001f26 	beq	r18,zero,80ac2c <__sfvwrite_r+0x29c>
  80abb0:	40005a26 	beq	r8,zero,80ad1c <__sfvwrite_r+0x38c>
  80abb4:	982d883a 	mov	r22,r19
  80abb8:	94c0012e 	bgeu	r18,r19,80abc0 <__sfvwrite_r+0x230>
  80abbc:	902d883a 	mov	r22,r18
  80abc0:	81000017 	ldw	r4,0(r16)
  80abc4:	80800417 	ldw	r2,16(r16)
  80abc8:	b02f883a 	mov	r23,r22
  80abcc:	81c00517 	ldw	r7,20(r16)
  80abd0:	1100032e 	bgeu	r2,r4,80abe0 <__sfvwrite_r+0x250>
  80abd4:	80c00217 	ldw	r3,8(r16)
  80abd8:	38c7883a 	add	r3,r7,r3
  80abdc:	1d801816 	blt	r3,r22,80ac40 <__sfvwrite_r+0x2b0>
  80abe0:	b1c03e16 	blt	r22,r7,80acdc <__sfvwrite_r+0x34c>
  80abe4:	80800917 	ldw	r2,36(r16)
  80abe8:	81400717 	ldw	r5,28(r16)
  80abec:	e00d883a 	mov	r6,fp
  80abf0:	da000115 	stw	r8,4(sp)
  80abf4:	a809883a 	mov	r4,r21
  80abf8:	103ee83a 	callr	r2
  80abfc:	102f883a 	mov	r23,r2
  80ac00:	da000117 	ldw	r8,4(sp)
  80ac04:	00bfe00e 	bge	zero,r2,80ab88 <__alt_mem_onchip_mem+0xff802b88>
  80ac08:	9de7c83a 	sub	r19,r19,r23
  80ac0c:	98001f26 	beq	r19,zero,80ac8c <__sfvwrite_r+0x2fc>
  80ac10:	a0800217 	ldw	r2,8(r20)
  80ac14:	e5f9883a 	add	fp,fp,r23
  80ac18:	95e5c83a 	sub	r18,r18,r23
  80ac1c:	15efc83a 	sub	r23,r2,r23
  80ac20:	a5c00215 	stw	r23,8(r20)
  80ac24:	b83f8726 	beq	r23,zero,80aa44 <__alt_mem_onchip_mem+0xff802a44>
  80ac28:	903fe11e 	bne	r18,zero,80abb0 <__alt_mem_onchip_mem+0xff802bb0>
  80ac2c:	8f000017 	ldw	fp,0(r17)
  80ac30:	8c800117 	ldw	r18,4(r17)
  80ac34:	0011883a 	mov	r8,zero
  80ac38:	8c400204 	addi	r17,r17,8
  80ac3c:	003fdb06 	br	80abac <__alt_mem_onchip_mem+0xff802bac>
  80ac40:	180d883a 	mov	r6,r3
  80ac44:	e00b883a 	mov	r5,fp
  80ac48:	da000115 	stw	r8,4(sp)
  80ac4c:	d8c00015 	stw	r3,0(sp)
  80ac50:	080bca40 	call	80bca4 <memmove>
  80ac54:	d8c00017 	ldw	r3,0(sp)
  80ac58:	80800017 	ldw	r2,0(r16)
  80ac5c:	800b883a 	mov	r5,r16
  80ac60:	a809883a 	mov	r4,r21
  80ac64:	10c5883a 	add	r2,r2,r3
  80ac68:	80800015 	stw	r2,0(r16)
  80ac6c:	d8c00015 	stw	r3,0(sp)
  80ac70:	080a1300 	call	80a130 <_fflush_r>
  80ac74:	d8c00017 	ldw	r3,0(sp)
  80ac78:	da000117 	ldw	r8,4(sp)
  80ac7c:	103fc21e 	bne	r2,zero,80ab88 <__alt_mem_onchip_mem+0xff802b88>
  80ac80:	182f883a 	mov	r23,r3
  80ac84:	9de7c83a 	sub	r19,r19,r23
  80ac88:	983fe11e 	bne	r19,zero,80ac10 <__alt_mem_onchip_mem+0xff802c10>
  80ac8c:	800b883a 	mov	r5,r16
  80ac90:	a809883a 	mov	r4,r21
  80ac94:	080a1300 	call	80a130 <_fflush_r>
  80ac98:	103fbb1e 	bne	r2,zero,80ab88 <__alt_mem_onchip_mem+0xff802b88>
  80ac9c:	0011883a 	mov	r8,zero
  80aca0:	003fdb06 	br	80ac10 <__alt_mem_onchip_mem+0xff802c10>
  80aca4:	94c0012e 	bgeu	r18,r19,80acac <__sfvwrite_r+0x31c>
  80aca8:	9027883a 	mov	r19,r18
  80acac:	980d883a 	mov	r6,r19
  80acb0:	e00b883a 	mov	r5,fp
  80acb4:	080bca40 	call	80bca4 <memmove>
  80acb8:	80800217 	ldw	r2,8(r16)
  80acbc:	80c00017 	ldw	r3,0(r16)
  80acc0:	14c5c83a 	sub	r2,r2,r19
  80acc4:	1cc7883a 	add	r3,r3,r19
  80acc8:	80800215 	stw	r2,8(r16)
  80accc:	80c00015 	stw	r3,0(r16)
  80acd0:	10004326 	beq	r2,zero,80ade0 <__sfvwrite_r+0x450>
  80acd4:	9805883a 	mov	r2,r19
  80acd8:	003f8606 	br	80aaf4 <__alt_mem_onchip_mem+0xff802af4>
  80acdc:	b00d883a 	mov	r6,r22
  80ace0:	e00b883a 	mov	r5,fp
  80ace4:	da000115 	stw	r8,4(sp)
  80ace8:	080bca40 	call	80bca4 <memmove>
  80acec:	80800217 	ldw	r2,8(r16)
  80acf0:	80c00017 	ldw	r3,0(r16)
  80acf4:	da000117 	ldw	r8,4(sp)
  80acf8:	1585c83a 	sub	r2,r2,r22
  80acfc:	1dad883a 	add	r22,r3,r22
  80ad00:	80800215 	stw	r2,8(r16)
  80ad04:	85800015 	stw	r22,0(r16)
  80ad08:	003fbf06 	br	80ac08 <__alt_mem_onchip_mem+0xff802c08>
  80ad0c:	81000017 	ldw	r4,0(r16)
  80ad10:	9027883a 	mov	r19,r18
  80ad14:	902f883a 	mov	r23,r18
  80ad18:	003f6c06 	br	80aacc <__alt_mem_onchip_mem+0xff802acc>
  80ad1c:	900d883a 	mov	r6,r18
  80ad20:	01400284 	movi	r5,10
  80ad24:	e009883a 	mov	r4,fp
  80ad28:	080ba780 	call	80ba78 <memchr>
  80ad2c:	10003e26 	beq	r2,zero,80ae28 <__sfvwrite_r+0x498>
  80ad30:	10800044 	addi	r2,r2,1
  80ad34:	1727c83a 	sub	r19,r2,fp
  80ad38:	02000044 	movi	r8,1
  80ad3c:	003f9d06 	br	80abb4 <__alt_mem_onchip_mem+0xff802bb4>
  80ad40:	80800517 	ldw	r2,20(r16)
  80ad44:	81400417 	ldw	r5,16(r16)
  80ad48:	81c00017 	ldw	r7,0(r16)
  80ad4c:	10a7883a 	add	r19,r2,r2
  80ad50:	9885883a 	add	r2,r19,r2
  80ad54:	1026d7fa 	srli	r19,r2,31
  80ad58:	396dc83a 	sub	r22,r7,r5
  80ad5c:	b1000044 	addi	r4,r22,1
  80ad60:	9885883a 	add	r2,r19,r2
  80ad64:	1027d07a 	srai	r19,r2,1
  80ad68:	2485883a 	add	r2,r4,r18
  80ad6c:	980d883a 	mov	r6,r19
  80ad70:	9880022e 	bgeu	r19,r2,80ad7c <__sfvwrite_r+0x3ec>
  80ad74:	1027883a 	mov	r19,r2
  80ad78:	100d883a 	mov	r6,r2
  80ad7c:	18c1000c 	andi	r3,r3,1024
  80ad80:	18001c26 	beq	r3,zero,80adf4 <__sfvwrite_r+0x464>
  80ad84:	300b883a 	mov	r5,r6
  80ad88:	a809883a 	mov	r4,r21
  80ad8c:	080b26c0 	call	80b26c <_malloc_r>
  80ad90:	102f883a 	mov	r23,r2
  80ad94:	10002926 	beq	r2,zero,80ae3c <__sfvwrite_r+0x4ac>
  80ad98:	81400417 	ldw	r5,16(r16)
  80ad9c:	b00d883a 	mov	r6,r22
  80ada0:	1009883a 	mov	r4,r2
  80ada4:	080bb5c0 	call	80bb5c <memcpy>
  80ada8:	8080030b 	ldhu	r2,12(r16)
  80adac:	00fedfc4 	movi	r3,-1153
  80adb0:	10c4703a 	and	r2,r2,r3
  80adb4:	10802014 	ori	r2,r2,128
  80adb8:	8080030d 	sth	r2,12(r16)
  80adbc:	bd89883a 	add	r4,r23,r22
  80adc0:	9d8fc83a 	sub	r7,r19,r22
  80adc4:	85c00415 	stw	r23,16(r16)
  80adc8:	84c00515 	stw	r19,20(r16)
  80adcc:	81000015 	stw	r4,0(r16)
  80add0:	9027883a 	mov	r19,r18
  80add4:	81c00215 	stw	r7,8(r16)
  80add8:	902f883a 	mov	r23,r18
  80addc:	003f3b06 	br	80aacc <__alt_mem_onchip_mem+0xff802acc>
  80ade0:	800b883a 	mov	r5,r16
  80ade4:	a809883a 	mov	r4,r21
  80ade8:	080a1300 	call	80a130 <_fflush_r>
  80adec:	103fb926 	beq	r2,zero,80acd4 <__alt_mem_onchip_mem+0xff802cd4>
  80adf0:	003f6506 	br	80ab88 <__alt_mem_onchip_mem+0xff802b88>
  80adf4:	a809883a 	mov	r4,r21
  80adf8:	080cf240 	call	80cf24 <_realloc_r>
  80adfc:	102f883a 	mov	r23,r2
  80ae00:	103fee1e 	bne	r2,zero,80adbc <__alt_mem_onchip_mem+0xff802dbc>
  80ae04:	81400417 	ldw	r5,16(r16)
  80ae08:	a809883a 	mov	r4,r21
  80ae0c:	080a6800 	call	80a680 <_free_r>
  80ae10:	8080030b 	ldhu	r2,12(r16)
  80ae14:	00ffdfc4 	movi	r3,-129
  80ae18:	1884703a 	and	r2,r3,r2
  80ae1c:	00c00304 	movi	r3,12
  80ae20:	a8c00015 	stw	r3,0(r21)
  80ae24:	003f5906 	br	80ab8c <__alt_mem_onchip_mem+0xff802b8c>
  80ae28:	94c00044 	addi	r19,r18,1
  80ae2c:	02000044 	movi	r8,1
  80ae30:	003f6006 	br	80abb4 <__alt_mem_onchip_mem+0xff802bb4>
  80ae34:	00bfffc4 	movi	r2,-1
  80ae38:	003f0306 	br	80aa48 <__alt_mem_onchip_mem+0xff802a48>
  80ae3c:	00800304 	movi	r2,12
  80ae40:	a8800015 	stw	r2,0(r21)
  80ae44:	8080030b 	ldhu	r2,12(r16)
  80ae48:	003f5006 	br	80ab8c <__alt_mem_onchip_mem+0xff802b8c>

0080ae4c <_fwalk>:
  80ae4c:	defff704 	addi	sp,sp,-36
  80ae50:	dd000415 	stw	r20,16(sp)
  80ae54:	dfc00815 	stw	ra,32(sp)
  80ae58:	ddc00715 	stw	r23,28(sp)
  80ae5c:	dd800615 	stw	r22,24(sp)
  80ae60:	dd400515 	stw	r21,20(sp)
  80ae64:	dcc00315 	stw	r19,12(sp)
  80ae68:	dc800215 	stw	r18,8(sp)
  80ae6c:	dc400115 	stw	r17,4(sp)
  80ae70:	dc000015 	stw	r16,0(sp)
  80ae74:	2500b804 	addi	r20,r4,736
  80ae78:	a0002326 	beq	r20,zero,80af08 <_fwalk+0xbc>
  80ae7c:	282b883a 	mov	r21,r5
  80ae80:	002f883a 	mov	r23,zero
  80ae84:	05800044 	movi	r22,1
  80ae88:	04ffffc4 	movi	r19,-1
  80ae8c:	a4400117 	ldw	r17,4(r20)
  80ae90:	a4800217 	ldw	r18,8(r20)
  80ae94:	8c7fffc4 	addi	r17,r17,-1
  80ae98:	88000d16 	blt	r17,zero,80aed0 <_fwalk+0x84>
  80ae9c:	94000304 	addi	r16,r18,12
  80aea0:	94800384 	addi	r18,r18,14
  80aea4:	8080000b 	ldhu	r2,0(r16)
  80aea8:	8c7fffc4 	addi	r17,r17,-1
  80aeac:	813ffd04 	addi	r4,r16,-12
  80aeb0:	b080042e 	bgeu	r22,r2,80aec4 <_fwalk+0x78>
  80aeb4:	9080000f 	ldh	r2,0(r18)
  80aeb8:	14c00226 	beq	r2,r19,80aec4 <_fwalk+0x78>
  80aebc:	a83ee83a 	callr	r21
  80aec0:	b8aeb03a 	or	r23,r23,r2
  80aec4:	84001a04 	addi	r16,r16,104
  80aec8:	94801a04 	addi	r18,r18,104
  80aecc:	8cfff51e 	bne	r17,r19,80aea4 <__alt_mem_onchip_mem+0xff802ea4>
  80aed0:	a5000017 	ldw	r20,0(r20)
  80aed4:	a03fed1e 	bne	r20,zero,80ae8c <__alt_mem_onchip_mem+0xff802e8c>
  80aed8:	b805883a 	mov	r2,r23
  80aedc:	dfc00817 	ldw	ra,32(sp)
  80aee0:	ddc00717 	ldw	r23,28(sp)
  80aee4:	dd800617 	ldw	r22,24(sp)
  80aee8:	dd400517 	ldw	r21,20(sp)
  80aeec:	dd000417 	ldw	r20,16(sp)
  80aef0:	dcc00317 	ldw	r19,12(sp)
  80aef4:	dc800217 	ldw	r18,8(sp)
  80aef8:	dc400117 	ldw	r17,4(sp)
  80aefc:	dc000017 	ldw	r16,0(sp)
  80af00:	dec00904 	addi	sp,sp,36
  80af04:	f800283a 	ret
  80af08:	002f883a 	mov	r23,zero
  80af0c:	003ff206 	br	80aed8 <__alt_mem_onchip_mem+0xff802ed8>

0080af10 <_fwalk_reent>:
  80af10:	defff704 	addi	sp,sp,-36
  80af14:	dd000415 	stw	r20,16(sp)
  80af18:	dfc00815 	stw	ra,32(sp)
  80af1c:	ddc00715 	stw	r23,28(sp)
  80af20:	dd800615 	stw	r22,24(sp)
  80af24:	dd400515 	stw	r21,20(sp)
  80af28:	dcc00315 	stw	r19,12(sp)
  80af2c:	dc800215 	stw	r18,8(sp)
  80af30:	dc400115 	stw	r17,4(sp)
  80af34:	dc000015 	stw	r16,0(sp)
  80af38:	2500b804 	addi	r20,r4,736
  80af3c:	a0002326 	beq	r20,zero,80afcc <_fwalk_reent+0xbc>
  80af40:	282b883a 	mov	r21,r5
  80af44:	2027883a 	mov	r19,r4
  80af48:	002f883a 	mov	r23,zero
  80af4c:	05800044 	movi	r22,1
  80af50:	04bfffc4 	movi	r18,-1
  80af54:	a4400117 	ldw	r17,4(r20)
  80af58:	a4000217 	ldw	r16,8(r20)
  80af5c:	8c7fffc4 	addi	r17,r17,-1
  80af60:	88000c16 	blt	r17,zero,80af94 <_fwalk_reent+0x84>
  80af64:	84000304 	addi	r16,r16,12
  80af68:	8080000b 	ldhu	r2,0(r16)
  80af6c:	8c7fffc4 	addi	r17,r17,-1
  80af70:	817ffd04 	addi	r5,r16,-12
  80af74:	b080052e 	bgeu	r22,r2,80af8c <_fwalk_reent+0x7c>
  80af78:	8080008f 	ldh	r2,2(r16)
  80af7c:	9809883a 	mov	r4,r19
  80af80:	14800226 	beq	r2,r18,80af8c <_fwalk_reent+0x7c>
  80af84:	a83ee83a 	callr	r21
  80af88:	b8aeb03a 	or	r23,r23,r2
  80af8c:	84001a04 	addi	r16,r16,104
  80af90:	8cbff51e 	bne	r17,r18,80af68 <__alt_mem_onchip_mem+0xff802f68>
  80af94:	a5000017 	ldw	r20,0(r20)
  80af98:	a03fee1e 	bne	r20,zero,80af54 <__alt_mem_onchip_mem+0xff802f54>
  80af9c:	b805883a 	mov	r2,r23
  80afa0:	dfc00817 	ldw	ra,32(sp)
  80afa4:	ddc00717 	ldw	r23,28(sp)
  80afa8:	dd800617 	ldw	r22,24(sp)
  80afac:	dd400517 	ldw	r21,20(sp)
  80afb0:	dd000417 	ldw	r20,16(sp)
  80afb4:	dcc00317 	ldw	r19,12(sp)
  80afb8:	dc800217 	ldw	r18,8(sp)
  80afbc:	dc400117 	ldw	r17,4(sp)
  80afc0:	dc000017 	ldw	r16,0(sp)
  80afc4:	dec00904 	addi	sp,sp,36
  80afc8:	f800283a 	ret
  80afcc:	002f883a 	mov	r23,zero
  80afd0:	003ff206 	br	80af9c <__alt_mem_onchip_mem+0xff802f9c>

0080afd4 <_setlocale_r>:
  80afd4:	30001b26 	beq	r6,zero,80b044 <_setlocale_r+0x70>
  80afd8:	01402074 	movhi	r5,129
  80afdc:	defffe04 	addi	sp,sp,-8
  80afe0:	29549204 	addi	r5,r5,21064
  80afe4:	3009883a 	mov	r4,r6
  80afe8:	dc000015 	stw	r16,0(sp)
  80afec:	dfc00115 	stw	ra,4(sp)
  80aff0:	3021883a 	mov	r16,r6
  80aff4:	080d68c0 	call	80d68c <strcmp>
  80aff8:	1000061e 	bne	r2,zero,80b014 <_setlocale_r+0x40>
  80affc:	00802074 	movhi	r2,129
  80b000:	10949104 	addi	r2,r2,21060
  80b004:	dfc00117 	ldw	ra,4(sp)
  80b008:	dc000017 	ldw	r16,0(sp)
  80b00c:	dec00204 	addi	sp,sp,8
  80b010:	f800283a 	ret
  80b014:	01402074 	movhi	r5,129
  80b018:	29549104 	addi	r5,r5,21060
  80b01c:	8009883a 	mov	r4,r16
  80b020:	080d68c0 	call	80d68c <strcmp>
  80b024:	103ff526 	beq	r2,zero,80affc <__alt_mem_onchip_mem+0xff802ffc>
  80b028:	01402074 	movhi	r5,129
  80b02c:	29547c04 	addi	r5,r5,20976
  80b030:	8009883a 	mov	r4,r16
  80b034:	080d68c0 	call	80d68c <strcmp>
  80b038:	103ff026 	beq	r2,zero,80affc <__alt_mem_onchip_mem+0xff802ffc>
  80b03c:	0005883a 	mov	r2,zero
  80b040:	003ff006 	br	80b004 <__alt_mem_onchip_mem+0xff803004>
  80b044:	00802074 	movhi	r2,129
  80b048:	10949104 	addi	r2,r2,21060
  80b04c:	f800283a 	ret

0080b050 <__locale_charset>:
  80b050:	00802074 	movhi	r2,129
  80b054:	1096a804 	addi	r2,r2,23200
  80b058:	f800283a 	ret

0080b05c <__locale_mb_cur_max>:
  80b05c:	00802074 	movhi	r2,129
  80b060:	109cbd04 	addi	r2,r2,29428
  80b064:	10800017 	ldw	r2,0(r2)
  80b068:	f800283a 	ret

0080b06c <__locale_msgcharset>:
  80b06c:	00802074 	movhi	r2,129
  80b070:	1096a004 	addi	r2,r2,23168
  80b074:	f800283a 	ret

0080b078 <__locale_cjk_lang>:
  80b078:	0005883a 	mov	r2,zero
  80b07c:	f800283a 	ret

0080b080 <_localeconv_r>:
  80b080:	00802074 	movhi	r2,129
  80b084:	1096b004 	addi	r2,r2,23232
  80b088:	f800283a 	ret

0080b08c <setlocale>:
  80b08c:	00802074 	movhi	r2,129
  80b090:	109cbc04 	addi	r2,r2,29424
  80b094:	280d883a 	mov	r6,r5
  80b098:	200b883a 	mov	r5,r4
  80b09c:	11000017 	ldw	r4,0(r2)
  80b0a0:	080afd41 	jmpi	80afd4 <_setlocale_r>

0080b0a4 <localeconv>:
  80b0a4:	00802074 	movhi	r2,129
  80b0a8:	1096b004 	addi	r2,r2,23232
  80b0ac:	f800283a 	ret

0080b0b0 <__smakebuf_r>:
  80b0b0:	2880030b 	ldhu	r2,12(r5)
  80b0b4:	10c0008c 	andi	r3,r2,2
  80b0b8:	1800411e 	bne	r3,zero,80b1c0 <__smakebuf_r+0x110>
  80b0bc:	deffec04 	addi	sp,sp,-80
  80b0c0:	dc000f15 	stw	r16,60(sp)
  80b0c4:	2821883a 	mov	r16,r5
  80b0c8:	2940038f 	ldh	r5,14(r5)
  80b0cc:	dc401015 	stw	r17,64(sp)
  80b0d0:	dfc01315 	stw	ra,76(sp)
  80b0d4:	dcc01215 	stw	r19,72(sp)
  80b0d8:	dc801115 	stw	r18,68(sp)
  80b0dc:	2023883a 	mov	r17,r4
  80b0e0:	28001c16 	blt	r5,zero,80b154 <__smakebuf_r+0xa4>
  80b0e4:	d80d883a 	mov	r6,sp
  80b0e8:	080f2340 	call	80f234 <_fstat_r>
  80b0ec:	10001816 	blt	r2,zero,80b150 <__smakebuf_r+0xa0>
  80b0f0:	d8800117 	ldw	r2,4(sp)
  80b0f4:	00e00014 	movui	r3,32768
  80b0f8:	10bc000c 	andi	r2,r2,61440
  80b0fc:	14c80020 	cmpeqi	r19,r2,8192
  80b100:	10c03726 	beq	r2,r3,80b1e0 <__smakebuf_r+0x130>
  80b104:	80c0030b 	ldhu	r3,12(r16)
  80b108:	18c20014 	ori	r3,r3,2048
  80b10c:	80c0030d 	sth	r3,12(r16)
  80b110:	00c80004 	movi	r3,8192
  80b114:	10c0521e 	bne	r2,r3,80b260 <__smakebuf_r+0x1b0>
  80b118:	8140038f 	ldh	r5,14(r16)
  80b11c:	8809883a 	mov	r4,r17
  80b120:	080f2900 	call	80f290 <_isatty_r>
  80b124:	10004c26 	beq	r2,zero,80b258 <__smakebuf_r+0x1a8>
  80b128:	8080030b 	ldhu	r2,12(r16)
  80b12c:	80c010c4 	addi	r3,r16,67
  80b130:	80c00015 	stw	r3,0(r16)
  80b134:	10800054 	ori	r2,r2,1
  80b138:	8080030d 	sth	r2,12(r16)
  80b13c:	00800044 	movi	r2,1
  80b140:	80c00415 	stw	r3,16(r16)
  80b144:	80800515 	stw	r2,20(r16)
  80b148:	04810004 	movi	r18,1024
  80b14c:	00000706 	br	80b16c <__smakebuf_r+0xbc>
  80b150:	8080030b 	ldhu	r2,12(r16)
  80b154:	10c0200c 	andi	r3,r2,128
  80b158:	18001f1e 	bne	r3,zero,80b1d8 <__smakebuf_r+0x128>
  80b15c:	04810004 	movi	r18,1024
  80b160:	10820014 	ori	r2,r2,2048
  80b164:	8080030d 	sth	r2,12(r16)
  80b168:	0027883a 	mov	r19,zero
  80b16c:	900b883a 	mov	r5,r18
  80b170:	8809883a 	mov	r4,r17
  80b174:	080b26c0 	call	80b26c <_malloc_r>
  80b178:	10002c26 	beq	r2,zero,80b22c <__smakebuf_r+0x17c>
  80b17c:	80c0030b 	ldhu	r3,12(r16)
  80b180:	01002074 	movhi	r4,129
  80b184:	21287104 	addi	r4,r4,-24124
  80b188:	89000f15 	stw	r4,60(r17)
  80b18c:	18c02014 	ori	r3,r3,128
  80b190:	80c0030d 	sth	r3,12(r16)
  80b194:	80800015 	stw	r2,0(r16)
  80b198:	80800415 	stw	r2,16(r16)
  80b19c:	84800515 	stw	r18,20(r16)
  80b1a0:	98001a1e 	bne	r19,zero,80b20c <__smakebuf_r+0x15c>
  80b1a4:	dfc01317 	ldw	ra,76(sp)
  80b1a8:	dcc01217 	ldw	r19,72(sp)
  80b1ac:	dc801117 	ldw	r18,68(sp)
  80b1b0:	dc401017 	ldw	r17,64(sp)
  80b1b4:	dc000f17 	ldw	r16,60(sp)
  80b1b8:	dec01404 	addi	sp,sp,80
  80b1bc:	f800283a 	ret
  80b1c0:	288010c4 	addi	r2,r5,67
  80b1c4:	28800015 	stw	r2,0(r5)
  80b1c8:	28800415 	stw	r2,16(r5)
  80b1cc:	00800044 	movi	r2,1
  80b1d0:	28800515 	stw	r2,20(r5)
  80b1d4:	f800283a 	ret
  80b1d8:	04801004 	movi	r18,64
  80b1dc:	003fe006 	br	80b160 <__alt_mem_onchip_mem+0xff803160>
  80b1e0:	81000a17 	ldw	r4,40(r16)
  80b1e4:	00c02074 	movhi	r3,129
  80b1e8:	18f58a04 	addi	r3,r3,-10712
  80b1ec:	20ffc51e 	bne	r4,r3,80b104 <__alt_mem_onchip_mem+0xff803104>
  80b1f0:	8080030b 	ldhu	r2,12(r16)
  80b1f4:	04810004 	movi	r18,1024
  80b1f8:	84801315 	stw	r18,76(r16)
  80b1fc:	1484b03a 	or	r2,r2,r18
  80b200:	8080030d 	sth	r2,12(r16)
  80b204:	0027883a 	mov	r19,zero
  80b208:	003fd806 	br	80b16c <__alt_mem_onchip_mem+0xff80316c>
  80b20c:	8140038f 	ldh	r5,14(r16)
  80b210:	8809883a 	mov	r4,r17
  80b214:	080f2900 	call	80f290 <_isatty_r>
  80b218:	103fe226 	beq	r2,zero,80b1a4 <__alt_mem_onchip_mem+0xff8031a4>
  80b21c:	8080030b 	ldhu	r2,12(r16)
  80b220:	10800054 	ori	r2,r2,1
  80b224:	8080030d 	sth	r2,12(r16)
  80b228:	003fde06 	br	80b1a4 <__alt_mem_onchip_mem+0xff8031a4>
  80b22c:	8080030b 	ldhu	r2,12(r16)
  80b230:	10c0800c 	andi	r3,r2,512
  80b234:	183fdb1e 	bne	r3,zero,80b1a4 <__alt_mem_onchip_mem+0xff8031a4>
  80b238:	10800094 	ori	r2,r2,2
  80b23c:	80c010c4 	addi	r3,r16,67
  80b240:	8080030d 	sth	r2,12(r16)
  80b244:	00800044 	movi	r2,1
  80b248:	80c00015 	stw	r3,0(r16)
  80b24c:	80c00415 	stw	r3,16(r16)
  80b250:	80800515 	stw	r2,20(r16)
  80b254:	003fd306 	br	80b1a4 <__alt_mem_onchip_mem+0xff8031a4>
  80b258:	04810004 	movi	r18,1024
  80b25c:	003fc306 	br	80b16c <__alt_mem_onchip_mem+0xff80316c>
  80b260:	0027883a 	mov	r19,zero
  80b264:	04810004 	movi	r18,1024
  80b268:	003fc006 	br	80b16c <__alt_mem_onchip_mem+0xff80316c>

0080b26c <_malloc_r>:
  80b26c:	defff504 	addi	sp,sp,-44
  80b270:	dc800315 	stw	r18,12(sp)
  80b274:	dfc00a15 	stw	ra,40(sp)
  80b278:	df000915 	stw	fp,36(sp)
  80b27c:	ddc00815 	stw	r23,32(sp)
  80b280:	dd800715 	stw	r22,28(sp)
  80b284:	dd400615 	stw	r21,24(sp)
  80b288:	dd000515 	stw	r20,20(sp)
  80b28c:	dcc00415 	stw	r19,16(sp)
  80b290:	dc400215 	stw	r17,8(sp)
  80b294:	dc000115 	stw	r16,4(sp)
  80b298:	288002c4 	addi	r2,r5,11
  80b29c:	00c00584 	movi	r3,22
  80b2a0:	2025883a 	mov	r18,r4
  80b2a4:	18807f2e 	bgeu	r3,r2,80b4a4 <_malloc_r+0x238>
  80b2a8:	047ffe04 	movi	r17,-8
  80b2ac:	1462703a 	and	r17,r2,r17
  80b2b0:	8800a316 	blt	r17,zero,80b540 <_malloc_r+0x2d4>
  80b2b4:	8940a236 	bltu	r17,r5,80b540 <_malloc_r+0x2d4>
  80b2b8:	081163c0 	call	81163c <__malloc_lock>
  80b2bc:	00807dc4 	movi	r2,503
  80b2c0:	1441e92e 	bgeu	r2,r17,80ba68 <_malloc_r+0x7fc>
  80b2c4:	8804d27a 	srli	r2,r17,9
  80b2c8:	1000a126 	beq	r2,zero,80b550 <_malloc_r+0x2e4>
  80b2cc:	00c00104 	movi	r3,4
  80b2d0:	18811e36 	bltu	r3,r2,80b74c <_malloc_r+0x4e0>
  80b2d4:	8804d1ba 	srli	r2,r17,6
  80b2d8:	12000e44 	addi	r8,r2,57
  80b2dc:	11c00e04 	addi	r7,r2,56
  80b2e0:	4209883a 	add	r4,r8,r8
  80b2e4:	04c02074 	movhi	r19,129
  80b2e8:	2109883a 	add	r4,r4,r4
  80b2ec:	9cd6be04 	addi	r19,r19,23288
  80b2f0:	2109883a 	add	r4,r4,r4
  80b2f4:	9909883a 	add	r4,r19,r4
  80b2f8:	24000117 	ldw	r16,4(r4)
  80b2fc:	213ffe04 	addi	r4,r4,-8
  80b300:	24009726 	beq	r4,r16,80b560 <_malloc_r+0x2f4>
  80b304:	80800117 	ldw	r2,4(r16)
  80b308:	01bfff04 	movi	r6,-4
  80b30c:	014003c4 	movi	r5,15
  80b310:	1184703a 	and	r2,r2,r6
  80b314:	1447c83a 	sub	r3,r2,r17
  80b318:	28c00716 	blt	r5,r3,80b338 <_malloc_r+0xcc>
  80b31c:	1800920e 	bge	r3,zero,80b568 <_malloc_r+0x2fc>
  80b320:	84000317 	ldw	r16,12(r16)
  80b324:	24008e26 	beq	r4,r16,80b560 <_malloc_r+0x2f4>
  80b328:	80800117 	ldw	r2,4(r16)
  80b32c:	1184703a 	and	r2,r2,r6
  80b330:	1447c83a 	sub	r3,r2,r17
  80b334:	28fff90e 	bge	r5,r3,80b31c <__alt_mem_onchip_mem+0xff80331c>
  80b338:	3809883a 	mov	r4,r7
  80b33c:	01802074 	movhi	r6,129
  80b340:	9c000417 	ldw	r16,16(r19)
  80b344:	3196be04 	addi	r6,r6,23288
  80b348:	32000204 	addi	r8,r6,8
  80b34c:	82013426 	beq	r16,r8,80b820 <_malloc_r+0x5b4>
  80b350:	80c00117 	ldw	r3,4(r16)
  80b354:	00bfff04 	movi	r2,-4
  80b358:	188e703a 	and	r7,r3,r2
  80b35c:	3c45c83a 	sub	r2,r7,r17
  80b360:	00c003c4 	movi	r3,15
  80b364:	18811f16 	blt	r3,r2,80b7e4 <_malloc_r+0x578>
  80b368:	32000515 	stw	r8,20(r6)
  80b36c:	32000415 	stw	r8,16(r6)
  80b370:	10007f0e 	bge	r2,zero,80b570 <_malloc_r+0x304>
  80b374:	00807fc4 	movi	r2,511
  80b378:	11c0fd36 	bltu	r2,r7,80b770 <_malloc_r+0x504>
  80b37c:	3806d0fa 	srli	r3,r7,3
  80b380:	01c00044 	movi	r7,1
  80b384:	30800117 	ldw	r2,4(r6)
  80b388:	19400044 	addi	r5,r3,1
  80b38c:	294b883a 	add	r5,r5,r5
  80b390:	1807d0ba 	srai	r3,r3,2
  80b394:	294b883a 	add	r5,r5,r5
  80b398:	294b883a 	add	r5,r5,r5
  80b39c:	298b883a 	add	r5,r5,r6
  80b3a0:	38c6983a 	sll	r3,r7,r3
  80b3a4:	29c00017 	ldw	r7,0(r5)
  80b3a8:	2a7ffe04 	addi	r9,r5,-8
  80b3ac:	1886b03a 	or	r3,r3,r2
  80b3b0:	82400315 	stw	r9,12(r16)
  80b3b4:	81c00215 	stw	r7,8(r16)
  80b3b8:	30c00115 	stw	r3,4(r6)
  80b3bc:	2c000015 	stw	r16,0(r5)
  80b3c0:	3c000315 	stw	r16,12(r7)
  80b3c4:	2005d0ba 	srai	r2,r4,2
  80b3c8:	01400044 	movi	r5,1
  80b3cc:	288a983a 	sll	r5,r5,r2
  80b3d0:	19406f36 	bltu	r3,r5,80b590 <_malloc_r+0x324>
  80b3d4:	28c4703a 	and	r2,r5,r3
  80b3d8:	10000a1e 	bne	r2,zero,80b404 <_malloc_r+0x198>
  80b3dc:	00bfff04 	movi	r2,-4
  80b3e0:	294b883a 	add	r5,r5,r5
  80b3e4:	2088703a 	and	r4,r4,r2
  80b3e8:	28c4703a 	and	r2,r5,r3
  80b3ec:	21000104 	addi	r4,r4,4
  80b3f0:	1000041e 	bne	r2,zero,80b404 <_malloc_r+0x198>
  80b3f4:	294b883a 	add	r5,r5,r5
  80b3f8:	28c4703a 	and	r2,r5,r3
  80b3fc:	21000104 	addi	r4,r4,4
  80b400:	103ffc26 	beq	r2,zero,80b3f4 <__alt_mem_onchip_mem+0xff8033f4>
  80b404:	02bfff04 	movi	r10,-4
  80b408:	024003c4 	movi	r9,15
  80b40c:	21800044 	addi	r6,r4,1
  80b410:	318d883a 	add	r6,r6,r6
  80b414:	318d883a 	add	r6,r6,r6
  80b418:	318d883a 	add	r6,r6,r6
  80b41c:	998d883a 	add	r6,r19,r6
  80b420:	333ffe04 	addi	r12,r6,-8
  80b424:	2017883a 	mov	r11,r4
  80b428:	31800104 	addi	r6,r6,4
  80b42c:	34000017 	ldw	r16,0(r6)
  80b430:	31fffd04 	addi	r7,r6,-12
  80b434:	81c0041e 	bne	r16,r7,80b448 <_malloc_r+0x1dc>
  80b438:	0000fb06 	br	80b828 <_malloc_r+0x5bc>
  80b43c:	1801030e 	bge	r3,zero,80b84c <_malloc_r+0x5e0>
  80b440:	84000317 	ldw	r16,12(r16)
  80b444:	81c0f826 	beq	r16,r7,80b828 <_malloc_r+0x5bc>
  80b448:	80800117 	ldw	r2,4(r16)
  80b44c:	1284703a 	and	r2,r2,r10
  80b450:	1447c83a 	sub	r3,r2,r17
  80b454:	48fff90e 	bge	r9,r3,80b43c <__alt_mem_onchip_mem+0xff80343c>
  80b458:	80800317 	ldw	r2,12(r16)
  80b45c:	81000217 	ldw	r4,8(r16)
  80b460:	89400054 	ori	r5,r17,1
  80b464:	81400115 	stw	r5,4(r16)
  80b468:	20800315 	stw	r2,12(r4)
  80b46c:	11000215 	stw	r4,8(r2)
  80b470:	8463883a 	add	r17,r16,r17
  80b474:	9c400515 	stw	r17,20(r19)
  80b478:	9c400415 	stw	r17,16(r19)
  80b47c:	18800054 	ori	r2,r3,1
  80b480:	88800115 	stw	r2,4(r17)
  80b484:	8a000315 	stw	r8,12(r17)
  80b488:	8a000215 	stw	r8,8(r17)
  80b48c:	88e3883a 	add	r17,r17,r3
  80b490:	88c00015 	stw	r3,0(r17)
  80b494:	9009883a 	mov	r4,r18
  80b498:	08116600 	call	811660 <__malloc_unlock>
  80b49c:	80800204 	addi	r2,r16,8
  80b4a0:	00001b06 	br	80b510 <_malloc_r+0x2a4>
  80b4a4:	04400404 	movi	r17,16
  80b4a8:	89402536 	bltu	r17,r5,80b540 <_malloc_r+0x2d4>
  80b4ac:	081163c0 	call	81163c <__malloc_lock>
  80b4b0:	00800184 	movi	r2,6
  80b4b4:	01000084 	movi	r4,2
  80b4b8:	04c02074 	movhi	r19,129
  80b4bc:	1085883a 	add	r2,r2,r2
  80b4c0:	9cd6be04 	addi	r19,r19,23288
  80b4c4:	1085883a 	add	r2,r2,r2
  80b4c8:	9885883a 	add	r2,r19,r2
  80b4cc:	14000117 	ldw	r16,4(r2)
  80b4d0:	10fffe04 	addi	r3,r2,-8
  80b4d4:	80c0d926 	beq	r16,r3,80b83c <_malloc_r+0x5d0>
  80b4d8:	80c00117 	ldw	r3,4(r16)
  80b4dc:	81000317 	ldw	r4,12(r16)
  80b4e0:	00bfff04 	movi	r2,-4
  80b4e4:	1884703a 	and	r2,r3,r2
  80b4e8:	81400217 	ldw	r5,8(r16)
  80b4ec:	8085883a 	add	r2,r16,r2
  80b4f0:	10c00117 	ldw	r3,4(r2)
  80b4f4:	29000315 	stw	r4,12(r5)
  80b4f8:	21400215 	stw	r5,8(r4)
  80b4fc:	18c00054 	ori	r3,r3,1
  80b500:	10c00115 	stw	r3,4(r2)
  80b504:	9009883a 	mov	r4,r18
  80b508:	08116600 	call	811660 <__malloc_unlock>
  80b50c:	80800204 	addi	r2,r16,8
  80b510:	dfc00a17 	ldw	ra,40(sp)
  80b514:	df000917 	ldw	fp,36(sp)
  80b518:	ddc00817 	ldw	r23,32(sp)
  80b51c:	dd800717 	ldw	r22,28(sp)
  80b520:	dd400617 	ldw	r21,24(sp)
  80b524:	dd000517 	ldw	r20,20(sp)
  80b528:	dcc00417 	ldw	r19,16(sp)
  80b52c:	dc800317 	ldw	r18,12(sp)
  80b530:	dc400217 	ldw	r17,8(sp)
  80b534:	dc000117 	ldw	r16,4(sp)
  80b538:	dec00b04 	addi	sp,sp,44
  80b53c:	f800283a 	ret
  80b540:	00800304 	movi	r2,12
  80b544:	90800015 	stw	r2,0(r18)
  80b548:	0005883a 	mov	r2,zero
  80b54c:	003ff006 	br	80b510 <__alt_mem_onchip_mem+0xff803510>
  80b550:	01002004 	movi	r4,128
  80b554:	02001004 	movi	r8,64
  80b558:	01c00fc4 	movi	r7,63
  80b55c:	003f6106 	br	80b2e4 <__alt_mem_onchip_mem+0xff8032e4>
  80b560:	4009883a 	mov	r4,r8
  80b564:	003f7506 	br	80b33c <__alt_mem_onchip_mem+0xff80333c>
  80b568:	81000317 	ldw	r4,12(r16)
  80b56c:	003fde06 	br	80b4e8 <__alt_mem_onchip_mem+0xff8034e8>
  80b570:	81c5883a 	add	r2,r16,r7
  80b574:	11400117 	ldw	r5,4(r2)
  80b578:	9009883a 	mov	r4,r18
  80b57c:	29400054 	ori	r5,r5,1
  80b580:	11400115 	stw	r5,4(r2)
  80b584:	08116600 	call	811660 <__malloc_unlock>
  80b588:	80800204 	addi	r2,r16,8
  80b58c:	003fe006 	br	80b510 <__alt_mem_onchip_mem+0xff803510>
  80b590:	9c000217 	ldw	r16,8(r19)
  80b594:	00bfff04 	movi	r2,-4
  80b598:	85800117 	ldw	r22,4(r16)
  80b59c:	b0ac703a 	and	r22,r22,r2
  80b5a0:	b4400336 	bltu	r22,r17,80b5b0 <_malloc_r+0x344>
  80b5a4:	b445c83a 	sub	r2,r22,r17
  80b5a8:	00c003c4 	movi	r3,15
  80b5ac:	18805d16 	blt	r3,r2,80b724 <_malloc_r+0x4b8>
  80b5b0:	05c02074 	movhi	r23,129
  80b5b4:	008020b4 	movhi	r2,130
  80b5b8:	10a40804 	addi	r2,r2,-28640
  80b5bc:	bddcbe04 	addi	r23,r23,29432
  80b5c0:	15400017 	ldw	r21,0(r2)
  80b5c4:	b8c00017 	ldw	r3,0(r23)
  80b5c8:	00bfffc4 	movi	r2,-1
  80b5cc:	858d883a 	add	r6,r16,r22
  80b5d0:	8d6b883a 	add	r21,r17,r21
  80b5d4:	1880ea26 	beq	r3,r2,80b980 <_malloc_r+0x714>
  80b5d8:	ad4403c4 	addi	r21,r21,4111
  80b5dc:	00bc0004 	movi	r2,-4096
  80b5e0:	a8aa703a 	and	r21,r21,r2
  80b5e4:	a80b883a 	mov	r5,r21
  80b5e8:	9009883a 	mov	r4,r18
  80b5ec:	d9800015 	stw	r6,0(sp)
  80b5f0:	080d4fc0 	call	80d4fc <_sbrk_r>
  80b5f4:	1029883a 	mov	r20,r2
  80b5f8:	00bfffc4 	movi	r2,-1
  80b5fc:	d9800017 	ldw	r6,0(sp)
  80b600:	a080e826 	beq	r20,r2,80b9a4 <_malloc_r+0x738>
  80b604:	a180a636 	bltu	r20,r6,80b8a0 <_malloc_r+0x634>
  80b608:	070020b4 	movhi	fp,130
  80b60c:	e7241104 	addi	fp,fp,-28604
  80b610:	e0800017 	ldw	r2,0(fp)
  80b614:	a887883a 	add	r3,r21,r2
  80b618:	e0c00015 	stw	r3,0(fp)
  80b61c:	3500e626 	beq	r6,r20,80b9b8 <_malloc_r+0x74c>
  80b620:	b9000017 	ldw	r4,0(r23)
  80b624:	00bfffc4 	movi	r2,-1
  80b628:	2080ee26 	beq	r4,r2,80b9e4 <_malloc_r+0x778>
  80b62c:	a185c83a 	sub	r2,r20,r6
  80b630:	10c5883a 	add	r2,r2,r3
  80b634:	e0800015 	stw	r2,0(fp)
  80b638:	a0c001cc 	andi	r3,r20,7
  80b63c:	1800bc26 	beq	r3,zero,80b930 <_malloc_r+0x6c4>
  80b640:	a0e9c83a 	sub	r20,r20,r3
  80b644:	00840204 	movi	r2,4104
  80b648:	a5000204 	addi	r20,r20,8
  80b64c:	10c7c83a 	sub	r3,r2,r3
  80b650:	a545883a 	add	r2,r20,r21
  80b654:	1083ffcc 	andi	r2,r2,4095
  80b658:	18abc83a 	sub	r21,r3,r2
  80b65c:	a80b883a 	mov	r5,r21
  80b660:	9009883a 	mov	r4,r18
  80b664:	080d4fc0 	call	80d4fc <_sbrk_r>
  80b668:	00ffffc4 	movi	r3,-1
  80b66c:	10c0e126 	beq	r2,r3,80b9f4 <_malloc_r+0x788>
  80b670:	1505c83a 	sub	r2,r2,r20
  80b674:	1545883a 	add	r2,r2,r21
  80b678:	10800054 	ori	r2,r2,1
  80b67c:	e0c00017 	ldw	r3,0(fp)
  80b680:	9d000215 	stw	r20,8(r19)
  80b684:	a0800115 	stw	r2,4(r20)
  80b688:	a8c7883a 	add	r3,r21,r3
  80b68c:	e0c00015 	stw	r3,0(fp)
  80b690:	84c00e26 	beq	r16,r19,80b6cc <_malloc_r+0x460>
  80b694:	018003c4 	movi	r6,15
  80b698:	3580a72e 	bgeu	r6,r22,80b938 <_malloc_r+0x6cc>
  80b69c:	81400117 	ldw	r5,4(r16)
  80b6a0:	013ffe04 	movi	r4,-8
  80b6a4:	b0bffd04 	addi	r2,r22,-12
  80b6a8:	1104703a 	and	r2,r2,r4
  80b6ac:	2900004c 	andi	r4,r5,1
  80b6b0:	2088b03a 	or	r4,r4,r2
  80b6b4:	81000115 	stw	r4,4(r16)
  80b6b8:	01400144 	movi	r5,5
  80b6bc:	8089883a 	add	r4,r16,r2
  80b6c0:	21400115 	stw	r5,4(r4)
  80b6c4:	21400215 	stw	r5,8(r4)
  80b6c8:	3080cd36 	bltu	r6,r2,80ba00 <_malloc_r+0x794>
  80b6cc:	008020b4 	movhi	r2,130
  80b6d0:	10a40704 	addi	r2,r2,-28644
  80b6d4:	11000017 	ldw	r4,0(r2)
  80b6d8:	20c0012e 	bgeu	r4,r3,80b6e0 <_malloc_r+0x474>
  80b6dc:	10c00015 	stw	r3,0(r2)
  80b6e0:	008020b4 	movhi	r2,130
  80b6e4:	10a40604 	addi	r2,r2,-28648
  80b6e8:	11000017 	ldw	r4,0(r2)
  80b6ec:	9c000217 	ldw	r16,8(r19)
  80b6f0:	20c0012e 	bgeu	r4,r3,80b6f8 <_malloc_r+0x48c>
  80b6f4:	10c00015 	stw	r3,0(r2)
  80b6f8:	80c00117 	ldw	r3,4(r16)
  80b6fc:	00bfff04 	movi	r2,-4
  80b700:	1886703a 	and	r3,r3,r2
  80b704:	1c45c83a 	sub	r2,r3,r17
  80b708:	1c400236 	bltu	r3,r17,80b714 <_malloc_r+0x4a8>
  80b70c:	00c003c4 	movi	r3,15
  80b710:	18800416 	blt	r3,r2,80b724 <_malloc_r+0x4b8>
  80b714:	9009883a 	mov	r4,r18
  80b718:	08116600 	call	811660 <__malloc_unlock>
  80b71c:	0005883a 	mov	r2,zero
  80b720:	003f7b06 	br	80b510 <__alt_mem_onchip_mem+0xff803510>
  80b724:	88c00054 	ori	r3,r17,1
  80b728:	80c00115 	stw	r3,4(r16)
  80b72c:	8463883a 	add	r17,r16,r17
  80b730:	10800054 	ori	r2,r2,1
  80b734:	9c400215 	stw	r17,8(r19)
  80b738:	88800115 	stw	r2,4(r17)
  80b73c:	9009883a 	mov	r4,r18
  80b740:	08116600 	call	811660 <__malloc_unlock>
  80b744:	80800204 	addi	r2,r16,8
  80b748:	003f7106 	br	80b510 <__alt_mem_onchip_mem+0xff803510>
  80b74c:	00c00504 	movi	r3,20
  80b750:	18804a2e 	bgeu	r3,r2,80b87c <_malloc_r+0x610>
  80b754:	00c01504 	movi	r3,84
  80b758:	18806e36 	bltu	r3,r2,80b914 <_malloc_r+0x6a8>
  80b75c:	8804d33a 	srli	r2,r17,12
  80b760:	12001bc4 	addi	r8,r2,111
  80b764:	11c01b84 	addi	r7,r2,110
  80b768:	4209883a 	add	r4,r8,r8
  80b76c:	003edd06 	br	80b2e4 <__alt_mem_onchip_mem+0xff8032e4>
  80b770:	3804d27a 	srli	r2,r7,9
  80b774:	00c00104 	movi	r3,4
  80b778:	1880442e 	bgeu	r3,r2,80b88c <_malloc_r+0x620>
  80b77c:	00c00504 	movi	r3,20
  80b780:	18808136 	bltu	r3,r2,80b988 <_malloc_r+0x71c>
  80b784:	11401704 	addi	r5,r2,92
  80b788:	10c016c4 	addi	r3,r2,91
  80b78c:	294b883a 	add	r5,r5,r5
  80b790:	294b883a 	add	r5,r5,r5
  80b794:	294b883a 	add	r5,r5,r5
  80b798:	994b883a 	add	r5,r19,r5
  80b79c:	28800017 	ldw	r2,0(r5)
  80b7a0:	01802074 	movhi	r6,129
  80b7a4:	297ffe04 	addi	r5,r5,-8
  80b7a8:	3196be04 	addi	r6,r6,23288
  80b7ac:	28806526 	beq	r5,r2,80b944 <_malloc_r+0x6d8>
  80b7b0:	01bfff04 	movi	r6,-4
  80b7b4:	10c00117 	ldw	r3,4(r2)
  80b7b8:	1986703a 	and	r3,r3,r6
  80b7bc:	38c0022e 	bgeu	r7,r3,80b7c8 <_malloc_r+0x55c>
  80b7c0:	10800217 	ldw	r2,8(r2)
  80b7c4:	28bffb1e 	bne	r5,r2,80b7b4 <__alt_mem_onchip_mem+0xff8037b4>
  80b7c8:	11400317 	ldw	r5,12(r2)
  80b7cc:	98c00117 	ldw	r3,4(r19)
  80b7d0:	81400315 	stw	r5,12(r16)
  80b7d4:	80800215 	stw	r2,8(r16)
  80b7d8:	2c000215 	stw	r16,8(r5)
  80b7dc:	14000315 	stw	r16,12(r2)
  80b7e0:	003ef806 	br	80b3c4 <__alt_mem_onchip_mem+0xff8033c4>
  80b7e4:	88c00054 	ori	r3,r17,1
  80b7e8:	80c00115 	stw	r3,4(r16)
  80b7ec:	8463883a 	add	r17,r16,r17
  80b7f0:	34400515 	stw	r17,20(r6)
  80b7f4:	34400415 	stw	r17,16(r6)
  80b7f8:	10c00054 	ori	r3,r2,1
  80b7fc:	8a000315 	stw	r8,12(r17)
  80b800:	8a000215 	stw	r8,8(r17)
  80b804:	88c00115 	stw	r3,4(r17)
  80b808:	88a3883a 	add	r17,r17,r2
  80b80c:	88800015 	stw	r2,0(r17)
  80b810:	9009883a 	mov	r4,r18
  80b814:	08116600 	call	811660 <__malloc_unlock>
  80b818:	80800204 	addi	r2,r16,8
  80b81c:	003f3c06 	br	80b510 <__alt_mem_onchip_mem+0xff803510>
  80b820:	30c00117 	ldw	r3,4(r6)
  80b824:	003ee706 	br	80b3c4 <__alt_mem_onchip_mem+0xff8033c4>
  80b828:	5ac00044 	addi	r11,r11,1
  80b82c:	588000cc 	andi	r2,r11,3
  80b830:	31800204 	addi	r6,r6,8
  80b834:	103efd1e 	bne	r2,zero,80b42c <__alt_mem_onchip_mem+0xff80342c>
  80b838:	00002406 	br	80b8cc <_malloc_r+0x660>
  80b83c:	14000317 	ldw	r16,12(r2)
  80b840:	143f251e 	bne	r2,r16,80b4d8 <__alt_mem_onchip_mem+0xff8034d8>
  80b844:	21000084 	addi	r4,r4,2
  80b848:	003ebc06 	br	80b33c <__alt_mem_onchip_mem+0xff80333c>
  80b84c:	8085883a 	add	r2,r16,r2
  80b850:	10c00117 	ldw	r3,4(r2)
  80b854:	81000317 	ldw	r4,12(r16)
  80b858:	81400217 	ldw	r5,8(r16)
  80b85c:	18c00054 	ori	r3,r3,1
  80b860:	10c00115 	stw	r3,4(r2)
  80b864:	29000315 	stw	r4,12(r5)
  80b868:	21400215 	stw	r5,8(r4)
  80b86c:	9009883a 	mov	r4,r18
  80b870:	08116600 	call	811660 <__malloc_unlock>
  80b874:	80800204 	addi	r2,r16,8
  80b878:	003f2506 	br	80b510 <__alt_mem_onchip_mem+0xff803510>
  80b87c:	12001704 	addi	r8,r2,92
  80b880:	11c016c4 	addi	r7,r2,91
  80b884:	4209883a 	add	r4,r8,r8
  80b888:	003e9606 	br	80b2e4 <__alt_mem_onchip_mem+0xff8032e4>
  80b88c:	3804d1ba 	srli	r2,r7,6
  80b890:	11400e44 	addi	r5,r2,57
  80b894:	10c00e04 	addi	r3,r2,56
  80b898:	294b883a 	add	r5,r5,r5
  80b89c:	003fbc06 	br	80b790 <__alt_mem_onchip_mem+0xff803790>
  80b8a0:	84ff5926 	beq	r16,r19,80b608 <__alt_mem_onchip_mem+0xff803608>
  80b8a4:	00802074 	movhi	r2,129
  80b8a8:	1096be04 	addi	r2,r2,23288
  80b8ac:	14000217 	ldw	r16,8(r2)
  80b8b0:	00bfff04 	movi	r2,-4
  80b8b4:	80c00117 	ldw	r3,4(r16)
  80b8b8:	1886703a 	and	r3,r3,r2
  80b8bc:	003f9106 	br	80b704 <__alt_mem_onchip_mem+0xff803704>
  80b8c0:	60800217 	ldw	r2,8(r12)
  80b8c4:	213fffc4 	addi	r4,r4,-1
  80b8c8:	1300651e 	bne	r2,r12,80ba60 <_malloc_r+0x7f4>
  80b8cc:	208000cc 	andi	r2,r4,3
  80b8d0:	633ffe04 	addi	r12,r12,-8
  80b8d4:	103ffa1e 	bne	r2,zero,80b8c0 <__alt_mem_onchip_mem+0xff8038c0>
  80b8d8:	98800117 	ldw	r2,4(r19)
  80b8dc:	0146303a 	nor	r3,zero,r5
  80b8e0:	1884703a 	and	r2,r3,r2
  80b8e4:	98800115 	stw	r2,4(r19)
  80b8e8:	294b883a 	add	r5,r5,r5
  80b8ec:	117f2836 	bltu	r2,r5,80b590 <__alt_mem_onchip_mem+0xff803590>
  80b8f0:	283f2726 	beq	r5,zero,80b590 <__alt_mem_onchip_mem+0xff803590>
  80b8f4:	2886703a 	and	r3,r5,r2
  80b8f8:	5809883a 	mov	r4,r11
  80b8fc:	183ec31e 	bne	r3,zero,80b40c <__alt_mem_onchip_mem+0xff80340c>
  80b900:	294b883a 	add	r5,r5,r5
  80b904:	2886703a 	and	r3,r5,r2
  80b908:	21000104 	addi	r4,r4,4
  80b90c:	183ffc26 	beq	r3,zero,80b900 <__alt_mem_onchip_mem+0xff803900>
  80b910:	003ebe06 	br	80b40c <__alt_mem_onchip_mem+0xff80340c>
  80b914:	00c05504 	movi	r3,340
  80b918:	18801236 	bltu	r3,r2,80b964 <_malloc_r+0x6f8>
  80b91c:	8804d3fa 	srli	r2,r17,15
  80b920:	12001e04 	addi	r8,r2,120
  80b924:	11c01dc4 	addi	r7,r2,119
  80b928:	4209883a 	add	r4,r8,r8
  80b92c:	003e6d06 	br	80b2e4 <__alt_mem_onchip_mem+0xff8032e4>
  80b930:	00c40004 	movi	r3,4096
  80b934:	003f4606 	br	80b650 <__alt_mem_onchip_mem+0xff803650>
  80b938:	00800044 	movi	r2,1
  80b93c:	a0800115 	stw	r2,4(r20)
  80b940:	003f7406 	br	80b714 <__alt_mem_onchip_mem+0xff803714>
  80b944:	1805d0ba 	srai	r2,r3,2
  80b948:	01c00044 	movi	r7,1
  80b94c:	30c00117 	ldw	r3,4(r6)
  80b950:	388e983a 	sll	r7,r7,r2
  80b954:	2805883a 	mov	r2,r5
  80b958:	38c6b03a 	or	r3,r7,r3
  80b95c:	30c00115 	stw	r3,4(r6)
  80b960:	003f9b06 	br	80b7d0 <__alt_mem_onchip_mem+0xff8037d0>
  80b964:	00c15504 	movi	r3,1364
  80b968:	18801a36 	bltu	r3,r2,80b9d4 <_malloc_r+0x768>
  80b96c:	8804d4ba 	srli	r2,r17,18
  80b970:	12001f44 	addi	r8,r2,125
  80b974:	11c01f04 	addi	r7,r2,124
  80b978:	4209883a 	add	r4,r8,r8
  80b97c:	003e5906 	br	80b2e4 <__alt_mem_onchip_mem+0xff8032e4>
  80b980:	ad400404 	addi	r21,r21,16
  80b984:	003f1706 	br	80b5e4 <__alt_mem_onchip_mem+0xff8035e4>
  80b988:	00c01504 	movi	r3,84
  80b98c:	18802336 	bltu	r3,r2,80ba1c <_malloc_r+0x7b0>
  80b990:	3804d33a 	srli	r2,r7,12
  80b994:	11401bc4 	addi	r5,r2,111
  80b998:	10c01b84 	addi	r3,r2,110
  80b99c:	294b883a 	add	r5,r5,r5
  80b9a0:	003f7b06 	br	80b790 <__alt_mem_onchip_mem+0xff803790>
  80b9a4:	9c000217 	ldw	r16,8(r19)
  80b9a8:	00bfff04 	movi	r2,-4
  80b9ac:	80c00117 	ldw	r3,4(r16)
  80b9b0:	1886703a 	and	r3,r3,r2
  80b9b4:	003f5306 	br	80b704 <__alt_mem_onchip_mem+0xff803704>
  80b9b8:	3083ffcc 	andi	r2,r6,4095
  80b9bc:	103f181e 	bne	r2,zero,80b620 <__alt_mem_onchip_mem+0xff803620>
  80b9c0:	99000217 	ldw	r4,8(r19)
  80b9c4:	b545883a 	add	r2,r22,r21
  80b9c8:	10800054 	ori	r2,r2,1
  80b9cc:	20800115 	stw	r2,4(r4)
  80b9d0:	003f3e06 	br	80b6cc <__alt_mem_onchip_mem+0xff8036cc>
  80b9d4:	01003f84 	movi	r4,254
  80b9d8:	02001fc4 	movi	r8,127
  80b9dc:	01c01f84 	movi	r7,126
  80b9e0:	003e4006 	br	80b2e4 <__alt_mem_onchip_mem+0xff8032e4>
  80b9e4:	00802074 	movhi	r2,129
  80b9e8:	109cbe04 	addi	r2,r2,29432
  80b9ec:	15000015 	stw	r20,0(r2)
  80b9f0:	003f1106 	br	80b638 <__alt_mem_onchip_mem+0xff803638>
  80b9f4:	00800044 	movi	r2,1
  80b9f8:	002b883a 	mov	r21,zero
  80b9fc:	003f1f06 	br	80b67c <__alt_mem_onchip_mem+0xff80367c>
  80ba00:	81400204 	addi	r5,r16,8
  80ba04:	9009883a 	mov	r4,r18
  80ba08:	080a6800 	call	80a680 <_free_r>
  80ba0c:	008020b4 	movhi	r2,130
  80ba10:	10a41104 	addi	r2,r2,-28604
  80ba14:	10c00017 	ldw	r3,0(r2)
  80ba18:	003f2c06 	br	80b6cc <__alt_mem_onchip_mem+0xff8036cc>
  80ba1c:	00c05504 	movi	r3,340
  80ba20:	18800536 	bltu	r3,r2,80ba38 <_malloc_r+0x7cc>
  80ba24:	3804d3fa 	srli	r2,r7,15
  80ba28:	11401e04 	addi	r5,r2,120
  80ba2c:	10c01dc4 	addi	r3,r2,119
  80ba30:	294b883a 	add	r5,r5,r5
  80ba34:	003f5606 	br	80b790 <__alt_mem_onchip_mem+0xff803790>
  80ba38:	00c15504 	movi	r3,1364
  80ba3c:	18800536 	bltu	r3,r2,80ba54 <_malloc_r+0x7e8>
  80ba40:	3804d4ba 	srli	r2,r7,18
  80ba44:	11401f44 	addi	r5,r2,125
  80ba48:	10c01f04 	addi	r3,r2,124
  80ba4c:	294b883a 	add	r5,r5,r5
  80ba50:	003f4f06 	br	80b790 <__alt_mem_onchip_mem+0xff803790>
  80ba54:	01403f84 	movi	r5,254
  80ba58:	00c01f84 	movi	r3,126
  80ba5c:	003f4c06 	br	80b790 <__alt_mem_onchip_mem+0xff803790>
  80ba60:	98800117 	ldw	r2,4(r19)
  80ba64:	003fa006 	br	80b8e8 <__alt_mem_onchip_mem+0xff8038e8>
  80ba68:	8808d0fa 	srli	r4,r17,3
  80ba6c:	20800044 	addi	r2,r4,1
  80ba70:	1085883a 	add	r2,r2,r2
  80ba74:	003e9006 	br	80b4b8 <__alt_mem_onchip_mem+0xff8034b8>

0080ba78 <memchr>:
  80ba78:	208000cc 	andi	r2,r4,3
  80ba7c:	280f883a 	mov	r7,r5
  80ba80:	10003426 	beq	r2,zero,80bb54 <memchr+0xdc>
  80ba84:	30bfffc4 	addi	r2,r6,-1
  80ba88:	30001a26 	beq	r6,zero,80baf4 <memchr+0x7c>
  80ba8c:	20c00003 	ldbu	r3,0(r4)
  80ba90:	29803fcc 	andi	r6,r5,255
  80ba94:	30c0051e 	bne	r6,r3,80baac <memchr+0x34>
  80ba98:	00001806 	br	80bafc <memchr+0x84>
  80ba9c:	10001526 	beq	r2,zero,80baf4 <memchr+0x7c>
  80baa0:	20c00003 	ldbu	r3,0(r4)
  80baa4:	10bfffc4 	addi	r2,r2,-1
  80baa8:	30c01426 	beq	r6,r3,80bafc <memchr+0x84>
  80baac:	21000044 	addi	r4,r4,1
  80bab0:	20c000cc 	andi	r3,r4,3
  80bab4:	183ff91e 	bne	r3,zero,80ba9c <__alt_mem_onchip_mem+0xff803a9c>
  80bab8:	020000c4 	movi	r8,3
  80babc:	40801136 	bltu	r8,r2,80bb04 <memchr+0x8c>
  80bac0:	10000c26 	beq	r2,zero,80baf4 <memchr+0x7c>
  80bac4:	20c00003 	ldbu	r3,0(r4)
  80bac8:	29403fcc 	andi	r5,r5,255
  80bacc:	28c00b26 	beq	r5,r3,80bafc <memchr+0x84>
  80bad0:	20c00044 	addi	r3,r4,1
  80bad4:	39803fcc 	andi	r6,r7,255
  80bad8:	2089883a 	add	r4,r4,r2
  80badc:	00000306 	br	80baec <memchr+0x74>
  80bae0:	18c00044 	addi	r3,r3,1
  80bae4:	197fffc3 	ldbu	r5,-1(r3)
  80bae8:	31400526 	beq	r6,r5,80bb00 <memchr+0x88>
  80baec:	1805883a 	mov	r2,r3
  80baf0:	20fffb1e 	bne	r4,r3,80bae0 <__alt_mem_onchip_mem+0xff803ae0>
  80baf4:	0005883a 	mov	r2,zero
  80baf8:	f800283a 	ret
  80bafc:	2005883a 	mov	r2,r4
  80bb00:	f800283a 	ret
  80bb04:	28c03fcc 	andi	r3,r5,255
  80bb08:	1812923a 	slli	r9,r3,8
  80bb0c:	02ffbff4 	movhi	r11,65279
  80bb10:	02a02074 	movhi	r10,32897
  80bb14:	48d2b03a 	or	r9,r9,r3
  80bb18:	4806943a 	slli	r3,r9,16
  80bb1c:	5affbfc4 	addi	r11,r11,-257
  80bb20:	52a02004 	addi	r10,r10,-32640
  80bb24:	48d2b03a 	or	r9,r9,r3
  80bb28:	20c00017 	ldw	r3,0(r4)
  80bb2c:	48c6f03a 	xor	r3,r9,r3
  80bb30:	1acd883a 	add	r6,r3,r11
  80bb34:	00c6303a 	nor	r3,zero,r3
  80bb38:	30c6703a 	and	r3,r6,r3
  80bb3c:	1a86703a 	and	r3,r3,r10
  80bb40:	183fe01e 	bne	r3,zero,80bac4 <__alt_mem_onchip_mem+0xff803ac4>
  80bb44:	10bfff04 	addi	r2,r2,-4
  80bb48:	21000104 	addi	r4,r4,4
  80bb4c:	40bff636 	bltu	r8,r2,80bb28 <__alt_mem_onchip_mem+0xff803b28>
  80bb50:	003fdb06 	br	80bac0 <__alt_mem_onchip_mem+0xff803ac0>
  80bb54:	3005883a 	mov	r2,r6
  80bb58:	003fd706 	br	80bab8 <__alt_mem_onchip_mem+0xff803ab8>

0080bb5c <memcpy>:
  80bb5c:	defffd04 	addi	sp,sp,-12
  80bb60:	dfc00215 	stw	ra,8(sp)
  80bb64:	dc400115 	stw	r17,4(sp)
  80bb68:	dc000015 	stw	r16,0(sp)
  80bb6c:	00c003c4 	movi	r3,15
  80bb70:	2005883a 	mov	r2,r4
  80bb74:	1980452e 	bgeu	r3,r6,80bc8c <memcpy+0x130>
  80bb78:	2906b03a 	or	r3,r5,r4
  80bb7c:	18c000cc 	andi	r3,r3,3
  80bb80:	1800441e 	bne	r3,zero,80bc94 <memcpy+0x138>
  80bb84:	347ffc04 	addi	r17,r6,-16
  80bb88:	8822d13a 	srli	r17,r17,4
  80bb8c:	28c00104 	addi	r3,r5,4
  80bb90:	23400104 	addi	r13,r4,4
  80bb94:	8820913a 	slli	r16,r17,4
  80bb98:	2b000204 	addi	r12,r5,8
  80bb9c:	22c00204 	addi	r11,r4,8
  80bba0:	84000504 	addi	r16,r16,20
  80bba4:	2a800304 	addi	r10,r5,12
  80bba8:	22400304 	addi	r9,r4,12
  80bbac:	2c21883a 	add	r16,r5,r16
  80bbb0:	2811883a 	mov	r8,r5
  80bbb4:	200f883a 	mov	r7,r4
  80bbb8:	41000017 	ldw	r4,0(r8)
  80bbbc:	1fc00017 	ldw	ra,0(r3)
  80bbc0:	63c00017 	ldw	r15,0(r12)
  80bbc4:	39000015 	stw	r4,0(r7)
  80bbc8:	53800017 	ldw	r14,0(r10)
  80bbcc:	6fc00015 	stw	ra,0(r13)
  80bbd0:	5bc00015 	stw	r15,0(r11)
  80bbd4:	4b800015 	stw	r14,0(r9)
  80bbd8:	18c00404 	addi	r3,r3,16
  80bbdc:	39c00404 	addi	r7,r7,16
  80bbe0:	42000404 	addi	r8,r8,16
  80bbe4:	6b400404 	addi	r13,r13,16
  80bbe8:	63000404 	addi	r12,r12,16
  80bbec:	5ac00404 	addi	r11,r11,16
  80bbf0:	52800404 	addi	r10,r10,16
  80bbf4:	4a400404 	addi	r9,r9,16
  80bbf8:	1c3fef1e 	bne	r3,r16,80bbb8 <__alt_mem_onchip_mem+0xff803bb8>
  80bbfc:	89c00044 	addi	r7,r17,1
  80bc00:	380e913a 	slli	r7,r7,4
  80bc04:	310003cc 	andi	r4,r6,15
  80bc08:	02c000c4 	movi	r11,3
  80bc0c:	11c7883a 	add	r3,r2,r7
  80bc10:	29cb883a 	add	r5,r5,r7
  80bc14:	5900212e 	bgeu	r11,r4,80bc9c <memcpy+0x140>
  80bc18:	1813883a 	mov	r9,r3
  80bc1c:	2811883a 	mov	r8,r5
  80bc20:	200f883a 	mov	r7,r4
  80bc24:	42800017 	ldw	r10,0(r8)
  80bc28:	4a400104 	addi	r9,r9,4
  80bc2c:	39ffff04 	addi	r7,r7,-4
  80bc30:	4abfff15 	stw	r10,-4(r9)
  80bc34:	42000104 	addi	r8,r8,4
  80bc38:	59fffa36 	bltu	r11,r7,80bc24 <__alt_mem_onchip_mem+0xff803c24>
  80bc3c:	213fff04 	addi	r4,r4,-4
  80bc40:	2008d0ba 	srli	r4,r4,2
  80bc44:	318000cc 	andi	r6,r6,3
  80bc48:	21000044 	addi	r4,r4,1
  80bc4c:	2109883a 	add	r4,r4,r4
  80bc50:	2109883a 	add	r4,r4,r4
  80bc54:	1907883a 	add	r3,r3,r4
  80bc58:	290b883a 	add	r5,r5,r4
  80bc5c:	30000626 	beq	r6,zero,80bc78 <memcpy+0x11c>
  80bc60:	198d883a 	add	r6,r3,r6
  80bc64:	29c00003 	ldbu	r7,0(r5)
  80bc68:	18c00044 	addi	r3,r3,1
  80bc6c:	29400044 	addi	r5,r5,1
  80bc70:	19ffffc5 	stb	r7,-1(r3)
  80bc74:	19bffb1e 	bne	r3,r6,80bc64 <__alt_mem_onchip_mem+0xff803c64>
  80bc78:	dfc00217 	ldw	ra,8(sp)
  80bc7c:	dc400117 	ldw	r17,4(sp)
  80bc80:	dc000017 	ldw	r16,0(sp)
  80bc84:	dec00304 	addi	sp,sp,12
  80bc88:	f800283a 	ret
  80bc8c:	2007883a 	mov	r3,r4
  80bc90:	003ff206 	br	80bc5c <__alt_mem_onchip_mem+0xff803c5c>
  80bc94:	2007883a 	mov	r3,r4
  80bc98:	003ff106 	br	80bc60 <__alt_mem_onchip_mem+0xff803c60>
  80bc9c:	200d883a 	mov	r6,r4
  80bca0:	003fee06 	br	80bc5c <__alt_mem_onchip_mem+0xff803c5c>

0080bca4 <memmove>:
  80bca4:	2005883a 	mov	r2,r4
  80bca8:	29000b2e 	bgeu	r5,r4,80bcd8 <memmove+0x34>
  80bcac:	298f883a 	add	r7,r5,r6
  80bcb0:	21c0092e 	bgeu	r4,r7,80bcd8 <memmove+0x34>
  80bcb4:	2187883a 	add	r3,r4,r6
  80bcb8:	198bc83a 	sub	r5,r3,r6
  80bcbc:	30004826 	beq	r6,zero,80bde0 <memmove+0x13c>
  80bcc0:	39ffffc4 	addi	r7,r7,-1
  80bcc4:	39000003 	ldbu	r4,0(r7)
  80bcc8:	18ffffc4 	addi	r3,r3,-1
  80bccc:	19000005 	stb	r4,0(r3)
  80bcd0:	28fffb1e 	bne	r5,r3,80bcc0 <__alt_mem_onchip_mem+0xff803cc0>
  80bcd4:	f800283a 	ret
  80bcd8:	00c003c4 	movi	r3,15
  80bcdc:	1980412e 	bgeu	r3,r6,80bde4 <memmove+0x140>
  80bce0:	2886b03a 	or	r3,r5,r2
  80bce4:	18c000cc 	andi	r3,r3,3
  80bce8:	1800401e 	bne	r3,zero,80bdec <memmove+0x148>
  80bcec:	33fffc04 	addi	r15,r6,-16
  80bcf0:	781ed13a 	srli	r15,r15,4
  80bcf4:	28c00104 	addi	r3,r5,4
  80bcf8:	13400104 	addi	r13,r2,4
  80bcfc:	781c913a 	slli	r14,r15,4
  80bd00:	2b000204 	addi	r12,r5,8
  80bd04:	12c00204 	addi	r11,r2,8
  80bd08:	73800504 	addi	r14,r14,20
  80bd0c:	2a800304 	addi	r10,r5,12
  80bd10:	12400304 	addi	r9,r2,12
  80bd14:	2b9d883a 	add	r14,r5,r14
  80bd18:	2811883a 	mov	r8,r5
  80bd1c:	100f883a 	mov	r7,r2
  80bd20:	41000017 	ldw	r4,0(r8)
  80bd24:	39c00404 	addi	r7,r7,16
  80bd28:	18c00404 	addi	r3,r3,16
  80bd2c:	393ffc15 	stw	r4,-16(r7)
  80bd30:	193ffc17 	ldw	r4,-16(r3)
  80bd34:	6b400404 	addi	r13,r13,16
  80bd38:	5ac00404 	addi	r11,r11,16
  80bd3c:	693ffc15 	stw	r4,-16(r13)
  80bd40:	61000017 	ldw	r4,0(r12)
  80bd44:	4a400404 	addi	r9,r9,16
  80bd48:	42000404 	addi	r8,r8,16
  80bd4c:	593ffc15 	stw	r4,-16(r11)
  80bd50:	51000017 	ldw	r4,0(r10)
  80bd54:	63000404 	addi	r12,r12,16
  80bd58:	52800404 	addi	r10,r10,16
  80bd5c:	493ffc15 	stw	r4,-16(r9)
  80bd60:	1bbfef1e 	bne	r3,r14,80bd20 <__alt_mem_onchip_mem+0xff803d20>
  80bd64:	79000044 	addi	r4,r15,1
  80bd68:	2008913a 	slli	r4,r4,4
  80bd6c:	328003cc 	andi	r10,r6,15
  80bd70:	02c000c4 	movi	r11,3
  80bd74:	1107883a 	add	r3,r2,r4
  80bd78:	290b883a 	add	r5,r5,r4
  80bd7c:	5a801e2e 	bgeu	r11,r10,80bdf8 <memmove+0x154>
  80bd80:	1813883a 	mov	r9,r3
  80bd84:	2811883a 	mov	r8,r5
  80bd88:	500f883a 	mov	r7,r10
  80bd8c:	41000017 	ldw	r4,0(r8)
  80bd90:	4a400104 	addi	r9,r9,4
  80bd94:	39ffff04 	addi	r7,r7,-4
  80bd98:	493fff15 	stw	r4,-4(r9)
  80bd9c:	42000104 	addi	r8,r8,4
  80bda0:	59fffa36 	bltu	r11,r7,80bd8c <__alt_mem_onchip_mem+0xff803d8c>
  80bda4:	513fff04 	addi	r4,r10,-4
  80bda8:	2008d0ba 	srli	r4,r4,2
  80bdac:	318000cc 	andi	r6,r6,3
  80bdb0:	21000044 	addi	r4,r4,1
  80bdb4:	2109883a 	add	r4,r4,r4
  80bdb8:	2109883a 	add	r4,r4,r4
  80bdbc:	1907883a 	add	r3,r3,r4
  80bdc0:	290b883a 	add	r5,r5,r4
  80bdc4:	30000b26 	beq	r6,zero,80bdf4 <memmove+0x150>
  80bdc8:	198d883a 	add	r6,r3,r6
  80bdcc:	29c00003 	ldbu	r7,0(r5)
  80bdd0:	18c00044 	addi	r3,r3,1
  80bdd4:	29400044 	addi	r5,r5,1
  80bdd8:	19ffffc5 	stb	r7,-1(r3)
  80bddc:	19bffb1e 	bne	r3,r6,80bdcc <__alt_mem_onchip_mem+0xff803dcc>
  80bde0:	f800283a 	ret
  80bde4:	1007883a 	mov	r3,r2
  80bde8:	003ff606 	br	80bdc4 <__alt_mem_onchip_mem+0xff803dc4>
  80bdec:	1007883a 	mov	r3,r2
  80bdf0:	003ff506 	br	80bdc8 <__alt_mem_onchip_mem+0xff803dc8>
  80bdf4:	f800283a 	ret
  80bdf8:	500d883a 	mov	r6,r10
  80bdfc:	003ff106 	br	80bdc4 <__alt_mem_onchip_mem+0xff803dc4>

0080be00 <memset>:
  80be00:	20c000cc 	andi	r3,r4,3
  80be04:	2005883a 	mov	r2,r4
  80be08:	18004426 	beq	r3,zero,80bf1c <memset+0x11c>
  80be0c:	31ffffc4 	addi	r7,r6,-1
  80be10:	30004026 	beq	r6,zero,80bf14 <memset+0x114>
  80be14:	2813883a 	mov	r9,r5
  80be18:	200d883a 	mov	r6,r4
  80be1c:	2007883a 	mov	r3,r4
  80be20:	00000406 	br	80be34 <memset+0x34>
  80be24:	3a3fffc4 	addi	r8,r7,-1
  80be28:	31800044 	addi	r6,r6,1
  80be2c:	38003926 	beq	r7,zero,80bf14 <memset+0x114>
  80be30:	400f883a 	mov	r7,r8
  80be34:	18c00044 	addi	r3,r3,1
  80be38:	32400005 	stb	r9,0(r6)
  80be3c:	1a0000cc 	andi	r8,r3,3
  80be40:	403ff81e 	bne	r8,zero,80be24 <__alt_mem_onchip_mem+0xff803e24>
  80be44:	010000c4 	movi	r4,3
  80be48:	21c02d2e 	bgeu	r4,r7,80bf00 <memset+0x100>
  80be4c:	29003fcc 	andi	r4,r5,255
  80be50:	200c923a 	slli	r6,r4,8
  80be54:	3108b03a 	or	r4,r6,r4
  80be58:	200c943a 	slli	r6,r4,16
  80be5c:	218cb03a 	or	r6,r4,r6
  80be60:	010003c4 	movi	r4,15
  80be64:	21c0182e 	bgeu	r4,r7,80bec8 <memset+0xc8>
  80be68:	3b3ffc04 	addi	r12,r7,-16
  80be6c:	6018d13a 	srli	r12,r12,4
  80be70:	1a000104 	addi	r8,r3,4
  80be74:	1ac00204 	addi	r11,r3,8
  80be78:	6008913a 	slli	r4,r12,4
  80be7c:	1a800304 	addi	r10,r3,12
  80be80:	1813883a 	mov	r9,r3
  80be84:	21000504 	addi	r4,r4,20
  80be88:	1909883a 	add	r4,r3,r4
  80be8c:	49800015 	stw	r6,0(r9)
  80be90:	41800015 	stw	r6,0(r8)
  80be94:	59800015 	stw	r6,0(r11)
  80be98:	51800015 	stw	r6,0(r10)
  80be9c:	42000404 	addi	r8,r8,16
  80bea0:	4a400404 	addi	r9,r9,16
  80bea4:	5ac00404 	addi	r11,r11,16
  80bea8:	52800404 	addi	r10,r10,16
  80beac:	413ff71e 	bne	r8,r4,80be8c <__alt_mem_onchip_mem+0xff803e8c>
  80beb0:	63000044 	addi	r12,r12,1
  80beb4:	6018913a 	slli	r12,r12,4
  80beb8:	39c003cc 	andi	r7,r7,15
  80bebc:	010000c4 	movi	r4,3
  80bec0:	1b07883a 	add	r3,r3,r12
  80bec4:	21c00e2e 	bgeu	r4,r7,80bf00 <memset+0x100>
  80bec8:	1813883a 	mov	r9,r3
  80becc:	3811883a 	mov	r8,r7
  80bed0:	010000c4 	movi	r4,3
  80bed4:	49800015 	stw	r6,0(r9)
  80bed8:	423fff04 	addi	r8,r8,-4
  80bedc:	4a400104 	addi	r9,r9,4
  80bee0:	223ffc36 	bltu	r4,r8,80bed4 <__alt_mem_onchip_mem+0xff803ed4>
  80bee4:	393fff04 	addi	r4,r7,-4
  80bee8:	2008d0ba 	srli	r4,r4,2
  80beec:	39c000cc 	andi	r7,r7,3
  80bef0:	21000044 	addi	r4,r4,1
  80bef4:	2109883a 	add	r4,r4,r4
  80bef8:	2109883a 	add	r4,r4,r4
  80befc:	1907883a 	add	r3,r3,r4
  80bf00:	38000526 	beq	r7,zero,80bf18 <memset+0x118>
  80bf04:	19cf883a 	add	r7,r3,r7
  80bf08:	19400005 	stb	r5,0(r3)
  80bf0c:	18c00044 	addi	r3,r3,1
  80bf10:	38fffd1e 	bne	r7,r3,80bf08 <__alt_mem_onchip_mem+0xff803f08>
  80bf14:	f800283a 	ret
  80bf18:	f800283a 	ret
  80bf1c:	2007883a 	mov	r3,r4
  80bf20:	300f883a 	mov	r7,r6
  80bf24:	003fc706 	br	80be44 <__alt_mem_onchip_mem+0xff803e44>

0080bf28 <_Balloc>:
  80bf28:	20801317 	ldw	r2,76(r4)
  80bf2c:	defffc04 	addi	sp,sp,-16
  80bf30:	dc400115 	stw	r17,4(sp)
  80bf34:	dc000015 	stw	r16,0(sp)
  80bf38:	dfc00315 	stw	ra,12(sp)
  80bf3c:	dc800215 	stw	r18,8(sp)
  80bf40:	2023883a 	mov	r17,r4
  80bf44:	2821883a 	mov	r16,r5
  80bf48:	10000f26 	beq	r2,zero,80bf88 <_Balloc+0x60>
  80bf4c:	8407883a 	add	r3,r16,r16
  80bf50:	18c7883a 	add	r3,r3,r3
  80bf54:	10c7883a 	add	r3,r2,r3
  80bf58:	18800017 	ldw	r2,0(r3)
  80bf5c:	10001126 	beq	r2,zero,80bfa4 <_Balloc+0x7c>
  80bf60:	11000017 	ldw	r4,0(r2)
  80bf64:	19000015 	stw	r4,0(r3)
  80bf68:	10000415 	stw	zero,16(r2)
  80bf6c:	10000315 	stw	zero,12(r2)
  80bf70:	dfc00317 	ldw	ra,12(sp)
  80bf74:	dc800217 	ldw	r18,8(sp)
  80bf78:	dc400117 	ldw	r17,4(sp)
  80bf7c:	dc000017 	ldw	r16,0(sp)
  80bf80:	dec00404 	addi	sp,sp,16
  80bf84:	f800283a 	ret
  80bf88:	01800844 	movi	r6,33
  80bf8c:	01400104 	movi	r5,4
  80bf90:	080ee640 	call	80ee64 <_calloc_r>
  80bf94:	88801315 	stw	r2,76(r17)
  80bf98:	103fec1e 	bne	r2,zero,80bf4c <__alt_mem_onchip_mem+0xff803f4c>
  80bf9c:	0005883a 	mov	r2,zero
  80bfa0:	003ff306 	br	80bf70 <__alt_mem_onchip_mem+0xff803f70>
  80bfa4:	01400044 	movi	r5,1
  80bfa8:	2c24983a 	sll	r18,r5,r16
  80bfac:	8809883a 	mov	r4,r17
  80bfb0:	91800144 	addi	r6,r18,5
  80bfb4:	318d883a 	add	r6,r6,r6
  80bfb8:	318d883a 	add	r6,r6,r6
  80bfbc:	080ee640 	call	80ee64 <_calloc_r>
  80bfc0:	103ff626 	beq	r2,zero,80bf9c <__alt_mem_onchip_mem+0xff803f9c>
  80bfc4:	14000115 	stw	r16,4(r2)
  80bfc8:	14800215 	stw	r18,8(r2)
  80bfcc:	003fe606 	br	80bf68 <__alt_mem_onchip_mem+0xff803f68>

0080bfd0 <_Bfree>:
  80bfd0:	28000826 	beq	r5,zero,80bff4 <_Bfree+0x24>
  80bfd4:	28c00117 	ldw	r3,4(r5)
  80bfd8:	20801317 	ldw	r2,76(r4)
  80bfdc:	18c7883a 	add	r3,r3,r3
  80bfe0:	18c7883a 	add	r3,r3,r3
  80bfe4:	10c5883a 	add	r2,r2,r3
  80bfe8:	10c00017 	ldw	r3,0(r2)
  80bfec:	28c00015 	stw	r3,0(r5)
  80bff0:	11400015 	stw	r5,0(r2)
  80bff4:	f800283a 	ret

0080bff8 <__multadd>:
  80bff8:	defffa04 	addi	sp,sp,-24
  80bffc:	dc800315 	stw	r18,12(sp)
  80c000:	dc400215 	stw	r17,8(sp)
  80c004:	dc000115 	stw	r16,4(sp)
  80c008:	2823883a 	mov	r17,r5
  80c00c:	2c000417 	ldw	r16,16(r5)
  80c010:	dfc00515 	stw	ra,20(sp)
  80c014:	dcc00415 	stw	r19,16(sp)
  80c018:	2025883a 	mov	r18,r4
  80c01c:	29400504 	addi	r5,r5,20
  80c020:	0011883a 	mov	r8,zero
  80c024:	28c00017 	ldw	r3,0(r5)
  80c028:	29400104 	addi	r5,r5,4
  80c02c:	42000044 	addi	r8,r8,1
  80c030:	18bfffcc 	andi	r2,r3,65535
  80c034:	1185383a 	mul	r2,r2,r6
  80c038:	1806d43a 	srli	r3,r3,16
  80c03c:	11cf883a 	add	r7,r2,r7
  80c040:	3808d43a 	srli	r4,r7,16
  80c044:	1987383a 	mul	r3,r3,r6
  80c048:	38bfffcc 	andi	r2,r7,65535
  80c04c:	1907883a 	add	r3,r3,r4
  80c050:	1808943a 	slli	r4,r3,16
  80c054:	180ed43a 	srli	r7,r3,16
  80c058:	2085883a 	add	r2,r4,r2
  80c05c:	28bfff15 	stw	r2,-4(r5)
  80c060:	443ff016 	blt	r8,r16,80c024 <__alt_mem_onchip_mem+0xff804024>
  80c064:	38000926 	beq	r7,zero,80c08c <__multadd+0x94>
  80c068:	88800217 	ldw	r2,8(r17)
  80c06c:	80800f0e 	bge	r16,r2,80c0ac <__multadd+0xb4>
  80c070:	80800144 	addi	r2,r16,5
  80c074:	1085883a 	add	r2,r2,r2
  80c078:	1085883a 	add	r2,r2,r2
  80c07c:	8885883a 	add	r2,r17,r2
  80c080:	11c00015 	stw	r7,0(r2)
  80c084:	84000044 	addi	r16,r16,1
  80c088:	8c000415 	stw	r16,16(r17)
  80c08c:	8805883a 	mov	r2,r17
  80c090:	dfc00517 	ldw	ra,20(sp)
  80c094:	dcc00417 	ldw	r19,16(sp)
  80c098:	dc800317 	ldw	r18,12(sp)
  80c09c:	dc400217 	ldw	r17,8(sp)
  80c0a0:	dc000117 	ldw	r16,4(sp)
  80c0a4:	dec00604 	addi	sp,sp,24
  80c0a8:	f800283a 	ret
  80c0ac:	89400117 	ldw	r5,4(r17)
  80c0b0:	9009883a 	mov	r4,r18
  80c0b4:	d9c00015 	stw	r7,0(sp)
  80c0b8:	29400044 	addi	r5,r5,1
  80c0bc:	080bf280 	call	80bf28 <_Balloc>
  80c0c0:	89800417 	ldw	r6,16(r17)
  80c0c4:	89400304 	addi	r5,r17,12
  80c0c8:	11000304 	addi	r4,r2,12
  80c0cc:	31800084 	addi	r6,r6,2
  80c0d0:	318d883a 	add	r6,r6,r6
  80c0d4:	318d883a 	add	r6,r6,r6
  80c0d8:	1027883a 	mov	r19,r2
  80c0dc:	080bb5c0 	call	80bb5c <memcpy>
  80c0e0:	d9c00017 	ldw	r7,0(sp)
  80c0e4:	88000a26 	beq	r17,zero,80c110 <__multadd+0x118>
  80c0e8:	88c00117 	ldw	r3,4(r17)
  80c0ec:	90801317 	ldw	r2,76(r18)
  80c0f0:	18c7883a 	add	r3,r3,r3
  80c0f4:	18c7883a 	add	r3,r3,r3
  80c0f8:	10c5883a 	add	r2,r2,r3
  80c0fc:	10c00017 	ldw	r3,0(r2)
  80c100:	88c00015 	stw	r3,0(r17)
  80c104:	14400015 	stw	r17,0(r2)
  80c108:	9823883a 	mov	r17,r19
  80c10c:	003fd806 	br	80c070 <__alt_mem_onchip_mem+0xff804070>
  80c110:	9823883a 	mov	r17,r19
  80c114:	003fd606 	br	80c070 <__alt_mem_onchip_mem+0xff804070>

0080c118 <__s2b>:
  80c118:	defff904 	addi	sp,sp,-28
  80c11c:	dc400115 	stw	r17,4(sp)
  80c120:	dc000015 	stw	r16,0(sp)
  80c124:	2023883a 	mov	r17,r4
  80c128:	2821883a 	mov	r16,r5
  80c12c:	39000204 	addi	r4,r7,8
  80c130:	01400244 	movi	r5,9
  80c134:	dcc00315 	stw	r19,12(sp)
  80c138:	dc800215 	stw	r18,8(sp)
  80c13c:	dfc00615 	stw	ra,24(sp)
  80c140:	dd400515 	stw	r21,20(sp)
  80c144:	dd000415 	stw	r20,16(sp)
  80c148:	3825883a 	mov	r18,r7
  80c14c:	3027883a 	mov	r19,r6
  80c150:	08101940 	call	810194 <__divsi3>
  80c154:	00c00044 	movi	r3,1
  80c158:	000b883a 	mov	r5,zero
  80c15c:	1880030e 	bge	r3,r2,80c16c <__s2b+0x54>
  80c160:	18c7883a 	add	r3,r3,r3
  80c164:	29400044 	addi	r5,r5,1
  80c168:	18bffd16 	blt	r3,r2,80c160 <__alt_mem_onchip_mem+0xff804160>
  80c16c:	8809883a 	mov	r4,r17
  80c170:	080bf280 	call	80bf28 <_Balloc>
  80c174:	d8c00717 	ldw	r3,28(sp)
  80c178:	10c00515 	stw	r3,20(r2)
  80c17c:	00c00044 	movi	r3,1
  80c180:	10c00415 	stw	r3,16(r2)
  80c184:	00c00244 	movi	r3,9
  80c188:	1cc0210e 	bge	r3,r19,80c210 <__s2b+0xf8>
  80c18c:	80eb883a 	add	r21,r16,r3
  80c190:	a829883a 	mov	r20,r21
  80c194:	84e1883a 	add	r16,r16,r19
  80c198:	a1c00007 	ldb	r7,0(r20)
  80c19c:	01800284 	movi	r6,10
  80c1a0:	a5000044 	addi	r20,r20,1
  80c1a4:	100b883a 	mov	r5,r2
  80c1a8:	39fff404 	addi	r7,r7,-48
  80c1ac:	8809883a 	mov	r4,r17
  80c1b0:	080bff80 	call	80bff8 <__multadd>
  80c1b4:	a43ff81e 	bne	r20,r16,80c198 <__alt_mem_onchip_mem+0xff804198>
  80c1b8:	ace1883a 	add	r16,r21,r19
  80c1bc:	843ffe04 	addi	r16,r16,-8
  80c1c0:	9c800a0e 	bge	r19,r18,80c1ec <__s2b+0xd4>
  80c1c4:	94e5c83a 	sub	r18,r18,r19
  80c1c8:	84a5883a 	add	r18,r16,r18
  80c1cc:	81c00007 	ldb	r7,0(r16)
  80c1d0:	01800284 	movi	r6,10
  80c1d4:	84000044 	addi	r16,r16,1
  80c1d8:	100b883a 	mov	r5,r2
  80c1dc:	39fff404 	addi	r7,r7,-48
  80c1e0:	8809883a 	mov	r4,r17
  80c1e4:	080bff80 	call	80bff8 <__multadd>
  80c1e8:	84bff81e 	bne	r16,r18,80c1cc <__alt_mem_onchip_mem+0xff8041cc>
  80c1ec:	dfc00617 	ldw	ra,24(sp)
  80c1f0:	dd400517 	ldw	r21,20(sp)
  80c1f4:	dd000417 	ldw	r20,16(sp)
  80c1f8:	dcc00317 	ldw	r19,12(sp)
  80c1fc:	dc800217 	ldw	r18,8(sp)
  80c200:	dc400117 	ldw	r17,4(sp)
  80c204:	dc000017 	ldw	r16,0(sp)
  80c208:	dec00704 	addi	sp,sp,28
  80c20c:	f800283a 	ret
  80c210:	84000284 	addi	r16,r16,10
  80c214:	1827883a 	mov	r19,r3
  80c218:	003fe906 	br	80c1c0 <__alt_mem_onchip_mem+0xff8041c0>

0080c21c <__hi0bits>:
  80c21c:	20bfffec 	andhi	r2,r4,65535
  80c220:	1000141e 	bne	r2,zero,80c274 <__hi0bits+0x58>
  80c224:	2008943a 	slli	r4,r4,16
  80c228:	00800404 	movi	r2,16
  80c22c:	20ffc02c 	andhi	r3,r4,65280
  80c230:	1800021e 	bne	r3,zero,80c23c <__hi0bits+0x20>
  80c234:	2008923a 	slli	r4,r4,8
  80c238:	10800204 	addi	r2,r2,8
  80c23c:	20fc002c 	andhi	r3,r4,61440
  80c240:	1800021e 	bne	r3,zero,80c24c <__hi0bits+0x30>
  80c244:	2008913a 	slli	r4,r4,4
  80c248:	10800104 	addi	r2,r2,4
  80c24c:	20f0002c 	andhi	r3,r4,49152
  80c250:	1800031e 	bne	r3,zero,80c260 <__hi0bits+0x44>
  80c254:	2109883a 	add	r4,r4,r4
  80c258:	10800084 	addi	r2,r2,2
  80c25c:	2109883a 	add	r4,r4,r4
  80c260:	20000316 	blt	r4,zero,80c270 <__hi0bits+0x54>
  80c264:	2110002c 	andhi	r4,r4,16384
  80c268:	2000041e 	bne	r4,zero,80c27c <__hi0bits+0x60>
  80c26c:	00800804 	movi	r2,32
  80c270:	f800283a 	ret
  80c274:	0005883a 	mov	r2,zero
  80c278:	003fec06 	br	80c22c <__alt_mem_onchip_mem+0xff80422c>
  80c27c:	10800044 	addi	r2,r2,1
  80c280:	f800283a 	ret

0080c284 <__lo0bits>:
  80c284:	20c00017 	ldw	r3,0(r4)
  80c288:	188001cc 	andi	r2,r3,7
  80c28c:	10000826 	beq	r2,zero,80c2b0 <__lo0bits+0x2c>
  80c290:	1880004c 	andi	r2,r3,1
  80c294:	1000211e 	bne	r2,zero,80c31c <__lo0bits+0x98>
  80c298:	1880008c 	andi	r2,r3,2
  80c29c:	1000211e 	bne	r2,zero,80c324 <__lo0bits+0xa0>
  80c2a0:	1806d0ba 	srli	r3,r3,2
  80c2a4:	00800084 	movi	r2,2
  80c2a8:	20c00015 	stw	r3,0(r4)
  80c2ac:	f800283a 	ret
  80c2b0:	18bfffcc 	andi	r2,r3,65535
  80c2b4:	10001326 	beq	r2,zero,80c304 <__lo0bits+0x80>
  80c2b8:	0005883a 	mov	r2,zero
  80c2bc:	19403fcc 	andi	r5,r3,255
  80c2c0:	2800021e 	bne	r5,zero,80c2cc <__lo0bits+0x48>
  80c2c4:	1806d23a 	srli	r3,r3,8
  80c2c8:	10800204 	addi	r2,r2,8
  80c2cc:	194003cc 	andi	r5,r3,15
  80c2d0:	2800021e 	bne	r5,zero,80c2dc <__lo0bits+0x58>
  80c2d4:	1806d13a 	srli	r3,r3,4
  80c2d8:	10800104 	addi	r2,r2,4
  80c2dc:	194000cc 	andi	r5,r3,3
  80c2e0:	2800021e 	bne	r5,zero,80c2ec <__lo0bits+0x68>
  80c2e4:	1806d0ba 	srli	r3,r3,2
  80c2e8:	10800084 	addi	r2,r2,2
  80c2ec:	1940004c 	andi	r5,r3,1
  80c2f0:	2800081e 	bne	r5,zero,80c314 <__lo0bits+0x90>
  80c2f4:	1806d07a 	srli	r3,r3,1
  80c2f8:	1800051e 	bne	r3,zero,80c310 <__lo0bits+0x8c>
  80c2fc:	00800804 	movi	r2,32
  80c300:	f800283a 	ret
  80c304:	1806d43a 	srli	r3,r3,16
  80c308:	00800404 	movi	r2,16
  80c30c:	003feb06 	br	80c2bc <__alt_mem_onchip_mem+0xff8042bc>
  80c310:	10800044 	addi	r2,r2,1
  80c314:	20c00015 	stw	r3,0(r4)
  80c318:	f800283a 	ret
  80c31c:	0005883a 	mov	r2,zero
  80c320:	f800283a 	ret
  80c324:	1806d07a 	srli	r3,r3,1
  80c328:	00800044 	movi	r2,1
  80c32c:	20c00015 	stw	r3,0(r4)
  80c330:	f800283a 	ret

0080c334 <__i2b>:
  80c334:	defffd04 	addi	sp,sp,-12
  80c338:	dc000015 	stw	r16,0(sp)
  80c33c:	04000044 	movi	r16,1
  80c340:	dc400115 	stw	r17,4(sp)
  80c344:	2823883a 	mov	r17,r5
  80c348:	800b883a 	mov	r5,r16
  80c34c:	dfc00215 	stw	ra,8(sp)
  80c350:	080bf280 	call	80bf28 <_Balloc>
  80c354:	14400515 	stw	r17,20(r2)
  80c358:	14000415 	stw	r16,16(r2)
  80c35c:	dfc00217 	ldw	ra,8(sp)
  80c360:	dc400117 	ldw	r17,4(sp)
  80c364:	dc000017 	ldw	r16,0(sp)
  80c368:	dec00304 	addi	sp,sp,12
  80c36c:	f800283a 	ret

0080c370 <__multiply>:
  80c370:	defffa04 	addi	sp,sp,-24
  80c374:	dcc00315 	stw	r19,12(sp)
  80c378:	dc800215 	stw	r18,8(sp)
  80c37c:	34c00417 	ldw	r19,16(r6)
  80c380:	2c800417 	ldw	r18,16(r5)
  80c384:	dd000415 	stw	r20,16(sp)
  80c388:	dc400115 	stw	r17,4(sp)
  80c38c:	dfc00515 	stw	ra,20(sp)
  80c390:	dc000015 	stw	r16,0(sp)
  80c394:	2829883a 	mov	r20,r5
  80c398:	3023883a 	mov	r17,r6
  80c39c:	94c0050e 	bge	r18,r19,80c3b4 <__multiply+0x44>
  80c3a0:	9007883a 	mov	r3,r18
  80c3a4:	3029883a 	mov	r20,r6
  80c3a8:	9825883a 	mov	r18,r19
  80c3ac:	2823883a 	mov	r17,r5
  80c3b0:	1827883a 	mov	r19,r3
  80c3b4:	a0800217 	ldw	r2,8(r20)
  80c3b8:	94e1883a 	add	r16,r18,r19
  80c3bc:	a1400117 	ldw	r5,4(r20)
  80c3c0:	1400010e 	bge	r2,r16,80c3c8 <__multiply+0x58>
  80c3c4:	29400044 	addi	r5,r5,1
  80c3c8:	080bf280 	call	80bf28 <_Balloc>
  80c3cc:	8415883a 	add	r10,r16,r16
  80c3d0:	12c00504 	addi	r11,r2,20
  80c3d4:	5295883a 	add	r10,r10,r10
  80c3d8:	5a95883a 	add	r10,r11,r10
  80c3dc:	5807883a 	mov	r3,r11
  80c3e0:	5a80032e 	bgeu	r11,r10,80c3f0 <__multiply+0x80>
  80c3e4:	18000015 	stw	zero,0(r3)
  80c3e8:	18c00104 	addi	r3,r3,4
  80c3ec:	1abffd36 	bltu	r3,r10,80c3e4 <__alt_mem_onchip_mem+0xff8043e4>
  80c3f0:	9ce7883a 	add	r19,r19,r19
  80c3f4:	94a5883a 	add	r18,r18,r18
  80c3f8:	89800504 	addi	r6,r17,20
  80c3fc:	9ce7883a 	add	r19,r19,r19
  80c400:	a3400504 	addi	r13,r20,20
  80c404:	94a5883a 	add	r18,r18,r18
  80c408:	34d9883a 	add	r12,r6,r19
  80c40c:	6c93883a 	add	r9,r13,r18
  80c410:	3300422e 	bgeu	r6,r12,80c51c <__multiply+0x1ac>
  80c414:	37c00017 	ldw	ra,0(r6)
  80c418:	fbffffcc 	andi	r15,ra,65535
  80c41c:	78001b26 	beq	r15,zero,80c48c <__multiply+0x11c>
  80c420:	5811883a 	mov	r8,r11
  80c424:	681d883a 	mov	r14,r13
  80c428:	000f883a 	mov	r7,zero
  80c42c:	71000017 	ldw	r4,0(r14)
  80c430:	40c00017 	ldw	r3,0(r8)
  80c434:	73800104 	addi	r14,r14,4
  80c438:	217fffcc 	andi	r5,r4,65535
  80c43c:	2bcb383a 	mul	r5,r5,r15
  80c440:	2008d43a 	srli	r4,r4,16
  80c444:	1c7fffcc 	andi	r17,r3,65535
  80c448:	2c4b883a 	add	r5,r5,r17
  80c44c:	29cb883a 	add	r5,r5,r7
  80c450:	23c9383a 	mul	r4,r4,r15
  80c454:	1806d43a 	srli	r3,r3,16
  80c458:	280ed43a 	srli	r7,r5,16
  80c45c:	297fffcc 	andi	r5,r5,65535
  80c460:	20c7883a 	add	r3,r4,r3
  80c464:	19c7883a 	add	r3,r3,r7
  80c468:	1808943a 	slli	r4,r3,16
  80c46c:	4023883a 	mov	r17,r8
  80c470:	180ed43a 	srli	r7,r3,16
  80c474:	214ab03a 	or	r5,r4,r5
  80c478:	41400015 	stw	r5,0(r8)
  80c47c:	42000104 	addi	r8,r8,4
  80c480:	727fea36 	bltu	r14,r9,80c42c <__alt_mem_onchip_mem+0xff80442c>
  80c484:	89c00115 	stw	r7,4(r17)
  80c488:	37c00017 	ldw	ra,0(r6)
  80c48c:	f83ed43a 	srli	ra,ra,16
  80c490:	f8001f26 	beq	ra,zero,80c510 <__multiply+0x1a0>
  80c494:	58c00017 	ldw	r3,0(r11)
  80c498:	681d883a 	mov	r14,r13
  80c49c:	581f883a 	mov	r15,r11
  80c4a0:	1811883a 	mov	r8,r3
  80c4a4:	5825883a 	mov	r18,r11
  80c4a8:	000f883a 	mov	r7,zero
  80c4ac:	00000106 	br	80c4b4 <__multiply+0x144>
  80c4b0:	8825883a 	mov	r18,r17
  80c4b4:	7140000b 	ldhu	r5,0(r14)
  80c4b8:	4010d43a 	srli	r8,r8,16
  80c4bc:	193fffcc 	andi	r4,r3,65535
  80c4c0:	2fcb383a 	mul	r5,r5,ra
  80c4c4:	7bc00104 	addi	r15,r15,4
  80c4c8:	73800104 	addi	r14,r14,4
  80c4cc:	2a0b883a 	add	r5,r5,r8
  80c4d0:	29cb883a 	add	r5,r5,r7
  80c4d4:	2806943a 	slli	r3,r5,16
  80c4d8:	94400104 	addi	r17,r18,4
  80c4dc:	280ad43a 	srli	r5,r5,16
  80c4e0:	1908b03a 	or	r4,r3,r4
  80c4e4:	793fff15 	stw	r4,-4(r15)
  80c4e8:	70ffff17 	ldw	r3,-4(r14)
  80c4ec:	8a000017 	ldw	r8,0(r17)
  80c4f0:	1806d43a 	srli	r3,r3,16
  80c4f4:	413fffcc 	andi	r4,r8,65535
  80c4f8:	1fc7383a 	mul	r3,r3,ra
  80c4fc:	1907883a 	add	r3,r3,r4
  80c500:	1947883a 	add	r3,r3,r5
  80c504:	180ed43a 	srli	r7,r3,16
  80c508:	727fe936 	bltu	r14,r9,80c4b0 <__alt_mem_onchip_mem+0xff8044b0>
  80c50c:	90c00115 	stw	r3,4(r18)
  80c510:	31800104 	addi	r6,r6,4
  80c514:	5ac00104 	addi	r11,r11,4
  80c518:	333fbe36 	bltu	r6,r12,80c414 <__alt_mem_onchip_mem+0xff804414>
  80c51c:	0400090e 	bge	zero,r16,80c544 <__multiply+0x1d4>
  80c520:	50ffff17 	ldw	r3,-4(r10)
  80c524:	52bfff04 	addi	r10,r10,-4
  80c528:	18000326 	beq	r3,zero,80c538 <__multiply+0x1c8>
  80c52c:	00000506 	br	80c544 <__multiply+0x1d4>
  80c530:	50c00017 	ldw	r3,0(r10)
  80c534:	1800031e 	bne	r3,zero,80c544 <__multiply+0x1d4>
  80c538:	843fffc4 	addi	r16,r16,-1
  80c53c:	52bfff04 	addi	r10,r10,-4
  80c540:	803ffb1e 	bne	r16,zero,80c530 <__alt_mem_onchip_mem+0xff804530>
  80c544:	14000415 	stw	r16,16(r2)
  80c548:	dfc00517 	ldw	ra,20(sp)
  80c54c:	dd000417 	ldw	r20,16(sp)
  80c550:	dcc00317 	ldw	r19,12(sp)
  80c554:	dc800217 	ldw	r18,8(sp)
  80c558:	dc400117 	ldw	r17,4(sp)
  80c55c:	dc000017 	ldw	r16,0(sp)
  80c560:	dec00604 	addi	sp,sp,24
  80c564:	f800283a 	ret

0080c568 <__pow5mult>:
  80c568:	defffa04 	addi	sp,sp,-24
  80c56c:	dcc00315 	stw	r19,12(sp)
  80c570:	dc000015 	stw	r16,0(sp)
  80c574:	dfc00515 	stw	ra,20(sp)
  80c578:	dd000415 	stw	r20,16(sp)
  80c57c:	dc800215 	stw	r18,8(sp)
  80c580:	dc400115 	stw	r17,4(sp)
  80c584:	308000cc 	andi	r2,r6,3
  80c588:	3021883a 	mov	r16,r6
  80c58c:	2027883a 	mov	r19,r4
  80c590:	10002f1e 	bne	r2,zero,80c650 <__pow5mult+0xe8>
  80c594:	2825883a 	mov	r18,r5
  80c598:	8021d0ba 	srai	r16,r16,2
  80c59c:	80001a26 	beq	r16,zero,80c608 <__pow5mult+0xa0>
  80c5a0:	9c401217 	ldw	r17,72(r19)
  80c5a4:	8800061e 	bne	r17,zero,80c5c0 <__pow5mult+0x58>
  80c5a8:	00003406 	br	80c67c <__pow5mult+0x114>
  80c5ac:	8021d07a 	srai	r16,r16,1
  80c5b0:	80001526 	beq	r16,zero,80c608 <__pow5mult+0xa0>
  80c5b4:	88800017 	ldw	r2,0(r17)
  80c5b8:	10001c26 	beq	r2,zero,80c62c <__pow5mult+0xc4>
  80c5bc:	1023883a 	mov	r17,r2
  80c5c0:	8080004c 	andi	r2,r16,1
  80c5c4:	103ff926 	beq	r2,zero,80c5ac <__alt_mem_onchip_mem+0xff8045ac>
  80c5c8:	880d883a 	mov	r6,r17
  80c5cc:	900b883a 	mov	r5,r18
  80c5d0:	9809883a 	mov	r4,r19
  80c5d4:	080c3700 	call	80c370 <__multiply>
  80c5d8:	90001b26 	beq	r18,zero,80c648 <__pow5mult+0xe0>
  80c5dc:	91000117 	ldw	r4,4(r18)
  80c5e0:	98c01317 	ldw	r3,76(r19)
  80c5e4:	8021d07a 	srai	r16,r16,1
  80c5e8:	2109883a 	add	r4,r4,r4
  80c5ec:	2109883a 	add	r4,r4,r4
  80c5f0:	1907883a 	add	r3,r3,r4
  80c5f4:	19000017 	ldw	r4,0(r3)
  80c5f8:	91000015 	stw	r4,0(r18)
  80c5fc:	1c800015 	stw	r18,0(r3)
  80c600:	1025883a 	mov	r18,r2
  80c604:	803feb1e 	bne	r16,zero,80c5b4 <__alt_mem_onchip_mem+0xff8045b4>
  80c608:	9005883a 	mov	r2,r18
  80c60c:	dfc00517 	ldw	ra,20(sp)
  80c610:	dd000417 	ldw	r20,16(sp)
  80c614:	dcc00317 	ldw	r19,12(sp)
  80c618:	dc800217 	ldw	r18,8(sp)
  80c61c:	dc400117 	ldw	r17,4(sp)
  80c620:	dc000017 	ldw	r16,0(sp)
  80c624:	dec00604 	addi	sp,sp,24
  80c628:	f800283a 	ret
  80c62c:	880d883a 	mov	r6,r17
  80c630:	880b883a 	mov	r5,r17
  80c634:	9809883a 	mov	r4,r19
  80c638:	080c3700 	call	80c370 <__multiply>
  80c63c:	88800015 	stw	r2,0(r17)
  80c640:	10000015 	stw	zero,0(r2)
  80c644:	003fdd06 	br	80c5bc <__alt_mem_onchip_mem+0xff8045bc>
  80c648:	1025883a 	mov	r18,r2
  80c64c:	003fd706 	br	80c5ac <__alt_mem_onchip_mem+0xff8045ac>
  80c650:	10bfffc4 	addi	r2,r2,-1
  80c654:	1085883a 	add	r2,r2,r2
  80c658:	00c02074 	movhi	r3,129
  80c65c:	18d49504 	addi	r3,r3,21076
  80c660:	1085883a 	add	r2,r2,r2
  80c664:	1885883a 	add	r2,r3,r2
  80c668:	11800017 	ldw	r6,0(r2)
  80c66c:	000f883a 	mov	r7,zero
  80c670:	080bff80 	call	80bff8 <__multadd>
  80c674:	1025883a 	mov	r18,r2
  80c678:	003fc706 	br	80c598 <__alt_mem_onchip_mem+0xff804598>
  80c67c:	05000044 	movi	r20,1
  80c680:	a00b883a 	mov	r5,r20
  80c684:	9809883a 	mov	r4,r19
  80c688:	080bf280 	call	80bf28 <_Balloc>
  80c68c:	1023883a 	mov	r17,r2
  80c690:	00809c44 	movi	r2,625
  80c694:	88800515 	stw	r2,20(r17)
  80c698:	8d000415 	stw	r20,16(r17)
  80c69c:	9c401215 	stw	r17,72(r19)
  80c6a0:	88000015 	stw	zero,0(r17)
  80c6a4:	003fc606 	br	80c5c0 <__alt_mem_onchip_mem+0xff8045c0>

0080c6a8 <__lshift>:
  80c6a8:	defff904 	addi	sp,sp,-28
  80c6ac:	dd400515 	stw	r21,20(sp)
  80c6b0:	dcc00315 	stw	r19,12(sp)
  80c6b4:	302bd17a 	srai	r21,r6,5
  80c6b8:	2cc00417 	ldw	r19,16(r5)
  80c6bc:	28800217 	ldw	r2,8(r5)
  80c6c0:	dd000415 	stw	r20,16(sp)
  80c6c4:	ace7883a 	add	r19,r21,r19
  80c6c8:	dc800215 	stw	r18,8(sp)
  80c6cc:	dc400115 	stw	r17,4(sp)
  80c6d0:	dc000015 	stw	r16,0(sp)
  80c6d4:	dfc00615 	stw	ra,24(sp)
  80c6d8:	9c000044 	addi	r16,r19,1
  80c6dc:	2823883a 	mov	r17,r5
  80c6e0:	3029883a 	mov	r20,r6
  80c6e4:	2025883a 	mov	r18,r4
  80c6e8:	29400117 	ldw	r5,4(r5)
  80c6ec:	1400030e 	bge	r2,r16,80c6fc <__lshift+0x54>
  80c6f0:	1085883a 	add	r2,r2,r2
  80c6f4:	29400044 	addi	r5,r5,1
  80c6f8:	143ffd16 	blt	r2,r16,80c6f0 <__alt_mem_onchip_mem+0xff8046f0>
  80c6fc:	9009883a 	mov	r4,r18
  80c700:	080bf280 	call	80bf28 <_Balloc>
  80c704:	10c00504 	addi	r3,r2,20
  80c708:	0540070e 	bge	zero,r21,80c728 <__lshift+0x80>
  80c70c:	ad6b883a 	add	r21,r21,r21
  80c710:	ad6b883a 	add	r21,r21,r21
  80c714:	1809883a 	mov	r4,r3
  80c718:	1d47883a 	add	r3,r3,r21
  80c71c:	20000015 	stw	zero,0(r4)
  80c720:	21000104 	addi	r4,r4,4
  80c724:	193ffd1e 	bne	r3,r4,80c71c <__alt_mem_onchip_mem+0xff80471c>
  80c728:	8a000417 	ldw	r8,16(r17)
  80c72c:	89000504 	addi	r4,r17,20
  80c730:	a18007cc 	andi	r6,r20,31
  80c734:	4211883a 	add	r8,r8,r8
  80c738:	4211883a 	add	r8,r8,r8
  80c73c:	2211883a 	add	r8,r4,r8
  80c740:	30002326 	beq	r6,zero,80c7d0 <__lshift+0x128>
  80c744:	02400804 	movi	r9,32
  80c748:	4993c83a 	sub	r9,r9,r6
  80c74c:	000b883a 	mov	r5,zero
  80c750:	21c00017 	ldw	r7,0(r4)
  80c754:	1815883a 	mov	r10,r3
  80c758:	18c00104 	addi	r3,r3,4
  80c75c:	398e983a 	sll	r7,r7,r6
  80c760:	21000104 	addi	r4,r4,4
  80c764:	394ab03a 	or	r5,r7,r5
  80c768:	197fff15 	stw	r5,-4(r3)
  80c76c:	217fff17 	ldw	r5,-4(r4)
  80c770:	2a4ad83a 	srl	r5,r5,r9
  80c774:	223ff636 	bltu	r4,r8,80c750 <__alt_mem_onchip_mem+0xff804750>
  80c778:	51400115 	stw	r5,4(r10)
  80c77c:	28001a1e 	bne	r5,zero,80c7e8 <__lshift+0x140>
  80c780:	843fffc4 	addi	r16,r16,-1
  80c784:	14000415 	stw	r16,16(r2)
  80c788:	88000826 	beq	r17,zero,80c7ac <__lshift+0x104>
  80c78c:	89000117 	ldw	r4,4(r17)
  80c790:	90c01317 	ldw	r3,76(r18)
  80c794:	2109883a 	add	r4,r4,r4
  80c798:	2109883a 	add	r4,r4,r4
  80c79c:	1907883a 	add	r3,r3,r4
  80c7a0:	19000017 	ldw	r4,0(r3)
  80c7a4:	89000015 	stw	r4,0(r17)
  80c7a8:	1c400015 	stw	r17,0(r3)
  80c7ac:	dfc00617 	ldw	ra,24(sp)
  80c7b0:	dd400517 	ldw	r21,20(sp)
  80c7b4:	dd000417 	ldw	r20,16(sp)
  80c7b8:	dcc00317 	ldw	r19,12(sp)
  80c7bc:	dc800217 	ldw	r18,8(sp)
  80c7c0:	dc400117 	ldw	r17,4(sp)
  80c7c4:	dc000017 	ldw	r16,0(sp)
  80c7c8:	dec00704 	addi	sp,sp,28
  80c7cc:	f800283a 	ret
  80c7d0:	21400017 	ldw	r5,0(r4)
  80c7d4:	18c00104 	addi	r3,r3,4
  80c7d8:	21000104 	addi	r4,r4,4
  80c7dc:	197fff15 	stw	r5,-4(r3)
  80c7e0:	223ffb36 	bltu	r4,r8,80c7d0 <__alt_mem_onchip_mem+0xff8047d0>
  80c7e4:	003fe606 	br	80c780 <__alt_mem_onchip_mem+0xff804780>
  80c7e8:	9c000084 	addi	r16,r19,2
  80c7ec:	003fe406 	br	80c780 <__alt_mem_onchip_mem+0xff804780>

0080c7f0 <__mcmp>:
  80c7f0:	20800417 	ldw	r2,16(r4)
  80c7f4:	28c00417 	ldw	r3,16(r5)
  80c7f8:	10c5c83a 	sub	r2,r2,r3
  80c7fc:	1000111e 	bne	r2,zero,80c844 <__mcmp+0x54>
  80c800:	18c7883a 	add	r3,r3,r3
  80c804:	18c7883a 	add	r3,r3,r3
  80c808:	21000504 	addi	r4,r4,20
  80c80c:	29400504 	addi	r5,r5,20
  80c810:	20c5883a 	add	r2,r4,r3
  80c814:	28cb883a 	add	r5,r5,r3
  80c818:	00000106 	br	80c820 <__mcmp+0x30>
  80c81c:	20800a2e 	bgeu	r4,r2,80c848 <__mcmp+0x58>
  80c820:	10bfff04 	addi	r2,r2,-4
  80c824:	297fff04 	addi	r5,r5,-4
  80c828:	11800017 	ldw	r6,0(r2)
  80c82c:	28c00017 	ldw	r3,0(r5)
  80c830:	30fffa26 	beq	r6,r3,80c81c <__alt_mem_onchip_mem+0xff80481c>
  80c834:	30c00236 	bltu	r6,r3,80c840 <__mcmp+0x50>
  80c838:	00800044 	movi	r2,1
  80c83c:	f800283a 	ret
  80c840:	00bfffc4 	movi	r2,-1
  80c844:	f800283a 	ret
  80c848:	0005883a 	mov	r2,zero
  80c84c:	f800283a 	ret

0080c850 <__mdiff>:
  80c850:	28c00417 	ldw	r3,16(r5)
  80c854:	30800417 	ldw	r2,16(r6)
  80c858:	defffa04 	addi	sp,sp,-24
  80c85c:	dcc00315 	stw	r19,12(sp)
  80c860:	dc800215 	stw	r18,8(sp)
  80c864:	dfc00515 	stw	ra,20(sp)
  80c868:	dd000415 	stw	r20,16(sp)
  80c86c:	dc400115 	stw	r17,4(sp)
  80c870:	dc000015 	stw	r16,0(sp)
  80c874:	1887c83a 	sub	r3,r3,r2
  80c878:	2825883a 	mov	r18,r5
  80c87c:	3027883a 	mov	r19,r6
  80c880:	1800141e 	bne	r3,zero,80c8d4 <__mdiff+0x84>
  80c884:	1085883a 	add	r2,r2,r2
  80c888:	1085883a 	add	r2,r2,r2
  80c88c:	2a000504 	addi	r8,r5,20
  80c890:	34000504 	addi	r16,r6,20
  80c894:	4087883a 	add	r3,r8,r2
  80c898:	8085883a 	add	r2,r16,r2
  80c89c:	00000106 	br	80c8a4 <__mdiff+0x54>
  80c8a0:	40c0592e 	bgeu	r8,r3,80ca08 <__mdiff+0x1b8>
  80c8a4:	18ffff04 	addi	r3,r3,-4
  80c8a8:	10bfff04 	addi	r2,r2,-4
  80c8ac:	19c00017 	ldw	r7,0(r3)
  80c8b0:	11400017 	ldw	r5,0(r2)
  80c8b4:	397ffa26 	beq	r7,r5,80c8a0 <__alt_mem_onchip_mem+0xff8048a0>
  80c8b8:	3940592e 	bgeu	r7,r5,80ca20 <__mdiff+0x1d0>
  80c8bc:	9005883a 	mov	r2,r18
  80c8c0:	4023883a 	mov	r17,r8
  80c8c4:	9825883a 	mov	r18,r19
  80c8c8:	05000044 	movi	r20,1
  80c8cc:	1027883a 	mov	r19,r2
  80c8d0:	00000406 	br	80c8e4 <__mdiff+0x94>
  80c8d4:	18005616 	blt	r3,zero,80ca30 <__mdiff+0x1e0>
  80c8d8:	34400504 	addi	r17,r6,20
  80c8dc:	2c000504 	addi	r16,r5,20
  80c8e0:	0029883a 	mov	r20,zero
  80c8e4:	91400117 	ldw	r5,4(r18)
  80c8e8:	080bf280 	call	80bf28 <_Balloc>
  80c8ec:	92400417 	ldw	r9,16(r18)
  80c8f0:	9b000417 	ldw	r12,16(r19)
  80c8f4:	12c00504 	addi	r11,r2,20
  80c8f8:	4a51883a 	add	r8,r9,r9
  80c8fc:	6319883a 	add	r12,r12,r12
  80c900:	4211883a 	add	r8,r8,r8
  80c904:	6319883a 	add	r12,r12,r12
  80c908:	15000315 	stw	r20,12(r2)
  80c90c:	8211883a 	add	r8,r16,r8
  80c910:	8b19883a 	add	r12,r17,r12
  80c914:	0007883a 	mov	r3,zero
  80c918:	81400017 	ldw	r5,0(r16)
  80c91c:	89c00017 	ldw	r7,0(r17)
  80c920:	59800104 	addi	r6,r11,4
  80c924:	293fffcc 	andi	r4,r5,65535
  80c928:	20c7883a 	add	r3,r4,r3
  80c92c:	393fffcc 	andi	r4,r7,65535
  80c930:	1909c83a 	sub	r4,r3,r4
  80c934:	280ad43a 	srli	r5,r5,16
  80c938:	380ed43a 	srli	r7,r7,16
  80c93c:	2007d43a 	srai	r3,r4,16
  80c940:	213fffcc 	andi	r4,r4,65535
  80c944:	29cbc83a 	sub	r5,r5,r7
  80c948:	28c7883a 	add	r3,r5,r3
  80c94c:	180a943a 	slli	r5,r3,16
  80c950:	8c400104 	addi	r17,r17,4
  80c954:	84000104 	addi	r16,r16,4
  80c958:	2908b03a 	or	r4,r5,r4
  80c95c:	59000015 	stw	r4,0(r11)
  80c960:	1807d43a 	srai	r3,r3,16
  80c964:	3015883a 	mov	r10,r6
  80c968:	3017883a 	mov	r11,r6
  80c96c:	8b3fea36 	bltu	r17,r12,80c918 <__alt_mem_onchip_mem+0xff804918>
  80c970:	8200162e 	bgeu	r16,r8,80c9cc <__mdiff+0x17c>
  80c974:	8017883a 	mov	r11,r16
  80c978:	59400017 	ldw	r5,0(r11)
  80c97c:	31800104 	addi	r6,r6,4
  80c980:	5ac00104 	addi	r11,r11,4
  80c984:	293fffcc 	andi	r4,r5,65535
  80c988:	20c7883a 	add	r3,r4,r3
  80c98c:	280ed43a 	srli	r7,r5,16
  80c990:	180bd43a 	srai	r5,r3,16
  80c994:	193fffcc 	andi	r4,r3,65535
  80c998:	3947883a 	add	r3,r7,r5
  80c99c:	180a943a 	slli	r5,r3,16
  80c9a0:	1807d43a 	srai	r3,r3,16
  80c9a4:	2908b03a 	or	r4,r5,r4
  80c9a8:	313fff15 	stw	r4,-4(r6)
  80c9ac:	5a3ff236 	bltu	r11,r8,80c978 <__alt_mem_onchip_mem+0xff804978>
  80c9b0:	0406303a 	nor	r3,zero,r16
  80c9b4:	1a07883a 	add	r3,r3,r8
  80c9b8:	1806d0ba 	srli	r3,r3,2
  80c9bc:	18c00044 	addi	r3,r3,1
  80c9c0:	18c7883a 	add	r3,r3,r3
  80c9c4:	18c7883a 	add	r3,r3,r3
  80c9c8:	50d5883a 	add	r10,r10,r3
  80c9cc:	50ffff04 	addi	r3,r10,-4
  80c9d0:	2000041e 	bne	r4,zero,80c9e4 <__mdiff+0x194>
  80c9d4:	18ffff04 	addi	r3,r3,-4
  80c9d8:	19000017 	ldw	r4,0(r3)
  80c9dc:	4a7fffc4 	addi	r9,r9,-1
  80c9e0:	203ffc26 	beq	r4,zero,80c9d4 <__alt_mem_onchip_mem+0xff8049d4>
  80c9e4:	12400415 	stw	r9,16(r2)
  80c9e8:	dfc00517 	ldw	ra,20(sp)
  80c9ec:	dd000417 	ldw	r20,16(sp)
  80c9f0:	dcc00317 	ldw	r19,12(sp)
  80c9f4:	dc800217 	ldw	r18,8(sp)
  80c9f8:	dc400117 	ldw	r17,4(sp)
  80c9fc:	dc000017 	ldw	r16,0(sp)
  80ca00:	dec00604 	addi	sp,sp,24
  80ca04:	f800283a 	ret
  80ca08:	000b883a 	mov	r5,zero
  80ca0c:	080bf280 	call	80bf28 <_Balloc>
  80ca10:	00c00044 	movi	r3,1
  80ca14:	10c00415 	stw	r3,16(r2)
  80ca18:	10000515 	stw	zero,20(r2)
  80ca1c:	003ff206 	br	80c9e8 <__alt_mem_onchip_mem+0xff8049e8>
  80ca20:	8023883a 	mov	r17,r16
  80ca24:	0029883a 	mov	r20,zero
  80ca28:	4021883a 	mov	r16,r8
  80ca2c:	003fad06 	br	80c8e4 <__alt_mem_onchip_mem+0xff8048e4>
  80ca30:	9005883a 	mov	r2,r18
  80ca34:	94400504 	addi	r17,r18,20
  80ca38:	9c000504 	addi	r16,r19,20
  80ca3c:	9825883a 	mov	r18,r19
  80ca40:	05000044 	movi	r20,1
  80ca44:	1027883a 	mov	r19,r2
  80ca48:	003fa606 	br	80c8e4 <__alt_mem_onchip_mem+0xff8048e4>

0080ca4c <__ulp>:
  80ca4c:	295ffc2c 	andhi	r5,r5,32752
  80ca50:	00bf3034 	movhi	r2,64704
  80ca54:	2887883a 	add	r3,r5,r2
  80ca58:	00c0020e 	bge	zero,r3,80ca64 <__ulp+0x18>
  80ca5c:	0005883a 	mov	r2,zero
  80ca60:	f800283a 	ret
  80ca64:	00c7c83a 	sub	r3,zero,r3
  80ca68:	1807d53a 	srai	r3,r3,20
  80ca6c:	008004c4 	movi	r2,19
  80ca70:	10c00b0e 	bge	r2,r3,80caa0 <__ulp+0x54>
  80ca74:	18bffb04 	addi	r2,r3,-20
  80ca78:	01000784 	movi	r4,30
  80ca7c:	0007883a 	mov	r3,zero
  80ca80:	20800516 	blt	r4,r2,80ca98 <__ulp+0x4c>
  80ca84:	010007c4 	movi	r4,31
  80ca88:	2089c83a 	sub	r4,r4,r2
  80ca8c:	00800044 	movi	r2,1
  80ca90:	1104983a 	sll	r2,r2,r4
  80ca94:	f800283a 	ret
  80ca98:	00800044 	movi	r2,1
  80ca9c:	f800283a 	ret
  80caa0:	01400234 	movhi	r5,8
  80caa4:	28c7d83a 	sra	r3,r5,r3
  80caa8:	0005883a 	mov	r2,zero
  80caac:	f800283a 	ret

0080cab0 <__b2d>:
  80cab0:	defffa04 	addi	sp,sp,-24
  80cab4:	dc000015 	stw	r16,0(sp)
  80cab8:	24000417 	ldw	r16,16(r4)
  80cabc:	dc400115 	stw	r17,4(sp)
  80cac0:	24400504 	addi	r17,r4,20
  80cac4:	8421883a 	add	r16,r16,r16
  80cac8:	8421883a 	add	r16,r16,r16
  80cacc:	8c21883a 	add	r16,r17,r16
  80cad0:	dc800215 	stw	r18,8(sp)
  80cad4:	84bfff17 	ldw	r18,-4(r16)
  80cad8:	dd000415 	stw	r20,16(sp)
  80cadc:	dcc00315 	stw	r19,12(sp)
  80cae0:	9009883a 	mov	r4,r18
  80cae4:	2829883a 	mov	r20,r5
  80cae8:	dfc00515 	stw	ra,20(sp)
  80caec:	080c21c0 	call	80c21c <__hi0bits>
  80caf0:	00c00804 	movi	r3,32
  80caf4:	1889c83a 	sub	r4,r3,r2
  80caf8:	a1000015 	stw	r4,0(r20)
  80cafc:	01000284 	movi	r4,10
  80cb00:	84ffff04 	addi	r19,r16,-4
  80cb04:	20801216 	blt	r4,r2,80cb50 <__b2d+0xa0>
  80cb08:	018002c4 	movi	r6,11
  80cb0c:	308dc83a 	sub	r6,r6,r2
  80cb10:	9186d83a 	srl	r3,r18,r6
  80cb14:	18cffc34 	orhi	r3,r3,16368
  80cb18:	8cc0212e 	bgeu	r17,r19,80cba0 <__b2d+0xf0>
  80cb1c:	813ffe17 	ldw	r4,-8(r16)
  80cb20:	218cd83a 	srl	r6,r4,r6
  80cb24:	10800544 	addi	r2,r2,21
  80cb28:	9084983a 	sll	r2,r18,r2
  80cb2c:	1184b03a 	or	r2,r2,r6
  80cb30:	dfc00517 	ldw	ra,20(sp)
  80cb34:	dd000417 	ldw	r20,16(sp)
  80cb38:	dcc00317 	ldw	r19,12(sp)
  80cb3c:	dc800217 	ldw	r18,8(sp)
  80cb40:	dc400117 	ldw	r17,4(sp)
  80cb44:	dc000017 	ldw	r16,0(sp)
  80cb48:	dec00604 	addi	sp,sp,24
  80cb4c:	f800283a 	ret
  80cb50:	8cc00f2e 	bgeu	r17,r19,80cb90 <__b2d+0xe0>
  80cb54:	117ffd44 	addi	r5,r2,-11
  80cb58:	80bffe17 	ldw	r2,-8(r16)
  80cb5c:	28000e26 	beq	r5,zero,80cb98 <__b2d+0xe8>
  80cb60:	1949c83a 	sub	r4,r3,r5
  80cb64:	9164983a 	sll	r18,r18,r5
  80cb68:	1106d83a 	srl	r3,r2,r4
  80cb6c:	81bffe04 	addi	r6,r16,-8
  80cb70:	948ffc34 	orhi	r18,r18,16368
  80cb74:	90c6b03a 	or	r3,r18,r3
  80cb78:	89800e2e 	bgeu	r17,r6,80cbb4 <__b2d+0x104>
  80cb7c:	81bffd17 	ldw	r6,-12(r16)
  80cb80:	1144983a 	sll	r2,r2,r5
  80cb84:	310ad83a 	srl	r5,r6,r4
  80cb88:	2884b03a 	or	r2,r5,r2
  80cb8c:	003fe806 	br	80cb30 <__alt_mem_onchip_mem+0xff804b30>
  80cb90:	10bffd44 	addi	r2,r2,-11
  80cb94:	1000041e 	bne	r2,zero,80cba8 <__b2d+0xf8>
  80cb98:	90cffc34 	orhi	r3,r18,16368
  80cb9c:	003fe406 	br	80cb30 <__alt_mem_onchip_mem+0xff804b30>
  80cba0:	000d883a 	mov	r6,zero
  80cba4:	003fdf06 	br	80cb24 <__alt_mem_onchip_mem+0xff804b24>
  80cba8:	90a4983a 	sll	r18,r18,r2
  80cbac:	0005883a 	mov	r2,zero
  80cbb0:	003ff906 	br	80cb98 <__alt_mem_onchip_mem+0xff804b98>
  80cbb4:	1144983a 	sll	r2,r2,r5
  80cbb8:	003fdd06 	br	80cb30 <__alt_mem_onchip_mem+0xff804b30>

0080cbbc <__d2b>:
  80cbbc:	defff804 	addi	sp,sp,-32
  80cbc0:	dc000215 	stw	r16,8(sp)
  80cbc4:	3021883a 	mov	r16,r6
  80cbc8:	dc400315 	stw	r17,12(sp)
  80cbcc:	8022907a 	slli	r17,r16,1
  80cbd0:	dd000615 	stw	r20,24(sp)
  80cbd4:	2829883a 	mov	r20,r5
  80cbd8:	01400044 	movi	r5,1
  80cbdc:	dcc00515 	stw	r19,20(sp)
  80cbe0:	dc800415 	stw	r18,16(sp)
  80cbe4:	dfc00715 	stw	ra,28(sp)
  80cbe8:	3825883a 	mov	r18,r7
  80cbec:	8822d57a 	srli	r17,r17,21
  80cbf0:	080bf280 	call	80bf28 <_Balloc>
  80cbf4:	1027883a 	mov	r19,r2
  80cbf8:	00800434 	movhi	r2,16
  80cbfc:	10bfffc4 	addi	r2,r2,-1
  80cc00:	808c703a 	and	r6,r16,r2
  80cc04:	88000126 	beq	r17,zero,80cc0c <__d2b+0x50>
  80cc08:	31800434 	orhi	r6,r6,16
  80cc0c:	d9800015 	stw	r6,0(sp)
  80cc10:	a0002426 	beq	r20,zero,80cca4 <__d2b+0xe8>
  80cc14:	d9000104 	addi	r4,sp,4
  80cc18:	dd000115 	stw	r20,4(sp)
  80cc1c:	080c2840 	call	80c284 <__lo0bits>
  80cc20:	d8c00017 	ldw	r3,0(sp)
  80cc24:	10002f1e 	bne	r2,zero,80cce4 <__d2b+0x128>
  80cc28:	d9000117 	ldw	r4,4(sp)
  80cc2c:	99000515 	stw	r4,20(r19)
  80cc30:	1821003a 	cmpeq	r16,r3,zero
  80cc34:	01000084 	movi	r4,2
  80cc38:	2421c83a 	sub	r16,r4,r16
  80cc3c:	98c00615 	stw	r3,24(r19)
  80cc40:	9c000415 	stw	r16,16(r19)
  80cc44:	88001f1e 	bne	r17,zero,80ccc4 <__d2b+0x108>
  80cc48:	10bef384 	addi	r2,r2,-1074
  80cc4c:	90800015 	stw	r2,0(r18)
  80cc50:	00900034 	movhi	r2,16384
  80cc54:	10bfffc4 	addi	r2,r2,-1
  80cc58:	8085883a 	add	r2,r16,r2
  80cc5c:	1085883a 	add	r2,r2,r2
  80cc60:	1085883a 	add	r2,r2,r2
  80cc64:	9885883a 	add	r2,r19,r2
  80cc68:	11000517 	ldw	r4,20(r2)
  80cc6c:	8020917a 	slli	r16,r16,5
  80cc70:	080c21c0 	call	80c21c <__hi0bits>
  80cc74:	d8c00817 	ldw	r3,32(sp)
  80cc78:	8085c83a 	sub	r2,r16,r2
  80cc7c:	18800015 	stw	r2,0(r3)
  80cc80:	9805883a 	mov	r2,r19
  80cc84:	dfc00717 	ldw	ra,28(sp)
  80cc88:	dd000617 	ldw	r20,24(sp)
  80cc8c:	dcc00517 	ldw	r19,20(sp)
  80cc90:	dc800417 	ldw	r18,16(sp)
  80cc94:	dc400317 	ldw	r17,12(sp)
  80cc98:	dc000217 	ldw	r16,8(sp)
  80cc9c:	dec00804 	addi	sp,sp,32
  80cca0:	f800283a 	ret
  80cca4:	d809883a 	mov	r4,sp
  80cca8:	080c2840 	call	80c284 <__lo0bits>
  80ccac:	d8c00017 	ldw	r3,0(sp)
  80ccb0:	04000044 	movi	r16,1
  80ccb4:	9c000415 	stw	r16,16(r19)
  80ccb8:	98c00515 	stw	r3,20(r19)
  80ccbc:	10800804 	addi	r2,r2,32
  80ccc0:	883fe126 	beq	r17,zero,80cc48 <__alt_mem_onchip_mem+0xff804c48>
  80ccc4:	00c00d44 	movi	r3,53
  80ccc8:	8c7ef344 	addi	r17,r17,-1075
  80cccc:	88a3883a 	add	r17,r17,r2
  80ccd0:	1885c83a 	sub	r2,r3,r2
  80ccd4:	d8c00817 	ldw	r3,32(sp)
  80ccd8:	94400015 	stw	r17,0(r18)
  80ccdc:	18800015 	stw	r2,0(r3)
  80cce0:	003fe706 	br	80cc80 <__alt_mem_onchip_mem+0xff804c80>
  80cce4:	01000804 	movi	r4,32
  80cce8:	2089c83a 	sub	r4,r4,r2
  80ccec:	1908983a 	sll	r4,r3,r4
  80ccf0:	d9400117 	ldw	r5,4(sp)
  80ccf4:	1886d83a 	srl	r3,r3,r2
  80ccf8:	2148b03a 	or	r4,r4,r5
  80ccfc:	99000515 	stw	r4,20(r19)
  80cd00:	d8c00015 	stw	r3,0(sp)
  80cd04:	003fca06 	br	80cc30 <__alt_mem_onchip_mem+0xff804c30>

0080cd08 <__ratio>:
  80cd08:	defff904 	addi	sp,sp,-28
  80cd0c:	dc400315 	stw	r17,12(sp)
  80cd10:	2823883a 	mov	r17,r5
  80cd14:	d9400104 	addi	r5,sp,4
  80cd18:	dfc00615 	stw	ra,24(sp)
  80cd1c:	dcc00515 	stw	r19,20(sp)
  80cd20:	dc800415 	stw	r18,16(sp)
  80cd24:	2027883a 	mov	r19,r4
  80cd28:	dc000215 	stw	r16,8(sp)
  80cd2c:	080cab00 	call	80cab0 <__b2d>
  80cd30:	d80b883a 	mov	r5,sp
  80cd34:	8809883a 	mov	r4,r17
  80cd38:	1025883a 	mov	r18,r2
  80cd3c:	1821883a 	mov	r16,r3
  80cd40:	080cab00 	call	80cab0 <__b2d>
  80cd44:	8a000417 	ldw	r8,16(r17)
  80cd48:	99000417 	ldw	r4,16(r19)
  80cd4c:	d9400117 	ldw	r5,4(sp)
  80cd50:	2209c83a 	sub	r4,r4,r8
  80cd54:	2010917a 	slli	r8,r4,5
  80cd58:	d9000017 	ldw	r4,0(sp)
  80cd5c:	2909c83a 	sub	r4,r5,r4
  80cd60:	4109883a 	add	r4,r8,r4
  80cd64:	01000e0e 	bge	zero,r4,80cda0 <__ratio+0x98>
  80cd68:	2008953a 	slli	r4,r4,20
  80cd6c:	2421883a 	add	r16,r4,r16
  80cd70:	100d883a 	mov	r6,r2
  80cd74:	180f883a 	mov	r7,r3
  80cd78:	9009883a 	mov	r4,r18
  80cd7c:	800b883a 	mov	r5,r16
  80cd80:	08103480 	call	810348 <__divdf3>
  80cd84:	dfc00617 	ldw	ra,24(sp)
  80cd88:	dcc00517 	ldw	r19,20(sp)
  80cd8c:	dc800417 	ldw	r18,16(sp)
  80cd90:	dc400317 	ldw	r17,12(sp)
  80cd94:	dc000217 	ldw	r16,8(sp)
  80cd98:	dec00704 	addi	sp,sp,28
  80cd9c:	f800283a 	ret
  80cda0:	2008953a 	slli	r4,r4,20
  80cda4:	1907c83a 	sub	r3,r3,r4
  80cda8:	003ff106 	br	80cd70 <__alt_mem_onchip_mem+0xff804d70>

0080cdac <_mprec_log10>:
  80cdac:	defffe04 	addi	sp,sp,-8
  80cdb0:	dc000015 	stw	r16,0(sp)
  80cdb4:	dfc00115 	stw	ra,4(sp)
  80cdb8:	008005c4 	movi	r2,23
  80cdbc:	2021883a 	mov	r16,r4
  80cdc0:	11000d0e 	bge	r2,r4,80cdf8 <_mprec_log10+0x4c>
  80cdc4:	0005883a 	mov	r2,zero
  80cdc8:	00cffc34 	movhi	r3,16368
  80cdcc:	843fffc4 	addi	r16,r16,-1
  80cdd0:	000d883a 	mov	r6,zero
  80cdd4:	01d00934 	movhi	r7,16420
  80cdd8:	1009883a 	mov	r4,r2
  80cddc:	180b883a 	mov	r5,r3
  80cde0:	0804f700 	call	804f70 <__muldf3>
  80cde4:	803ff91e 	bne	r16,zero,80cdcc <__alt_mem_onchip_mem+0xff804dcc>
  80cde8:	dfc00117 	ldw	ra,4(sp)
  80cdec:	dc000017 	ldw	r16,0(sp)
  80cdf0:	dec00204 	addi	sp,sp,8
  80cdf4:	f800283a 	ret
  80cdf8:	202090fa 	slli	r16,r4,3
  80cdfc:	00802074 	movhi	r2,129
  80ce00:	1094ac04 	addi	r2,r2,21168
  80ce04:	1421883a 	add	r16,r2,r16
  80ce08:	80800017 	ldw	r2,0(r16)
  80ce0c:	80c00117 	ldw	r3,4(r16)
  80ce10:	dfc00117 	ldw	ra,4(sp)
  80ce14:	dc000017 	ldw	r16,0(sp)
  80ce18:	dec00204 	addi	sp,sp,8
  80ce1c:	f800283a 	ret

0080ce20 <__copybits>:
  80ce20:	297fffc4 	addi	r5,r5,-1
  80ce24:	280fd17a 	srai	r7,r5,5
  80ce28:	30c00417 	ldw	r3,16(r6)
  80ce2c:	30800504 	addi	r2,r6,20
  80ce30:	39c00044 	addi	r7,r7,1
  80ce34:	18c7883a 	add	r3,r3,r3
  80ce38:	39cf883a 	add	r7,r7,r7
  80ce3c:	18c7883a 	add	r3,r3,r3
  80ce40:	39cf883a 	add	r7,r7,r7
  80ce44:	10c7883a 	add	r3,r2,r3
  80ce48:	21cf883a 	add	r7,r4,r7
  80ce4c:	10c00d2e 	bgeu	r2,r3,80ce84 <__copybits+0x64>
  80ce50:	200b883a 	mov	r5,r4
  80ce54:	12000017 	ldw	r8,0(r2)
  80ce58:	29400104 	addi	r5,r5,4
  80ce5c:	10800104 	addi	r2,r2,4
  80ce60:	2a3fff15 	stw	r8,-4(r5)
  80ce64:	10fffb36 	bltu	r2,r3,80ce54 <__alt_mem_onchip_mem+0xff804e54>
  80ce68:	1985c83a 	sub	r2,r3,r6
  80ce6c:	10bffac4 	addi	r2,r2,-21
  80ce70:	1004d0ba 	srli	r2,r2,2
  80ce74:	10800044 	addi	r2,r2,1
  80ce78:	1085883a 	add	r2,r2,r2
  80ce7c:	1085883a 	add	r2,r2,r2
  80ce80:	2089883a 	add	r4,r4,r2
  80ce84:	21c0032e 	bgeu	r4,r7,80ce94 <__copybits+0x74>
  80ce88:	20000015 	stw	zero,0(r4)
  80ce8c:	21000104 	addi	r4,r4,4
  80ce90:	21fffd36 	bltu	r4,r7,80ce88 <__alt_mem_onchip_mem+0xff804e88>
  80ce94:	f800283a 	ret

0080ce98 <__any_on>:
  80ce98:	20c00417 	ldw	r3,16(r4)
  80ce9c:	2805d17a 	srai	r2,r5,5
  80cea0:	21000504 	addi	r4,r4,20
  80cea4:	18800d0e 	bge	r3,r2,80cedc <__any_on+0x44>
  80cea8:	18c7883a 	add	r3,r3,r3
  80ceac:	18c7883a 	add	r3,r3,r3
  80ceb0:	20c7883a 	add	r3,r4,r3
  80ceb4:	20c0192e 	bgeu	r4,r3,80cf1c <__any_on+0x84>
  80ceb8:	18bfff17 	ldw	r2,-4(r3)
  80cebc:	18ffff04 	addi	r3,r3,-4
  80cec0:	1000041e 	bne	r2,zero,80ced4 <__any_on+0x3c>
  80cec4:	20c0142e 	bgeu	r4,r3,80cf18 <__any_on+0x80>
  80cec8:	18ffff04 	addi	r3,r3,-4
  80cecc:	19400017 	ldw	r5,0(r3)
  80ced0:	283ffc26 	beq	r5,zero,80cec4 <__alt_mem_onchip_mem+0xff804ec4>
  80ced4:	00800044 	movi	r2,1
  80ced8:	f800283a 	ret
  80cedc:	10c00a0e 	bge	r2,r3,80cf08 <__any_on+0x70>
  80cee0:	1085883a 	add	r2,r2,r2
  80cee4:	1085883a 	add	r2,r2,r2
  80cee8:	294007cc 	andi	r5,r5,31
  80ceec:	2087883a 	add	r3,r4,r2
  80cef0:	283ff026 	beq	r5,zero,80ceb4 <__alt_mem_onchip_mem+0xff804eb4>
  80cef4:	19800017 	ldw	r6,0(r3)
  80cef8:	3144d83a 	srl	r2,r6,r5
  80cefc:	114a983a 	sll	r5,r2,r5
  80cf00:	317ff41e 	bne	r6,r5,80ced4 <__alt_mem_onchip_mem+0xff804ed4>
  80cf04:	003feb06 	br	80ceb4 <__alt_mem_onchip_mem+0xff804eb4>
  80cf08:	1085883a 	add	r2,r2,r2
  80cf0c:	1085883a 	add	r2,r2,r2
  80cf10:	2087883a 	add	r3,r4,r2
  80cf14:	003fe706 	br	80ceb4 <__alt_mem_onchip_mem+0xff804eb4>
  80cf18:	f800283a 	ret
  80cf1c:	0005883a 	mov	r2,zero
  80cf20:	f800283a 	ret

0080cf24 <_realloc_r>:
  80cf24:	defff604 	addi	sp,sp,-40
  80cf28:	dc800215 	stw	r18,8(sp)
  80cf2c:	dfc00915 	stw	ra,36(sp)
  80cf30:	df000815 	stw	fp,32(sp)
  80cf34:	ddc00715 	stw	r23,28(sp)
  80cf38:	dd800615 	stw	r22,24(sp)
  80cf3c:	dd400515 	stw	r21,20(sp)
  80cf40:	dd000415 	stw	r20,16(sp)
  80cf44:	dcc00315 	stw	r19,12(sp)
  80cf48:	dc400115 	stw	r17,4(sp)
  80cf4c:	dc000015 	stw	r16,0(sp)
  80cf50:	3025883a 	mov	r18,r6
  80cf54:	2800b726 	beq	r5,zero,80d234 <_realloc_r+0x310>
  80cf58:	282b883a 	mov	r21,r5
  80cf5c:	2029883a 	mov	r20,r4
  80cf60:	081163c0 	call	81163c <__malloc_lock>
  80cf64:	a8bfff17 	ldw	r2,-4(r21)
  80cf68:	043fff04 	movi	r16,-4
  80cf6c:	90c002c4 	addi	r3,r18,11
  80cf70:	01000584 	movi	r4,22
  80cf74:	acfffe04 	addi	r19,r21,-8
  80cf78:	1420703a 	and	r16,r2,r16
  80cf7c:	20c0332e 	bgeu	r4,r3,80d04c <_realloc_r+0x128>
  80cf80:	047ffe04 	movi	r17,-8
  80cf84:	1c62703a 	and	r17,r3,r17
  80cf88:	8807883a 	mov	r3,r17
  80cf8c:	88005816 	blt	r17,zero,80d0f0 <_realloc_r+0x1cc>
  80cf90:	8c805736 	bltu	r17,r18,80d0f0 <_realloc_r+0x1cc>
  80cf94:	80c0300e 	bge	r16,r3,80d058 <_realloc_r+0x134>
  80cf98:	07002074 	movhi	fp,129
  80cf9c:	e716be04 	addi	fp,fp,23288
  80cfa0:	e1c00217 	ldw	r7,8(fp)
  80cfa4:	9c09883a 	add	r4,r19,r16
  80cfa8:	22000117 	ldw	r8,4(r4)
  80cfac:	21c06326 	beq	r4,r7,80d13c <_realloc_r+0x218>
  80cfb0:	017fff84 	movi	r5,-2
  80cfb4:	414a703a 	and	r5,r8,r5
  80cfb8:	214b883a 	add	r5,r4,r5
  80cfbc:	29800117 	ldw	r6,4(r5)
  80cfc0:	3180004c 	andi	r6,r6,1
  80cfc4:	30003f26 	beq	r6,zero,80d0c4 <_realloc_r+0x1a0>
  80cfc8:	1080004c 	andi	r2,r2,1
  80cfcc:	10008326 	beq	r2,zero,80d1dc <_realloc_r+0x2b8>
  80cfd0:	900b883a 	mov	r5,r18
  80cfd4:	a009883a 	mov	r4,r20
  80cfd8:	080b26c0 	call	80b26c <_malloc_r>
  80cfdc:	1025883a 	mov	r18,r2
  80cfe0:	10011e26 	beq	r2,zero,80d45c <_realloc_r+0x538>
  80cfe4:	a93fff17 	ldw	r4,-4(r21)
  80cfe8:	10fffe04 	addi	r3,r2,-8
  80cfec:	00bfff84 	movi	r2,-2
  80cff0:	2084703a 	and	r2,r4,r2
  80cff4:	9885883a 	add	r2,r19,r2
  80cff8:	1880ee26 	beq	r3,r2,80d3b4 <_realloc_r+0x490>
  80cffc:	81bfff04 	addi	r6,r16,-4
  80d000:	00800904 	movi	r2,36
  80d004:	1180b836 	bltu	r2,r6,80d2e8 <_realloc_r+0x3c4>
  80d008:	00c004c4 	movi	r3,19
  80d00c:	19809636 	bltu	r3,r6,80d268 <_realloc_r+0x344>
  80d010:	9005883a 	mov	r2,r18
  80d014:	a807883a 	mov	r3,r21
  80d018:	19000017 	ldw	r4,0(r3)
  80d01c:	11000015 	stw	r4,0(r2)
  80d020:	19000117 	ldw	r4,4(r3)
  80d024:	11000115 	stw	r4,4(r2)
  80d028:	18c00217 	ldw	r3,8(r3)
  80d02c:	10c00215 	stw	r3,8(r2)
  80d030:	a80b883a 	mov	r5,r21
  80d034:	a009883a 	mov	r4,r20
  80d038:	080a6800 	call	80a680 <_free_r>
  80d03c:	a009883a 	mov	r4,r20
  80d040:	08116600 	call	811660 <__malloc_unlock>
  80d044:	9005883a 	mov	r2,r18
  80d048:	00001206 	br	80d094 <_realloc_r+0x170>
  80d04c:	00c00404 	movi	r3,16
  80d050:	1823883a 	mov	r17,r3
  80d054:	003fce06 	br	80cf90 <__alt_mem_onchip_mem+0xff804f90>
  80d058:	a825883a 	mov	r18,r21
  80d05c:	8445c83a 	sub	r2,r16,r17
  80d060:	00c003c4 	movi	r3,15
  80d064:	18802636 	bltu	r3,r2,80d100 <_realloc_r+0x1dc>
  80d068:	99800117 	ldw	r6,4(r19)
  80d06c:	9c07883a 	add	r3,r19,r16
  80d070:	3180004c 	andi	r6,r6,1
  80d074:	3420b03a 	or	r16,r6,r16
  80d078:	9c000115 	stw	r16,4(r19)
  80d07c:	18800117 	ldw	r2,4(r3)
  80d080:	10800054 	ori	r2,r2,1
  80d084:	18800115 	stw	r2,4(r3)
  80d088:	a009883a 	mov	r4,r20
  80d08c:	08116600 	call	811660 <__malloc_unlock>
  80d090:	9005883a 	mov	r2,r18
  80d094:	dfc00917 	ldw	ra,36(sp)
  80d098:	df000817 	ldw	fp,32(sp)
  80d09c:	ddc00717 	ldw	r23,28(sp)
  80d0a0:	dd800617 	ldw	r22,24(sp)
  80d0a4:	dd400517 	ldw	r21,20(sp)
  80d0a8:	dd000417 	ldw	r20,16(sp)
  80d0ac:	dcc00317 	ldw	r19,12(sp)
  80d0b0:	dc800217 	ldw	r18,8(sp)
  80d0b4:	dc400117 	ldw	r17,4(sp)
  80d0b8:	dc000017 	ldw	r16,0(sp)
  80d0bc:	dec00a04 	addi	sp,sp,40
  80d0c0:	f800283a 	ret
  80d0c4:	017fff04 	movi	r5,-4
  80d0c8:	414a703a 	and	r5,r8,r5
  80d0cc:	814d883a 	add	r6,r16,r5
  80d0d0:	30c01f16 	blt	r6,r3,80d150 <_realloc_r+0x22c>
  80d0d4:	20800317 	ldw	r2,12(r4)
  80d0d8:	20c00217 	ldw	r3,8(r4)
  80d0dc:	a825883a 	mov	r18,r21
  80d0e0:	3021883a 	mov	r16,r6
  80d0e4:	18800315 	stw	r2,12(r3)
  80d0e8:	10c00215 	stw	r3,8(r2)
  80d0ec:	003fdb06 	br	80d05c <__alt_mem_onchip_mem+0xff80505c>
  80d0f0:	00800304 	movi	r2,12
  80d0f4:	a0800015 	stw	r2,0(r20)
  80d0f8:	0005883a 	mov	r2,zero
  80d0fc:	003fe506 	br	80d094 <__alt_mem_onchip_mem+0xff805094>
  80d100:	98c00117 	ldw	r3,4(r19)
  80d104:	9c4b883a 	add	r5,r19,r17
  80d108:	11000054 	ori	r4,r2,1
  80d10c:	18c0004c 	andi	r3,r3,1
  80d110:	1c62b03a 	or	r17,r3,r17
  80d114:	9c400115 	stw	r17,4(r19)
  80d118:	29000115 	stw	r4,4(r5)
  80d11c:	2885883a 	add	r2,r5,r2
  80d120:	10c00117 	ldw	r3,4(r2)
  80d124:	29400204 	addi	r5,r5,8
  80d128:	a009883a 	mov	r4,r20
  80d12c:	18c00054 	ori	r3,r3,1
  80d130:	10c00115 	stw	r3,4(r2)
  80d134:	080a6800 	call	80a680 <_free_r>
  80d138:	003fd306 	br	80d088 <__alt_mem_onchip_mem+0xff805088>
  80d13c:	017fff04 	movi	r5,-4
  80d140:	414a703a 	and	r5,r8,r5
  80d144:	89800404 	addi	r6,r17,16
  80d148:	8151883a 	add	r8,r16,r5
  80d14c:	4180590e 	bge	r8,r6,80d2b4 <_realloc_r+0x390>
  80d150:	1080004c 	andi	r2,r2,1
  80d154:	103f9e1e 	bne	r2,zero,80cfd0 <__alt_mem_onchip_mem+0xff804fd0>
  80d158:	adbffe17 	ldw	r22,-8(r21)
  80d15c:	00bfff04 	movi	r2,-4
  80d160:	9dadc83a 	sub	r22,r19,r22
  80d164:	b1800117 	ldw	r6,4(r22)
  80d168:	3084703a 	and	r2,r6,r2
  80d16c:	20002026 	beq	r4,zero,80d1f0 <_realloc_r+0x2cc>
  80d170:	80af883a 	add	r23,r16,r2
  80d174:	b96f883a 	add	r23,r23,r5
  80d178:	21c05f26 	beq	r4,r7,80d2f8 <_realloc_r+0x3d4>
  80d17c:	b8c01c16 	blt	r23,r3,80d1f0 <_realloc_r+0x2cc>
  80d180:	20800317 	ldw	r2,12(r4)
  80d184:	20c00217 	ldw	r3,8(r4)
  80d188:	81bfff04 	addi	r6,r16,-4
  80d18c:	01000904 	movi	r4,36
  80d190:	18800315 	stw	r2,12(r3)
  80d194:	10c00215 	stw	r3,8(r2)
  80d198:	b0c00217 	ldw	r3,8(r22)
  80d19c:	b0800317 	ldw	r2,12(r22)
  80d1a0:	b4800204 	addi	r18,r22,8
  80d1a4:	18800315 	stw	r2,12(r3)
  80d1a8:	10c00215 	stw	r3,8(r2)
  80d1ac:	21801b36 	bltu	r4,r6,80d21c <_realloc_r+0x2f8>
  80d1b0:	008004c4 	movi	r2,19
  80d1b4:	1180352e 	bgeu	r2,r6,80d28c <_realloc_r+0x368>
  80d1b8:	a8800017 	ldw	r2,0(r21)
  80d1bc:	b0800215 	stw	r2,8(r22)
  80d1c0:	a8800117 	ldw	r2,4(r21)
  80d1c4:	b0800315 	stw	r2,12(r22)
  80d1c8:	008006c4 	movi	r2,27
  80d1cc:	11807f36 	bltu	r2,r6,80d3cc <_realloc_r+0x4a8>
  80d1d0:	b0800404 	addi	r2,r22,16
  80d1d4:	ad400204 	addi	r21,r21,8
  80d1d8:	00002d06 	br	80d290 <_realloc_r+0x36c>
  80d1dc:	adbffe17 	ldw	r22,-8(r21)
  80d1e0:	00bfff04 	movi	r2,-4
  80d1e4:	9dadc83a 	sub	r22,r19,r22
  80d1e8:	b1000117 	ldw	r4,4(r22)
  80d1ec:	2084703a 	and	r2,r4,r2
  80d1f0:	b03f7726 	beq	r22,zero,80cfd0 <__alt_mem_onchip_mem+0xff804fd0>
  80d1f4:	80af883a 	add	r23,r16,r2
  80d1f8:	b8ff7516 	blt	r23,r3,80cfd0 <__alt_mem_onchip_mem+0xff804fd0>
  80d1fc:	b0800317 	ldw	r2,12(r22)
  80d200:	b0c00217 	ldw	r3,8(r22)
  80d204:	81bfff04 	addi	r6,r16,-4
  80d208:	01000904 	movi	r4,36
  80d20c:	18800315 	stw	r2,12(r3)
  80d210:	10c00215 	stw	r3,8(r2)
  80d214:	b4800204 	addi	r18,r22,8
  80d218:	21bfe52e 	bgeu	r4,r6,80d1b0 <__alt_mem_onchip_mem+0xff8051b0>
  80d21c:	a80b883a 	mov	r5,r21
  80d220:	9009883a 	mov	r4,r18
  80d224:	080bca40 	call	80bca4 <memmove>
  80d228:	b821883a 	mov	r16,r23
  80d22c:	b027883a 	mov	r19,r22
  80d230:	003f8a06 	br	80d05c <__alt_mem_onchip_mem+0xff80505c>
  80d234:	300b883a 	mov	r5,r6
  80d238:	dfc00917 	ldw	ra,36(sp)
  80d23c:	df000817 	ldw	fp,32(sp)
  80d240:	ddc00717 	ldw	r23,28(sp)
  80d244:	dd800617 	ldw	r22,24(sp)
  80d248:	dd400517 	ldw	r21,20(sp)
  80d24c:	dd000417 	ldw	r20,16(sp)
  80d250:	dcc00317 	ldw	r19,12(sp)
  80d254:	dc800217 	ldw	r18,8(sp)
  80d258:	dc400117 	ldw	r17,4(sp)
  80d25c:	dc000017 	ldw	r16,0(sp)
  80d260:	dec00a04 	addi	sp,sp,40
  80d264:	080b26c1 	jmpi	80b26c <_malloc_r>
  80d268:	a8c00017 	ldw	r3,0(r21)
  80d26c:	90c00015 	stw	r3,0(r18)
  80d270:	a8c00117 	ldw	r3,4(r21)
  80d274:	90c00115 	stw	r3,4(r18)
  80d278:	00c006c4 	movi	r3,27
  80d27c:	19804536 	bltu	r3,r6,80d394 <_realloc_r+0x470>
  80d280:	90800204 	addi	r2,r18,8
  80d284:	a8c00204 	addi	r3,r21,8
  80d288:	003f6306 	br	80d018 <__alt_mem_onchip_mem+0xff805018>
  80d28c:	9005883a 	mov	r2,r18
  80d290:	a8c00017 	ldw	r3,0(r21)
  80d294:	b821883a 	mov	r16,r23
  80d298:	b027883a 	mov	r19,r22
  80d29c:	10c00015 	stw	r3,0(r2)
  80d2a0:	a8c00117 	ldw	r3,4(r21)
  80d2a4:	10c00115 	stw	r3,4(r2)
  80d2a8:	a8c00217 	ldw	r3,8(r21)
  80d2ac:	10c00215 	stw	r3,8(r2)
  80d2b0:	003f6a06 	br	80d05c <__alt_mem_onchip_mem+0xff80505c>
  80d2b4:	9c67883a 	add	r19,r19,r17
  80d2b8:	4445c83a 	sub	r2,r8,r17
  80d2bc:	e4c00215 	stw	r19,8(fp)
  80d2c0:	10800054 	ori	r2,r2,1
  80d2c4:	98800115 	stw	r2,4(r19)
  80d2c8:	a8bfff17 	ldw	r2,-4(r21)
  80d2cc:	a009883a 	mov	r4,r20
  80d2d0:	1080004c 	andi	r2,r2,1
  80d2d4:	1462b03a 	or	r17,r2,r17
  80d2d8:	ac7fff15 	stw	r17,-4(r21)
  80d2dc:	08116600 	call	811660 <__malloc_unlock>
  80d2e0:	a805883a 	mov	r2,r21
  80d2e4:	003f6b06 	br	80d094 <__alt_mem_onchip_mem+0xff805094>
  80d2e8:	a80b883a 	mov	r5,r21
  80d2ec:	9009883a 	mov	r4,r18
  80d2f0:	080bca40 	call	80bca4 <memmove>
  80d2f4:	003f4e06 	br	80d030 <__alt_mem_onchip_mem+0xff805030>
  80d2f8:	89000404 	addi	r4,r17,16
  80d2fc:	b93fbc16 	blt	r23,r4,80d1f0 <__alt_mem_onchip_mem+0xff8051f0>
  80d300:	b0800317 	ldw	r2,12(r22)
  80d304:	b0c00217 	ldw	r3,8(r22)
  80d308:	81bfff04 	addi	r6,r16,-4
  80d30c:	01000904 	movi	r4,36
  80d310:	18800315 	stw	r2,12(r3)
  80d314:	10c00215 	stw	r3,8(r2)
  80d318:	b4800204 	addi	r18,r22,8
  80d31c:	21804336 	bltu	r4,r6,80d42c <_realloc_r+0x508>
  80d320:	008004c4 	movi	r2,19
  80d324:	11803f2e 	bgeu	r2,r6,80d424 <_realloc_r+0x500>
  80d328:	a8800017 	ldw	r2,0(r21)
  80d32c:	b0800215 	stw	r2,8(r22)
  80d330:	a8800117 	ldw	r2,4(r21)
  80d334:	b0800315 	stw	r2,12(r22)
  80d338:	008006c4 	movi	r2,27
  80d33c:	11803f36 	bltu	r2,r6,80d43c <_realloc_r+0x518>
  80d340:	b0800404 	addi	r2,r22,16
  80d344:	ad400204 	addi	r21,r21,8
  80d348:	a8c00017 	ldw	r3,0(r21)
  80d34c:	10c00015 	stw	r3,0(r2)
  80d350:	a8c00117 	ldw	r3,4(r21)
  80d354:	10c00115 	stw	r3,4(r2)
  80d358:	a8c00217 	ldw	r3,8(r21)
  80d35c:	10c00215 	stw	r3,8(r2)
  80d360:	b447883a 	add	r3,r22,r17
  80d364:	bc45c83a 	sub	r2,r23,r17
  80d368:	e0c00215 	stw	r3,8(fp)
  80d36c:	10800054 	ori	r2,r2,1
  80d370:	18800115 	stw	r2,4(r3)
  80d374:	b0800117 	ldw	r2,4(r22)
  80d378:	a009883a 	mov	r4,r20
  80d37c:	1080004c 	andi	r2,r2,1
  80d380:	1462b03a 	or	r17,r2,r17
  80d384:	b4400115 	stw	r17,4(r22)
  80d388:	08116600 	call	811660 <__malloc_unlock>
  80d38c:	9005883a 	mov	r2,r18
  80d390:	003f4006 	br	80d094 <__alt_mem_onchip_mem+0xff805094>
  80d394:	a8c00217 	ldw	r3,8(r21)
  80d398:	90c00215 	stw	r3,8(r18)
  80d39c:	a8c00317 	ldw	r3,12(r21)
  80d3a0:	90c00315 	stw	r3,12(r18)
  80d3a4:	30801126 	beq	r6,r2,80d3ec <_realloc_r+0x4c8>
  80d3a8:	90800404 	addi	r2,r18,16
  80d3ac:	a8c00404 	addi	r3,r21,16
  80d3b0:	003f1906 	br	80d018 <__alt_mem_onchip_mem+0xff805018>
  80d3b4:	90ffff17 	ldw	r3,-4(r18)
  80d3b8:	00bfff04 	movi	r2,-4
  80d3bc:	a825883a 	mov	r18,r21
  80d3c0:	1884703a 	and	r2,r3,r2
  80d3c4:	80a1883a 	add	r16,r16,r2
  80d3c8:	003f2406 	br	80d05c <__alt_mem_onchip_mem+0xff80505c>
  80d3cc:	a8800217 	ldw	r2,8(r21)
  80d3d0:	b0800415 	stw	r2,16(r22)
  80d3d4:	a8800317 	ldw	r2,12(r21)
  80d3d8:	b0800515 	stw	r2,20(r22)
  80d3dc:	31000a26 	beq	r6,r4,80d408 <_realloc_r+0x4e4>
  80d3e0:	b0800604 	addi	r2,r22,24
  80d3e4:	ad400404 	addi	r21,r21,16
  80d3e8:	003fa906 	br	80d290 <__alt_mem_onchip_mem+0xff805290>
  80d3ec:	a9000417 	ldw	r4,16(r21)
  80d3f0:	90800604 	addi	r2,r18,24
  80d3f4:	a8c00604 	addi	r3,r21,24
  80d3f8:	91000415 	stw	r4,16(r18)
  80d3fc:	a9000517 	ldw	r4,20(r21)
  80d400:	91000515 	stw	r4,20(r18)
  80d404:	003f0406 	br	80d018 <__alt_mem_onchip_mem+0xff805018>
  80d408:	a8c00417 	ldw	r3,16(r21)
  80d40c:	ad400604 	addi	r21,r21,24
  80d410:	b0800804 	addi	r2,r22,32
  80d414:	b0c00615 	stw	r3,24(r22)
  80d418:	a8ffff17 	ldw	r3,-4(r21)
  80d41c:	b0c00715 	stw	r3,28(r22)
  80d420:	003f9b06 	br	80d290 <__alt_mem_onchip_mem+0xff805290>
  80d424:	9005883a 	mov	r2,r18
  80d428:	003fc706 	br	80d348 <__alt_mem_onchip_mem+0xff805348>
  80d42c:	a80b883a 	mov	r5,r21
  80d430:	9009883a 	mov	r4,r18
  80d434:	080bca40 	call	80bca4 <memmove>
  80d438:	003fc906 	br	80d360 <__alt_mem_onchip_mem+0xff805360>
  80d43c:	a8800217 	ldw	r2,8(r21)
  80d440:	b0800415 	stw	r2,16(r22)
  80d444:	a8800317 	ldw	r2,12(r21)
  80d448:	b0800515 	stw	r2,20(r22)
  80d44c:	31000726 	beq	r6,r4,80d46c <_realloc_r+0x548>
  80d450:	b0800604 	addi	r2,r22,24
  80d454:	ad400404 	addi	r21,r21,16
  80d458:	003fbb06 	br	80d348 <__alt_mem_onchip_mem+0xff805348>
  80d45c:	a009883a 	mov	r4,r20
  80d460:	08116600 	call	811660 <__malloc_unlock>
  80d464:	0005883a 	mov	r2,zero
  80d468:	003f0a06 	br	80d094 <__alt_mem_onchip_mem+0xff805094>
  80d46c:	a8c00417 	ldw	r3,16(r21)
  80d470:	ad400604 	addi	r21,r21,24
  80d474:	b0800804 	addi	r2,r22,32
  80d478:	b0c00615 	stw	r3,24(r22)
  80d47c:	a8ffff17 	ldw	r3,-4(r21)
  80d480:	b0c00715 	stw	r3,28(r22)
  80d484:	003fb006 	br	80d348 <__alt_mem_onchip_mem+0xff805348>

0080d488 <__fpclassifyd>:
  80d488:	00a00034 	movhi	r2,32768
  80d48c:	10bfffc4 	addi	r2,r2,-1
  80d490:	2884703a 	and	r2,r5,r2
  80d494:	10000726 	beq	r2,zero,80d4b4 <__fpclassifyd+0x2c>
  80d498:	00fffc34 	movhi	r3,65520
  80d49c:	019ff834 	movhi	r6,32736
  80d4a0:	28c7883a 	add	r3,r5,r3
  80d4a4:	31bfffc4 	addi	r6,r6,-1
  80d4a8:	30c00536 	bltu	r6,r3,80d4c0 <__fpclassifyd+0x38>
  80d4ac:	00800104 	movi	r2,4
  80d4b0:	f800283a 	ret
  80d4b4:	2000021e 	bne	r4,zero,80d4c0 <__fpclassifyd+0x38>
  80d4b8:	00800084 	movi	r2,2
  80d4bc:	f800283a 	ret
  80d4c0:	00dffc34 	movhi	r3,32752
  80d4c4:	019ff834 	movhi	r6,32736
  80d4c8:	28cb883a 	add	r5,r5,r3
  80d4cc:	31bfffc4 	addi	r6,r6,-1
  80d4d0:	317ff62e 	bgeu	r6,r5,80d4ac <__alt_mem_onchip_mem+0xff8054ac>
  80d4d4:	01400434 	movhi	r5,16
  80d4d8:	297fffc4 	addi	r5,r5,-1
  80d4dc:	28800236 	bltu	r5,r2,80d4e8 <__fpclassifyd+0x60>
  80d4e0:	008000c4 	movi	r2,3
  80d4e4:	f800283a 	ret
  80d4e8:	10c00226 	beq	r2,r3,80d4f4 <__fpclassifyd+0x6c>
  80d4ec:	0005883a 	mov	r2,zero
  80d4f0:	f800283a 	ret
  80d4f4:	2005003a 	cmpeq	r2,r4,zero
  80d4f8:	f800283a 	ret

0080d4fc <_sbrk_r>:
  80d4fc:	defffd04 	addi	sp,sp,-12
  80d500:	dc000015 	stw	r16,0(sp)
  80d504:	040020b4 	movhi	r16,130
  80d508:	dc400115 	stw	r17,4(sp)
  80d50c:	84240904 	addi	r16,r16,-28636
  80d510:	2023883a 	mov	r17,r4
  80d514:	2809883a 	mov	r4,r5
  80d518:	dfc00215 	stw	ra,8(sp)
  80d51c:	80000015 	stw	zero,0(r16)
  80d520:	08118200 	call	811820 <sbrk>
  80d524:	00ffffc4 	movi	r3,-1
  80d528:	10c00526 	beq	r2,r3,80d540 <_sbrk_r+0x44>
  80d52c:	dfc00217 	ldw	ra,8(sp)
  80d530:	dc400117 	ldw	r17,4(sp)
  80d534:	dc000017 	ldw	r16,0(sp)
  80d538:	dec00304 	addi	sp,sp,12
  80d53c:	f800283a 	ret
  80d540:	80c00017 	ldw	r3,0(r16)
  80d544:	183ff926 	beq	r3,zero,80d52c <__alt_mem_onchip_mem+0xff80552c>
  80d548:	88c00015 	stw	r3,0(r17)
  80d54c:	003ff706 	br	80d52c <__alt_mem_onchip_mem+0xff80552c>

0080d550 <__sread>:
  80d550:	defffe04 	addi	sp,sp,-8
  80d554:	dc000015 	stw	r16,0(sp)
  80d558:	2821883a 	mov	r16,r5
  80d55c:	2940038f 	ldh	r5,14(r5)
  80d560:	dfc00115 	stw	ra,4(sp)
  80d564:	080f3440 	call	80f344 <_read_r>
  80d568:	10000716 	blt	r2,zero,80d588 <__sread+0x38>
  80d56c:	80c01417 	ldw	r3,80(r16)
  80d570:	1887883a 	add	r3,r3,r2
  80d574:	80c01415 	stw	r3,80(r16)
  80d578:	dfc00117 	ldw	ra,4(sp)
  80d57c:	dc000017 	ldw	r16,0(sp)
  80d580:	dec00204 	addi	sp,sp,8
  80d584:	f800283a 	ret
  80d588:	80c0030b 	ldhu	r3,12(r16)
  80d58c:	18fbffcc 	andi	r3,r3,61439
  80d590:	80c0030d 	sth	r3,12(r16)
  80d594:	dfc00117 	ldw	ra,4(sp)
  80d598:	dc000017 	ldw	r16,0(sp)
  80d59c:	dec00204 	addi	sp,sp,8
  80d5a0:	f800283a 	ret

0080d5a4 <__seofread>:
  80d5a4:	0005883a 	mov	r2,zero
  80d5a8:	f800283a 	ret

0080d5ac <__swrite>:
  80d5ac:	2880030b 	ldhu	r2,12(r5)
  80d5b0:	defffb04 	addi	sp,sp,-20
  80d5b4:	dcc00315 	stw	r19,12(sp)
  80d5b8:	dc800215 	stw	r18,8(sp)
  80d5bc:	dc400115 	stw	r17,4(sp)
  80d5c0:	dc000015 	stw	r16,0(sp)
  80d5c4:	dfc00415 	stw	ra,16(sp)
  80d5c8:	10c0400c 	andi	r3,r2,256
  80d5cc:	2821883a 	mov	r16,r5
  80d5d0:	2023883a 	mov	r17,r4
  80d5d4:	3025883a 	mov	r18,r6
  80d5d8:	3827883a 	mov	r19,r7
  80d5dc:	18000526 	beq	r3,zero,80d5f4 <__swrite+0x48>
  80d5e0:	2940038f 	ldh	r5,14(r5)
  80d5e4:	01c00084 	movi	r7,2
  80d5e8:	000d883a 	mov	r6,zero
  80d5ec:	080f2e40 	call	80f2e4 <_lseek_r>
  80d5f0:	8080030b 	ldhu	r2,12(r16)
  80d5f4:	8140038f 	ldh	r5,14(r16)
  80d5f8:	10bbffcc 	andi	r2,r2,61439
  80d5fc:	980f883a 	mov	r7,r19
  80d600:	900d883a 	mov	r6,r18
  80d604:	8809883a 	mov	r4,r17
  80d608:	8080030d 	sth	r2,12(r16)
  80d60c:	dfc00417 	ldw	ra,16(sp)
  80d610:	dcc00317 	ldw	r19,12(sp)
  80d614:	dc800217 	ldw	r18,8(sp)
  80d618:	dc400117 	ldw	r17,4(sp)
  80d61c:	dc000017 	ldw	r16,0(sp)
  80d620:	dec00504 	addi	sp,sp,20
  80d624:	080edb01 	jmpi	80edb0 <_write_r>

0080d628 <__sseek>:
  80d628:	defffe04 	addi	sp,sp,-8
  80d62c:	dc000015 	stw	r16,0(sp)
  80d630:	2821883a 	mov	r16,r5
  80d634:	2940038f 	ldh	r5,14(r5)
  80d638:	dfc00115 	stw	ra,4(sp)
  80d63c:	080f2e40 	call	80f2e4 <_lseek_r>
  80d640:	00ffffc4 	movi	r3,-1
  80d644:	10c00826 	beq	r2,r3,80d668 <__sseek+0x40>
  80d648:	80c0030b 	ldhu	r3,12(r16)
  80d64c:	80801415 	stw	r2,80(r16)
  80d650:	18c40014 	ori	r3,r3,4096
  80d654:	80c0030d 	sth	r3,12(r16)
  80d658:	dfc00117 	ldw	ra,4(sp)
  80d65c:	dc000017 	ldw	r16,0(sp)
  80d660:	dec00204 	addi	sp,sp,8
  80d664:	f800283a 	ret
  80d668:	80c0030b 	ldhu	r3,12(r16)
  80d66c:	18fbffcc 	andi	r3,r3,61439
  80d670:	80c0030d 	sth	r3,12(r16)
  80d674:	dfc00117 	ldw	ra,4(sp)
  80d678:	dc000017 	ldw	r16,0(sp)
  80d67c:	dec00204 	addi	sp,sp,8
  80d680:	f800283a 	ret

0080d684 <__sclose>:
  80d684:	2940038f 	ldh	r5,14(r5)
  80d688:	080ee101 	jmpi	80ee10 <_close_r>

0080d68c <strcmp>:
  80d68c:	2144b03a 	or	r2,r4,r5
  80d690:	108000cc 	andi	r2,r2,3
  80d694:	1000171e 	bne	r2,zero,80d6f4 <strcmp+0x68>
  80d698:	20800017 	ldw	r2,0(r4)
  80d69c:	28c00017 	ldw	r3,0(r5)
  80d6a0:	10c0141e 	bne	r2,r3,80d6f4 <strcmp+0x68>
  80d6a4:	027fbff4 	movhi	r9,65279
  80d6a8:	4a7fbfc4 	addi	r9,r9,-257
  80d6ac:	0086303a 	nor	r3,zero,r2
  80d6b0:	02202074 	movhi	r8,32897
  80d6b4:	1245883a 	add	r2,r2,r9
  80d6b8:	42202004 	addi	r8,r8,-32640
  80d6bc:	10c4703a 	and	r2,r2,r3
  80d6c0:	1204703a 	and	r2,r2,r8
  80d6c4:	10000226 	beq	r2,zero,80d6d0 <strcmp+0x44>
  80d6c8:	00002306 	br	80d758 <strcmp+0xcc>
  80d6cc:	1000221e 	bne	r2,zero,80d758 <strcmp+0xcc>
  80d6d0:	21000104 	addi	r4,r4,4
  80d6d4:	20c00017 	ldw	r3,0(r4)
  80d6d8:	29400104 	addi	r5,r5,4
  80d6dc:	29800017 	ldw	r6,0(r5)
  80d6e0:	1a4f883a 	add	r7,r3,r9
  80d6e4:	00c4303a 	nor	r2,zero,r3
  80d6e8:	3884703a 	and	r2,r7,r2
  80d6ec:	1204703a 	and	r2,r2,r8
  80d6f0:	19bff626 	beq	r3,r6,80d6cc <__alt_mem_onchip_mem+0xff8056cc>
  80d6f4:	20800003 	ldbu	r2,0(r4)
  80d6f8:	10c03fcc 	andi	r3,r2,255
  80d6fc:	18c0201c 	xori	r3,r3,128
  80d700:	18ffe004 	addi	r3,r3,-128
  80d704:	18000c26 	beq	r3,zero,80d738 <strcmp+0xac>
  80d708:	29800007 	ldb	r6,0(r5)
  80d70c:	19800326 	beq	r3,r6,80d71c <strcmp+0x90>
  80d710:	00001306 	br	80d760 <strcmp+0xd4>
  80d714:	29800007 	ldb	r6,0(r5)
  80d718:	11800b1e 	bne	r2,r6,80d748 <strcmp+0xbc>
  80d71c:	21000044 	addi	r4,r4,1
  80d720:	20c00003 	ldbu	r3,0(r4)
  80d724:	29400044 	addi	r5,r5,1
  80d728:	18803fcc 	andi	r2,r3,255
  80d72c:	1080201c 	xori	r2,r2,128
  80d730:	10bfe004 	addi	r2,r2,-128
  80d734:	103ff71e 	bne	r2,zero,80d714 <__alt_mem_onchip_mem+0xff805714>
  80d738:	0007883a 	mov	r3,zero
  80d73c:	28800003 	ldbu	r2,0(r5)
  80d740:	1885c83a 	sub	r2,r3,r2
  80d744:	f800283a 	ret
  80d748:	28800003 	ldbu	r2,0(r5)
  80d74c:	18c03fcc 	andi	r3,r3,255
  80d750:	1885c83a 	sub	r2,r3,r2
  80d754:	f800283a 	ret
  80d758:	0005883a 	mov	r2,zero
  80d75c:	f800283a 	ret
  80d760:	10c03fcc 	andi	r3,r2,255
  80d764:	003ff506 	br	80d73c <__alt_mem_onchip_mem+0xff80573c>

0080d768 <__sprint_r.part.0>:
  80d768:	28801917 	ldw	r2,100(r5)
  80d76c:	defff604 	addi	sp,sp,-40
  80d770:	dd400515 	stw	r21,20(sp)
  80d774:	dfc00915 	stw	ra,36(sp)
  80d778:	df000815 	stw	fp,32(sp)
  80d77c:	ddc00715 	stw	r23,28(sp)
  80d780:	dd800615 	stw	r22,24(sp)
  80d784:	dd000415 	stw	r20,16(sp)
  80d788:	dcc00315 	stw	r19,12(sp)
  80d78c:	dc800215 	stw	r18,8(sp)
  80d790:	dc400115 	stw	r17,4(sp)
  80d794:	dc000015 	stw	r16,0(sp)
  80d798:	1088000c 	andi	r2,r2,8192
  80d79c:	302b883a 	mov	r21,r6
  80d7a0:	10002e26 	beq	r2,zero,80d85c <__sprint_r.part.0+0xf4>
  80d7a4:	30800217 	ldw	r2,8(r6)
  80d7a8:	35800017 	ldw	r22,0(r6)
  80d7ac:	10002926 	beq	r2,zero,80d854 <__sprint_r.part.0+0xec>
  80d7b0:	2827883a 	mov	r19,r5
  80d7b4:	2029883a 	mov	r20,r4
  80d7b8:	b5c00104 	addi	r23,r22,4
  80d7bc:	04bfffc4 	movi	r18,-1
  80d7c0:	bc400017 	ldw	r17,0(r23)
  80d7c4:	b4000017 	ldw	r16,0(r22)
  80d7c8:	0039883a 	mov	fp,zero
  80d7cc:	8822d0ba 	srli	r17,r17,2
  80d7d0:	8800031e 	bne	r17,zero,80d7e0 <__sprint_r.part.0+0x78>
  80d7d4:	00001806 	br	80d838 <__sprint_r.part.0+0xd0>
  80d7d8:	84000104 	addi	r16,r16,4
  80d7dc:	8f001526 	beq	r17,fp,80d834 <__sprint_r.part.0+0xcc>
  80d7e0:	81400017 	ldw	r5,0(r16)
  80d7e4:	980d883a 	mov	r6,r19
  80d7e8:	a009883a 	mov	r4,r20
  80d7ec:	080f1900 	call	80f190 <_fputwc_r>
  80d7f0:	e7000044 	addi	fp,fp,1
  80d7f4:	14bff81e 	bne	r2,r18,80d7d8 <__alt_mem_onchip_mem+0xff8057d8>
  80d7f8:	9005883a 	mov	r2,r18
  80d7fc:	a8000215 	stw	zero,8(r21)
  80d800:	a8000115 	stw	zero,4(r21)
  80d804:	dfc00917 	ldw	ra,36(sp)
  80d808:	df000817 	ldw	fp,32(sp)
  80d80c:	ddc00717 	ldw	r23,28(sp)
  80d810:	dd800617 	ldw	r22,24(sp)
  80d814:	dd400517 	ldw	r21,20(sp)
  80d818:	dd000417 	ldw	r20,16(sp)
  80d81c:	dcc00317 	ldw	r19,12(sp)
  80d820:	dc800217 	ldw	r18,8(sp)
  80d824:	dc400117 	ldw	r17,4(sp)
  80d828:	dc000017 	ldw	r16,0(sp)
  80d82c:	dec00a04 	addi	sp,sp,40
  80d830:	f800283a 	ret
  80d834:	a8800217 	ldw	r2,8(r21)
  80d838:	8c63883a 	add	r17,r17,r17
  80d83c:	8c63883a 	add	r17,r17,r17
  80d840:	1445c83a 	sub	r2,r2,r17
  80d844:	a8800215 	stw	r2,8(r21)
  80d848:	b5800204 	addi	r22,r22,8
  80d84c:	bdc00204 	addi	r23,r23,8
  80d850:	103fdb1e 	bne	r2,zero,80d7c0 <__alt_mem_onchip_mem+0xff8057c0>
  80d854:	0005883a 	mov	r2,zero
  80d858:	003fe806 	br	80d7fc <__alt_mem_onchip_mem+0xff8057fc>
  80d85c:	080a9900 	call	80a990 <__sfvwrite_r>
  80d860:	003fe606 	br	80d7fc <__alt_mem_onchip_mem+0xff8057fc>

0080d864 <__sprint_r>:
  80d864:	30c00217 	ldw	r3,8(r6)
  80d868:	18000126 	beq	r3,zero,80d870 <__sprint_r+0xc>
  80d86c:	080d7681 	jmpi	80d768 <__sprint_r.part.0>
  80d870:	30000115 	stw	zero,4(r6)
  80d874:	0005883a 	mov	r2,zero
  80d878:	f800283a 	ret

0080d87c <___vfiprintf_internal_r>:
  80d87c:	deffc904 	addi	sp,sp,-220
  80d880:	df003515 	stw	fp,212(sp)
  80d884:	dd003115 	stw	r20,196(sp)
  80d888:	dfc03615 	stw	ra,216(sp)
  80d88c:	ddc03415 	stw	r23,208(sp)
  80d890:	dd803315 	stw	r22,204(sp)
  80d894:	dd403215 	stw	r21,200(sp)
  80d898:	dcc03015 	stw	r19,192(sp)
  80d89c:	dc802f15 	stw	r18,188(sp)
  80d8a0:	dc402e15 	stw	r17,184(sp)
  80d8a4:	dc002d15 	stw	r16,180(sp)
  80d8a8:	d9002015 	stw	r4,128(sp)
  80d8ac:	d9c02215 	stw	r7,136(sp)
  80d8b0:	2829883a 	mov	r20,r5
  80d8b4:	3039883a 	mov	fp,r6
  80d8b8:	20000226 	beq	r4,zero,80d8c4 <___vfiprintf_internal_r+0x48>
  80d8bc:	20800e17 	ldw	r2,56(r4)
  80d8c0:	1000cf26 	beq	r2,zero,80dc00 <___vfiprintf_internal_r+0x384>
  80d8c4:	a080030b 	ldhu	r2,12(r20)
  80d8c8:	10c8000c 	andi	r3,r2,8192
  80d8cc:	1800061e 	bne	r3,zero,80d8e8 <___vfiprintf_internal_r+0x6c>
  80d8d0:	a1001917 	ldw	r4,100(r20)
  80d8d4:	00f7ffc4 	movi	r3,-8193
  80d8d8:	10880014 	ori	r2,r2,8192
  80d8dc:	20c6703a 	and	r3,r4,r3
  80d8e0:	a080030d 	sth	r2,12(r20)
  80d8e4:	a0c01915 	stw	r3,100(r20)
  80d8e8:	10c0020c 	andi	r3,r2,8
  80d8ec:	1800a926 	beq	r3,zero,80db94 <___vfiprintf_internal_r+0x318>
  80d8f0:	a0c00417 	ldw	r3,16(r20)
  80d8f4:	1800a726 	beq	r3,zero,80db94 <___vfiprintf_internal_r+0x318>
  80d8f8:	1080068c 	andi	r2,r2,26
  80d8fc:	00c00284 	movi	r3,10
  80d900:	10c0ac26 	beq	r2,r3,80dbb4 <___vfiprintf_internal_r+0x338>
  80d904:	da801a04 	addi	r10,sp,104
  80d908:	da801e15 	stw	r10,120(sp)
  80d90c:	d8801e17 	ldw	r2,120(sp)
  80d910:	da8019c4 	addi	r10,sp,103
  80d914:	05802074 	movhi	r22,129
  80d918:	05c02074 	movhi	r23,129
  80d91c:	da801f15 	stw	r10,124(sp)
  80d920:	1295c83a 	sub	r10,r2,r10
  80d924:	b594e204 	addi	r22,r22,21384
  80d928:	bdd4de04 	addi	r23,r23,21368
  80d92c:	dec01a15 	stw	sp,104(sp)
  80d930:	d8001c15 	stw	zero,112(sp)
  80d934:	d8001b15 	stw	zero,108(sp)
  80d938:	d8002615 	stw	zero,152(sp)
  80d93c:	d8002315 	stw	zero,140(sp)
  80d940:	da802715 	stw	r10,156(sp)
  80d944:	d811883a 	mov	r8,sp
  80d948:	dd002115 	stw	r20,132(sp)
  80d94c:	e021883a 	mov	r16,fp
  80d950:	80800007 	ldb	r2,0(r16)
  80d954:	1003ea26 	beq	r2,zero,80e900 <___vfiprintf_internal_r+0x1084>
  80d958:	00c00944 	movi	r3,37
  80d95c:	8025883a 	mov	r18,r16
  80d960:	10c0021e 	bne	r2,r3,80d96c <___vfiprintf_internal_r+0xf0>
  80d964:	00001606 	br	80d9c0 <___vfiprintf_internal_r+0x144>
  80d968:	10c00326 	beq	r2,r3,80d978 <___vfiprintf_internal_r+0xfc>
  80d96c:	94800044 	addi	r18,r18,1
  80d970:	90800007 	ldb	r2,0(r18)
  80d974:	103ffc1e 	bne	r2,zero,80d968 <__alt_mem_onchip_mem+0xff805968>
  80d978:	9423c83a 	sub	r17,r18,r16
  80d97c:	88001026 	beq	r17,zero,80d9c0 <___vfiprintf_internal_r+0x144>
  80d980:	d8c01c17 	ldw	r3,112(sp)
  80d984:	d8801b17 	ldw	r2,108(sp)
  80d988:	44000015 	stw	r16,0(r8)
  80d98c:	88c7883a 	add	r3,r17,r3
  80d990:	10800044 	addi	r2,r2,1
  80d994:	44400115 	stw	r17,4(r8)
  80d998:	d8c01c15 	stw	r3,112(sp)
  80d99c:	d8801b15 	stw	r2,108(sp)
  80d9a0:	010001c4 	movi	r4,7
  80d9a4:	2080760e 	bge	r4,r2,80db80 <___vfiprintf_internal_r+0x304>
  80d9a8:	1803821e 	bne	r3,zero,80e7b4 <___vfiprintf_internal_r+0xf38>
  80d9ac:	da802317 	ldw	r10,140(sp)
  80d9b0:	d8001b15 	stw	zero,108(sp)
  80d9b4:	d811883a 	mov	r8,sp
  80d9b8:	5455883a 	add	r10,r10,r17
  80d9bc:	da802315 	stw	r10,140(sp)
  80d9c0:	90800007 	ldb	r2,0(r18)
  80d9c4:	10044626 	beq	r2,zero,80eae0 <___vfiprintf_internal_r+0x1264>
  80d9c8:	90c00047 	ldb	r3,1(r18)
  80d9cc:	94000044 	addi	r16,r18,1
  80d9d0:	d8001d85 	stb	zero,118(sp)
  80d9d4:	0009883a 	mov	r4,zero
  80d9d8:	000f883a 	mov	r7,zero
  80d9dc:	027fffc4 	movi	r9,-1
  80d9e0:	0023883a 	mov	r17,zero
  80d9e4:	0029883a 	mov	r20,zero
  80d9e8:	01401604 	movi	r5,88
  80d9ec:	01800244 	movi	r6,9
  80d9f0:	03400a84 	movi	r13,42
  80d9f4:	03001b04 	movi	r12,108
  80d9f8:	84000044 	addi	r16,r16,1
  80d9fc:	18bff804 	addi	r2,r3,-32
  80da00:	28827336 	bltu	r5,r2,80e3d0 <___vfiprintf_internal_r+0xb54>
  80da04:	100490ba 	slli	r2,r2,2
  80da08:	02802074 	movhi	r10,129
  80da0c:	52b68704 	addi	r10,r10,-9700
  80da10:	1285883a 	add	r2,r2,r10
  80da14:	10800017 	ldw	r2,0(r2)
  80da18:	1000683a 	jmp	r2
  80da1c:	0080e104 	movi	r2,900
  80da20:	0080e3d0 	cmplti	r2,zero,911
  80da24:	0080e3d0 	cmplti	r2,zero,911
  80da28:	0080e124 	muli	r2,zero,900
  80da2c:	0080e3d0 	cmplti	r2,zero,911
  80da30:	0080e3d0 	cmplti	r2,zero,911
  80da34:	0080e3d0 	cmplti	r2,zero,911
  80da38:	0080e3d0 	cmplti	r2,zero,911
  80da3c:	0080e3d0 	cmplti	r2,zero,911
  80da40:	0080e3d0 	cmplti	r2,zero,911
  80da44:	0080e30c 	andi	r2,zero,908
  80da48:	0080e328 	cmpgeui	r2,zero,908
  80da4c:	0080e3d0 	cmplti	r2,zero,911
  80da50:	0080dc10 	cmplti	r2,zero,880
  80da54:	0080e338 	rdprs	r2,zero,908
  80da58:	0080e3d0 	cmplti	r2,zero,911
  80da5c:	0080e130 	cmpltui	r2,zero,900
  80da60:	0080e13c 	xorhi	r2,zero,900
  80da64:	0080e13c 	xorhi	r2,zero,900
  80da68:	0080e13c 	xorhi	r2,zero,900
  80da6c:	0080e13c 	xorhi	r2,zero,900
  80da70:	0080e13c 	xorhi	r2,zero,900
  80da74:	0080e13c 	xorhi	r2,zero,900
  80da78:	0080e13c 	xorhi	r2,zero,900
  80da7c:	0080e13c 	xorhi	r2,zero,900
  80da80:	0080e13c 	xorhi	r2,zero,900
  80da84:	0080e3d0 	cmplti	r2,zero,911
  80da88:	0080e3d0 	cmplti	r2,zero,911
  80da8c:	0080e3d0 	cmplti	r2,zero,911
  80da90:	0080e3d0 	cmplti	r2,zero,911
  80da94:	0080e3d0 	cmplti	r2,zero,911
  80da98:	0080e3d0 	cmplti	r2,zero,911
  80da9c:	0080e3d0 	cmplti	r2,zero,911
  80daa0:	0080e3d0 	cmplti	r2,zero,911
  80daa4:	0080e3d0 	cmplti	r2,zero,911
  80daa8:	0080e3d0 	cmplti	r2,zero,911
  80daac:	0080e168 	cmpgeui	r2,zero,901
  80dab0:	0080e3d0 	cmplti	r2,zero,911
  80dab4:	0080e3d0 	cmplti	r2,zero,911
  80dab8:	0080e3d0 	cmplti	r2,zero,911
  80dabc:	0080e3d0 	cmplti	r2,zero,911
  80dac0:	0080e3d0 	cmplti	r2,zero,911
  80dac4:	0080e3d0 	cmplti	r2,zero,911
  80dac8:	0080e3d0 	cmplti	r2,zero,911
  80dacc:	0080e3d0 	cmplti	r2,zero,911
  80dad0:	0080e3d0 	cmplti	r2,zero,911
  80dad4:	0080e3d0 	cmplti	r2,zero,911
  80dad8:	0080e1a0 	cmpeqi	r2,zero,902
  80dadc:	0080e3d0 	cmplti	r2,zero,911
  80dae0:	0080e3d0 	cmplti	r2,zero,911
  80dae4:	0080e3d0 	cmplti	r2,zero,911
  80dae8:	0080e3d0 	cmplti	r2,zero,911
  80daec:	0080e3d0 	cmplti	r2,zero,911
  80daf0:	0080e1f8 	rdprs	r2,zero,903
  80daf4:	0080e3d0 	cmplti	r2,zero,911
  80daf8:	0080e3d0 	cmplti	r2,zero,911
  80dafc:	0080e268 	cmpgeui	r2,zero,905
  80db00:	0080e3d0 	cmplti	r2,zero,911
  80db04:	0080e3d0 	cmplti	r2,zero,911
  80db08:	0080e3d0 	cmplti	r2,zero,911
  80db0c:	0080e3d0 	cmplti	r2,zero,911
  80db10:	0080e3d0 	cmplti	r2,zero,911
  80db14:	0080e3d0 	cmplti	r2,zero,911
  80db18:	0080e3d0 	cmplti	r2,zero,911
  80db1c:	0080e3d0 	cmplti	r2,zero,911
  80db20:	0080e3d0 	cmplti	r2,zero,911
  80db24:	0080e3d0 	cmplti	r2,zero,911
  80db28:	0080e014 	movui	r2,896
  80db2c:	0080e040 	call	80e04 <__reset-0x77f1fc>
  80db30:	0080e3d0 	cmplti	r2,zero,911
  80db34:	0080e3d0 	cmplti	r2,zero,911
  80db38:	0080e3d0 	cmplti	r2,zero,911
  80db3c:	0080e378 	rdprs	r2,zero,909
  80db40:	0080e040 	call	80e04 <__reset-0x77f1fc>
  80db44:	0080e3d0 	cmplti	r2,zero,911
  80db48:	0080e3d0 	cmplti	r2,zero,911
  80db4c:	0080ded4 	movui	r2,891
  80db50:	0080e3d0 	cmplti	r2,zero,911
  80db54:	0080dee4 	muli	r2,zero,891
  80db58:	0080df20 	cmpeqi	r2,zero,892
  80db5c:	0080dc1c 	xori	r2,zero,880
  80db60:	0080dec8 	cmpgei	r2,zero,891
  80db64:	0080e3d0 	cmplti	r2,zero,911
  80db68:	0080e2a4 	muli	r2,zero,906
  80db6c:	0080e3d0 	cmplti	r2,zero,911
  80db70:	0080e2fc 	xorhi	r2,zero,907
  80db74:	0080e3d0 	cmplti	r2,zero,911
  80db78:	0080e3d0 	cmplti	r2,zero,911
  80db7c:	0080dfc0 	call	80dfc <__reset-0x77f204>
  80db80:	42000204 	addi	r8,r8,8
  80db84:	da802317 	ldw	r10,140(sp)
  80db88:	5455883a 	add	r10,r10,r17
  80db8c:	da802315 	stw	r10,140(sp)
  80db90:	003f8b06 	br	80d9c0 <__alt_mem_onchip_mem+0xff8059c0>
  80db94:	d9002017 	ldw	r4,128(sp)
  80db98:	a00b883a 	mov	r5,r20
  80db9c:	08085380 	call	808538 <__swsetup_r>
  80dba0:	1003b11e 	bne	r2,zero,80ea68 <___vfiprintf_internal_r+0x11ec>
  80dba4:	a080030b 	ldhu	r2,12(r20)
  80dba8:	00c00284 	movi	r3,10
  80dbac:	1080068c 	andi	r2,r2,26
  80dbb0:	10ff541e 	bne	r2,r3,80d904 <__alt_mem_onchip_mem+0xff805904>
  80dbb4:	a080038f 	ldh	r2,14(r20)
  80dbb8:	103f5216 	blt	r2,zero,80d904 <__alt_mem_onchip_mem+0xff805904>
  80dbbc:	d9c02217 	ldw	r7,136(sp)
  80dbc0:	d9002017 	ldw	r4,128(sp)
  80dbc4:	e00d883a 	mov	r6,fp
  80dbc8:	a00b883a 	mov	r5,r20
  80dbcc:	080ecf40 	call	80ecf4 <__sbprintf>
  80dbd0:	dfc03617 	ldw	ra,216(sp)
  80dbd4:	df003517 	ldw	fp,212(sp)
  80dbd8:	ddc03417 	ldw	r23,208(sp)
  80dbdc:	dd803317 	ldw	r22,204(sp)
  80dbe0:	dd403217 	ldw	r21,200(sp)
  80dbe4:	dd003117 	ldw	r20,196(sp)
  80dbe8:	dcc03017 	ldw	r19,192(sp)
  80dbec:	dc802f17 	ldw	r18,188(sp)
  80dbf0:	dc402e17 	ldw	r17,184(sp)
  80dbf4:	dc002d17 	ldw	r16,180(sp)
  80dbf8:	dec03704 	addi	sp,sp,220
  80dbfc:	f800283a 	ret
  80dc00:	080a50c0 	call	80a50c <__sinit>
  80dc04:	003f2f06 	br	80d8c4 <__alt_mem_onchip_mem+0xff8058c4>
  80dc08:	0463c83a 	sub	r17,zero,r17
  80dc0c:	d8802215 	stw	r2,136(sp)
  80dc10:	a5000114 	ori	r20,r20,4
  80dc14:	80c00007 	ldb	r3,0(r16)
  80dc18:	003f7706 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80dc1c:	00800c04 	movi	r2,48
  80dc20:	da802217 	ldw	r10,136(sp)
  80dc24:	d8801d05 	stb	r2,116(sp)
  80dc28:	00801e04 	movi	r2,120
  80dc2c:	d8801d45 	stb	r2,117(sp)
  80dc30:	d8001d85 	stb	zero,118(sp)
  80dc34:	50c00104 	addi	r3,r10,4
  80dc38:	54800017 	ldw	r18,0(r10)
  80dc3c:	0027883a 	mov	r19,zero
  80dc40:	a0800094 	ori	r2,r20,2
  80dc44:	48030b16 	blt	r9,zero,80e874 <___vfiprintf_internal_r+0xff8>
  80dc48:	00bfdfc4 	movi	r2,-129
  80dc4c:	a096703a 	and	r11,r20,r2
  80dc50:	d8c02215 	stw	r3,136(sp)
  80dc54:	5d000094 	ori	r20,r11,2
  80dc58:	90032b1e 	bne	r18,zero,80e908 <___vfiprintf_internal_r+0x108c>
  80dc5c:	00802074 	movhi	r2,129
  80dc60:	10947d04 	addi	r2,r2,20980
  80dc64:	d8802615 	stw	r2,152(sp)
  80dc68:	0039883a 	mov	fp,zero
  80dc6c:	48017b1e 	bne	r9,zero,80e25c <___vfiprintf_internal_r+0x9e0>
  80dc70:	0013883a 	mov	r9,zero
  80dc74:	0027883a 	mov	r19,zero
  80dc78:	dd401a04 	addi	r21,sp,104
  80dc7c:	4825883a 	mov	r18,r9
  80dc80:	4cc0010e 	bge	r9,r19,80dc88 <___vfiprintf_internal_r+0x40c>
  80dc84:	9825883a 	mov	r18,r19
  80dc88:	e7003fcc 	andi	fp,fp,255
  80dc8c:	e700201c 	xori	fp,fp,128
  80dc90:	e73fe004 	addi	fp,fp,-128
  80dc94:	e0000126 	beq	fp,zero,80dc9c <___vfiprintf_internal_r+0x420>
  80dc98:	94800044 	addi	r18,r18,1
  80dc9c:	a380008c 	andi	r14,r20,2
  80dca0:	70000126 	beq	r14,zero,80dca8 <___vfiprintf_internal_r+0x42c>
  80dca4:	94800084 	addi	r18,r18,2
  80dca8:	a700210c 	andi	fp,r20,132
  80dcac:	e001df1e 	bne	fp,zero,80e42c <___vfiprintf_internal_r+0xbb0>
  80dcb0:	8c87c83a 	sub	r3,r17,r18
  80dcb4:	00c1dd0e 	bge	zero,r3,80e42c <___vfiprintf_internal_r+0xbb0>
  80dcb8:	01c00404 	movi	r7,16
  80dcbc:	d8801c17 	ldw	r2,112(sp)
  80dcc0:	38c3ad0e 	bge	r7,r3,80eb78 <___vfiprintf_internal_r+0x12fc>
  80dcc4:	02802074 	movhi	r10,129
  80dcc8:	5294e204 	addi	r10,r10,21384
  80dccc:	dc002915 	stw	r16,164(sp)
  80dcd0:	d9801b17 	ldw	r6,108(sp)
  80dcd4:	da802415 	stw	r10,144(sp)
  80dcd8:	03c001c4 	movi	r15,7
  80dcdc:	da402515 	stw	r9,148(sp)
  80dce0:	db802815 	stw	r14,160(sp)
  80dce4:	1821883a 	mov	r16,r3
  80dce8:	00000506 	br	80dd00 <___vfiprintf_internal_r+0x484>
  80dcec:	31400084 	addi	r5,r6,2
  80dcf0:	42000204 	addi	r8,r8,8
  80dcf4:	200d883a 	mov	r6,r4
  80dcf8:	843ffc04 	addi	r16,r16,-16
  80dcfc:	3c000d0e 	bge	r7,r16,80dd34 <___vfiprintf_internal_r+0x4b8>
  80dd00:	10800404 	addi	r2,r2,16
  80dd04:	31000044 	addi	r4,r6,1
  80dd08:	45800015 	stw	r22,0(r8)
  80dd0c:	41c00115 	stw	r7,4(r8)
  80dd10:	d8801c15 	stw	r2,112(sp)
  80dd14:	d9001b15 	stw	r4,108(sp)
  80dd18:	793ff40e 	bge	r15,r4,80dcec <__alt_mem_onchip_mem+0xff805cec>
  80dd1c:	1001b51e 	bne	r2,zero,80e3f4 <___vfiprintf_internal_r+0xb78>
  80dd20:	843ffc04 	addi	r16,r16,-16
  80dd24:	000d883a 	mov	r6,zero
  80dd28:	01400044 	movi	r5,1
  80dd2c:	d811883a 	mov	r8,sp
  80dd30:	3c3ff316 	blt	r7,r16,80dd00 <__alt_mem_onchip_mem+0xff805d00>
  80dd34:	8007883a 	mov	r3,r16
  80dd38:	da402517 	ldw	r9,148(sp)
  80dd3c:	db802817 	ldw	r14,160(sp)
  80dd40:	dc002917 	ldw	r16,164(sp)
  80dd44:	da802417 	ldw	r10,144(sp)
  80dd48:	1885883a 	add	r2,r3,r2
  80dd4c:	40c00115 	stw	r3,4(r8)
  80dd50:	42800015 	stw	r10,0(r8)
  80dd54:	d8801c15 	stw	r2,112(sp)
  80dd58:	d9401b15 	stw	r5,108(sp)
  80dd5c:	00c001c4 	movi	r3,7
  80dd60:	19426016 	blt	r3,r5,80e6e4 <___vfiprintf_internal_r+0xe68>
  80dd64:	d8c01d87 	ldb	r3,118(sp)
  80dd68:	42000204 	addi	r8,r8,8
  80dd6c:	29000044 	addi	r4,r5,1
  80dd70:	1801b31e 	bne	r3,zero,80e440 <___vfiprintf_internal_r+0xbc4>
  80dd74:	7001c026 	beq	r14,zero,80e478 <___vfiprintf_internal_r+0xbfc>
  80dd78:	d8c01d04 	addi	r3,sp,116
  80dd7c:	10800084 	addi	r2,r2,2
  80dd80:	40c00015 	stw	r3,0(r8)
  80dd84:	00c00084 	movi	r3,2
  80dd88:	40c00115 	stw	r3,4(r8)
  80dd8c:	d8801c15 	stw	r2,112(sp)
  80dd90:	d9001b15 	stw	r4,108(sp)
  80dd94:	00c001c4 	movi	r3,7
  80dd98:	1902650e 	bge	r3,r4,80e730 <___vfiprintf_internal_r+0xeb4>
  80dd9c:	10029a1e 	bne	r2,zero,80e808 <___vfiprintf_internal_r+0xf8c>
  80dda0:	00c02004 	movi	r3,128
  80dda4:	01000044 	movi	r4,1
  80dda8:	000b883a 	mov	r5,zero
  80ddac:	d811883a 	mov	r8,sp
  80ddb0:	e0c1b31e 	bne	fp,r3,80e480 <___vfiprintf_internal_r+0xc04>
  80ddb4:	8cb9c83a 	sub	fp,r17,r18
  80ddb8:	0701b10e 	bge	zero,fp,80e480 <___vfiprintf_internal_r+0xc04>
  80ddbc:	01c00404 	movi	r7,16
  80ddc0:	3f03890e 	bge	r7,fp,80ebe8 <___vfiprintf_internal_r+0x136c>
  80ddc4:	00c02074 	movhi	r3,129
  80ddc8:	18d4de04 	addi	r3,r3,21368
  80ddcc:	d8c02415 	stw	r3,144(sp)
  80ddd0:	8007883a 	mov	r3,r16
  80ddd4:	034001c4 	movi	r13,7
  80ddd8:	e021883a 	mov	r16,fp
  80dddc:	da402515 	stw	r9,148(sp)
  80dde0:	1839883a 	mov	fp,r3
  80dde4:	00000506 	br	80ddfc <___vfiprintf_internal_r+0x580>
  80dde8:	29800084 	addi	r6,r5,2
  80ddec:	42000204 	addi	r8,r8,8
  80ddf0:	180b883a 	mov	r5,r3
  80ddf4:	843ffc04 	addi	r16,r16,-16
  80ddf8:	3c000d0e 	bge	r7,r16,80de30 <___vfiprintf_internal_r+0x5b4>
  80ddfc:	10800404 	addi	r2,r2,16
  80de00:	28c00044 	addi	r3,r5,1
  80de04:	45c00015 	stw	r23,0(r8)
  80de08:	41c00115 	stw	r7,4(r8)
  80de0c:	d8801c15 	stw	r2,112(sp)
  80de10:	d8c01b15 	stw	r3,108(sp)
  80de14:	68fff40e 	bge	r13,r3,80dde8 <__alt_mem_onchip_mem+0xff805de8>
  80de18:	1002241e 	bne	r2,zero,80e6ac <___vfiprintf_internal_r+0xe30>
  80de1c:	843ffc04 	addi	r16,r16,-16
  80de20:	01800044 	movi	r6,1
  80de24:	000b883a 	mov	r5,zero
  80de28:	d811883a 	mov	r8,sp
  80de2c:	3c3ff316 	blt	r7,r16,80ddfc <__alt_mem_onchip_mem+0xff805dfc>
  80de30:	da402517 	ldw	r9,148(sp)
  80de34:	e007883a 	mov	r3,fp
  80de38:	8039883a 	mov	fp,r16
  80de3c:	1821883a 	mov	r16,r3
  80de40:	d8c02417 	ldw	r3,144(sp)
  80de44:	1705883a 	add	r2,r2,fp
  80de48:	47000115 	stw	fp,4(r8)
  80de4c:	40c00015 	stw	r3,0(r8)
  80de50:	d8801c15 	stw	r2,112(sp)
  80de54:	d9801b15 	stw	r6,108(sp)
  80de58:	00c001c4 	movi	r3,7
  80de5c:	19827616 	blt	r3,r6,80e838 <___vfiprintf_internal_r+0xfbc>
  80de60:	4cf9c83a 	sub	fp,r9,r19
  80de64:	42000204 	addi	r8,r8,8
  80de68:	31000044 	addi	r4,r6,1
  80de6c:	300b883a 	mov	r5,r6
  80de70:	07018516 	blt	zero,fp,80e488 <___vfiprintf_internal_r+0xc0c>
  80de74:	9885883a 	add	r2,r19,r2
  80de78:	45400015 	stw	r21,0(r8)
  80de7c:	44c00115 	stw	r19,4(r8)
  80de80:	d8801c15 	stw	r2,112(sp)
  80de84:	d9001b15 	stw	r4,108(sp)
  80de88:	00c001c4 	movi	r3,7
  80de8c:	1901dd0e 	bge	r3,r4,80e604 <___vfiprintf_internal_r+0xd88>
  80de90:	1002401e 	bne	r2,zero,80e794 <___vfiprintf_internal_r+0xf18>
  80de94:	d8001b15 	stw	zero,108(sp)
  80de98:	a2c0010c 	andi	r11,r20,4
  80de9c:	58000226 	beq	r11,zero,80dea8 <___vfiprintf_internal_r+0x62c>
  80dea0:	8ca7c83a 	sub	r19,r17,r18
  80dea4:	04c2f216 	blt	zero,r19,80ea70 <___vfiprintf_internal_r+0x11f4>
  80dea8:	8c80010e 	bge	r17,r18,80deb0 <___vfiprintf_internal_r+0x634>
  80deac:	9023883a 	mov	r17,r18
  80deb0:	da802317 	ldw	r10,140(sp)
  80deb4:	5455883a 	add	r10,r10,r17
  80deb8:	da802315 	stw	r10,140(sp)
  80debc:	d8001b15 	stw	zero,108(sp)
  80dec0:	d811883a 	mov	r8,sp
  80dec4:	003ea206 	br	80d950 <__alt_mem_onchip_mem+0xff805950>
  80dec8:	a5000814 	ori	r20,r20,32
  80decc:	80c00007 	ldb	r3,0(r16)
  80ded0:	003ec906 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80ded4:	80c00007 	ldb	r3,0(r16)
  80ded8:	1b030926 	beq	r3,r12,80eb00 <___vfiprintf_internal_r+0x1284>
  80dedc:	a5000414 	ori	r20,r20,16
  80dee0:	003ec506 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80dee4:	21003fcc 	andi	r4,r4,255
  80dee8:	20035e1e 	bne	r4,zero,80ec64 <___vfiprintf_internal_r+0x13e8>
  80deec:	a080080c 	andi	r2,r20,32
  80def0:	1002a526 	beq	r2,zero,80e988 <___vfiprintf_internal_r+0x110c>
  80def4:	da802217 	ldw	r10,136(sp)
  80def8:	50800017 	ldw	r2,0(r10)
  80defc:	da802317 	ldw	r10,140(sp)
  80df00:	5007d7fa 	srai	r3,r10,31
  80df04:	da802217 	ldw	r10,136(sp)
  80df08:	10c00115 	stw	r3,4(r2)
  80df0c:	52800104 	addi	r10,r10,4
  80df10:	da802215 	stw	r10,136(sp)
  80df14:	da802317 	ldw	r10,140(sp)
  80df18:	12800015 	stw	r10,0(r2)
  80df1c:	003e8c06 	br	80d950 <__alt_mem_onchip_mem+0xff805950>
  80df20:	21003fcc 	andi	r4,r4,255
  80df24:	2003511e 	bne	r4,zero,80ec6c <___vfiprintf_internal_r+0x13f0>
  80df28:	a080080c 	andi	r2,r20,32
  80df2c:	1000a126 	beq	r2,zero,80e1b4 <___vfiprintf_internal_r+0x938>
  80df30:	da802217 	ldw	r10,136(sp)
  80df34:	d8001d85 	stb	zero,118(sp)
  80df38:	50800204 	addi	r2,r10,8
  80df3c:	54800017 	ldw	r18,0(r10)
  80df40:	54c00117 	ldw	r19,4(r10)
  80df44:	4802b416 	blt	r9,zero,80ea18 <___vfiprintf_internal_r+0x119c>
  80df48:	013fdfc4 	movi	r4,-129
  80df4c:	94c6b03a 	or	r3,r18,r19
  80df50:	d8802215 	stw	r2,136(sp)
  80df54:	a128703a 	and	r20,r20,r4
  80df58:	1800a226 	beq	r3,zero,80e1e4 <___vfiprintf_internal_r+0x968>
  80df5c:	0039883a 	mov	fp,zero
  80df60:	dd401a04 	addi	r21,sp,104
  80df64:	9006d0fa 	srli	r3,r18,3
  80df68:	9808977a 	slli	r4,r19,29
  80df6c:	9826d0fa 	srli	r19,r19,3
  80df70:	948001cc 	andi	r18,r18,7
  80df74:	90800c04 	addi	r2,r18,48
  80df78:	ad7fffc4 	addi	r21,r21,-1
  80df7c:	20e4b03a 	or	r18,r4,r3
  80df80:	a8800005 	stb	r2,0(r21)
  80df84:	94c6b03a 	or	r3,r18,r19
  80df88:	183ff61e 	bne	r3,zero,80df64 <__alt_mem_onchip_mem+0xff805f64>
  80df8c:	a0c0004c 	andi	r3,r20,1
  80df90:	18005926 	beq	r3,zero,80e0f8 <___vfiprintf_internal_r+0x87c>
  80df94:	10803fcc 	andi	r2,r2,255
  80df98:	1080201c 	xori	r2,r2,128
  80df9c:	10bfe004 	addi	r2,r2,-128
  80dfa0:	00c00c04 	movi	r3,48
  80dfa4:	10c05426 	beq	r2,r3,80e0f8 <___vfiprintf_internal_r+0x87c>
  80dfa8:	da801e17 	ldw	r10,120(sp)
  80dfac:	a8bfffc4 	addi	r2,r21,-1
  80dfb0:	a8ffffc5 	stb	r3,-1(r21)
  80dfb4:	50a7c83a 	sub	r19,r10,r2
  80dfb8:	102b883a 	mov	r21,r2
  80dfbc:	003f2f06 	br	80dc7c <__alt_mem_onchip_mem+0xff805c7c>
  80dfc0:	21003fcc 	andi	r4,r4,255
  80dfc4:	2003421e 	bne	r4,zero,80ecd0 <___vfiprintf_internal_r+0x1454>
  80dfc8:	00802074 	movhi	r2,129
  80dfcc:	10947d04 	addi	r2,r2,20980
  80dfd0:	d8802615 	stw	r2,152(sp)
  80dfd4:	a080080c 	andi	r2,r20,32
  80dfd8:	1000aa26 	beq	r2,zero,80e284 <___vfiprintf_internal_r+0xa08>
  80dfdc:	da802217 	ldw	r10,136(sp)
  80dfe0:	54800017 	ldw	r18,0(r10)
  80dfe4:	54c00117 	ldw	r19,4(r10)
  80dfe8:	52800204 	addi	r10,r10,8
  80dfec:	da802215 	stw	r10,136(sp)
  80dff0:	a080004c 	andi	r2,r20,1
  80dff4:	1001d226 	beq	r2,zero,80e740 <___vfiprintf_internal_r+0xec4>
  80dff8:	94c4b03a 	or	r2,r18,r19
  80dffc:	1002351e 	bne	r2,zero,80e8d4 <___vfiprintf_internal_r+0x1058>
  80e000:	d8001d85 	stb	zero,118(sp)
  80e004:	48022216 	blt	r9,zero,80e890 <___vfiprintf_internal_r+0x1014>
  80e008:	00bfdfc4 	movi	r2,-129
  80e00c:	a0a8703a 	and	r20,r20,r2
  80e010:	003f1506 	br	80dc68 <__alt_mem_onchip_mem+0xff805c68>
  80e014:	da802217 	ldw	r10,136(sp)
  80e018:	04800044 	movi	r18,1
  80e01c:	d8001d85 	stb	zero,118(sp)
  80e020:	50800017 	ldw	r2,0(r10)
  80e024:	52800104 	addi	r10,r10,4
  80e028:	da802215 	stw	r10,136(sp)
  80e02c:	d8801005 	stb	r2,64(sp)
  80e030:	9027883a 	mov	r19,r18
  80e034:	dd401004 	addi	r21,sp,64
  80e038:	0013883a 	mov	r9,zero
  80e03c:	003f1706 	br	80dc9c <__alt_mem_onchip_mem+0xff805c9c>
  80e040:	21003fcc 	andi	r4,r4,255
  80e044:	2003201e 	bne	r4,zero,80ecc8 <___vfiprintf_internal_r+0x144c>
  80e048:	a080080c 	andi	r2,r20,32
  80e04c:	10004b26 	beq	r2,zero,80e17c <___vfiprintf_internal_r+0x900>
  80e050:	da802217 	ldw	r10,136(sp)
  80e054:	50800117 	ldw	r2,4(r10)
  80e058:	54800017 	ldw	r18,0(r10)
  80e05c:	52800204 	addi	r10,r10,8
  80e060:	da802215 	stw	r10,136(sp)
  80e064:	1027883a 	mov	r19,r2
  80e068:	10022c16 	blt	r2,zero,80e91c <___vfiprintf_internal_r+0x10a0>
  80e06c:	df001d83 	ldbu	fp,118(sp)
  80e070:	48007216 	blt	r9,zero,80e23c <___vfiprintf_internal_r+0x9c0>
  80e074:	00ffdfc4 	movi	r3,-129
  80e078:	94c4b03a 	or	r2,r18,r19
  80e07c:	a0e8703a 	and	r20,r20,r3
  80e080:	1000cc26 	beq	r2,zero,80e3b4 <___vfiprintf_internal_r+0xb38>
  80e084:	98021026 	beq	r19,zero,80e8c8 <___vfiprintf_internal_r+0x104c>
  80e088:	dc402415 	stw	r17,144(sp)
  80e08c:	dc002515 	stw	r16,148(sp)
  80e090:	9823883a 	mov	r17,r19
  80e094:	9021883a 	mov	r16,r18
  80e098:	dd401a04 	addi	r21,sp,104
  80e09c:	4825883a 	mov	r18,r9
  80e0a0:	4027883a 	mov	r19,r8
  80e0a4:	8009883a 	mov	r4,r16
  80e0a8:	880b883a 	mov	r5,r17
  80e0ac:	01800284 	movi	r6,10
  80e0b0:	000f883a 	mov	r7,zero
  80e0b4:	080fc5c0 	call	80fc5c <__umoddi3>
  80e0b8:	10800c04 	addi	r2,r2,48
  80e0bc:	ad7fffc4 	addi	r21,r21,-1
  80e0c0:	8009883a 	mov	r4,r16
  80e0c4:	880b883a 	mov	r5,r17
  80e0c8:	a8800005 	stb	r2,0(r21)
  80e0cc:	01800284 	movi	r6,10
  80e0d0:	000f883a 	mov	r7,zero
  80e0d4:	080f6e40 	call	80f6e4 <__udivdi3>
  80e0d8:	1021883a 	mov	r16,r2
  80e0dc:	10c4b03a 	or	r2,r2,r3
  80e0e0:	1823883a 	mov	r17,r3
  80e0e4:	103fef1e 	bne	r2,zero,80e0a4 <__alt_mem_onchip_mem+0xff8060a4>
  80e0e8:	dc402417 	ldw	r17,144(sp)
  80e0ec:	dc002517 	ldw	r16,148(sp)
  80e0f0:	9013883a 	mov	r9,r18
  80e0f4:	9811883a 	mov	r8,r19
  80e0f8:	da801e17 	ldw	r10,120(sp)
  80e0fc:	5567c83a 	sub	r19,r10,r21
  80e100:	003ede06 	br	80dc7c <__alt_mem_onchip_mem+0xff805c7c>
  80e104:	38803fcc 	andi	r2,r7,255
  80e108:	1080201c 	xori	r2,r2,128
  80e10c:	10bfe004 	addi	r2,r2,-128
  80e110:	1002371e 	bne	r2,zero,80e9f0 <___vfiprintf_internal_r+0x1174>
  80e114:	01000044 	movi	r4,1
  80e118:	01c00804 	movi	r7,32
  80e11c:	80c00007 	ldb	r3,0(r16)
  80e120:	003e3506 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80e124:	a5000054 	ori	r20,r20,1
  80e128:	80c00007 	ldb	r3,0(r16)
  80e12c:	003e3206 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80e130:	a5002014 	ori	r20,r20,128
  80e134:	80c00007 	ldb	r3,0(r16)
  80e138:	003e2f06 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80e13c:	8015883a 	mov	r10,r16
  80e140:	0023883a 	mov	r17,zero
  80e144:	18bff404 	addi	r2,r3,-48
  80e148:	50c00007 	ldb	r3,0(r10)
  80e14c:	8c4002a4 	muli	r17,r17,10
  80e150:	84000044 	addi	r16,r16,1
  80e154:	8015883a 	mov	r10,r16
  80e158:	1463883a 	add	r17,r2,r17
  80e15c:	18bff404 	addi	r2,r3,-48
  80e160:	30bff92e 	bgeu	r6,r2,80e148 <__alt_mem_onchip_mem+0xff806148>
  80e164:	003e2506 	br	80d9fc <__alt_mem_onchip_mem+0xff8059fc>
  80e168:	21003fcc 	andi	r4,r4,255
  80e16c:	2002d41e 	bne	r4,zero,80ecc0 <___vfiprintf_internal_r+0x1444>
  80e170:	a5000414 	ori	r20,r20,16
  80e174:	a080080c 	andi	r2,r20,32
  80e178:	103fb51e 	bne	r2,zero,80e050 <__alt_mem_onchip_mem+0xff806050>
  80e17c:	a080040c 	andi	r2,r20,16
  80e180:	1001f826 	beq	r2,zero,80e964 <___vfiprintf_internal_r+0x10e8>
  80e184:	da802217 	ldw	r10,136(sp)
  80e188:	54800017 	ldw	r18,0(r10)
  80e18c:	52800104 	addi	r10,r10,4
  80e190:	da802215 	stw	r10,136(sp)
  80e194:	9027d7fa 	srai	r19,r18,31
  80e198:	9805883a 	mov	r2,r19
  80e19c:	003fb206 	br	80e068 <__alt_mem_onchip_mem+0xff806068>
  80e1a0:	21003fcc 	andi	r4,r4,255
  80e1a4:	2002c41e 	bne	r4,zero,80ecb8 <___vfiprintf_internal_r+0x143c>
  80e1a8:	a5000414 	ori	r20,r20,16
  80e1ac:	a080080c 	andi	r2,r20,32
  80e1b0:	103f5f1e 	bne	r2,zero,80df30 <__alt_mem_onchip_mem+0xff805f30>
  80e1b4:	a080040c 	andi	r2,r20,16
  80e1b8:	10020f26 	beq	r2,zero,80e9f8 <___vfiprintf_internal_r+0x117c>
  80e1bc:	da802217 	ldw	r10,136(sp)
  80e1c0:	d8001d85 	stb	zero,118(sp)
  80e1c4:	0027883a 	mov	r19,zero
  80e1c8:	50800104 	addi	r2,r10,4
  80e1cc:	54800017 	ldw	r18,0(r10)
  80e1d0:	48021116 	blt	r9,zero,80ea18 <___vfiprintf_internal_r+0x119c>
  80e1d4:	00ffdfc4 	movi	r3,-129
  80e1d8:	d8802215 	stw	r2,136(sp)
  80e1dc:	a0e8703a 	and	r20,r20,r3
  80e1e0:	903f5e1e 	bne	r18,zero,80df5c <__alt_mem_onchip_mem+0xff805f5c>
  80e1e4:	0039883a 	mov	fp,zero
  80e1e8:	4802a626 	beq	r9,zero,80ec84 <___vfiprintf_internal_r+0x1408>
  80e1ec:	0025883a 	mov	r18,zero
  80e1f0:	0027883a 	mov	r19,zero
  80e1f4:	003f5a06 	br	80df60 <__alt_mem_onchip_mem+0xff805f60>
  80e1f8:	21003fcc 	andi	r4,r4,255
  80e1fc:	20029f1e 	bne	r4,zero,80ec7c <___vfiprintf_internal_r+0x1400>
  80e200:	a5000414 	ori	r20,r20,16
  80e204:	a080080c 	andi	r2,r20,32
  80e208:	10005e1e 	bne	r2,zero,80e384 <___vfiprintf_internal_r+0xb08>
  80e20c:	a080040c 	andi	r2,r20,16
  80e210:	1001a21e 	bne	r2,zero,80e89c <___vfiprintf_internal_r+0x1020>
  80e214:	a080100c 	andi	r2,r20,64
  80e218:	d8001d85 	stb	zero,118(sp)
  80e21c:	da802217 	ldw	r10,136(sp)
  80e220:	1002231e 	bne	r2,zero,80eab0 <___vfiprintf_internal_r+0x1234>
  80e224:	50800104 	addi	r2,r10,4
  80e228:	54800017 	ldw	r18,0(r10)
  80e22c:	0027883a 	mov	r19,zero
  80e230:	4801a00e 	bge	r9,zero,80e8b4 <___vfiprintf_internal_r+0x1038>
  80e234:	d8802215 	stw	r2,136(sp)
  80e238:	0039883a 	mov	fp,zero
  80e23c:	94c4b03a 	or	r2,r18,r19
  80e240:	103f901e 	bne	r2,zero,80e084 <__alt_mem_onchip_mem+0xff806084>
  80e244:	00800044 	movi	r2,1
  80e248:	10803fcc 	andi	r2,r2,255
  80e24c:	00c00044 	movi	r3,1
  80e250:	10c05926 	beq	r2,r3,80e3b8 <___vfiprintf_internal_r+0xb3c>
  80e254:	00c00084 	movi	r3,2
  80e258:	10ffe41e 	bne	r2,r3,80e1ec <__alt_mem_onchip_mem+0xff8061ec>
  80e25c:	0025883a 	mov	r18,zero
  80e260:	0027883a 	mov	r19,zero
  80e264:	00013d06 	br	80e75c <___vfiprintf_internal_r+0xee0>
  80e268:	21003fcc 	andi	r4,r4,255
  80e26c:	2002811e 	bne	r4,zero,80ec74 <___vfiprintf_internal_r+0x13f8>
  80e270:	00802074 	movhi	r2,129
  80e274:	10947804 	addi	r2,r2,20960
  80e278:	d8802615 	stw	r2,152(sp)
  80e27c:	a080080c 	andi	r2,r20,32
  80e280:	103f561e 	bne	r2,zero,80dfdc <__alt_mem_onchip_mem+0xff805fdc>
  80e284:	a080040c 	andi	r2,r20,16
  80e288:	1001d126 	beq	r2,zero,80e9d0 <___vfiprintf_internal_r+0x1154>
  80e28c:	da802217 	ldw	r10,136(sp)
  80e290:	0027883a 	mov	r19,zero
  80e294:	54800017 	ldw	r18,0(r10)
  80e298:	52800104 	addi	r10,r10,4
  80e29c:	da802215 	stw	r10,136(sp)
  80e2a0:	003f5306 	br	80dff0 <__alt_mem_onchip_mem+0xff805ff0>
  80e2a4:	da802217 	ldw	r10,136(sp)
  80e2a8:	d8001d85 	stb	zero,118(sp)
  80e2ac:	55400017 	ldw	r21,0(r10)
  80e2b0:	50c00104 	addi	r3,r10,4
  80e2b4:	a8024226 	beq	r21,zero,80ebc0 <___vfiprintf_internal_r+0x1344>
  80e2b8:	48021816 	blt	r9,zero,80eb1c <___vfiprintf_internal_r+0x12a0>
  80e2bc:	480d883a 	mov	r6,r9
  80e2c0:	000b883a 	mov	r5,zero
  80e2c4:	a809883a 	mov	r4,r21
  80e2c8:	d8c02a15 	stw	r3,168(sp)
  80e2cc:	da002b15 	stw	r8,172(sp)
  80e2d0:	da402c15 	stw	r9,176(sp)
  80e2d4:	080ba780 	call	80ba78 <memchr>
  80e2d8:	d8c02a17 	ldw	r3,168(sp)
  80e2dc:	da002b17 	ldw	r8,172(sp)
  80e2e0:	da402c17 	ldw	r9,176(sp)
  80e2e4:	10024826 	beq	r2,zero,80ec08 <___vfiprintf_internal_r+0x138c>
  80e2e8:	1567c83a 	sub	r19,r2,r21
  80e2ec:	df001d83 	ldbu	fp,118(sp)
  80e2f0:	d8c02215 	stw	r3,136(sp)
  80e2f4:	0013883a 	mov	r9,zero
  80e2f8:	003e6006 	br	80dc7c <__alt_mem_onchip_mem+0xff805c7c>
  80e2fc:	21003fcc 	andi	r4,r4,255
  80e300:	203fc026 	beq	r4,zero,80e204 <__alt_mem_onchip_mem+0xff806204>
  80e304:	d9c01d85 	stb	r7,118(sp)
  80e308:	003fbe06 	br	80e204 <__alt_mem_onchip_mem+0xff806204>
  80e30c:	da802217 	ldw	r10,136(sp)
  80e310:	54400017 	ldw	r17,0(r10)
  80e314:	50800104 	addi	r2,r10,4
  80e318:	883e3b16 	blt	r17,zero,80dc08 <__alt_mem_onchip_mem+0xff805c08>
  80e31c:	d8802215 	stw	r2,136(sp)
  80e320:	80c00007 	ldb	r3,0(r16)
  80e324:	003db406 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80e328:	01000044 	movi	r4,1
  80e32c:	01c00ac4 	movi	r7,43
  80e330:	80c00007 	ldb	r3,0(r16)
  80e334:	003db006 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80e338:	80c00007 	ldb	r3,0(r16)
  80e33c:	82800044 	addi	r10,r16,1
  80e340:	1b423c26 	beq	r3,r13,80ec34 <___vfiprintf_internal_r+0x13b8>
  80e344:	18bff404 	addi	r2,r3,-48
  80e348:	0013883a 	mov	r9,zero
  80e34c:	30822b36 	bltu	r6,r2,80ebfc <___vfiprintf_internal_r+0x1380>
  80e350:	50c00007 	ldb	r3,0(r10)
  80e354:	4a4002a4 	muli	r9,r9,10
  80e358:	54000044 	addi	r16,r10,1
  80e35c:	8015883a 	mov	r10,r16
  80e360:	4893883a 	add	r9,r9,r2
  80e364:	18bff404 	addi	r2,r3,-48
  80e368:	30bff92e 	bgeu	r6,r2,80e350 <__alt_mem_onchip_mem+0xff806350>
  80e36c:	483da30e 	bge	r9,zero,80d9fc <__alt_mem_onchip_mem+0xff8059fc>
  80e370:	027fffc4 	movi	r9,-1
  80e374:	003da106 	br	80d9fc <__alt_mem_onchip_mem+0xff8059fc>
  80e378:	a5001014 	ori	r20,r20,64
  80e37c:	80c00007 	ldb	r3,0(r16)
  80e380:	003d9d06 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80e384:	da802217 	ldw	r10,136(sp)
  80e388:	d8001d85 	stb	zero,118(sp)
  80e38c:	50c00204 	addi	r3,r10,8
  80e390:	54800017 	ldw	r18,0(r10)
  80e394:	54c00117 	ldw	r19,4(r10)
  80e398:	4801ca16 	blt	r9,zero,80eac4 <___vfiprintf_internal_r+0x1248>
  80e39c:	013fdfc4 	movi	r4,-129
  80e3a0:	94c4b03a 	or	r2,r18,r19
  80e3a4:	d8c02215 	stw	r3,136(sp)
  80e3a8:	a128703a 	and	r20,r20,r4
  80e3ac:	0039883a 	mov	fp,zero
  80e3b0:	103f341e 	bne	r2,zero,80e084 <__alt_mem_onchip_mem+0xff806084>
  80e3b4:	483e2e26 	beq	r9,zero,80dc70 <__alt_mem_onchip_mem+0xff805c70>
  80e3b8:	0025883a 	mov	r18,zero
  80e3bc:	94800c04 	addi	r18,r18,48
  80e3c0:	dc8019c5 	stb	r18,103(sp)
  80e3c4:	dcc02717 	ldw	r19,156(sp)
  80e3c8:	dd4019c4 	addi	r21,sp,103
  80e3cc:	003e2b06 	br	80dc7c <__alt_mem_onchip_mem+0xff805c7c>
  80e3d0:	21003fcc 	andi	r4,r4,255
  80e3d4:	2002361e 	bne	r4,zero,80ecb0 <___vfiprintf_internal_r+0x1434>
  80e3d8:	1801c126 	beq	r3,zero,80eae0 <___vfiprintf_internal_r+0x1264>
  80e3dc:	04800044 	movi	r18,1
  80e3e0:	d8c01005 	stb	r3,64(sp)
  80e3e4:	d8001d85 	stb	zero,118(sp)
  80e3e8:	9027883a 	mov	r19,r18
  80e3ec:	dd401004 	addi	r21,sp,64
  80e3f0:	003f1106 	br	80e038 <__alt_mem_onchip_mem+0xff806038>
  80e3f4:	d9402117 	ldw	r5,132(sp)
  80e3f8:	d9002017 	ldw	r4,128(sp)
  80e3fc:	d9801a04 	addi	r6,sp,104
  80e400:	d9c02b15 	stw	r7,172(sp)
  80e404:	dbc02a15 	stw	r15,168(sp)
  80e408:	080d7680 	call	80d768 <__sprint_r.part.0>
  80e40c:	d9c02b17 	ldw	r7,172(sp)
  80e410:	dbc02a17 	ldw	r15,168(sp)
  80e414:	10006d1e 	bne	r2,zero,80e5cc <___vfiprintf_internal_r+0xd50>
  80e418:	d9801b17 	ldw	r6,108(sp)
  80e41c:	d8801c17 	ldw	r2,112(sp)
  80e420:	d811883a 	mov	r8,sp
  80e424:	31400044 	addi	r5,r6,1
  80e428:	003e3306 	br	80dcf8 <__alt_mem_onchip_mem+0xff805cf8>
  80e42c:	d9401b17 	ldw	r5,108(sp)
  80e430:	d8801c17 	ldw	r2,112(sp)
  80e434:	29000044 	addi	r4,r5,1
  80e438:	d8c01d87 	ldb	r3,118(sp)
  80e43c:	183e4d26 	beq	r3,zero,80dd74 <__alt_mem_onchip_mem+0xff805d74>
  80e440:	00c00044 	movi	r3,1
  80e444:	d9401d84 	addi	r5,sp,118
  80e448:	10c5883a 	add	r2,r2,r3
  80e44c:	41400015 	stw	r5,0(r8)
  80e450:	40c00115 	stw	r3,4(r8)
  80e454:	d8801c15 	stw	r2,112(sp)
  80e458:	d9001b15 	stw	r4,108(sp)
  80e45c:	014001c4 	movi	r5,7
  80e460:	2900a90e 	bge	r5,r4,80e708 <___vfiprintf_internal_r+0xe8c>
  80e464:	1000da1e 	bne	r2,zero,80e7d0 <___vfiprintf_internal_r+0xf54>
  80e468:	7000ab1e 	bne	r14,zero,80e718 <___vfiprintf_internal_r+0xe9c>
  80e46c:	000b883a 	mov	r5,zero
  80e470:	1809883a 	mov	r4,r3
  80e474:	d811883a 	mov	r8,sp
  80e478:	00c02004 	movi	r3,128
  80e47c:	e0fe4d26 	beq	fp,r3,80ddb4 <__alt_mem_onchip_mem+0xff805db4>
  80e480:	4cf9c83a 	sub	fp,r9,r19
  80e484:	073e7b0e 	bge	zero,fp,80de74 <__alt_mem_onchip_mem+0xff805e74>
  80e488:	01c00404 	movi	r7,16
  80e48c:	3f01900e 	bge	r7,fp,80ead0 <___vfiprintf_internal_r+0x1254>
  80e490:	00c02074 	movhi	r3,129
  80e494:	18d4de04 	addi	r3,r3,21368
  80e498:	d8c02415 	stw	r3,144(sp)
  80e49c:	034001c4 	movi	r13,7
  80e4a0:	00000506 	br	80e4b8 <___vfiprintf_internal_r+0xc3c>
  80e4a4:	29000084 	addi	r4,r5,2
  80e4a8:	42000204 	addi	r8,r8,8
  80e4ac:	180b883a 	mov	r5,r3
  80e4b0:	e73ffc04 	addi	fp,fp,-16
  80e4b4:	3f000d0e 	bge	r7,fp,80e4ec <___vfiprintf_internal_r+0xc70>
  80e4b8:	10800404 	addi	r2,r2,16
  80e4bc:	28c00044 	addi	r3,r5,1
  80e4c0:	45c00015 	stw	r23,0(r8)
  80e4c4:	41c00115 	stw	r7,4(r8)
  80e4c8:	d8801c15 	stw	r2,112(sp)
  80e4cc:	d8c01b15 	stw	r3,108(sp)
  80e4d0:	68fff40e 	bge	r13,r3,80e4a4 <__alt_mem_onchip_mem+0xff8064a4>
  80e4d4:	1000101e 	bne	r2,zero,80e518 <___vfiprintf_internal_r+0xc9c>
  80e4d8:	e73ffc04 	addi	fp,fp,-16
  80e4dc:	01000044 	movi	r4,1
  80e4e0:	000b883a 	mov	r5,zero
  80e4e4:	d811883a 	mov	r8,sp
  80e4e8:	3f3ff316 	blt	r7,fp,80e4b8 <__alt_mem_onchip_mem+0xff8064b8>
  80e4ec:	da802417 	ldw	r10,144(sp)
  80e4f0:	1705883a 	add	r2,r2,fp
  80e4f4:	47000115 	stw	fp,4(r8)
  80e4f8:	42800015 	stw	r10,0(r8)
  80e4fc:	d8801c15 	stw	r2,112(sp)
  80e500:	d9001b15 	stw	r4,108(sp)
  80e504:	00c001c4 	movi	r3,7
  80e508:	19003616 	blt	r3,r4,80e5e4 <___vfiprintf_internal_r+0xd68>
  80e50c:	42000204 	addi	r8,r8,8
  80e510:	21000044 	addi	r4,r4,1
  80e514:	003e5706 	br	80de74 <__alt_mem_onchip_mem+0xff805e74>
  80e518:	d9402117 	ldw	r5,132(sp)
  80e51c:	d9002017 	ldw	r4,128(sp)
  80e520:	d9801a04 	addi	r6,sp,104
  80e524:	d9c02b15 	stw	r7,172(sp)
  80e528:	db402a15 	stw	r13,168(sp)
  80e52c:	080d7680 	call	80d768 <__sprint_r.part.0>
  80e530:	d9c02b17 	ldw	r7,172(sp)
  80e534:	db402a17 	ldw	r13,168(sp)
  80e538:	1000241e 	bne	r2,zero,80e5cc <___vfiprintf_internal_r+0xd50>
  80e53c:	d9401b17 	ldw	r5,108(sp)
  80e540:	d8801c17 	ldw	r2,112(sp)
  80e544:	d811883a 	mov	r8,sp
  80e548:	29000044 	addi	r4,r5,1
  80e54c:	003fd806 	br	80e4b0 <__alt_mem_onchip_mem+0xff8064b0>
  80e550:	d9401b17 	ldw	r5,108(sp)
  80e554:	00c02074 	movhi	r3,129
  80e558:	18d4e204 	addi	r3,r3,21384
  80e55c:	d8c02415 	stw	r3,144(sp)
  80e560:	29400044 	addi	r5,r5,1
  80e564:	d8c02417 	ldw	r3,144(sp)
  80e568:	14c5883a 	add	r2,r2,r19
  80e56c:	44c00115 	stw	r19,4(r8)
  80e570:	40c00015 	stw	r3,0(r8)
  80e574:	d8801c15 	stw	r2,112(sp)
  80e578:	d9401b15 	stw	r5,108(sp)
  80e57c:	00c001c4 	movi	r3,7
  80e580:	1940070e 	bge	r3,r5,80e5a0 <___vfiprintf_internal_r+0xd24>
  80e584:	103e4826 	beq	r2,zero,80dea8 <__alt_mem_onchip_mem+0xff805ea8>
  80e588:	d9402117 	ldw	r5,132(sp)
  80e58c:	d9002017 	ldw	r4,128(sp)
  80e590:	d9801a04 	addi	r6,sp,104
  80e594:	080d7680 	call	80d768 <__sprint_r.part.0>
  80e598:	10000c1e 	bne	r2,zero,80e5cc <___vfiprintf_internal_r+0xd50>
  80e59c:	d8801c17 	ldw	r2,112(sp)
  80e5a0:	8c80010e 	bge	r17,r18,80e5a8 <___vfiprintf_internal_r+0xd2c>
  80e5a4:	9023883a 	mov	r17,r18
  80e5a8:	da802317 	ldw	r10,140(sp)
  80e5ac:	5455883a 	add	r10,r10,r17
  80e5b0:	da802315 	stw	r10,140(sp)
  80e5b4:	103e4126 	beq	r2,zero,80debc <__alt_mem_onchip_mem+0xff805ebc>
  80e5b8:	d9402117 	ldw	r5,132(sp)
  80e5bc:	d9002017 	ldw	r4,128(sp)
  80e5c0:	d9801a04 	addi	r6,sp,104
  80e5c4:	080d7680 	call	80d768 <__sprint_r.part.0>
  80e5c8:	103e3c26 	beq	r2,zero,80debc <__alt_mem_onchip_mem+0xff805ebc>
  80e5cc:	dd002117 	ldw	r20,132(sp)
  80e5d0:	a080030b 	ldhu	r2,12(r20)
  80e5d4:	1080100c 	andi	r2,r2,64
  80e5d8:	1001231e 	bne	r2,zero,80ea68 <___vfiprintf_internal_r+0x11ec>
  80e5dc:	d8802317 	ldw	r2,140(sp)
  80e5e0:	003d7b06 	br	80dbd0 <__alt_mem_onchip_mem+0xff805bd0>
  80e5e4:	1000991e 	bne	r2,zero,80e84c <___vfiprintf_internal_r+0xfd0>
  80e5e8:	00c00044 	movi	r3,1
  80e5ec:	9805883a 	mov	r2,r19
  80e5f0:	dd400015 	stw	r21,0(sp)
  80e5f4:	dcc00115 	stw	r19,4(sp)
  80e5f8:	dcc01c15 	stw	r19,112(sp)
  80e5fc:	d8c01b15 	stw	r3,108(sp)
  80e600:	d811883a 	mov	r8,sp
  80e604:	42000204 	addi	r8,r8,8
  80e608:	a2c0010c 	andi	r11,r20,4
  80e60c:	583fe426 	beq	r11,zero,80e5a0 <__alt_mem_onchip_mem+0xff8065a0>
  80e610:	8ca7c83a 	sub	r19,r17,r18
  80e614:	04ffe20e 	bge	zero,r19,80e5a0 <__alt_mem_onchip_mem+0xff8065a0>
  80e618:	01c00404 	movi	r7,16
  80e61c:	3cffcc0e 	bge	r7,r19,80e550 <__alt_mem_onchip_mem+0xff806550>
  80e620:	02802074 	movhi	r10,129
  80e624:	5294e204 	addi	r10,r10,21384
  80e628:	d9001b17 	ldw	r4,108(sp)
  80e62c:	da802415 	stw	r10,144(sp)
  80e630:	382b883a 	mov	r21,r7
  80e634:	050001c4 	movi	r20,7
  80e638:	df002017 	ldw	fp,128(sp)
  80e63c:	00000506 	br	80e654 <___vfiprintf_internal_r+0xdd8>
  80e640:	21400084 	addi	r5,r4,2
  80e644:	42000204 	addi	r8,r8,8
  80e648:	1809883a 	mov	r4,r3
  80e64c:	9cfffc04 	addi	r19,r19,-16
  80e650:	acffc40e 	bge	r21,r19,80e564 <__alt_mem_onchip_mem+0xff806564>
  80e654:	10800404 	addi	r2,r2,16
  80e658:	20c00044 	addi	r3,r4,1
  80e65c:	45800015 	stw	r22,0(r8)
  80e660:	45400115 	stw	r21,4(r8)
  80e664:	d8801c15 	stw	r2,112(sp)
  80e668:	d8c01b15 	stw	r3,108(sp)
  80e66c:	a0fff40e 	bge	r20,r3,80e640 <__alt_mem_onchip_mem+0xff806640>
  80e670:	1000041e 	bne	r2,zero,80e684 <___vfiprintf_internal_r+0xe08>
  80e674:	01400044 	movi	r5,1
  80e678:	0009883a 	mov	r4,zero
  80e67c:	d811883a 	mov	r8,sp
  80e680:	003ff206 	br	80e64c <__alt_mem_onchip_mem+0xff80664c>
  80e684:	d9402117 	ldw	r5,132(sp)
  80e688:	d9801a04 	addi	r6,sp,104
  80e68c:	e009883a 	mov	r4,fp
  80e690:	080d7680 	call	80d768 <__sprint_r.part.0>
  80e694:	103fcd1e 	bne	r2,zero,80e5cc <__alt_mem_onchip_mem+0xff8065cc>
  80e698:	d9001b17 	ldw	r4,108(sp)
  80e69c:	d8801c17 	ldw	r2,112(sp)
  80e6a0:	d811883a 	mov	r8,sp
  80e6a4:	21400044 	addi	r5,r4,1
  80e6a8:	003fe806 	br	80e64c <__alt_mem_onchip_mem+0xff80664c>
  80e6ac:	d9402117 	ldw	r5,132(sp)
  80e6b0:	d9002017 	ldw	r4,128(sp)
  80e6b4:	d9801a04 	addi	r6,sp,104
  80e6b8:	d9c02b15 	stw	r7,172(sp)
  80e6bc:	db402a15 	stw	r13,168(sp)
  80e6c0:	080d7680 	call	80d768 <__sprint_r.part.0>
  80e6c4:	d9c02b17 	ldw	r7,172(sp)
  80e6c8:	db402a17 	ldw	r13,168(sp)
  80e6cc:	103fbf1e 	bne	r2,zero,80e5cc <__alt_mem_onchip_mem+0xff8065cc>
  80e6d0:	d9401b17 	ldw	r5,108(sp)
  80e6d4:	d8801c17 	ldw	r2,112(sp)
  80e6d8:	d811883a 	mov	r8,sp
  80e6dc:	29800044 	addi	r6,r5,1
  80e6e0:	003dc406 	br	80ddf4 <__alt_mem_onchip_mem+0xff805df4>
  80e6e4:	1000d21e 	bne	r2,zero,80ea30 <___vfiprintf_internal_r+0x11b4>
  80e6e8:	d8c01d87 	ldb	r3,118(sp)
  80e6ec:	18009526 	beq	r3,zero,80e944 <___vfiprintf_internal_r+0x10c8>
  80e6f0:	00800044 	movi	r2,1
  80e6f4:	d8c01d84 	addi	r3,sp,118
  80e6f8:	1009883a 	mov	r4,r2
  80e6fc:	d8c00015 	stw	r3,0(sp)
  80e700:	d8800115 	stw	r2,4(sp)
  80e704:	d811883a 	mov	r8,sp
  80e708:	200b883a 	mov	r5,r4
  80e70c:	42000204 	addi	r8,r8,8
  80e710:	21000044 	addi	r4,r4,1
  80e714:	003d9706 	br	80dd74 <__alt_mem_onchip_mem+0xff805d74>
  80e718:	d9001d04 	addi	r4,sp,116
  80e71c:	00800084 	movi	r2,2
  80e720:	d9000015 	stw	r4,0(sp)
  80e724:	d8800115 	stw	r2,4(sp)
  80e728:	1809883a 	mov	r4,r3
  80e72c:	d811883a 	mov	r8,sp
  80e730:	200b883a 	mov	r5,r4
  80e734:	42000204 	addi	r8,r8,8
  80e738:	21000044 	addi	r4,r4,1
  80e73c:	003f4e06 	br	80e478 <__alt_mem_onchip_mem+0xff806478>
  80e740:	d8001d85 	stb	zero,118(sp)
  80e744:	48005016 	blt	r9,zero,80e888 <___vfiprintf_internal_r+0x100c>
  80e748:	00ffdfc4 	movi	r3,-129
  80e74c:	94c4b03a 	or	r2,r18,r19
  80e750:	a0e8703a 	and	r20,r20,r3
  80e754:	103d4426 	beq	r2,zero,80dc68 <__alt_mem_onchip_mem+0xff805c68>
  80e758:	0039883a 	mov	fp,zero
  80e75c:	d9002617 	ldw	r4,152(sp)
  80e760:	dd401a04 	addi	r21,sp,104
  80e764:	908003cc 	andi	r2,r18,15
  80e768:	9806973a 	slli	r3,r19,28
  80e76c:	2085883a 	add	r2,r4,r2
  80e770:	9024d13a 	srli	r18,r18,4
  80e774:	10800003 	ldbu	r2,0(r2)
  80e778:	9826d13a 	srli	r19,r19,4
  80e77c:	ad7fffc4 	addi	r21,r21,-1
  80e780:	1ca4b03a 	or	r18,r3,r18
  80e784:	a8800005 	stb	r2,0(r21)
  80e788:	94c4b03a 	or	r2,r18,r19
  80e78c:	103ff51e 	bne	r2,zero,80e764 <__alt_mem_onchip_mem+0xff806764>
  80e790:	003e5906 	br	80e0f8 <__alt_mem_onchip_mem+0xff8060f8>
  80e794:	d9402117 	ldw	r5,132(sp)
  80e798:	d9002017 	ldw	r4,128(sp)
  80e79c:	d9801a04 	addi	r6,sp,104
  80e7a0:	080d7680 	call	80d768 <__sprint_r.part.0>
  80e7a4:	103f891e 	bne	r2,zero,80e5cc <__alt_mem_onchip_mem+0xff8065cc>
  80e7a8:	d8801c17 	ldw	r2,112(sp)
  80e7ac:	d811883a 	mov	r8,sp
  80e7b0:	003f9506 	br	80e608 <__alt_mem_onchip_mem+0xff806608>
  80e7b4:	d9402117 	ldw	r5,132(sp)
  80e7b8:	d9002017 	ldw	r4,128(sp)
  80e7bc:	d9801a04 	addi	r6,sp,104
  80e7c0:	080d7680 	call	80d768 <__sprint_r.part.0>
  80e7c4:	103f811e 	bne	r2,zero,80e5cc <__alt_mem_onchip_mem+0xff8065cc>
  80e7c8:	d811883a 	mov	r8,sp
  80e7cc:	003ced06 	br	80db84 <__alt_mem_onchip_mem+0xff805b84>
  80e7d0:	d9402117 	ldw	r5,132(sp)
  80e7d4:	d9002017 	ldw	r4,128(sp)
  80e7d8:	d9801a04 	addi	r6,sp,104
  80e7dc:	da402c15 	stw	r9,176(sp)
  80e7e0:	db802a15 	stw	r14,168(sp)
  80e7e4:	080d7680 	call	80d768 <__sprint_r.part.0>
  80e7e8:	da402c17 	ldw	r9,176(sp)
  80e7ec:	db802a17 	ldw	r14,168(sp)
  80e7f0:	103f761e 	bne	r2,zero,80e5cc <__alt_mem_onchip_mem+0xff8065cc>
  80e7f4:	d9401b17 	ldw	r5,108(sp)
  80e7f8:	d8801c17 	ldw	r2,112(sp)
  80e7fc:	d811883a 	mov	r8,sp
  80e800:	29000044 	addi	r4,r5,1
  80e804:	003d5b06 	br	80dd74 <__alt_mem_onchip_mem+0xff805d74>
  80e808:	d9402117 	ldw	r5,132(sp)
  80e80c:	d9002017 	ldw	r4,128(sp)
  80e810:	d9801a04 	addi	r6,sp,104
  80e814:	da402c15 	stw	r9,176(sp)
  80e818:	080d7680 	call	80d768 <__sprint_r.part.0>
  80e81c:	da402c17 	ldw	r9,176(sp)
  80e820:	103f6a1e 	bne	r2,zero,80e5cc <__alt_mem_onchip_mem+0xff8065cc>
  80e824:	d9401b17 	ldw	r5,108(sp)
  80e828:	d8801c17 	ldw	r2,112(sp)
  80e82c:	d811883a 	mov	r8,sp
  80e830:	29000044 	addi	r4,r5,1
  80e834:	003f1006 	br	80e478 <__alt_mem_onchip_mem+0xff806478>
  80e838:	1000c31e 	bne	r2,zero,80eb48 <___vfiprintf_internal_r+0x12cc>
  80e83c:	01000044 	movi	r4,1
  80e840:	000b883a 	mov	r5,zero
  80e844:	d811883a 	mov	r8,sp
  80e848:	003f0d06 	br	80e480 <__alt_mem_onchip_mem+0xff806480>
  80e84c:	d9402117 	ldw	r5,132(sp)
  80e850:	d9002017 	ldw	r4,128(sp)
  80e854:	d9801a04 	addi	r6,sp,104
  80e858:	080d7680 	call	80d768 <__sprint_r.part.0>
  80e85c:	103f5b1e 	bne	r2,zero,80e5cc <__alt_mem_onchip_mem+0xff8065cc>
  80e860:	d9001b17 	ldw	r4,108(sp)
  80e864:	d8801c17 	ldw	r2,112(sp)
  80e868:	d811883a 	mov	r8,sp
  80e86c:	21000044 	addi	r4,r4,1
  80e870:	003d8006 	br	80de74 <__alt_mem_onchip_mem+0xff805e74>
  80e874:	01002074 	movhi	r4,129
  80e878:	21147d04 	addi	r4,r4,20980
  80e87c:	d9002615 	stw	r4,152(sp)
  80e880:	d8c02215 	stw	r3,136(sp)
  80e884:	1029883a 	mov	r20,r2
  80e888:	94c4b03a 	or	r2,r18,r19
  80e88c:	103fb21e 	bne	r2,zero,80e758 <__alt_mem_onchip_mem+0xff806758>
  80e890:	0039883a 	mov	fp,zero
  80e894:	00800084 	movi	r2,2
  80e898:	003e6b06 	br	80e248 <__alt_mem_onchip_mem+0xff806248>
  80e89c:	da802217 	ldw	r10,136(sp)
  80e8a0:	d8001d85 	stb	zero,118(sp)
  80e8a4:	0027883a 	mov	r19,zero
  80e8a8:	50800104 	addi	r2,r10,4
  80e8ac:	54800017 	ldw	r18,0(r10)
  80e8b0:	483e6016 	blt	r9,zero,80e234 <__alt_mem_onchip_mem+0xff806234>
  80e8b4:	00ffdfc4 	movi	r3,-129
  80e8b8:	d8802215 	stw	r2,136(sp)
  80e8bc:	a0e8703a 	and	r20,r20,r3
  80e8c0:	0039883a 	mov	fp,zero
  80e8c4:	903ebb26 	beq	r18,zero,80e3b4 <__alt_mem_onchip_mem+0xff8063b4>
  80e8c8:	00800244 	movi	r2,9
  80e8cc:	14bdee36 	bltu	r2,r18,80e088 <__alt_mem_onchip_mem+0xff806088>
  80e8d0:	003eba06 	br	80e3bc <__alt_mem_onchip_mem+0xff8063bc>
  80e8d4:	00800c04 	movi	r2,48
  80e8d8:	d8c01d45 	stb	r3,117(sp)
  80e8dc:	d8801d05 	stb	r2,116(sp)
  80e8e0:	d8001d85 	stb	zero,118(sp)
  80e8e4:	a0c00094 	ori	r3,r20,2
  80e8e8:	4800a916 	blt	r9,zero,80eb90 <___vfiprintf_internal_r+0x1314>
  80e8ec:	00bfdfc4 	movi	r2,-129
  80e8f0:	a096703a 	and	r11,r20,r2
  80e8f4:	5d000094 	ori	r20,r11,2
  80e8f8:	0039883a 	mov	fp,zero
  80e8fc:	003f9706 	br	80e75c <__alt_mem_onchip_mem+0xff80675c>
  80e900:	8025883a 	mov	r18,r16
  80e904:	003c2e06 	br	80d9c0 <__alt_mem_onchip_mem+0xff8059c0>
  80e908:	00802074 	movhi	r2,129
  80e90c:	10947d04 	addi	r2,r2,20980
  80e910:	0039883a 	mov	fp,zero
  80e914:	d8802615 	stw	r2,152(sp)
  80e918:	003f9006 	br	80e75c <__alt_mem_onchip_mem+0xff80675c>
  80e91c:	04a5c83a 	sub	r18,zero,r18
  80e920:	07000b44 	movi	fp,45
  80e924:	9004c03a 	cmpne	r2,r18,zero
  80e928:	04e7c83a 	sub	r19,zero,r19
  80e92c:	df001d85 	stb	fp,118(sp)
  80e930:	98a7c83a 	sub	r19,r19,r2
  80e934:	48009f16 	blt	r9,zero,80ebb4 <___vfiprintf_internal_r+0x1338>
  80e938:	00bfdfc4 	movi	r2,-129
  80e93c:	a0a8703a 	and	r20,r20,r2
  80e940:	003dd006 	br	80e084 <__alt_mem_onchip_mem+0xff806084>
  80e944:	70004c26 	beq	r14,zero,80ea78 <___vfiprintf_internal_r+0x11fc>
  80e948:	00800084 	movi	r2,2
  80e94c:	d8c01d04 	addi	r3,sp,116
  80e950:	d8c00015 	stw	r3,0(sp)
  80e954:	d8800115 	stw	r2,4(sp)
  80e958:	01000044 	movi	r4,1
  80e95c:	d811883a 	mov	r8,sp
  80e960:	003f7306 	br	80e730 <__alt_mem_onchip_mem+0xff806730>
  80e964:	a080100c 	andi	r2,r20,64
  80e968:	da802217 	ldw	r10,136(sp)
  80e96c:	103e0626 	beq	r2,zero,80e188 <__alt_mem_onchip_mem+0xff806188>
  80e970:	5480000f 	ldh	r18,0(r10)
  80e974:	52800104 	addi	r10,r10,4
  80e978:	da802215 	stw	r10,136(sp)
  80e97c:	9027d7fa 	srai	r19,r18,31
  80e980:	9805883a 	mov	r2,r19
  80e984:	003db806 	br	80e068 <__alt_mem_onchip_mem+0xff806068>
  80e988:	a080040c 	andi	r2,r20,16
  80e98c:	1000091e 	bne	r2,zero,80e9b4 <___vfiprintf_internal_r+0x1138>
  80e990:	a2c0100c 	andi	r11,r20,64
  80e994:	58000726 	beq	r11,zero,80e9b4 <___vfiprintf_internal_r+0x1138>
  80e998:	da802217 	ldw	r10,136(sp)
  80e99c:	50800017 	ldw	r2,0(r10)
  80e9a0:	52800104 	addi	r10,r10,4
  80e9a4:	da802215 	stw	r10,136(sp)
  80e9a8:	da802317 	ldw	r10,140(sp)
  80e9ac:	1280000d 	sth	r10,0(r2)
  80e9b0:	003be706 	br	80d950 <__alt_mem_onchip_mem+0xff805950>
  80e9b4:	da802217 	ldw	r10,136(sp)
  80e9b8:	50800017 	ldw	r2,0(r10)
  80e9bc:	52800104 	addi	r10,r10,4
  80e9c0:	da802215 	stw	r10,136(sp)
  80e9c4:	da802317 	ldw	r10,140(sp)
  80e9c8:	12800015 	stw	r10,0(r2)
  80e9cc:	003be006 	br	80d950 <__alt_mem_onchip_mem+0xff805950>
  80e9d0:	a080100c 	andi	r2,r20,64
  80e9d4:	da802217 	ldw	r10,136(sp)
  80e9d8:	10003026 	beq	r2,zero,80ea9c <___vfiprintf_internal_r+0x1220>
  80e9dc:	5480000b 	ldhu	r18,0(r10)
  80e9e0:	52800104 	addi	r10,r10,4
  80e9e4:	0027883a 	mov	r19,zero
  80e9e8:	da802215 	stw	r10,136(sp)
  80e9ec:	003d8006 	br	80dff0 <__alt_mem_onchip_mem+0xff805ff0>
  80e9f0:	80c00007 	ldb	r3,0(r16)
  80e9f4:	003c0006 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80e9f8:	a080100c 	andi	r2,r20,64
  80e9fc:	d8001d85 	stb	zero,118(sp)
  80ea00:	da802217 	ldw	r10,136(sp)
  80ea04:	1000201e 	bne	r2,zero,80ea88 <___vfiprintf_internal_r+0x120c>
  80ea08:	50800104 	addi	r2,r10,4
  80ea0c:	54800017 	ldw	r18,0(r10)
  80ea10:	0027883a 	mov	r19,zero
  80ea14:	483def0e 	bge	r9,zero,80e1d4 <__alt_mem_onchip_mem+0xff8061d4>
  80ea18:	94c6b03a 	or	r3,r18,r19
  80ea1c:	d8802215 	stw	r2,136(sp)
  80ea20:	183d4e1e 	bne	r3,zero,80df5c <__alt_mem_onchip_mem+0xff805f5c>
  80ea24:	0039883a 	mov	fp,zero
  80ea28:	0005883a 	mov	r2,zero
  80ea2c:	003e0606 	br	80e248 <__alt_mem_onchip_mem+0xff806248>
  80ea30:	d9402117 	ldw	r5,132(sp)
  80ea34:	d9002017 	ldw	r4,128(sp)
  80ea38:	d9801a04 	addi	r6,sp,104
  80ea3c:	da402c15 	stw	r9,176(sp)
  80ea40:	db802a15 	stw	r14,168(sp)
  80ea44:	080d7680 	call	80d768 <__sprint_r.part.0>
  80ea48:	da402c17 	ldw	r9,176(sp)
  80ea4c:	db802a17 	ldw	r14,168(sp)
  80ea50:	103ede1e 	bne	r2,zero,80e5cc <__alt_mem_onchip_mem+0xff8065cc>
  80ea54:	d9401b17 	ldw	r5,108(sp)
  80ea58:	d8801c17 	ldw	r2,112(sp)
  80ea5c:	d811883a 	mov	r8,sp
  80ea60:	29000044 	addi	r4,r5,1
  80ea64:	003e7406 	br	80e438 <__alt_mem_onchip_mem+0xff806438>
  80ea68:	00bfffc4 	movi	r2,-1
  80ea6c:	003c5806 	br	80dbd0 <__alt_mem_onchip_mem+0xff805bd0>
  80ea70:	d811883a 	mov	r8,sp
  80ea74:	003ee806 	br	80e618 <__alt_mem_onchip_mem+0xff806618>
  80ea78:	000b883a 	mov	r5,zero
  80ea7c:	01000044 	movi	r4,1
  80ea80:	d811883a 	mov	r8,sp
  80ea84:	003e7c06 	br	80e478 <__alt_mem_onchip_mem+0xff806478>
  80ea88:	50800104 	addi	r2,r10,4
  80ea8c:	5480000b 	ldhu	r18,0(r10)
  80ea90:	0027883a 	mov	r19,zero
  80ea94:	483dcf0e 	bge	r9,zero,80e1d4 <__alt_mem_onchip_mem+0xff8061d4>
  80ea98:	003fdf06 	br	80ea18 <__alt_mem_onchip_mem+0xff806a18>
  80ea9c:	54800017 	ldw	r18,0(r10)
  80eaa0:	52800104 	addi	r10,r10,4
  80eaa4:	0027883a 	mov	r19,zero
  80eaa8:	da802215 	stw	r10,136(sp)
  80eaac:	003d5006 	br	80dff0 <__alt_mem_onchip_mem+0xff805ff0>
  80eab0:	50800104 	addi	r2,r10,4
  80eab4:	5480000b 	ldhu	r18,0(r10)
  80eab8:	0027883a 	mov	r19,zero
  80eabc:	483f7d0e 	bge	r9,zero,80e8b4 <__alt_mem_onchip_mem+0xff8068b4>
  80eac0:	003ddc06 	br	80e234 <__alt_mem_onchip_mem+0xff806234>
  80eac4:	d8c02215 	stw	r3,136(sp)
  80eac8:	0039883a 	mov	fp,zero
  80eacc:	003ddb06 	br	80e23c <__alt_mem_onchip_mem+0xff80623c>
  80ead0:	02802074 	movhi	r10,129
  80ead4:	5294de04 	addi	r10,r10,21368
  80ead8:	da802415 	stw	r10,144(sp)
  80eadc:	003e8306 	br	80e4ec <__alt_mem_onchip_mem+0xff8064ec>
  80eae0:	d8801c17 	ldw	r2,112(sp)
  80eae4:	dd002117 	ldw	r20,132(sp)
  80eae8:	103eb926 	beq	r2,zero,80e5d0 <__alt_mem_onchip_mem+0xff8065d0>
  80eaec:	d9002017 	ldw	r4,128(sp)
  80eaf0:	d9801a04 	addi	r6,sp,104
  80eaf4:	a00b883a 	mov	r5,r20
  80eaf8:	080d7680 	call	80d768 <__sprint_r.part.0>
  80eafc:	003eb406 	br	80e5d0 <__alt_mem_onchip_mem+0xff8065d0>
  80eb00:	80c00043 	ldbu	r3,1(r16)
  80eb04:	a5000814 	ori	r20,r20,32
  80eb08:	84000044 	addi	r16,r16,1
  80eb0c:	18c03fcc 	andi	r3,r3,255
  80eb10:	18c0201c 	xori	r3,r3,128
  80eb14:	18ffe004 	addi	r3,r3,-128
  80eb18:	003bb706 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80eb1c:	a809883a 	mov	r4,r21
  80eb20:	d8c02a15 	stw	r3,168(sp)
  80eb24:	da002b15 	stw	r8,172(sp)
  80eb28:	08061d00 	call	8061d0 <strlen>
  80eb2c:	d8c02a17 	ldw	r3,168(sp)
  80eb30:	1027883a 	mov	r19,r2
  80eb34:	df001d83 	ldbu	fp,118(sp)
  80eb38:	d8c02215 	stw	r3,136(sp)
  80eb3c:	0013883a 	mov	r9,zero
  80eb40:	da002b17 	ldw	r8,172(sp)
  80eb44:	003c4d06 	br	80dc7c <__alt_mem_onchip_mem+0xff805c7c>
  80eb48:	d9402117 	ldw	r5,132(sp)
  80eb4c:	d9002017 	ldw	r4,128(sp)
  80eb50:	d9801a04 	addi	r6,sp,104
  80eb54:	da402c15 	stw	r9,176(sp)
  80eb58:	080d7680 	call	80d768 <__sprint_r.part.0>
  80eb5c:	da402c17 	ldw	r9,176(sp)
  80eb60:	103e9a1e 	bne	r2,zero,80e5cc <__alt_mem_onchip_mem+0xff8065cc>
  80eb64:	d9401b17 	ldw	r5,108(sp)
  80eb68:	d8801c17 	ldw	r2,112(sp)
  80eb6c:	d811883a 	mov	r8,sp
  80eb70:	29000044 	addi	r4,r5,1
  80eb74:	003e4206 	br	80e480 <__alt_mem_onchip_mem+0xff806480>
  80eb78:	d9401b17 	ldw	r5,108(sp)
  80eb7c:	01002074 	movhi	r4,129
  80eb80:	2114e204 	addi	r4,r4,21384
  80eb84:	d9002415 	stw	r4,144(sp)
  80eb88:	29400044 	addi	r5,r5,1
  80eb8c:	003c6d06 	br	80dd44 <__alt_mem_onchip_mem+0xff805d44>
  80eb90:	0039883a 	mov	fp,zero
  80eb94:	00800084 	movi	r2,2
  80eb98:	10803fcc 	andi	r2,r2,255
  80eb9c:	01000044 	movi	r4,1
  80eba0:	11001e26 	beq	r2,r4,80ec1c <___vfiprintf_internal_r+0x13a0>
  80eba4:	01000084 	movi	r4,2
  80eba8:	11001e1e 	bne	r2,r4,80ec24 <___vfiprintf_internal_r+0x13a8>
  80ebac:	1829883a 	mov	r20,r3
  80ebb0:	003eea06 	br	80e75c <__alt_mem_onchip_mem+0xff80675c>
  80ebb4:	a007883a 	mov	r3,r20
  80ebb8:	00800044 	movi	r2,1
  80ebbc:	003ff606 	br	80eb98 <__alt_mem_onchip_mem+0xff806b98>
  80ebc0:	00800184 	movi	r2,6
  80ebc4:	1240012e 	bgeu	r2,r9,80ebcc <___vfiprintf_internal_r+0x1350>
  80ebc8:	1013883a 	mov	r9,r2
  80ebcc:	4827883a 	mov	r19,r9
  80ebd0:	4825883a 	mov	r18,r9
  80ebd4:	48001516 	blt	r9,zero,80ec2c <___vfiprintf_internal_r+0x13b0>
  80ebd8:	05402074 	movhi	r21,129
  80ebdc:	d8c02215 	stw	r3,136(sp)
  80ebe0:	ad548204 	addi	r21,r21,21000
  80ebe4:	003d1406 	br	80e038 <__alt_mem_onchip_mem+0xff806038>
  80ebe8:	02802074 	movhi	r10,129
  80ebec:	5294de04 	addi	r10,r10,21368
  80ebf0:	da802415 	stw	r10,144(sp)
  80ebf4:	200d883a 	mov	r6,r4
  80ebf8:	003c9106 	br	80de40 <__alt_mem_onchip_mem+0xff805e40>
  80ebfc:	5021883a 	mov	r16,r10
  80ec00:	0013883a 	mov	r9,zero
  80ec04:	003b7d06 	br	80d9fc <__alt_mem_onchip_mem+0xff8059fc>
  80ec08:	4827883a 	mov	r19,r9
  80ec0c:	df001d83 	ldbu	fp,118(sp)
  80ec10:	d8c02215 	stw	r3,136(sp)
  80ec14:	0013883a 	mov	r9,zero
  80ec18:	003c1806 	br	80dc7c <__alt_mem_onchip_mem+0xff805c7c>
  80ec1c:	1829883a 	mov	r20,r3
  80ec20:	003d1806 	br	80e084 <__alt_mem_onchip_mem+0xff806084>
  80ec24:	1829883a 	mov	r20,r3
  80ec28:	003ccd06 	br	80df60 <__alt_mem_onchip_mem+0xff805f60>
  80ec2c:	0025883a 	mov	r18,zero
  80ec30:	003fe906 	br	80ebd8 <__alt_mem_onchip_mem+0xff806bd8>
  80ec34:	d8802217 	ldw	r2,136(sp)
  80ec38:	80c00043 	ldbu	r3,1(r16)
  80ec3c:	5021883a 	mov	r16,r10
  80ec40:	12400017 	ldw	r9,0(r2)
  80ec44:	10800104 	addi	r2,r2,4
  80ec48:	d8802215 	stw	r2,136(sp)
  80ec4c:	483faf0e 	bge	r9,zero,80eb0c <__alt_mem_onchip_mem+0xff806b0c>
  80ec50:	18c03fcc 	andi	r3,r3,255
  80ec54:	18c0201c 	xori	r3,r3,128
  80ec58:	027fffc4 	movi	r9,-1
  80ec5c:	18ffe004 	addi	r3,r3,-128
  80ec60:	003b6506 	br	80d9f8 <__alt_mem_onchip_mem+0xff8059f8>
  80ec64:	d9c01d85 	stb	r7,118(sp)
  80ec68:	003ca006 	br	80deec <__alt_mem_onchip_mem+0xff805eec>
  80ec6c:	d9c01d85 	stb	r7,118(sp)
  80ec70:	003cad06 	br	80df28 <__alt_mem_onchip_mem+0xff805f28>
  80ec74:	d9c01d85 	stb	r7,118(sp)
  80ec78:	003d7d06 	br	80e270 <__alt_mem_onchip_mem+0xff806270>
  80ec7c:	d9c01d85 	stb	r7,118(sp)
  80ec80:	003d5f06 	br	80e200 <__alt_mem_onchip_mem+0xff806200>
  80ec84:	a080004c 	andi	r2,r20,1
  80ec88:	0039883a 	mov	fp,zero
  80ec8c:	10000526 	beq	r2,zero,80eca4 <___vfiprintf_internal_r+0x1428>
  80ec90:	00800c04 	movi	r2,48
  80ec94:	d88019c5 	stb	r2,103(sp)
  80ec98:	dcc02717 	ldw	r19,156(sp)
  80ec9c:	dd4019c4 	addi	r21,sp,103
  80eca0:	003bf606 	br	80dc7c <__alt_mem_onchip_mem+0xff805c7c>
  80eca4:	0027883a 	mov	r19,zero
  80eca8:	dd401a04 	addi	r21,sp,104
  80ecac:	003bf306 	br	80dc7c <__alt_mem_onchip_mem+0xff805c7c>
  80ecb0:	d9c01d85 	stb	r7,118(sp)
  80ecb4:	003dc806 	br	80e3d8 <__alt_mem_onchip_mem+0xff8063d8>
  80ecb8:	d9c01d85 	stb	r7,118(sp)
  80ecbc:	003d3a06 	br	80e1a8 <__alt_mem_onchip_mem+0xff8061a8>
  80ecc0:	d9c01d85 	stb	r7,118(sp)
  80ecc4:	003d2a06 	br	80e170 <__alt_mem_onchip_mem+0xff806170>
  80ecc8:	d9c01d85 	stb	r7,118(sp)
  80eccc:	003cde06 	br	80e048 <__alt_mem_onchip_mem+0xff806048>
  80ecd0:	d9c01d85 	stb	r7,118(sp)
  80ecd4:	003cbc06 	br	80dfc8 <__alt_mem_onchip_mem+0xff805fc8>

0080ecd8 <__vfiprintf_internal>:
  80ecd8:	00802074 	movhi	r2,129
  80ecdc:	109cbc04 	addi	r2,r2,29424
  80ece0:	300f883a 	mov	r7,r6
  80ece4:	280d883a 	mov	r6,r5
  80ece8:	200b883a 	mov	r5,r4
  80ecec:	11000017 	ldw	r4,0(r2)
  80ecf0:	080d87c1 	jmpi	80d87c <___vfiprintf_internal_r>

0080ecf4 <__sbprintf>:
  80ecf4:	2880030b 	ldhu	r2,12(r5)
  80ecf8:	2ac01917 	ldw	r11,100(r5)
  80ecfc:	2a80038b 	ldhu	r10,14(r5)
  80ed00:	2a400717 	ldw	r9,28(r5)
  80ed04:	2a000917 	ldw	r8,36(r5)
  80ed08:	defee204 	addi	sp,sp,-1144
  80ed0c:	00c10004 	movi	r3,1024
  80ed10:	dc011a15 	stw	r16,1128(sp)
  80ed14:	10bfff4c 	andi	r2,r2,65533
  80ed18:	2821883a 	mov	r16,r5
  80ed1c:	d8cb883a 	add	r5,sp,r3
  80ed20:	dc811c15 	stw	r18,1136(sp)
  80ed24:	dc411b15 	stw	r17,1132(sp)
  80ed28:	dfc11d15 	stw	ra,1140(sp)
  80ed2c:	2025883a 	mov	r18,r4
  80ed30:	d881030d 	sth	r2,1036(sp)
  80ed34:	dac11915 	stw	r11,1124(sp)
  80ed38:	da81038d 	sth	r10,1038(sp)
  80ed3c:	da410715 	stw	r9,1052(sp)
  80ed40:	da010915 	stw	r8,1060(sp)
  80ed44:	dec10015 	stw	sp,1024(sp)
  80ed48:	dec10415 	stw	sp,1040(sp)
  80ed4c:	d8c10215 	stw	r3,1032(sp)
  80ed50:	d8c10515 	stw	r3,1044(sp)
  80ed54:	d8010615 	stw	zero,1048(sp)
  80ed58:	080d87c0 	call	80d87c <___vfiprintf_internal_r>
  80ed5c:	1023883a 	mov	r17,r2
  80ed60:	10000416 	blt	r2,zero,80ed74 <__sbprintf+0x80>
  80ed64:	d9410004 	addi	r5,sp,1024
  80ed68:	9009883a 	mov	r4,r18
  80ed6c:	080a1300 	call	80a130 <_fflush_r>
  80ed70:	10000d1e 	bne	r2,zero,80eda8 <__sbprintf+0xb4>
  80ed74:	d881030b 	ldhu	r2,1036(sp)
  80ed78:	1080100c 	andi	r2,r2,64
  80ed7c:	10000326 	beq	r2,zero,80ed8c <__sbprintf+0x98>
  80ed80:	8080030b 	ldhu	r2,12(r16)
  80ed84:	10801014 	ori	r2,r2,64
  80ed88:	8080030d 	sth	r2,12(r16)
  80ed8c:	8805883a 	mov	r2,r17
  80ed90:	dfc11d17 	ldw	ra,1140(sp)
  80ed94:	dc811c17 	ldw	r18,1136(sp)
  80ed98:	dc411b17 	ldw	r17,1132(sp)
  80ed9c:	dc011a17 	ldw	r16,1128(sp)
  80eda0:	dec11e04 	addi	sp,sp,1144
  80eda4:	f800283a 	ret
  80eda8:	047fffc4 	movi	r17,-1
  80edac:	003ff106 	br	80ed74 <__alt_mem_onchip_mem+0xff806d74>

0080edb0 <_write_r>:
  80edb0:	defffd04 	addi	sp,sp,-12
  80edb4:	2805883a 	mov	r2,r5
  80edb8:	dc000015 	stw	r16,0(sp)
  80edbc:	040020b4 	movhi	r16,130
  80edc0:	dc400115 	stw	r17,4(sp)
  80edc4:	300b883a 	mov	r5,r6
  80edc8:	84240904 	addi	r16,r16,-28636
  80edcc:	2023883a 	mov	r17,r4
  80edd0:	380d883a 	mov	r6,r7
  80edd4:	1009883a 	mov	r4,r2
  80edd8:	dfc00215 	stw	ra,8(sp)
  80eddc:	80000015 	stw	zero,0(r16)
  80ede0:	0811ab00 	call	811ab0 <write>
  80ede4:	00ffffc4 	movi	r3,-1
  80ede8:	10c00526 	beq	r2,r3,80ee00 <_write_r+0x50>
  80edec:	dfc00217 	ldw	ra,8(sp)
  80edf0:	dc400117 	ldw	r17,4(sp)
  80edf4:	dc000017 	ldw	r16,0(sp)
  80edf8:	dec00304 	addi	sp,sp,12
  80edfc:	f800283a 	ret
  80ee00:	80c00017 	ldw	r3,0(r16)
  80ee04:	183ff926 	beq	r3,zero,80edec <__alt_mem_onchip_mem+0xff806dec>
  80ee08:	88c00015 	stw	r3,0(r17)
  80ee0c:	003ff706 	br	80edec <__alt_mem_onchip_mem+0xff806dec>

0080ee10 <_close_r>:
  80ee10:	defffd04 	addi	sp,sp,-12
  80ee14:	dc000015 	stw	r16,0(sp)
  80ee18:	040020b4 	movhi	r16,130
  80ee1c:	dc400115 	stw	r17,4(sp)
  80ee20:	84240904 	addi	r16,r16,-28636
  80ee24:	2023883a 	mov	r17,r4
  80ee28:	2809883a 	mov	r4,r5
  80ee2c:	dfc00215 	stw	ra,8(sp)
  80ee30:	80000015 	stw	zero,0(r16)
  80ee34:	0810f7c0 	call	810f7c <close>
  80ee38:	00ffffc4 	movi	r3,-1
  80ee3c:	10c00526 	beq	r2,r3,80ee54 <_close_r+0x44>
  80ee40:	dfc00217 	ldw	ra,8(sp)
  80ee44:	dc400117 	ldw	r17,4(sp)
  80ee48:	dc000017 	ldw	r16,0(sp)
  80ee4c:	dec00304 	addi	sp,sp,12
  80ee50:	f800283a 	ret
  80ee54:	80c00017 	ldw	r3,0(r16)
  80ee58:	183ff926 	beq	r3,zero,80ee40 <__alt_mem_onchip_mem+0xff806e40>
  80ee5c:	88c00015 	stw	r3,0(r17)
  80ee60:	003ff706 	br	80ee40 <__alt_mem_onchip_mem+0xff806e40>

0080ee64 <_calloc_r>:
  80ee64:	298b383a 	mul	r5,r5,r6
  80ee68:	defffe04 	addi	sp,sp,-8
  80ee6c:	dfc00115 	stw	ra,4(sp)
  80ee70:	dc000015 	stw	r16,0(sp)
  80ee74:	080b26c0 	call	80b26c <_malloc_r>
  80ee78:	10002926 	beq	r2,zero,80ef20 <_calloc_r+0xbc>
  80ee7c:	11bfff17 	ldw	r6,-4(r2)
  80ee80:	1021883a 	mov	r16,r2
  80ee84:	00bfff04 	movi	r2,-4
  80ee88:	308c703a 	and	r6,r6,r2
  80ee8c:	00c00904 	movi	r3,36
  80ee90:	308d883a 	add	r6,r6,r2
  80ee94:	19801636 	bltu	r3,r6,80eef0 <_calloc_r+0x8c>
  80ee98:	008004c4 	movi	r2,19
  80ee9c:	11800b2e 	bgeu	r2,r6,80eecc <_calloc_r+0x68>
  80eea0:	80000015 	stw	zero,0(r16)
  80eea4:	80000115 	stw	zero,4(r16)
  80eea8:	008006c4 	movi	r2,27
  80eeac:	11801a2e 	bgeu	r2,r6,80ef18 <_calloc_r+0xb4>
  80eeb0:	80000215 	stw	zero,8(r16)
  80eeb4:	80000315 	stw	zero,12(r16)
  80eeb8:	30c0151e 	bne	r6,r3,80ef10 <_calloc_r+0xac>
  80eebc:	80000415 	stw	zero,16(r16)
  80eec0:	80800604 	addi	r2,r16,24
  80eec4:	80000515 	stw	zero,20(r16)
  80eec8:	00000106 	br	80eed0 <_calloc_r+0x6c>
  80eecc:	8005883a 	mov	r2,r16
  80eed0:	10000015 	stw	zero,0(r2)
  80eed4:	10000115 	stw	zero,4(r2)
  80eed8:	10000215 	stw	zero,8(r2)
  80eedc:	8005883a 	mov	r2,r16
  80eee0:	dfc00117 	ldw	ra,4(sp)
  80eee4:	dc000017 	ldw	r16,0(sp)
  80eee8:	dec00204 	addi	sp,sp,8
  80eeec:	f800283a 	ret
  80eef0:	000b883a 	mov	r5,zero
  80eef4:	8009883a 	mov	r4,r16
  80eef8:	080be000 	call	80be00 <memset>
  80eefc:	8005883a 	mov	r2,r16
  80ef00:	dfc00117 	ldw	ra,4(sp)
  80ef04:	dc000017 	ldw	r16,0(sp)
  80ef08:	dec00204 	addi	sp,sp,8
  80ef0c:	f800283a 	ret
  80ef10:	80800404 	addi	r2,r16,16
  80ef14:	003fee06 	br	80eed0 <__alt_mem_onchip_mem+0xff806ed0>
  80ef18:	80800204 	addi	r2,r16,8
  80ef1c:	003fec06 	br	80eed0 <__alt_mem_onchip_mem+0xff806ed0>
  80ef20:	0005883a 	mov	r2,zero
  80ef24:	003fee06 	br	80eee0 <__alt_mem_onchip_mem+0xff806ee0>

0080ef28 <_fclose_r>:
  80ef28:	28003926 	beq	r5,zero,80f010 <_fclose_r+0xe8>
  80ef2c:	defffc04 	addi	sp,sp,-16
  80ef30:	dc400115 	stw	r17,4(sp)
  80ef34:	dc000015 	stw	r16,0(sp)
  80ef38:	dfc00315 	stw	ra,12(sp)
  80ef3c:	dc800215 	stw	r18,8(sp)
  80ef40:	2023883a 	mov	r17,r4
  80ef44:	2821883a 	mov	r16,r5
  80ef48:	20000226 	beq	r4,zero,80ef54 <_fclose_r+0x2c>
  80ef4c:	20800e17 	ldw	r2,56(r4)
  80ef50:	10002726 	beq	r2,zero,80eff0 <_fclose_r+0xc8>
  80ef54:	8080030f 	ldh	r2,12(r16)
  80ef58:	1000071e 	bne	r2,zero,80ef78 <_fclose_r+0x50>
  80ef5c:	0005883a 	mov	r2,zero
  80ef60:	dfc00317 	ldw	ra,12(sp)
  80ef64:	dc800217 	ldw	r18,8(sp)
  80ef68:	dc400117 	ldw	r17,4(sp)
  80ef6c:	dc000017 	ldw	r16,0(sp)
  80ef70:	dec00404 	addi	sp,sp,16
  80ef74:	f800283a 	ret
  80ef78:	800b883a 	mov	r5,r16
  80ef7c:	8809883a 	mov	r4,r17
  80ef80:	0809f140 	call	809f14 <__sflush_r>
  80ef84:	1025883a 	mov	r18,r2
  80ef88:	80800b17 	ldw	r2,44(r16)
  80ef8c:	10000426 	beq	r2,zero,80efa0 <_fclose_r+0x78>
  80ef90:	81400717 	ldw	r5,28(r16)
  80ef94:	8809883a 	mov	r4,r17
  80ef98:	103ee83a 	callr	r2
  80ef9c:	10001616 	blt	r2,zero,80eff8 <_fclose_r+0xd0>
  80efa0:	8080030b 	ldhu	r2,12(r16)
  80efa4:	1080200c 	andi	r2,r2,128
  80efa8:	1000151e 	bne	r2,zero,80f000 <_fclose_r+0xd8>
  80efac:	81400c17 	ldw	r5,48(r16)
  80efb0:	28000526 	beq	r5,zero,80efc8 <_fclose_r+0xa0>
  80efb4:	80801004 	addi	r2,r16,64
  80efb8:	28800226 	beq	r5,r2,80efc4 <_fclose_r+0x9c>
  80efbc:	8809883a 	mov	r4,r17
  80efc0:	080a6800 	call	80a680 <_free_r>
  80efc4:	80000c15 	stw	zero,48(r16)
  80efc8:	81401117 	ldw	r5,68(r16)
  80efcc:	28000326 	beq	r5,zero,80efdc <_fclose_r+0xb4>
  80efd0:	8809883a 	mov	r4,r17
  80efd4:	080a6800 	call	80a680 <_free_r>
  80efd8:	80001115 	stw	zero,68(r16)
  80efdc:	080a51c0 	call	80a51c <__sfp_lock_acquire>
  80efe0:	8000030d 	sth	zero,12(r16)
  80efe4:	080a5200 	call	80a520 <__sfp_lock_release>
  80efe8:	9005883a 	mov	r2,r18
  80efec:	003fdc06 	br	80ef60 <__alt_mem_onchip_mem+0xff806f60>
  80eff0:	080a50c0 	call	80a50c <__sinit>
  80eff4:	003fd706 	br	80ef54 <__alt_mem_onchip_mem+0xff806f54>
  80eff8:	04bfffc4 	movi	r18,-1
  80effc:	003fe806 	br	80efa0 <__alt_mem_onchip_mem+0xff806fa0>
  80f000:	81400417 	ldw	r5,16(r16)
  80f004:	8809883a 	mov	r4,r17
  80f008:	080a6800 	call	80a680 <_free_r>
  80f00c:	003fe706 	br	80efac <__alt_mem_onchip_mem+0xff806fac>
  80f010:	0005883a 	mov	r2,zero
  80f014:	f800283a 	ret

0080f018 <fclose>:
  80f018:	00802074 	movhi	r2,129
  80f01c:	109cbc04 	addi	r2,r2,29424
  80f020:	200b883a 	mov	r5,r4
  80f024:	11000017 	ldw	r4,0(r2)
  80f028:	080ef281 	jmpi	80ef28 <_fclose_r>

0080f02c <__fputwc>:
  80f02c:	defff804 	addi	sp,sp,-32
  80f030:	dcc00415 	stw	r19,16(sp)
  80f034:	dc800315 	stw	r18,12(sp)
  80f038:	dc000115 	stw	r16,4(sp)
  80f03c:	dfc00715 	stw	ra,28(sp)
  80f040:	dd400615 	stw	r21,24(sp)
  80f044:	dd000515 	stw	r20,20(sp)
  80f048:	dc400215 	stw	r17,8(sp)
  80f04c:	2027883a 	mov	r19,r4
  80f050:	2825883a 	mov	r18,r5
  80f054:	3021883a 	mov	r16,r6
  80f058:	080b05c0 	call	80b05c <__locale_mb_cur_max>
  80f05c:	00c00044 	movi	r3,1
  80f060:	10c03e26 	beq	r2,r3,80f15c <__fputwc+0x130>
  80f064:	81c01704 	addi	r7,r16,92
  80f068:	900d883a 	mov	r6,r18
  80f06c:	d80b883a 	mov	r5,sp
  80f070:	9809883a 	mov	r4,r19
  80f074:	080f4fc0 	call	80f4fc <_wcrtomb_r>
  80f078:	1029883a 	mov	r20,r2
  80f07c:	00bfffc4 	movi	r2,-1
  80f080:	a0802026 	beq	r20,r2,80f104 <__fputwc+0xd8>
  80f084:	d9400003 	ldbu	r5,0(sp)
  80f088:	a0001c26 	beq	r20,zero,80f0fc <__fputwc+0xd0>
  80f08c:	0023883a 	mov	r17,zero
  80f090:	05400284 	movi	r21,10
  80f094:	00000906 	br	80f0bc <__fputwc+0x90>
  80f098:	80800017 	ldw	r2,0(r16)
  80f09c:	11400005 	stb	r5,0(r2)
  80f0a0:	80c00017 	ldw	r3,0(r16)
  80f0a4:	18c00044 	addi	r3,r3,1
  80f0a8:	80c00015 	stw	r3,0(r16)
  80f0ac:	8c400044 	addi	r17,r17,1
  80f0b0:	dc45883a 	add	r2,sp,r17
  80f0b4:	8d00112e 	bgeu	r17,r20,80f0fc <__fputwc+0xd0>
  80f0b8:	11400003 	ldbu	r5,0(r2)
  80f0bc:	80c00217 	ldw	r3,8(r16)
  80f0c0:	18ffffc4 	addi	r3,r3,-1
  80f0c4:	80c00215 	stw	r3,8(r16)
  80f0c8:	183ff30e 	bge	r3,zero,80f098 <__alt_mem_onchip_mem+0xff807098>
  80f0cc:	80800617 	ldw	r2,24(r16)
  80f0d0:	18801916 	blt	r3,r2,80f138 <__fputwc+0x10c>
  80f0d4:	80800017 	ldw	r2,0(r16)
  80f0d8:	11400005 	stb	r5,0(r2)
  80f0dc:	80800017 	ldw	r2,0(r16)
  80f0e0:	10c00003 	ldbu	r3,0(r2)
  80f0e4:	10800044 	addi	r2,r2,1
  80f0e8:	1d402326 	beq	r3,r21,80f178 <__fputwc+0x14c>
  80f0ec:	80800015 	stw	r2,0(r16)
  80f0f0:	8c400044 	addi	r17,r17,1
  80f0f4:	dc45883a 	add	r2,sp,r17
  80f0f8:	8d3fef36 	bltu	r17,r20,80f0b8 <__alt_mem_onchip_mem+0xff8070b8>
  80f0fc:	9005883a 	mov	r2,r18
  80f100:	00000406 	br	80f114 <__fputwc+0xe8>
  80f104:	80c0030b 	ldhu	r3,12(r16)
  80f108:	a005883a 	mov	r2,r20
  80f10c:	18c01014 	ori	r3,r3,64
  80f110:	80c0030d 	sth	r3,12(r16)
  80f114:	dfc00717 	ldw	ra,28(sp)
  80f118:	dd400617 	ldw	r21,24(sp)
  80f11c:	dd000517 	ldw	r20,20(sp)
  80f120:	dcc00417 	ldw	r19,16(sp)
  80f124:	dc800317 	ldw	r18,12(sp)
  80f128:	dc400217 	ldw	r17,8(sp)
  80f12c:	dc000117 	ldw	r16,4(sp)
  80f130:	dec00804 	addi	sp,sp,32
  80f134:	f800283a 	ret
  80f138:	800d883a 	mov	r6,r16
  80f13c:	29403fcc 	andi	r5,r5,255
  80f140:	9809883a 	mov	r4,r19
  80f144:	080f3a40 	call	80f3a4 <__swbuf_r>
  80f148:	10bfffe0 	cmpeqi	r2,r2,-1
  80f14c:	10803fcc 	andi	r2,r2,255
  80f150:	103fd626 	beq	r2,zero,80f0ac <__alt_mem_onchip_mem+0xff8070ac>
  80f154:	00bfffc4 	movi	r2,-1
  80f158:	003fee06 	br	80f114 <__alt_mem_onchip_mem+0xff807114>
  80f15c:	90ffffc4 	addi	r3,r18,-1
  80f160:	01003f84 	movi	r4,254
  80f164:	20ffbf36 	bltu	r4,r3,80f064 <__alt_mem_onchip_mem+0xff807064>
  80f168:	900b883a 	mov	r5,r18
  80f16c:	dc800005 	stb	r18,0(sp)
  80f170:	1029883a 	mov	r20,r2
  80f174:	003fc506 	br	80f08c <__alt_mem_onchip_mem+0xff80708c>
  80f178:	800d883a 	mov	r6,r16
  80f17c:	a80b883a 	mov	r5,r21
  80f180:	9809883a 	mov	r4,r19
  80f184:	080f3a40 	call	80f3a4 <__swbuf_r>
  80f188:	10bfffe0 	cmpeqi	r2,r2,-1
  80f18c:	003fef06 	br	80f14c <__alt_mem_onchip_mem+0xff80714c>

0080f190 <_fputwc_r>:
  80f190:	3080030b 	ldhu	r2,12(r6)
  80f194:	10c8000c 	andi	r3,r2,8192
  80f198:	1800051e 	bne	r3,zero,80f1b0 <_fputwc_r+0x20>
  80f19c:	30c01917 	ldw	r3,100(r6)
  80f1a0:	10880014 	ori	r2,r2,8192
  80f1a4:	3080030d 	sth	r2,12(r6)
  80f1a8:	18880014 	ori	r2,r3,8192
  80f1ac:	30801915 	stw	r2,100(r6)
  80f1b0:	080f02c1 	jmpi	80f02c <__fputwc>

0080f1b4 <fputwc>:
  80f1b4:	00802074 	movhi	r2,129
  80f1b8:	defffc04 	addi	sp,sp,-16
  80f1bc:	109cbc04 	addi	r2,r2,29424
  80f1c0:	dc000115 	stw	r16,4(sp)
  80f1c4:	14000017 	ldw	r16,0(r2)
  80f1c8:	dc400215 	stw	r17,8(sp)
  80f1cc:	dfc00315 	stw	ra,12(sp)
  80f1d0:	2023883a 	mov	r17,r4
  80f1d4:	80000226 	beq	r16,zero,80f1e0 <fputwc+0x2c>
  80f1d8:	80800e17 	ldw	r2,56(r16)
  80f1dc:	10001026 	beq	r2,zero,80f220 <fputwc+0x6c>
  80f1e0:	2880030b 	ldhu	r2,12(r5)
  80f1e4:	10c8000c 	andi	r3,r2,8192
  80f1e8:	1800051e 	bne	r3,zero,80f200 <fputwc+0x4c>
  80f1ec:	28c01917 	ldw	r3,100(r5)
  80f1f0:	10880014 	ori	r2,r2,8192
  80f1f4:	2880030d 	sth	r2,12(r5)
  80f1f8:	18880014 	ori	r2,r3,8192
  80f1fc:	28801915 	stw	r2,100(r5)
  80f200:	280d883a 	mov	r6,r5
  80f204:	8009883a 	mov	r4,r16
  80f208:	880b883a 	mov	r5,r17
  80f20c:	dfc00317 	ldw	ra,12(sp)
  80f210:	dc400217 	ldw	r17,8(sp)
  80f214:	dc000117 	ldw	r16,4(sp)
  80f218:	dec00404 	addi	sp,sp,16
  80f21c:	080f02c1 	jmpi	80f02c <__fputwc>
  80f220:	8009883a 	mov	r4,r16
  80f224:	d9400015 	stw	r5,0(sp)
  80f228:	080a50c0 	call	80a50c <__sinit>
  80f22c:	d9400017 	ldw	r5,0(sp)
  80f230:	003feb06 	br	80f1e0 <__alt_mem_onchip_mem+0xff8071e0>

0080f234 <_fstat_r>:
  80f234:	defffd04 	addi	sp,sp,-12
  80f238:	2805883a 	mov	r2,r5
  80f23c:	dc000015 	stw	r16,0(sp)
  80f240:	040020b4 	movhi	r16,130
  80f244:	dc400115 	stw	r17,4(sp)
  80f248:	84240904 	addi	r16,r16,-28636
  80f24c:	2023883a 	mov	r17,r4
  80f250:	300b883a 	mov	r5,r6
  80f254:	1009883a 	mov	r4,r2
  80f258:	dfc00215 	stw	ra,8(sp)
  80f25c:	80000015 	stw	zero,0(r16)
  80f260:	08110b40 	call	8110b4 <fstat>
  80f264:	00ffffc4 	movi	r3,-1
  80f268:	10c00526 	beq	r2,r3,80f280 <_fstat_r+0x4c>
  80f26c:	dfc00217 	ldw	ra,8(sp)
  80f270:	dc400117 	ldw	r17,4(sp)
  80f274:	dc000017 	ldw	r16,0(sp)
  80f278:	dec00304 	addi	sp,sp,12
  80f27c:	f800283a 	ret
  80f280:	80c00017 	ldw	r3,0(r16)
  80f284:	183ff926 	beq	r3,zero,80f26c <__alt_mem_onchip_mem+0xff80726c>
  80f288:	88c00015 	stw	r3,0(r17)
  80f28c:	003ff706 	br	80f26c <__alt_mem_onchip_mem+0xff80726c>

0080f290 <_isatty_r>:
  80f290:	defffd04 	addi	sp,sp,-12
  80f294:	dc000015 	stw	r16,0(sp)
  80f298:	040020b4 	movhi	r16,130
  80f29c:	dc400115 	stw	r17,4(sp)
  80f2a0:	84240904 	addi	r16,r16,-28636
  80f2a4:	2023883a 	mov	r17,r4
  80f2a8:	2809883a 	mov	r4,r5
  80f2ac:	dfc00215 	stw	ra,8(sp)
  80f2b0:	80000015 	stw	zero,0(r16)
  80f2b4:	08113200 	call	811320 <isatty>
  80f2b8:	00ffffc4 	movi	r3,-1
  80f2bc:	10c00526 	beq	r2,r3,80f2d4 <_isatty_r+0x44>
  80f2c0:	dfc00217 	ldw	ra,8(sp)
  80f2c4:	dc400117 	ldw	r17,4(sp)
  80f2c8:	dc000017 	ldw	r16,0(sp)
  80f2cc:	dec00304 	addi	sp,sp,12
  80f2d0:	f800283a 	ret
  80f2d4:	80c00017 	ldw	r3,0(r16)
  80f2d8:	183ff926 	beq	r3,zero,80f2c0 <__alt_mem_onchip_mem+0xff8072c0>
  80f2dc:	88c00015 	stw	r3,0(r17)
  80f2e0:	003ff706 	br	80f2c0 <__alt_mem_onchip_mem+0xff8072c0>

0080f2e4 <_lseek_r>:
  80f2e4:	defffd04 	addi	sp,sp,-12
  80f2e8:	2805883a 	mov	r2,r5
  80f2ec:	dc000015 	stw	r16,0(sp)
  80f2f0:	040020b4 	movhi	r16,130
  80f2f4:	dc400115 	stw	r17,4(sp)
  80f2f8:	300b883a 	mov	r5,r6
  80f2fc:	84240904 	addi	r16,r16,-28636
  80f300:	2023883a 	mov	r17,r4
  80f304:	380d883a 	mov	r6,r7
  80f308:	1009883a 	mov	r4,r2
  80f30c:	dfc00215 	stw	ra,8(sp)
  80f310:	80000015 	stw	zero,0(r16)
  80f314:	08114ec0 	call	8114ec <lseek>
  80f318:	00ffffc4 	movi	r3,-1
  80f31c:	10c00526 	beq	r2,r3,80f334 <_lseek_r+0x50>
  80f320:	dfc00217 	ldw	ra,8(sp)
  80f324:	dc400117 	ldw	r17,4(sp)
  80f328:	dc000017 	ldw	r16,0(sp)
  80f32c:	dec00304 	addi	sp,sp,12
  80f330:	f800283a 	ret
  80f334:	80c00017 	ldw	r3,0(r16)
  80f338:	183ff926 	beq	r3,zero,80f320 <__alt_mem_onchip_mem+0xff807320>
  80f33c:	88c00015 	stw	r3,0(r17)
  80f340:	003ff706 	br	80f320 <__alt_mem_onchip_mem+0xff807320>

0080f344 <_read_r>:
  80f344:	defffd04 	addi	sp,sp,-12
  80f348:	2805883a 	mov	r2,r5
  80f34c:	dc000015 	stw	r16,0(sp)
  80f350:	040020b4 	movhi	r16,130
  80f354:	dc400115 	stw	r17,4(sp)
  80f358:	300b883a 	mov	r5,r6
  80f35c:	84240904 	addi	r16,r16,-28636
  80f360:	2023883a 	mov	r17,r4
  80f364:	380d883a 	mov	r6,r7
  80f368:	1009883a 	mov	r4,r2
  80f36c:	dfc00215 	stw	ra,8(sp)
  80f370:	80000015 	stw	zero,0(r16)
  80f374:	08116c00 	call	8116c0 <read>
  80f378:	00ffffc4 	movi	r3,-1
  80f37c:	10c00526 	beq	r2,r3,80f394 <_read_r+0x50>
  80f380:	dfc00217 	ldw	ra,8(sp)
  80f384:	dc400117 	ldw	r17,4(sp)
  80f388:	dc000017 	ldw	r16,0(sp)
  80f38c:	dec00304 	addi	sp,sp,12
  80f390:	f800283a 	ret
  80f394:	80c00017 	ldw	r3,0(r16)
  80f398:	183ff926 	beq	r3,zero,80f380 <__alt_mem_onchip_mem+0xff807380>
  80f39c:	88c00015 	stw	r3,0(r17)
  80f3a0:	003ff706 	br	80f380 <__alt_mem_onchip_mem+0xff807380>

0080f3a4 <__swbuf_r>:
  80f3a4:	defffb04 	addi	sp,sp,-20
  80f3a8:	dcc00315 	stw	r19,12(sp)
  80f3ac:	dc800215 	stw	r18,8(sp)
  80f3b0:	dc000015 	stw	r16,0(sp)
  80f3b4:	dfc00415 	stw	ra,16(sp)
  80f3b8:	dc400115 	stw	r17,4(sp)
  80f3bc:	2025883a 	mov	r18,r4
  80f3c0:	2827883a 	mov	r19,r5
  80f3c4:	3021883a 	mov	r16,r6
  80f3c8:	20000226 	beq	r4,zero,80f3d4 <__swbuf_r+0x30>
  80f3cc:	20800e17 	ldw	r2,56(r4)
  80f3d0:	10004226 	beq	r2,zero,80f4dc <__swbuf_r+0x138>
  80f3d4:	80800617 	ldw	r2,24(r16)
  80f3d8:	8100030b 	ldhu	r4,12(r16)
  80f3dc:	80800215 	stw	r2,8(r16)
  80f3e0:	2080020c 	andi	r2,r4,8
  80f3e4:	10003626 	beq	r2,zero,80f4c0 <__swbuf_r+0x11c>
  80f3e8:	80c00417 	ldw	r3,16(r16)
  80f3ec:	18003426 	beq	r3,zero,80f4c0 <__swbuf_r+0x11c>
  80f3f0:	2088000c 	andi	r2,r4,8192
  80f3f4:	9c403fcc 	andi	r17,r19,255
  80f3f8:	10001a26 	beq	r2,zero,80f464 <__swbuf_r+0xc0>
  80f3fc:	80800017 	ldw	r2,0(r16)
  80f400:	81000517 	ldw	r4,20(r16)
  80f404:	10c7c83a 	sub	r3,r2,r3
  80f408:	1900200e 	bge	r3,r4,80f48c <__swbuf_r+0xe8>
  80f40c:	18c00044 	addi	r3,r3,1
  80f410:	81000217 	ldw	r4,8(r16)
  80f414:	11400044 	addi	r5,r2,1
  80f418:	81400015 	stw	r5,0(r16)
  80f41c:	213fffc4 	addi	r4,r4,-1
  80f420:	81000215 	stw	r4,8(r16)
  80f424:	14c00005 	stb	r19,0(r2)
  80f428:	80800517 	ldw	r2,20(r16)
  80f42c:	10c01e26 	beq	r2,r3,80f4a8 <__swbuf_r+0x104>
  80f430:	8080030b 	ldhu	r2,12(r16)
  80f434:	1080004c 	andi	r2,r2,1
  80f438:	10000226 	beq	r2,zero,80f444 <__swbuf_r+0xa0>
  80f43c:	00800284 	movi	r2,10
  80f440:	88801926 	beq	r17,r2,80f4a8 <__swbuf_r+0x104>
  80f444:	8805883a 	mov	r2,r17
  80f448:	dfc00417 	ldw	ra,16(sp)
  80f44c:	dcc00317 	ldw	r19,12(sp)
  80f450:	dc800217 	ldw	r18,8(sp)
  80f454:	dc400117 	ldw	r17,4(sp)
  80f458:	dc000017 	ldw	r16,0(sp)
  80f45c:	dec00504 	addi	sp,sp,20
  80f460:	f800283a 	ret
  80f464:	81401917 	ldw	r5,100(r16)
  80f468:	00b7ffc4 	movi	r2,-8193
  80f46c:	21080014 	ori	r4,r4,8192
  80f470:	2884703a 	and	r2,r5,r2
  80f474:	80801915 	stw	r2,100(r16)
  80f478:	80800017 	ldw	r2,0(r16)
  80f47c:	8100030d 	sth	r4,12(r16)
  80f480:	81000517 	ldw	r4,20(r16)
  80f484:	10c7c83a 	sub	r3,r2,r3
  80f488:	193fe016 	blt	r3,r4,80f40c <__alt_mem_onchip_mem+0xff80740c>
  80f48c:	800b883a 	mov	r5,r16
  80f490:	9009883a 	mov	r4,r18
  80f494:	080a1300 	call	80a130 <_fflush_r>
  80f498:	1000071e 	bne	r2,zero,80f4b8 <__swbuf_r+0x114>
  80f49c:	80800017 	ldw	r2,0(r16)
  80f4a0:	00c00044 	movi	r3,1
  80f4a4:	003fda06 	br	80f410 <__alt_mem_onchip_mem+0xff807410>
  80f4a8:	800b883a 	mov	r5,r16
  80f4ac:	9009883a 	mov	r4,r18
  80f4b0:	080a1300 	call	80a130 <_fflush_r>
  80f4b4:	103fe326 	beq	r2,zero,80f444 <__alt_mem_onchip_mem+0xff807444>
  80f4b8:	00bfffc4 	movi	r2,-1
  80f4bc:	003fe206 	br	80f448 <__alt_mem_onchip_mem+0xff807448>
  80f4c0:	800b883a 	mov	r5,r16
  80f4c4:	9009883a 	mov	r4,r18
  80f4c8:	08085380 	call	808538 <__swsetup_r>
  80f4cc:	103ffa1e 	bne	r2,zero,80f4b8 <__alt_mem_onchip_mem+0xff8074b8>
  80f4d0:	8100030b 	ldhu	r4,12(r16)
  80f4d4:	80c00417 	ldw	r3,16(r16)
  80f4d8:	003fc506 	br	80f3f0 <__alt_mem_onchip_mem+0xff8073f0>
  80f4dc:	080a50c0 	call	80a50c <__sinit>
  80f4e0:	003fbc06 	br	80f3d4 <__alt_mem_onchip_mem+0xff8073d4>

0080f4e4 <__swbuf>:
  80f4e4:	00802074 	movhi	r2,129
  80f4e8:	109cbc04 	addi	r2,r2,29424
  80f4ec:	280d883a 	mov	r6,r5
  80f4f0:	200b883a 	mov	r5,r4
  80f4f4:	11000017 	ldw	r4,0(r2)
  80f4f8:	080f3a41 	jmpi	80f3a4 <__swbuf_r>

0080f4fc <_wcrtomb_r>:
  80f4fc:	defff604 	addi	sp,sp,-40
  80f500:	00802074 	movhi	r2,129
  80f504:	dc800815 	stw	r18,32(sp)
  80f508:	dc400715 	stw	r17,28(sp)
  80f50c:	dc000615 	stw	r16,24(sp)
  80f510:	109cc004 	addi	r2,r2,29440
  80f514:	dfc00915 	stw	ra,36(sp)
  80f518:	2021883a 	mov	r16,r4
  80f51c:	3823883a 	mov	r17,r7
  80f520:	14800017 	ldw	r18,0(r2)
  80f524:	28001426 	beq	r5,zero,80f578 <_wcrtomb_r+0x7c>
  80f528:	d9400415 	stw	r5,16(sp)
  80f52c:	d9800515 	stw	r6,20(sp)
  80f530:	080b0500 	call	80b050 <__locale_charset>
  80f534:	d9800517 	ldw	r6,20(sp)
  80f538:	d9400417 	ldw	r5,16(sp)
  80f53c:	100f883a 	mov	r7,r2
  80f540:	dc400015 	stw	r17,0(sp)
  80f544:	8009883a 	mov	r4,r16
  80f548:	903ee83a 	callr	r18
  80f54c:	00ffffc4 	movi	r3,-1
  80f550:	10c0031e 	bne	r2,r3,80f560 <_wcrtomb_r+0x64>
  80f554:	88000015 	stw	zero,0(r17)
  80f558:	00c02284 	movi	r3,138
  80f55c:	80c00015 	stw	r3,0(r16)
  80f560:	dfc00917 	ldw	ra,36(sp)
  80f564:	dc800817 	ldw	r18,32(sp)
  80f568:	dc400717 	ldw	r17,28(sp)
  80f56c:	dc000617 	ldw	r16,24(sp)
  80f570:	dec00a04 	addi	sp,sp,40
  80f574:	f800283a 	ret
  80f578:	080b0500 	call	80b050 <__locale_charset>
  80f57c:	100f883a 	mov	r7,r2
  80f580:	dc400015 	stw	r17,0(sp)
  80f584:	000d883a 	mov	r6,zero
  80f588:	d9400104 	addi	r5,sp,4
  80f58c:	8009883a 	mov	r4,r16
  80f590:	903ee83a 	callr	r18
  80f594:	003fed06 	br	80f54c <__alt_mem_onchip_mem+0xff80754c>

0080f598 <wcrtomb>:
  80f598:	defff604 	addi	sp,sp,-40
  80f59c:	00802074 	movhi	r2,129
  80f5a0:	dc800615 	stw	r18,24(sp)
  80f5a4:	dc400515 	stw	r17,20(sp)
  80f5a8:	109cbc04 	addi	r2,r2,29424
  80f5ac:	dfc00915 	stw	ra,36(sp)
  80f5b0:	dd000815 	stw	r20,32(sp)
  80f5b4:	dcc00715 	stw	r19,28(sp)
  80f5b8:	dc000415 	stw	r16,16(sp)
  80f5bc:	3025883a 	mov	r18,r6
  80f5c0:	14400017 	ldw	r17,0(r2)
  80f5c4:	20001926 	beq	r4,zero,80f62c <wcrtomb+0x94>
  80f5c8:	00802074 	movhi	r2,129
  80f5cc:	109cc004 	addi	r2,r2,29440
  80f5d0:	15000017 	ldw	r20,0(r2)
  80f5d4:	2021883a 	mov	r16,r4
  80f5d8:	2827883a 	mov	r19,r5
  80f5dc:	080b0500 	call	80b050 <__locale_charset>
  80f5e0:	100f883a 	mov	r7,r2
  80f5e4:	dc800015 	stw	r18,0(sp)
  80f5e8:	980d883a 	mov	r6,r19
  80f5ec:	800b883a 	mov	r5,r16
  80f5f0:	8809883a 	mov	r4,r17
  80f5f4:	a03ee83a 	callr	r20
  80f5f8:	00ffffc4 	movi	r3,-1
  80f5fc:	10c0031e 	bne	r2,r3,80f60c <wcrtomb+0x74>
  80f600:	90000015 	stw	zero,0(r18)
  80f604:	00c02284 	movi	r3,138
  80f608:	88c00015 	stw	r3,0(r17)
  80f60c:	dfc00917 	ldw	ra,36(sp)
  80f610:	dd000817 	ldw	r20,32(sp)
  80f614:	dcc00717 	ldw	r19,28(sp)
  80f618:	dc800617 	ldw	r18,24(sp)
  80f61c:	dc400517 	ldw	r17,20(sp)
  80f620:	dc000417 	ldw	r16,16(sp)
  80f624:	dec00a04 	addi	sp,sp,40
  80f628:	f800283a 	ret
  80f62c:	00802074 	movhi	r2,129
  80f630:	109cc004 	addi	r2,r2,29440
  80f634:	14000017 	ldw	r16,0(r2)
  80f638:	080b0500 	call	80b050 <__locale_charset>
  80f63c:	100f883a 	mov	r7,r2
  80f640:	dc800015 	stw	r18,0(sp)
  80f644:	000d883a 	mov	r6,zero
  80f648:	d9400104 	addi	r5,sp,4
  80f64c:	8809883a 	mov	r4,r17
  80f650:	803ee83a 	callr	r16
  80f654:	003fe806 	br	80f5f8 <__alt_mem_onchip_mem+0xff8075f8>

0080f658 <__ascii_wctomb>:
  80f658:	28000526 	beq	r5,zero,80f670 <__ascii_wctomb+0x18>
  80f65c:	00803fc4 	movi	r2,255
  80f660:	11800536 	bltu	r2,r6,80f678 <__ascii_wctomb+0x20>
  80f664:	29800005 	stb	r6,0(r5)
  80f668:	00800044 	movi	r2,1
  80f66c:	f800283a 	ret
  80f670:	0005883a 	mov	r2,zero
  80f674:	f800283a 	ret
  80f678:	00802284 	movi	r2,138
  80f67c:	20800015 	stw	r2,0(r4)
  80f680:	00bfffc4 	movi	r2,-1
  80f684:	f800283a 	ret

0080f688 <_wctomb_r>:
  80f688:	00802074 	movhi	r2,129
  80f68c:	defff904 	addi	sp,sp,-28
  80f690:	109cc004 	addi	r2,r2,29440
  80f694:	dfc00615 	stw	ra,24(sp)
  80f698:	dc400515 	stw	r17,20(sp)
  80f69c:	dc000415 	stw	r16,16(sp)
  80f6a0:	3823883a 	mov	r17,r7
  80f6a4:	14000017 	ldw	r16,0(r2)
  80f6a8:	d9000115 	stw	r4,4(sp)
  80f6ac:	d9400215 	stw	r5,8(sp)
  80f6b0:	d9800315 	stw	r6,12(sp)
  80f6b4:	080b0500 	call	80b050 <__locale_charset>
  80f6b8:	d9800317 	ldw	r6,12(sp)
  80f6bc:	d9400217 	ldw	r5,8(sp)
  80f6c0:	d9000117 	ldw	r4,4(sp)
  80f6c4:	100f883a 	mov	r7,r2
  80f6c8:	dc400015 	stw	r17,0(sp)
  80f6cc:	803ee83a 	callr	r16
  80f6d0:	dfc00617 	ldw	ra,24(sp)
  80f6d4:	dc400517 	ldw	r17,20(sp)
  80f6d8:	dc000417 	ldw	r16,16(sp)
  80f6dc:	dec00704 	addi	sp,sp,28
  80f6e0:	f800283a 	ret

0080f6e4 <__udivdi3>:
  80f6e4:	defff504 	addi	sp,sp,-44
  80f6e8:	dcc00415 	stw	r19,16(sp)
  80f6ec:	dc000115 	stw	r16,4(sp)
  80f6f0:	dfc00a15 	stw	ra,40(sp)
  80f6f4:	df000915 	stw	fp,36(sp)
  80f6f8:	ddc00815 	stw	r23,32(sp)
  80f6fc:	dd800715 	stw	r22,28(sp)
  80f700:	dd400615 	stw	r21,24(sp)
  80f704:	dd000515 	stw	r20,20(sp)
  80f708:	dc800315 	stw	r18,12(sp)
  80f70c:	dc400215 	stw	r17,8(sp)
  80f710:	2027883a 	mov	r19,r4
  80f714:	2821883a 	mov	r16,r5
  80f718:	3800411e 	bne	r7,zero,80f820 <__udivdi3+0x13c>
  80f71c:	3023883a 	mov	r17,r6
  80f720:	2025883a 	mov	r18,r4
  80f724:	2980522e 	bgeu	r5,r6,80f870 <__udivdi3+0x18c>
  80f728:	00bfffd4 	movui	r2,65535
  80f72c:	282d883a 	mov	r22,r5
  80f730:	1180a836 	bltu	r2,r6,80f9d4 <__udivdi3+0x2f0>
  80f734:	00803fc4 	movi	r2,255
  80f738:	1185803a 	cmpltu	r2,r2,r6
  80f73c:	100490fa 	slli	r2,r2,3
  80f740:	3086d83a 	srl	r3,r6,r2
  80f744:	01002074 	movhi	r4,129
  80f748:	21143284 	addi	r4,r4,20682
  80f74c:	20c7883a 	add	r3,r4,r3
  80f750:	18c00003 	ldbu	r3,0(r3)
  80f754:	1885883a 	add	r2,r3,r2
  80f758:	00c00804 	movi	r3,32
  80f75c:	1887c83a 	sub	r3,r3,r2
  80f760:	18000526 	beq	r3,zero,80f778 <__udivdi3+0x94>
  80f764:	80e0983a 	sll	r16,r16,r3
  80f768:	9884d83a 	srl	r2,r19,r2
  80f76c:	30e2983a 	sll	r17,r6,r3
  80f770:	98e4983a 	sll	r18,r19,r3
  80f774:	142cb03a 	or	r22,r2,r16
  80f778:	882ad43a 	srli	r21,r17,16
  80f77c:	b009883a 	mov	r4,r22
  80f780:	8d3fffcc 	andi	r20,r17,65535
  80f784:	a80b883a 	mov	r5,r21
  80f788:	08102f00 	call	8102f0 <__umodsi3>
  80f78c:	b009883a 	mov	r4,r22
  80f790:	a80b883a 	mov	r5,r21
  80f794:	1027883a 	mov	r19,r2
  80f798:	081028c0 	call	81028c <__udivsi3>
  80f79c:	102d883a 	mov	r22,r2
  80f7a0:	9826943a 	slli	r19,r19,16
  80f7a4:	9004d43a 	srli	r2,r18,16
  80f7a8:	a5a1383a 	mul	r16,r20,r22
  80f7ac:	14c4b03a 	or	r2,r2,r19
  80f7b0:	1400052e 	bgeu	r2,r16,80f7c8 <__udivdi3+0xe4>
  80f7b4:	1445883a 	add	r2,r2,r17
  80f7b8:	b0ffffc4 	addi	r3,r22,-1
  80f7bc:	14400136 	bltu	r2,r17,80f7c4 <__udivdi3+0xe0>
  80f7c0:	14012336 	bltu	r2,r16,80fc50 <__udivdi3+0x56c>
  80f7c4:	182d883a 	mov	r22,r3
  80f7c8:	1421c83a 	sub	r16,r2,r16
  80f7cc:	a80b883a 	mov	r5,r21
  80f7d0:	8009883a 	mov	r4,r16
  80f7d4:	08102f00 	call	8102f0 <__umodsi3>
  80f7d8:	1027883a 	mov	r19,r2
  80f7dc:	a80b883a 	mov	r5,r21
  80f7e0:	8009883a 	mov	r4,r16
  80f7e4:	081028c0 	call	81028c <__udivsi3>
  80f7e8:	9826943a 	slli	r19,r19,16
  80f7ec:	a0a9383a 	mul	r20,r20,r2
  80f7f0:	94bfffcc 	andi	r18,r18,65535
  80f7f4:	94e4b03a 	or	r18,r18,r19
  80f7f8:	9500052e 	bgeu	r18,r20,80f810 <__udivdi3+0x12c>
  80f7fc:	8ca5883a 	add	r18,r17,r18
  80f800:	10ffffc4 	addi	r3,r2,-1
  80f804:	9440f136 	bltu	r18,r17,80fbcc <__udivdi3+0x4e8>
  80f808:	9500f02e 	bgeu	r18,r20,80fbcc <__udivdi3+0x4e8>
  80f80c:	10bfff84 	addi	r2,r2,-2
  80f810:	b00c943a 	slli	r6,r22,16
  80f814:	0007883a 	mov	r3,zero
  80f818:	3084b03a 	or	r2,r6,r2
  80f81c:	00005906 	br	80f984 <__udivdi3+0x2a0>
  80f820:	29c05636 	bltu	r5,r7,80f97c <__udivdi3+0x298>
  80f824:	00bfffd4 	movui	r2,65535
  80f828:	11c0622e 	bgeu	r2,r7,80f9b4 <__udivdi3+0x2d0>
  80f82c:	00804034 	movhi	r2,256
  80f830:	10bfffc4 	addi	r2,r2,-1
  80f834:	11c0ee36 	bltu	r2,r7,80fbf0 <__udivdi3+0x50c>
  80f838:	00800404 	movi	r2,16
  80f83c:	3886d83a 	srl	r3,r7,r2
  80f840:	01002074 	movhi	r4,129
  80f844:	21143284 	addi	r4,r4,20682
  80f848:	20c7883a 	add	r3,r4,r3
  80f84c:	18c00003 	ldbu	r3,0(r3)
  80f850:	05400804 	movi	r21,32
  80f854:	1885883a 	add	r2,r3,r2
  80f858:	a8abc83a 	sub	r21,r21,r2
  80f85c:	a800621e 	bne	r21,zero,80f9e8 <__udivdi3+0x304>
  80f860:	3c00e936 	bltu	r7,r16,80fc08 <__udivdi3+0x524>
  80f864:	9985403a 	cmpgeu	r2,r19,r6
  80f868:	0007883a 	mov	r3,zero
  80f86c:	00004506 	br	80f984 <__udivdi3+0x2a0>
  80f870:	3000041e 	bne	r6,zero,80f884 <__udivdi3+0x1a0>
  80f874:	000b883a 	mov	r5,zero
  80f878:	01000044 	movi	r4,1
  80f87c:	081028c0 	call	81028c <__udivsi3>
  80f880:	1023883a 	mov	r17,r2
  80f884:	00bfffd4 	movui	r2,65535
  80f888:	14404e2e 	bgeu	r2,r17,80f9c4 <__udivdi3+0x2e0>
  80f88c:	00804034 	movhi	r2,256
  80f890:	10bfffc4 	addi	r2,r2,-1
  80f894:	1440d836 	bltu	r2,r17,80fbf8 <__udivdi3+0x514>
  80f898:	00800404 	movi	r2,16
  80f89c:	8886d83a 	srl	r3,r17,r2
  80f8a0:	01002074 	movhi	r4,129
  80f8a4:	21143284 	addi	r4,r4,20682
  80f8a8:	20c7883a 	add	r3,r4,r3
  80f8ac:	18c00003 	ldbu	r3,0(r3)
  80f8b0:	1885883a 	add	r2,r3,r2
  80f8b4:	00c00804 	movi	r3,32
  80f8b8:	1887c83a 	sub	r3,r3,r2
  80f8bc:	18008f1e 	bne	r3,zero,80fafc <__udivdi3+0x418>
  80f8c0:	882ad43a 	srli	r21,r17,16
  80f8c4:	8461c83a 	sub	r16,r16,r17
  80f8c8:	8d3fffcc 	andi	r20,r17,65535
  80f8cc:	00c00044 	movi	r3,1
  80f8d0:	8009883a 	mov	r4,r16
  80f8d4:	a80b883a 	mov	r5,r21
  80f8d8:	d8c00015 	stw	r3,0(sp)
  80f8dc:	08102f00 	call	8102f0 <__umodsi3>
  80f8e0:	8009883a 	mov	r4,r16
  80f8e4:	a80b883a 	mov	r5,r21
  80f8e8:	1027883a 	mov	r19,r2
  80f8ec:	081028c0 	call	81028c <__udivsi3>
  80f8f0:	9826943a 	slli	r19,r19,16
  80f8f4:	9008d43a 	srli	r4,r18,16
  80f8f8:	1521383a 	mul	r16,r2,r20
  80f8fc:	102d883a 	mov	r22,r2
  80f900:	24c8b03a 	or	r4,r4,r19
  80f904:	d8c00017 	ldw	r3,0(sp)
  80f908:	2400052e 	bgeu	r4,r16,80f920 <__udivdi3+0x23c>
  80f90c:	2449883a 	add	r4,r4,r17
  80f910:	b0bfffc4 	addi	r2,r22,-1
  80f914:	24400136 	bltu	r4,r17,80f91c <__udivdi3+0x238>
  80f918:	2400ca36 	bltu	r4,r16,80fc44 <__udivdi3+0x560>
  80f91c:	102d883a 	mov	r22,r2
  80f920:	2421c83a 	sub	r16,r4,r16
  80f924:	a80b883a 	mov	r5,r21
  80f928:	8009883a 	mov	r4,r16
  80f92c:	d8c00015 	stw	r3,0(sp)
  80f930:	08102f00 	call	8102f0 <__umodsi3>
  80f934:	1027883a 	mov	r19,r2
  80f938:	a80b883a 	mov	r5,r21
  80f93c:	8009883a 	mov	r4,r16
  80f940:	081028c0 	call	81028c <__udivsi3>
  80f944:	9826943a 	slli	r19,r19,16
  80f948:	1529383a 	mul	r20,r2,r20
  80f94c:	94bfffcc 	andi	r18,r18,65535
  80f950:	94e4b03a 	or	r18,r18,r19
  80f954:	d8c00017 	ldw	r3,0(sp)
  80f958:	9500052e 	bgeu	r18,r20,80f970 <__udivdi3+0x28c>
  80f95c:	8ca5883a 	add	r18,r17,r18
  80f960:	113fffc4 	addi	r4,r2,-1
  80f964:	94409736 	bltu	r18,r17,80fbc4 <__udivdi3+0x4e0>
  80f968:	9500962e 	bgeu	r18,r20,80fbc4 <__udivdi3+0x4e0>
  80f96c:	10bfff84 	addi	r2,r2,-2
  80f970:	b00c943a 	slli	r6,r22,16
  80f974:	3084b03a 	or	r2,r6,r2
  80f978:	00000206 	br	80f984 <__udivdi3+0x2a0>
  80f97c:	0007883a 	mov	r3,zero
  80f980:	0005883a 	mov	r2,zero
  80f984:	dfc00a17 	ldw	ra,40(sp)
  80f988:	df000917 	ldw	fp,36(sp)
  80f98c:	ddc00817 	ldw	r23,32(sp)
  80f990:	dd800717 	ldw	r22,28(sp)
  80f994:	dd400617 	ldw	r21,24(sp)
  80f998:	dd000517 	ldw	r20,20(sp)
  80f99c:	dcc00417 	ldw	r19,16(sp)
  80f9a0:	dc800317 	ldw	r18,12(sp)
  80f9a4:	dc400217 	ldw	r17,8(sp)
  80f9a8:	dc000117 	ldw	r16,4(sp)
  80f9ac:	dec00b04 	addi	sp,sp,44
  80f9b0:	f800283a 	ret
  80f9b4:	00803fc4 	movi	r2,255
  80f9b8:	11c5803a 	cmpltu	r2,r2,r7
  80f9bc:	100490fa 	slli	r2,r2,3
  80f9c0:	003f9e06 	br	80f83c <__alt_mem_onchip_mem+0xff80783c>
  80f9c4:	00803fc4 	movi	r2,255
  80f9c8:	1445803a 	cmpltu	r2,r2,r17
  80f9cc:	100490fa 	slli	r2,r2,3
  80f9d0:	003fb206 	br	80f89c <__alt_mem_onchip_mem+0xff80789c>
  80f9d4:	00804034 	movhi	r2,256
  80f9d8:	10bfffc4 	addi	r2,r2,-1
  80f9dc:	11808836 	bltu	r2,r6,80fc00 <__udivdi3+0x51c>
  80f9e0:	00800404 	movi	r2,16
  80f9e4:	003f5606 	br	80f740 <__alt_mem_onchip_mem+0xff807740>
  80f9e8:	30aed83a 	srl	r23,r6,r2
  80f9ec:	3d4e983a 	sll	r7,r7,r21
  80f9f0:	80acd83a 	srl	r22,r16,r2
  80f9f4:	9884d83a 	srl	r2,r19,r2
  80f9f8:	3deeb03a 	or	r23,r7,r23
  80f9fc:	b824d43a 	srli	r18,r23,16
  80fa00:	8560983a 	sll	r16,r16,r21
  80fa04:	b009883a 	mov	r4,r22
  80fa08:	900b883a 	mov	r5,r18
  80fa0c:	3568983a 	sll	r20,r6,r21
  80fa10:	1420b03a 	or	r16,r2,r16
  80fa14:	08102f00 	call	8102f0 <__umodsi3>
  80fa18:	b009883a 	mov	r4,r22
  80fa1c:	900b883a 	mov	r5,r18
  80fa20:	1023883a 	mov	r17,r2
  80fa24:	081028c0 	call	81028c <__udivsi3>
  80fa28:	8808943a 	slli	r4,r17,16
  80fa2c:	bf3fffcc 	andi	fp,r23,65535
  80fa30:	8006d43a 	srli	r3,r16,16
  80fa34:	e0a3383a 	mul	r17,fp,r2
  80fa38:	100d883a 	mov	r6,r2
  80fa3c:	1906b03a 	or	r3,r3,r4
  80fa40:	1c40042e 	bgeu	r3,r17,80fa54 <__udivdi3+0x370>
  80fa44:	1dc7883a 	add	r3,r3,r23
  80fa48:	10bfffc4 	addi	r2,r2,-1
  80fa4c:	1dc0752e 	bgeu	r3,r23,80fc24 <__udivdi3+0x540>
  80fa50:	100d883a 	mov	r6,r2
  80fa54:	1c63c83a 	sub	r17,r3,r17
  80fa58:	900b883a 	mov	r5,r18
  80fa5c:	8809883a 	mov	r4,r17
  80fa60:	d9800015 	stw	r6,0(sp)
  80fa64:	08102f00 	call	8102f0 <__umodsi3>
  80fa68:	102d883a 	mov	r22,r2
  80fa6c:	8809883a 	mov	r4,r17
  80fa70:	900b883a 	mov	r5,r18
  80fa74:	081028c0 	call	81028c <__udivsi3>
  80fa78:	b02c943a 	slli	r22,r22,16
  80fa7c:	e089383a 	mul	r4,fp,r2
  80fa80:	843fffcc 	andi	r16,r16,65535
  80fa84:	85a0b03a 	or	r16,r16,r22
  80fa88:	d9800017 	ldw	r6,0(sp)
  80fa8c:	8100042e 	bgeu	r16,r4,80faa0 <__udivdi3+0x3bc>
  80fa90:	85e1883a 	add	r16,r16,r23
  80fa94:	10ffffc4 	addi	r3,r2,-1
  80fa98:	85c05e2e 	bgeu	r16,r23,80fc14 <__udivdi3+0x530>
  80fa9c:	1805883a 	mov	r2,r3
  80faa0:	300c943a 	slli	r6,r6,16
  80faa4:	a17fffcc 	andi	r5,r20,65535
  80faa8:	a028d43a 	srli	r20,r20,16
  80faac:	3084b03a 	or	r2,r6,r2
  80fab0:	10ffffcc 	andi	r3,r2,65535
  80fab4:	100cd43a 	srli	r6,r2,16
  80fab8:	194f383a 	mul	r7,r3,r5
  80fabc:	1d07383a 	mul	r3,r3,r20
  80fac0:	314b383a 	mul	r5,r6,r5
  80fac4:	3810d43a 	srli	r8,r7,16
  80fac8:	8121c83a 	sub	r16,r16,r4
  80facc:	1947883a 	add	r3,r3,r5
  80fad0:	40c7883a 	add	r3,r8,r3
  80fad4:	350d383a 	mul	r6,r6,r20
  80fad8:	1940022e 	bgeu	r3,r5,80fae4 <__udivdi3+0x400>
  80fadc:	01000074 	movhi	r4,1
  80fae0:	310d883a 	add	r6,r6,r4
  80fae4:	1828d43a 	srli	r20,r3,16
  80fae8:	a18d883a 	add	r6,r20,r6
  80faec:	81803e36 	bltu	r16,r6,80fbe8 <__udivdi3+0x504>
  80faf0:	81803826 	beq	r16,r6,80fbd4 <__udivdi3+0x4f0>
  80faf4:	0007883a 	mov	r3,zero
  80faf8:	003fa206 	br	80f984 <__alt_mem_onchip_mem+0xff807984>
  80fafc:	88e2983a 	sll	r17,r17,r3
  80fb00:	80a8d83a 	srl	r20,r16,r2
  80fb04:	80e0983a 	sll	r16,r16,r3
  80fb08:	882ad43a 	srli	r21,r17,16
  80fb0c:	9884d83a 	srl	r2,r19,r2
  80fb10:	a009883a 	mov	r4,r20
  80fb14:	a80b883a 	mov	r5,r21
  80fb18:	142eb03a 	or	r23,r2,r16
  80fb1c:	98e4983a 	sll	r18,r19,r3
  80fb20:	08102f00 	call	8102f0 <__umodsi3>
  80fb24:	a009883a 	mov	r4,r20
  80fb28:	a80b883a 	mov	r5,r21
  80fb2c:	1021883a 	mov	r16,r2
  80fb30:	081028c0 	call	81028c <__udivsi3>
  80fb34:	1039883a 	mov	fp,r2
  80fb38:	8d3fffcc 	andi	r20,r17,65535
  80fb3c:	8020943a 	slli	r16,r16,16
  80fb40:	b804d43a 	srli	r2,r23,16
  80fb44:	a72d383a 	mul	r22,r20,fp
  80fb48:	1404b03a 	or	r2,r2,r16
  80fb4c:	1580062e 	bgeu	r2,r22,80fb68 <__udivdi3+0x484>
  80fb50:	1445883a 	add	r2,r2,r17
  80fb54:	e0ffffc4 	addi	r3,fp,-1
  80fb58:	14403836 	bltu	r2,r17,80fc3c <__udivdi3+0x558>
  80fb5c:	1580372e 	bgeu	r2,r22,80fc3c <__udivdi3+0x558>
  80fb60:	e73fff84 	addi	fp,fp,-2
  80fb64:	1445883a 	add	r2,r2,r17
  80fb68:	15adc83a 	sub	r22,r2,r22
  80fb6c:	a80b883a 	mov	r5,r21
  80fb70:	b009883a 	mov	r4,r22
  80fb74:	08102f00 	call	8102f0 <__umodsi3>
  80fb78:	1027883a 	mov	r19,r2
  80fb7c:	b009883a 	mov	r4,r22
  80fb80:	a80b883a 	mov	r5,r21
  80fb84:	081028c0 	call	81028c <__udivsi3>
  80fb88:	9826943a 	slli	r19,r19,16
  80fb8c:	a0a1383a 	mul	r16,r20,r2
  80fb90:	b93fffcc 	andi	r4,r23,65535
  80fb94:	24c8b03a 	or	r4,r4,r19
  80fb98:	2400062e 	bgeu	r4,r16,80fbb4 <__udivdi3+0x4d0>
  80fb9c:	2449883a 	add	r4,r4,r17
  80fba0:	10ffffc4 	addi	r3,r2,-1
  80fba4:	24402336 	bltu	r4,r17,80fc34 <__udivdi3+0x550>
  80fba8:	2400222e 	bgeu	r4,r16,80fc34 <__udivdi3+0x550>
  80fbac:	10bfff84 	addi	r2,r2,-2
  80fbb0:	2449883a 	add	r4,r4,r17
  80fbb4:	e038943a 	slli	fp,fp,16
  80fbb8:	2421c83a 	sub	r16,r4,r16
  80fbbc:	e086b03a 	or	r3,fp,r2
  80fbc0:	003f4306 	br	80f8d0 <__alt_mem_onchip_mem+0xff8078d0>
  80fbc4:	2005883a 	mov	r2,r4
  80fbc8:	003f6906 	br	80f970 <__alt_mem_onchip_mem+0xff807970>
  80fbcc:	1805883a 	mov	r2,r3
  80fbd0:	003f0f06 	br	80f810 <__alt_mem_onchip_mem+0xff807810>
  80fbd4:	1806943a 	slli	r3,r3,16
  80fbd8:	9d66983a 	sll	r19,r19,r21
  80fbdc:	39ffffcc 	andi	r7,r7,65535
  80fbe0:	19c7883a 	add	r3,r3,r7
  80fbe4:	98ffc32e 	bgeu	r19,r3,80faf4 <__alt_mem_onchip_mem+0xff807af4>
  80fbe8:	10bfffc4 	addi	r2,r2,-1
  80fbec:	003fc106 	br	80faf4 <__alt_mem_onchip_mem+0xff807af4>
  80fbf0:	00800604 	movi	r2,24
  80fbf4:	003f1106 	br	80f83c <__alt_mem_onchip_mem+0xff80783c>
  80fbf8:	00800604 	movi	r2,24
  80fbfc:	003f2706 	br	80f89c <__alt_mem_onchip_mem+0xff80789c>
  80fc00:	00800604 	movi	r2,24
  80fc04:	003ece06 	br	80f740 <__alt_mem_onchip_mem+0xff807740>
  80fc08:	0007883a 	mov	r3,zero
  80fc0c:	00800044 	movi	r2,1
  80fc10:	003f5c06 	br	80f984 <__alt_mem_onchip_mem+0xff807984>
  80fc14:	813fa12e 	bgeu	r16,r4,80fa9c <__alt_mem_onchip_mem+0xff807a9c>
  80fc18:	10bfff84 	addi	r2,r2,-2
  80fc1c:	85e1883a 	add	r16,r16,r23
  80fc20:	003f9f06 	br	80faa0 <__alt_mem_onchip_mem+0xff807aa0>
  80fc24:	1c7f8a2e 	bgeu	r3,r17,80fa50 <__alt_mem_onchip_mem+0xff807a50>
  80fc28:	31bfff84 	addi	r6,r6,-2
  80fc2c:	1dc7883a 	add	r3,r3,r23
  80fc30:	003f8806 	br	80fa54 <__alt_mem_onchip_mem+0xff807a54>
  80fc34:	1805883a 	mov	r2,r3
  80fc38:	003fde06 	br	80fbb4 <__alt_mem_onchip_mem+0xff807bb4>
  80fc3c:	1839883a 	mov	fp,r3
  80fc40:	003fc906 	br	80fb68 <__alt_mem_onchip_mem+0xff807b68>
  80fc44:	b5bfff84 	addi	r22,r22,-2
  80fc48:	2449883a 	add	r4,r4,r17
  80fc4c:	003f3406 	br	80f920 <__alt_mem_onchip_mem+0xff807920>
  80fc50:	b5bfff84 	addi	r22,r22,-2
  80fc54:	1445883a 	add	r2,r2,r17
  80fc58:	003edb06 	br	80f7c8 <__alt_mem_onchip_mem+0xff8077c8>

0080fc5c <__umoddi3>:
  80fc5c:	defff404 	addi	sp,sp,-48
  80fc60:	df000a15 	stw	fp,40(sp)
  80fc64:	dc400315 	stw	r17,12(sp)
  80fc68:	dc000215 	stw	r16,8(sp)
  80fc6c:	dfc00b15 	stw	ra,44(sp)
  80fc70:	ddc00915 	stw	r23,36(sp)
  80fc74:	dd800815 	stw	r22,32(sp)
  80fc78:	dd400715 	stw	r21,28(sp)
  80fc7c:	dd000615 	stw	r20,24(sp)
  80fc80:	dcc00515 	stw	r19,20(sp)
  80fc84:	dc800415 	stw	r18,16(sp)
  80fc88:	2021883a 	mov	r16,r4
  80fc8c:	2823883a 	mov	r17,r5
  80fc90:	2839883a 	mov	fp,r5
  80fc94:	38003c1e 	bne	r7,zero,80fd88 <__umoddi3+0x12c>
  80fc98:	3027883a 	mov	r19,r6
  80fc9c:	2029883a 	mov	r20,r4
  80fca0:	2980512e 	bgeu	r5,r6,80fde8 <__umoddi3+0x18c>
  80fca4:	00bfffd4 	movui	r2,65535
  80fca8:	11809a36 	bltu	r2,r6,80ff14 <__umoddi3+0x2b8>
  80fcac:	01003fc4 	movi	r4,255
  80fcb0:	2189803a 	cmpltu	r4,r4,r6
  80fcb4:	200890fa 	slli	r4,r4,3
  80fcb8:	3104d83a 	srl	r2,r6,r4
  80fcbc:	00c02074 	movhi	r3,129
  80fcc0:	18d43284 	addi	r3,r3,20682
  80fcc4:	1885883a 	add	r2,r3,r2
  80fcc8:	10c00003 	ldbu	r3,0(r2)
  80fccc:	00800804 	movi	r2,32
  80fcd0:	1909883a 	add	r4,r3,r4
  80fcd4:	1125c83a 	sub	r18,r2,r4
  80fcd8:	90000526 	beq	r18,zero,80fcf0 <__umoddi3+0x94>
  80fcdc:	8ca2983a 	sll	r17,r17,r18
  80fce0:	8108d83a 	srl	r4,r16,r4
  80fce4:	34a6983a 	sll	r19,r6,r18
  80fce8:	84a8983a 	sll	r20,r16,r18
  80fcec:	2478b03a 	or	fp,r4,r17
  80fcf0:	982ed43a 	srli	r23,r19,16
  80fcf4:	e009883a 	mov	r4,fp
  80fcf8:	9dbfffcc 	andi	r22,r19,65535
  80fcfc:	b80b883a 	mov	r5,r23
  80fd00:	08102f00 	call	8102f0 <__umodsi3>
  80fd04:	e009883a 	mov	r4,fp
  80fd08:	b80b883a 	mov	r5,r23
  80fd0c:	102b883a 	mov	r21,r2
  80fd10:	081028c0 	call	81028c <__udivsi3>
  80fd14:	a806943a 	slli	r3,r21,16
  80fd18:	a008d43a 	srli	r4,r20,16
  80fd1c:	b085383a 	mul	r2,r22,r2
  80fd20:	20c8b03a 	or	r4,r4,r3
  80fd24:	2080032e 	bgeu	r4,r2,80fd34 <__umoddi3+0xd8>
  80fd28:	24c9883a 	add	r4,r4,r19
  80fd2c:	24c00136 	bltu	r4,r19,80fd34 <__umoddi3+0xd8>
  80fd30:	20811036 	bltu	r4,r2,810174 <__umoddi3+0x518>
  80fd34:	20abc83a 	sub	r21,r4,r2
  80fd38:	b80b883a 	mov	r5,r23
  80fd3c:	a809883a 	mov	r4,r21
  80fd40:	08102f00 	call	8102f0 <__umodsi3>
  80fd44:	1023883a 	mov	r17,r2
  80fd48:	b80b883a 	mov	r5,r23
  80fd4c:	a809883a 	mov	r4,r21
  80fd50:	081028c0 	call	81028c <__udivsi3>
  80fd54:	8822943a 	slli	r17,r17,16
  80fd58:	b085383a 	mul	r2,r22,r2
  80fd5c:	a0ffffcc 	andi	r3,r20,65535
  80fd60:	1c46b03a 	or	r3,r3,r17
  80fd64:	1880042e 	bgeu	r3,r2,80fd78 <__umoddi3+0x11c>
  80fd68:	1cc7883a 	add	r3,r3,r19
  80fd6c:	1cc00236 	bltu	r3,r19,80fd78 <__umoddi3+0x11c>
  80fd70:	1880012e 	bgeu	r3,r2,80fd78 <__umoddi3+0x11c>
  80fd74:	1cc7883a 	add	r3,r3,r19
  80fd78:	1885c83a 	sub	r2,r3,r2
  80fd7c:	1484d83a 	srl	r2,r2,r18
  80fd80:	0007883a 	mov	r3,zero
  80fd84:	00004f06 	br	80fec4 <__umoddi3+0x268>
  80fd88:	29c04c36 	bltu	r5,r7,80febc <__umoddi3+0x260>
  80fd8c:	00bfffd4 	movui	r2,65535
  80fd90:	11c0582e 	bgeu	r2,r7,80fef4 <__umoddi3+0x298>
  80fd94:	00804034 	movhi	r2,256
  80fd98:	10bfffc4 	addi	r2,r2,-1
  80fd9c:	11c0e736 	bltu	r2,r7,81013c <__umoddi3+0x4e0>
  80fda0:	01000404 	movi	r4,16
  80fda4:	3904d83a 	srl	r2,r7,r4
  80fda8:	00c02074 	movhi	r3,129
  80fdac:	18d43284 	addi	r3,r3,20682
  80fdb0:	1885883a 	add	r2,r3,r2
  80fdb4:	14c00003 	ldbu	r19,0(r2)
  80fdb8:	00c00804 	movi	r3,32
  80fdbc:	9927883a 	add	r19,r19,r4
  80fdc0:	1ce9c83a 	sub	r20,r3,r19
  80fdc4:	a000581e 	bne	r20,zero,80ff28 <__umoddi3+0x2cc>
  80fdc8:	3c400136 	bltu	r7,r17,80fdd0 <__umoddi3+0x174>
  80fdcc:	8180eb36 	bltu	r16,r6,81017c <__umoddi3+0x520>
  80fdd0:	8185c83a 	sub	r2,r16,r6
  80fdd4:	89e3c83a 	sub	r17,r17,r7
  80fdd8:	8089803a 	cmpltu	r4,r16,r2
  80fddc:	8939c83a 	sub	fp,r17,r4
  80fde0:	e007883a 	mov	r3,fp
  80fde4:	00003706 	br	80fec4 <__umoddi3+0x268>
  80fde8:	3000041e 	bne	r6,zero,80fdfc <__umoddi3+0x1a0>
  80fdec:	000b883a 	mov	r5,zero
  80fdf0:	01000044 	movi	r4,1
  80fdf4:	081028c0 	call	81028c <__udivsi3>
  80fdf8:	1027883a 	mov	r19,r2
  80fdfc:	00bfffd4 	movui	r2,65535
  80fe00:	14c0402e 	bgeu	r2,r19,80ff04 <__umoddi3+0x2a8>
  80fe04:	00804034 	movhi	r2,256
  80fe08:	10bfffc4 	addi	r2,r2,-1
  80fe0c:	14c0cd36 	bltu	r2,r19,810144 <__umoddi3+0x4e8>
  80fe10:	00800404 	movi	r2,16
  80fe14:	9886d83a 	srl	r3,r19,r2
  80fe18:	01002074 	movhi	r4,129
  80fe1c:	21143284 	addi	r4,r4,20682
  80fe20:	20c7883a 	add	r3,r4,r3
  80fe24:	18c00003 	ldbu	r3,0(r3)
  80fe28:	1887883a 	add	r3,r3,r2
  80fe2c:	00800804 	movi	r2,32
  80fe30:	10e5c83a 	sub	r18,r2,r3
  80fe34:	9000901e 	bne	r18,zero,810078 <__umoddi3+0x41c>
  80fe38:	982cd43a 	srli	r22,r19,16
  80fe3c:	8ce3c83a 	sub	r17,r17,r19
  80fe40:	9d7fffcc 	andi	r21,r19,65535
  80fe44:	b00b883a 	mov	r5,r22
  80fe48:	8809883a 	mov	r4,r17
  80fe4c:	08102f00 	call	8102f0 <__umodsi3>
  80fe50:	8809883a 	mov	r4,r17
  80fe54:	b00b883a 	mov	r5,r22
  80fe58:	1021883a 	mov	r16,r2
  80fe5c:	081028c0 	call	81028c <__udivsi3>
  80fe60:	8006943a 	slli	r3,r16,16
  80fe64:	a008d43a 	srli	r4,r20,16
  80fe68:	1545383a 	mul	r2,r2,r21
  80fe6c:	20c8b03a 	or	r4,r4,r3
  80fe70:	2080042e 	bgeu	r4,r2,80fe84 <__umoddi3+0x228>
  80fe74:	24c9883a 	add	r4,r4,r19
  80fe78:	24c00236 	bltu	r4,r19,80fe84 <__umoddi3+0x228>
  80fe7c:	2080012e 	bgeu	r4,r2,80fe84 <__umoddi3+0x228>
  80fe80:	24c9883a 	add	r4,r4,r19
  80fe84:	20a1c83a 	sub	r16,r4,r2
  80fe88:	b00b883a 	mov	r5,r22
  80fe8c:	8009883a 	mov	r4,r16
  80fe90:	08102f00 	call	8102f0 <__umodsi3>
  80fe94:	1023883a 	mov	r17,r2
  80fe98:	b00b883a 	mov	r5,r22
  80fe9c:	8009883a 	mov	r4,r16
  80fea0:	081028c0 	call	81028c <__udivsi3>
  80fea4:	8822943a 	slli	r17,r17,16
  80fea8:	1545383a 	mul	r2,r2,r21
  80feac:	a53fffcc 	andi	r20,r20,65535
  80feb0:	a446b03a 	or	r3,r20,r17
  80feb4:	18bfb02e 	bgeu	r3,r2,80fd78 <__alt_mem_onchip_mem+0xff807d78>
  80feb8:	003fab06 	br	80fd68 <__alt_mem_onchip_mem+0xff807d68>
  80febc:	2005883a 	mov	r2,r4
  80fec0:	2807883a 	mov	r3,r5
  80fec4:	dfc00b17 	ldw	ra,44(sp)
  80fec8:	df000a17 	ldw	fp,40(sp)
  80fecc:	ddc00917 	ldw	r23,36(sp)
  80fed0:	dd800817 	ldw	r22,32(sp)
  80fed4:	dd400717 	ldw	r21,28(sp)
  80fed8:	dd000617 	ldw	r20,24(sp)
  80fedc:	dcc00517 	ldw	r19,20(sp)
  80fee0:	dc800417 	ldw	r18,16(sp)
  80fee4:	dc400317 	ldw	r17,12(sp)
  80fee8:	dc000217 	ldw	r16,8(sp)
  80feec:	dec00c04 	addi	sp,sp,48
  80fef0:	f800283a 	ret
  80fef4:	04c03fc4 	movi	r19,255
  80fef8:	99c9803a 	cmpltu	r4,r19,r7
  80fefc:	200890fa 	slli	r4,r4,3
  80ff00:	003fa806 	br	80fda4 <__alt_mem_onchip_mem+0xff807da4>
  80ff04:	00803fc4 	movi	r2,255
  80ff08:	14c5803a 	cmpltu	r2,r2,r19
  80ff0c:	100490fa 	slli	r2,r2,3
  80ff10:	003fc006 	br	80fe14 <__alt_mem_onchip_mem+0xff807e14>
  80ff14:	00804034 	movhi	r2,256
  80ff18:	10bfffc4 	addi	r2,r2,-1
  80ff1c:	11808b36 	bltu	r2,r6,81014c <__umoddi3+0x4f0>
  80ff20:	01000404 	movi	r4,16
  80ff24:	003f6406 	br	80fcb8 <__alt_mem_onchip_mem+0xff807cb8>
  80ff28:	34c4d83a 	srl	r2,r6,r19
  80ff2c:	3d0e983a 	sll	r7,r7,r20
  80ff30:	8cf8d83a 	srl	fp,r17,r19
  80ff34:	8d10983a 	sll	r8,r17,r20
  80ff38:	38aab03a 	or	r21,r7,r2
  80ff3c:	a82cd43a 	srli	r22,r21,16
  80ff40:	84e2d83a 	srl	r17,r16,r19
  80ff44:	e009883a 	mov	r4,fp
  80ff48:	b00b883a 	mov	r5,r22
  80ff4c:	8a22b03a 	or	r17,r17,r8
  80ff50:	3524983a 	sll	r18,r6,r20
  80ff54:	08102f00 	call	8102f0 <__umodsi3>
  80ff58:	e009883a 	mov	r4,fp
  80ff5c:	b00b883a 	mov	r5,r22
  80ff60:	102f883a 	mov	r23,r2
  80ff64:	081028c0 	call	81028c <__udivsi3>
  80ff68:	100d883a 	mov	r6,r2
  80ff6c:	b808943a 	slli	r4,r23,16
  80ff70:	aa3fffcc 	andi	r8,r21,65535
  80ff74:	8804d43a 	srli	r2,r17,16
  80ff78:	41af383a 	mul	r23,r8,r6
  80ff7c:	8520983a 	sll	r16,r16,r20
  80ff80:	1104b03a 	or	r2,r2,r4
  80ff84:	15c0042e 	bgeu	r2,r23,80ff98 <__umoddi3+0x33c>
  80ff88:	1545883a 	add	r2,r2,r21
  80ff8c:	30ffffc4 	addi	r3,r6,-1
  80ff90:	1540742e 	bgeu	r2,r21,810164 <__umoddi3+0x508>
  80ff94:	180d883a 	mov	r6,r3
  80ff98:	15efc83a 	sub	r23,r2,r23
  80ff9c:	b00b883a 	mov	r5,r22
  80ffa0:	b809883a 	mov	r4,r23
  80ffa4:	d9800115 	stw	r6,4(sp)
  80ffa8:	da000015 	stw	r8,0(sp)
  80ffac:	08102f00 	call	8102f0 <__umodsi3>
  80ffb0:	b00b883a 	mov	r5,r22
  80ffb4:	b809883a 	mov	r4,r23
  80ffb8:	1039883a 	mov	fp,r2
  80ffbc:	081028c0 	call	81028c <__udivsi3>
  80ffc0:	da000017 	ldw	r8,0(sp)
  80ffc4:	e038943a 	slli	fp,fp,16
  80ffc8:	100b883a 	mov	r5,r2
  80ffcc:	4089383a 	mul	r4,r8,r2
  80ffd0:	8a3fffcc 	andi	r8,r17,65535
  80ffd4:	4710b03a 	or	r8,r8,fp
  80ffd8:	d9800117 	ldw	r6,4(sp)
  80ffdc:	4100042e 	bgeu	r8,r4,80fff0 <__umoddi3+0x394>
  80ffe0:	4551883a 	add	r8,r8,r21
  80ffe4:	10bfffc4 	addi	r2,r2,-1
  80ffe8:	45405a2e 	bgeu	r8,r21,810154 <__umoddi3+0x4f8>
  80ffec:	100b883a 	mov	r5,r2
  80fff0:	300c943a 	slli	r6,r6,16
  80fff4:	91ffffcc 	andi	r7,r18,65535
  80fff8:	9004d43a 	srli	r2,r18,16
  80fffc:	314cb03a 	or	r6,r6,r5
  810000:	317fffcc 	andi	r5,r6,65535
  810004:	300cd43a 	srli	r6,r6,16
  810008:	29d3383a 	mul	r9,r5,r7
  81000c:	288b383a 	mul	r5,r5,r2
  810010:	31cf383a 	mul	r7,r6,r7
  810014:	4806d43a 	srli	r3,r9,16
  810018:	4111c83a 	sub	r8,r8,r4
  81001c:	29cb883a 	add	r5,r5,r7
  810020:	194b883a 	add	r5,r3,r5
  810024:	3085383a 	mul	r2,r6,r2
  810028:	29c0022e 	bgeu	r5,r7,810034 <__umoddi3+0x3d8>
  81002c:	00c00074 	movhi	r3,1
  810030:	10c5883a 	add	r2,r2,r3
  810034:	2808d43a 	srli	r4,r5,16
  810038:	280a943a 	slli	r5,r5,16
  81003c:	4a7fffcc 	andi	r9,r9,65535
  810040:	2085883a 	add	r2,r4,r2
  810044:	2a4b883a 	add	r5,r5,r9
  810048:	40803636 	bltu	r8,r2,810124 <__umoddi3+0x4c8>
  81004c:	40804d26 	beq	r8,r2,810184 <__umoddi3+0x528>
  810050:	4089c83a 	sub	r4,r8,r2
  810054:	280f883a 	mov	r7,r5
  810058:	81cfc83a 	sub	r7,r16,r7
  81005c:	81c7803a 	cmpltu	r3,r16,r7
  810060:	20c7c83a 	sub	r3,r4,r3
  810064:	1cc4983a 	sll	r2,r3,r19
  810068:	3d0ed83a 	srl	r7,r7,r20
  81006c:	1d06d83a 	srl	r3,r3,r20
  810070:	11c4b03a 	or	r2,r2,r7
  810074:	003f9306 	br	80fec4 <__alt_mem_onchip_mem+0xff807ec4>
  810078:	9ca6983a 	sll	r19,r19,r18
  81007c:	88e8d83a 	srl	r20,r17,r3
  810080:	80c4d83a 	srl	r2,r16,r3
  810084:	982cd43a 	srli	r22,r19,16
  810088:	8ca2983a 	sll	r17,r17,r18
  81008c:	a009883a 	mov	r4,r20
  810090:	b00b883a 	mov	r5,r22
  810094:	1478b03a 	or	fp,r2,r17
  810098:	08102f00 	call	8102f0 <__umodsi3>
  81009c:	a009883a 	mov	r4,r20
  8100a0:	b00b883a 	mov	r5,r22
  8100a4:	1023883a 	mov	r17,r2
  8100a8:	081028c0 	call	81028c <__udivsi3>
  8100ac:	9d7fffcc 	andi	r21,r19,65535
  8100b0:	880a943a 	slli	r5,r17,16
  8100b4:	e008d43a 	srli	r4,fp,16
  8100b8:	a885383a 	mul	r2,r21,r2
  8100bc:	84a8983a 	sll	r20,r16,r18
  8100c0:	2148b03a 	or	r4,r4,r5
  8100c4:	2080042e 	bgeu	r4,r2,8100d8 <__umoddi3+0x47c>
  8100c8:	24c9883a 	add	r4,r4,r19
  8100cc:	24c00236 	bltu	r4,r19,8100d8 <__umoddi3+0x47c>
  8100d0:	2080012e 	bgeu	r4,r2,8100d8 <__umoddi3+0x47c>
  8100d4:	24c9883a 	add	r4,r4,r19
  8100d8:	20a3c83a 	sub	r17,r4,r2
  8100dc:	b00b883a 	mov	r5,r22
  8100e0:	8809883a 	mov	r4,r17
  8100e4:	08102f00 	call	8102f0 <__umodsi3>
  8100e8:	102f883a 	mov	r23,r2
  8100ec:	8809883a 	mov	r4,r17
  8100f0:	b00b883a 	mov	r5,r22
  8100f4:	081028c0 	call	81028c <__udivsi3>
  8100f8:	b82e943a 	slli	r23,r23,16
  8100fc:	a885383a 	mul	r2,r21,r2
  810100:	e13fffcc 	andi	r4,fp,65535
  810104:	25c8b03a 	or	r4,r4,r23
  810108:	2080042e 	bgeu	r4,r2,81011c <__umoddi3+0x4c0>
  81010c:	24c9883a 	add	r4,r4,r19
  810110:	24c00236 	bltu	r4,r19,81011c <__umoddi3+0x4c0>
  810114:	2080012e 	bgeu	r4,r2,81011c <__umoddi3+0x4c0>
  810118:	24c9883a 	add	r4,r4,r19
  81011c:	20a3c83a 	sub	r17,r4,r2
  810120:	003f4806 	br	80fe44 <__alt_mem_onchip_mem+0xff807e44>
  810124:	2c8fc83a 	sub	r7,r5,r18
  810128:	1545c83a 	sub	r2,r2,r21
  81012c:	29cb803a 	cmpltu	r5,r5,r7
  810130:	1145c83a 	sub	r2,r2,r5
  810134:	4089c83a 	sub	r4,r8,r2
  810138:	003fc706 	br	810058 <__alt_mem_onchip_mem+0xff808058>
  81013c:	01000604 	movi	r4,24
  810140:	003f1806 	br	80fda4 <__alt_mem_onchip_mem+0xff807da4>
  810144:	00800604 	movi	r2,24
  810148:	003f3206 	br	80fe14 <__alt_mem_onchip_mem+0xff807e14>
  81014c:	01000604 	movi	r4,24
  810150:	003ed906 	br	80fcb8 <__alt_mem_onchip_mem+0xff807cb8>
  810154:	413fa52e 	bgeu	r8,r4,80ffec <__alt_mem_onchip_mem+0xff807fec>
  810158:	297fff84 	addi	r5,r5,-2
  81015c:	4551883a 	add	r8,r8,r21
  810160:	003fa306 	br	80fff0 <__alt_mem_onchip_mem+0xff807ff0>
  810164:	15ff8b2e 	bgeu	r2,r23,80ff94 <__alt_mem_onchip_mem+0xff807f94>
  810168:	31bfff84 	addi	r6,r6,-2
  81016c:	1545883a 	add	r2,r2,r21
  810170:	003f8906 	br	80ff98 <__alt_mem_onchip_mem+0xff807f98>
  810174:	24c9883a 	add	r4,r4,r19
  810178:	003eee06 	br	80fd34 <__alt_mem_onchip_mem+0xff807d34>
  81017c:	8005883a 	mov	r2,r16
  810180:	003f1706 	br	80fde0 <__alt_mem_onchip_mem+0xff807de0>
  810184:	817fe736 	bltu	r16,r5,810124 <__alt_mem_onchip_mem+0xff808124>
  810188:	280f883a 	mov	r7,r5
  81018c:	0009883a 	mov	r4,zero
  810190:	003fb106 	br	810058 <__alt_mem_onchip_mem+0xff808058>

00810194 <__divsi3>:
  810194:	20001b16 	blt	r4,zero,810204 <__divsi3+0x70>
  810198:	000f883a 	mov	r7,zero
  81019c:	28001616 	blt	r5,zero,8101f8 <__divsi3+0x64>
  8101a0:	200d883a 	mov	r6,r4
  8101a4:	29001a2e 	bgeu	r5,r4,810210 <__divsi3+0x7c>
  8101a8:	00800804 	movi	r2,32
  8101ac:	00c00044 	movi	r3,1
  8101b0:	00000106 	br	8101b8 <__divsi3+0x24>
  8101b4:	10000d26 	beq	r2,zero,8101ec <__divsi3+0x58>
  8101b8:	294b883a 	add	r5,r5,r5
  8101bc:	10bfffc4 	addi	r2,r2,-1
  8101c0:	18c7883a 	add	r3,r3,r3
  8101c4:	293ffb36 	bltu	r5,r4,8101b4 <__alt_mem_onchip_mem+0xff8081b4>
  8101c8:	0005883a 	mov	r2,zero
  8101cc:	18000726 	beq	r3,zero,8101ec <__divsi3+0x58>
  8101d0:	0005883a 	mov	r2,zero
  8101d4:	31400236 	bltu	r6,r5,8101e0 <__divsi3+0x4c>
  8101d8:	314dc83a 	sub	r6,r6,r5
  8101dc:	10c4b03a 	or	r2,r2,r3
  8101e0:	1806d07a 	srli	r3,r3,1
  8101e4:	280ad07a 	srli	r5,r5,1
  8101e8:	183ffa1e 	bne	r3,zero,8101d4 <__alt_mem_onchip_mem+0xff8081d4>
  8101ec:	38000126 	beq	r7,zero,8101f4 <__divsi3+0x60>
  8101f0:	0085c83a 	sub	r2,zero,r2
  8101f4:	f800283a 	ret
  8101f8:	014bc83a 	sub	r5,zero,r5
  8101fc:	39c0005c 	xori	r7,r7,1
  810200:	003fe706 	br	8101a0 <__alt_mem_onchip_mem+0xff8081a0>
  810204:	0109c83a 	sub	r4,zero,r4
  810208:	01c00044 	movi	r7,1
  81020c:	003fe306 	br	81019c <__alt_mem_onchip_mem+0xff80819c>
  810210:	00c00044 	movi	r3,1
  810214:	003fee06 	br	8101d0 <__alt_mem_onchip_mem+0xff8081d0>

00810218 <__modsi3>:
  810218:	20001716 	blt	r4,zero,810278 <__modsi3+0x60>
  81021c:	000f883a 	mov	r7,zero
  810220:	2005883a 	mov	r2,r4
  810224:	28001216 	blt	r5,zero,810270 <__modsi3+0x58>
  810228:	2900162e 	bgeu	r5,r4,810284 <__modsi3+0x6c>
  81022c:	01800804 	movi	r6,32
  810230:	00c00044 	movi	r3,1
  810234:	00000106 	br	81023c <__modsi3+0x24>
  810238:	30000a26 	beq	r6,zero,810264 <__modsi3+0x4c>
  81023c:	294b883a 	add	r5,r5,r5
  810240:	31bfffc4 	addi	r6,r6,-1
  810244:	18c7883a 	add	r3,r3,r3
  810248:	293ffb36 	bltu	r5,r4,810238 <__alt_mem_onchip_mem+0xff808238>
  81024c:	18000526 	beq	r3,zero,810264 <__modsi3+0x4c>
  810250:	1806d07a 	srli	r3,r3,1
  810254:	11400136 	bltu	r2,r5,81025c <__modsi3+0x44>
  810258:	1145c83a 	sub	r2,r2,r5
  81025c:	280ad07a 	srli	r5,r5,1
  810260:	183ffb1e 	bne	r3,zero,810250 <__alt_mem_onchip_mem+0xff808250>
  810264:	38000126 	beq	r7,zero,81026c <__modsi3+0x54>
  810268:	0085c83a 	sub	r2,zero,r2
  81026c:	f800283a 	ret
  810270:	014bc83a 	sub	r5,zero,r5
  810274:	003fec06 	br	810228 <__alt_mem_onchip_mem+0xff808228>
  810278:	0109c83a 	sub	r4,zero,r4
  81027c:	01c00044 	movi	r7,1
  810280:	003fe706 	br	810220 <__alt_mem_onchip_mem+0xff808220>
  810284:	00c00044 	movi	r3,1
  810288:	003ff106 	br	810250 <__alt_mem_onchip_mem+0xff808250>

0081028c <__udivsi3>:
  81028c:	200d883a 	mov	r6,r4
  810290:	2900152e 	bgeu	r5,r4,8102e8 <__udivsi3+0x5c>
  810294:	28001416 	blt	r5,zero,8102e8 <__udivsi3+0x5c>
  810298:	00800804 	movi	r2,32
  81029c:	00c00044 	movi	r3,1
  8102a0:	00000206 	br	8102ac <__udivsi3+0x20>
  8102a4:	10000e26 	beq	r2,zero,8102e0 <__udivsi3+0x54>
  8102a8:	28000516 	blt	r5,zero,8102c0 <__udivsi3+0x34>
  8102ac:	294b883a 	add	r5,r5,r5
  8102b0:	10bfffc4 	addi	r2,r2,-1
  8102b4:	18c7883a 	add	r3,r3,r3
  8102b8:	293ffa36 	bltu	r5,r4,8102a4 <__alt_mem_onchip_mem+0xff8082a4>
  8102bc:	18000826 	beq	r3,zero,8102e0 <__udivsi3+0x54>
  8102c0:	0005883a 	mov	r2,zero
  8102c4:	31400236 	bltu	r6,r5,8102d0 <__udivsi3+0x44>
  8102c8:	314dc83a 	sub	r6,r6,r5
  8102cc:	10c4b03a 	or	r2,r2,r3
  8102d0:	1806d07a 	srli	r3,r3,1
  8102d4:	280ad07a 	srli	r5,r5,1
  8102d8:	183ffa1e 	bne	r3,zero,8102c4 <__alt_mem_onchip_mem+0xff8082c4>
  8102dc:	f800283a 	ret
  8102e0:	0005883a 	mov	r2,zero
  8102e4:	f800283a 	ret
  8102e8:	00c00044 	movi	r3,1
  8102ec:	003ff406 	br	8102c0 <__alt_mem_onchip_mem+0xff8082c0>

008102f0 <__umodsi3>:
  8102f0:	2005883a 	mov	r2,r4
  8102f4:	2900122e 	bgeu	r5,r4,810340 <__umodsi3+0x50>
  8102f8:	28001116 	blt	r5,zero,810340 <__umodsi3+0x50>
  8102fc:	01800804 	movi	r6,32
  810300:	00c00044 	movi	r3,1
  810304:	00000206 	br	810310 <__umodsi3+0x20>
  810308:	30000c26 	beq	r6,zero,81033c <__umodsi3+0x4c>
  81030c:	28000516 	blt	r5,zero,810324 <__umodsi3+0x34>
  810310:	294b883a 	add	r5,r5,r5
  810314:	31bfffc4 	addi	r6,r6,-1
  810318:	18c7883a 	add	r3,r3,r3
  81031c:	293ffa36 	bltu	r5,r4,810308 <__alt_mem_onchip_mem+0xff808308>
  810320:	18000626 	beq	r3,zero,81033c <__umodsi3+0x4c>
  810324:	1806d07a 	srli	r3,r3,1
  810328:	11400136 	bltu	r2,r5,810330 <__umodsi3+0x40>
  81032c:	1145c83a 	sub	r2,r2,r5
  810330:	280ad07a 	srli	r5,r5,1
  810334:	183ffb1e 	bne	r3,zero,810324 <__alt_mem_onchip_mem+0xff808324>
  810338:	f800283a 	ret
  81033c:	f800283a 	ret
  810340:	00c00044 	movi	r3,1
  810344:	003ff706 	br	810324 <__alt_mem_onchip_mem+0xff808324>

00810348 <__divdf3>:
  810348:	defff204 	addi	sp,sp,-56
  81034c:	dd400915 	stw	r21,36(sp)
  810350:	282ad53a 	srli	r21,r5,20
  810354:	dd000815 	stw	r20,32(sp)
  810358:	2828d7fa 	srli	r20,r5,31
  81035c:	dc000415 	stw	r16,16(sp)
  810360:	04000434 	movhi	r16,16
  810364:	df000c15 	stw	fp,48(sp)
  810368:	843fffc4 	addi	r16,r16,-1
  81036c:	dfc00d15 	stw	ra,52(sp)
  810370:	ddc00b15 	stw	r23,44(sp)
  810374:	dd800a15 	stw	r22,40(sp)
  810378:	dcc00715 	stw	r19,28(sp)
  81037c:	dc800615 	stw	r18,24(sp)
  810380:	dc400515 	stw	r17,20(sp)
  810384:	ad41ffcc 	andi	r21,r21,2047
  810388:	2c20703a 	and	r16,r5,r16
  81038c:	a7003fcc 	andi	fp,r20,255
  810390:	a8006126 	beq	r21,zero,810518 <__divdf3+0x1d0>
  810394:	0081ffc4 	movi	r2,2047
  810398:	2025883a 	mov	r18,r4
  81039c:	a8803726 	beq	r21,r2,81047c <__divdf3+0x134>
  8103a0:	80800434 	orhi	r2,r16,16
  8103a4:	100490fa 	slli	r2,r2,3
  8103a8:	2020d77a 	srli	r16,r4,29
  8103ac:	202490fa 	slli	r18,r4,3
  8103b0:	ad7f0044 	addi	r21,r21,-1023
  8103b4:	80a0b03a 	or	r16,r16,r2
  8103b8:	0027883a 	mov	r19,zero
  8103bc:	0013883a 	mov	r9,zero
  8103c0:	3804d53a 	srli	r2,r7,20
  8103c4:	382cd7fa 	srli	r22,r7,31
  8103c8:	04400434 	movhi	r17,16
  8103cc:	8c7fffc4 	addi	r17,r17,-1
  8103d0:	1081ffcc 	andi	r2,r2,2047
  8103d4:	3011883a 	mov	r8,r6
  8103d8:	3c62703a 	and	r17,r7,r17
  8103dc:	b5c03fcc 	andi	r23,r22,255
  8103e0:	10006c26 	beq	r2,zero,810594 <__divdf3+0x24c>
  8103e4:	00c1ffc4 	movi	r3,2047
  8103e8:	10c06426 	beq	r2,r3,81057c <__divdf3+0x234>
  8103ec:	88c00434 	orhi	r3,r17,16
  8103f0:	180690fa 	slli	r3,r3,3
  8103f4:	3022d77a 	srli	r17,r6,29
  8103f8:	301090fa 	slli	r8,r6,3
  8103fc:	10bf0044 	addi	r2,r2,-1023
  810400:	88e2b03a 	or	r17,r17,r3
  810404:	000f883a 	mov	r7,zero
  810408:	a58cf03a 	xor	r6,r20,r22
  81040c:	3cc8b03a 	or	r4,r7,r19
  810410:	a8abc83a 	sub	r21,r21,r2
  810414:	008003c4 	movi	r2,15
  810418:	3007883a 	mov	r3,r6
  81041c:	34c03fcc 	andi	r19,r6,255
  810420:	11009036 	bltu	r2,r4,810664 <__divdf3+0x31c>
  810424:	200890ba 	slli	r4,r4,2
  810428:	00802074 	movhi	r2,129
  81042c:	10810f04 	addi	r2,r2,1084
  810430:	2089883a 	add	r4,r4,r2
  810434:	20800017 	ldw	r2,0(r4)
  810438:	1000683a 	jmp	r2
  81043c:	00810664 	muli	r2,zero,1049
  810440:	008104b4 	movhi	r2,1042
  810444:	00810654 	movui	r2,1049
  810448:	008104a8 	cmpgeui	r2,zero,1042
  81044c:	00810654 	movui	r2,1049
  810450:	00810628 	cmpgeui	r2,zero,1048
  810454:	00810654 	movui	r2,1049
  810458:	008104a8 	cmpgeui	r2,zero,1042
  81045c:	008104b4 	movhi	r2,1042
  810460:	008104b4 	movhi	r2,1042
  810464:	00810628 	cmpgeui	r2,zero,1048
  810468:	008104a8 	cmpgeui	r2,zero,1042
  81046c:	00810498 	cmpnei	r2,zero,1042
  810470:	00810498 	cmpnei	r2,zero,1042
  810474:	00810498 	cmpnei	r2,zero,1042
  810478:	00810948 	cmpgei	r2,zero,1061
  81047c:	2404b03a 	or	r2,r4,r16
  810480:	1000661e 	bne	r2,zero,81061c <__divdf3+0x2d4>
  810484:	04c00204 	movi	r19,8
  810488:	0021883a 	mov	r16,zero
  81048c:	0025883a 	mov	r18,zero
  810490:	02400084 	movi	r9,2
  810494:	003fca06 	br	8103c0 <__alt_mem_onchip_mem+0xff8083c0>
  810498:	8023883a 	mov	r17,r16
  81049c:	9011883a 	mov	r8,r18
  8104a0:	e02f883a 	mov	r23,fp
  8104a4:	480f883a 	mov	r7,r9
  8104a8:	00800084 	movi	r2,2
  8104ac:	3881311e 	bne	r7,r2,810974 <__divdf3+0x62c>
  8104b0:	b827883a 	mov	r19,r23
  8104b4:	98c0004c 	andi	r3,r19,1
  8104b8:	0081ffc4 	movi	r2,2047
  8104bc:	000b883a 	mov	r5,zero
  8104c0:	0025883a 	mov	r18,zero
  8104c4:	1004953a 	slli	r2,r2,20
  8104c8:	18c03fcc 	andi	r3,r3,255
  8104cc:	04400434 	movhi	r17,16
  8104d0:	8c7fffc4 	addi	r17,r17,-1
  8104d4:	180697fa 	slli	r3,r3,31
  8104d8:	2c4a703a 	and	r5,r5,r17
  8104dc:	288ab03a 	or	r5,r5,r2
  8104e0:	28c6b03a 	or	r3,r5,r3
  8104e4:	9005883a 	mov	r2,r18
  8104e8:	dfc00d17 	ldw	ra,52(sp)
  8104ec:	df000c17 	ldw	fp,48(sp)
  8104f0:	ddc00b17 	ldw	r23,44(sp)
  8104f4:	dd800a17 	ldw	r22,40(sp)
  8104f8:	dd400917 	ldw	r21,36(sp)
  8104fc:	dd000817 	ldw	r20,32(sp)
  810500:	dcc00717 	ldw	r19,28(sp)
  810504:	dc800617 	ldw	r18,24(sp)
  810508:	dc400517 	ldw	r17,20(sp)
  81050c:	dc000417 	ldw	r16,16(sp)
  810510:	dec00e04 	addi	sp,sp,56
  810514:	f800283a 	ret
  810518:	2404b03a 	or	r2,r4,r16
  81051c:	2027883a 	mov	r19,r4
  810520:	10003926 	beq	r2,zero,810608 <__divdf3+0x2c0>
  810524:	80012e26 	beq	r16,zero,8109e0 <__divdf3+0x698>
  810528:	8009883a 	mov	r4,r16
  81052c:	d9800315 	stw	r6,12(sp)
  810530:	d9c00215 	stw	r7,8(sp)
  810534:	080602c0 	call	80602c <__clzsi2>
  810538:	d9800317 	ldw	r6,12(sp)
  81053c:	d9c00217 	ldw	r7,8(sp)
  810540:	113ffd44 	addi	r4,r2,-11
  810544:	00c00704 	movi	r3,28
  810548:	19012116 	blt	r3,r4,8109d0 <__divdf3+0x688>
  81054c:	00c00744 	movi	r3,29
  810550:	147ffe04 	addi	r17,r2,-8
  810554:	1907c83a 	sub	r3,r3,r4
  810558:	8460983a 	sll	r16,r16,r17
  81055c:	98c6d83a 	srl	r3,r19,r3
  810560:	9c64983a 	sll	r18,r19,r17
  810564:	1c20b03a 	or	r16,r3,r16
  810568:	1080fcc4 	addi	r2,r2,1011
  81056c:	00abc83a 	sub	r21,zero,r2
  810570:	0027883a 	mov	r19,zero
  810574:	0013883a 	mov	r9,zero
  810578:	003f9106 	br	8103c0 <__alt_mem_onchip_mem+0xff8083c0>
  81057c:	3446b03a 	or	r3,r6,r17
  810580:	18001f1e 	bne	r3,zero,810600 <__divdf3+0x2b8>
  810584:	0023883a 	mov	r17,zero
  810588:	0011883a 	mov	r8,zero
  81058c:	01c00084 	movi	r7,2
  810590:	003f9d06 	br	810408 <__alt_mem_onchip_mem+0xff808408>
  810594:	3446b03a 	or	r3,r6,r17
  810598:	18001526 	beq	r3,zero,8105f0 <__divdf3+0x2a8>
  81059c:	88011b26 	beq	r17,zero,810a0c <__divdf3+0x6c4>
  8105a0:	8809883a 	mov	r4,r17
  8105a4:	d9800315 	stw	r6,12(sp)
  8105a8:	da400115 	stw	r9,4(sp)
  8105ac:	080602c0 	call	80602c <__clzsi2>
  8105b0:	d9800317 	ldw	r6,12(sp)
  8105b4:	da400117 	ldw	r9,4(sp)
  8105b8:	113ffd44 	addi	r4,r2,-11
  8105bc:	00c00704 	movi	r3,28
  8105c0:	19010e16 	blt	r3,r4,8109fc <__divdf3+0x6b4>
  8105c4:	00c00744 	movi	r3,29
  8105c8:	123ffe04 	addi	r8,r2,-8
  8105cc:	1907c83a 	sub	r3,r3,r4
  8105d0:	8a22983a 	sll	r17,r17,r8
  8105d4:	30c6d83a 	srl	r3,r6,r3
  8105d8:	3210983a 	sll	r8,r6,r8
  8105dc:	1c62b03a 	or	r17,r3,r17
  8105e0:	1080fcc4 	addi	r2,r2,1011
  8105e4:	0085c83a 	sub	r2,zero,r2
  8105e8:	000f883a 	mov	r7,zero
  8105ec:	003f8606 	br	810408 <__alt_mem_onchip_mem+0xff808408>
  8105f0:	0023883a 	mov	r17,zero
  8105f4:	0011883a 	mov	r8,zero
  8105f8:	01c00044 	movi	r7,1
  8105fc:	003f8206 	br	810408 <__alt_mem_onchip_mem+0xff808408>
  810600:	01c000c4 	movi	r7,3
  810604:	003f8006 	br	810408 <__alt_mem_onchip_mem+0xff808408>
  810608:	04c00104 	movi	r19,4
  81060c:	0021883a 	mov	r16,zero
  810610:	0025883a 	mov	r18,zero
  810614:	02400044 	movi	r9,1
  810618:	003f6906 	br	8103c0 <__alt_mem_onchip_mem+0xff8083c0>
  81061c:	04c00304 	movi	r19,12
  810620:	024000c4 	movi	r9,3
  810624:	003f6606 	br	8103c0 <__alt_mem_onchip_mem+0xff8083c0>
  810628:	01400434 	movhi	r5,16
  81062c:	0007883a 	mov	r3,zero
  810630:	297fffc4 	addi	r5,r5,-1
  810634:	04bfffc4 	movi	r18,-1
  810638:	0081ffc4 	movi	r2,2047
  81063c:	003fa106 	br	8104c4 <__alt_mem_onchip_mem+0xff8084c4>
  810640:	00c00044 	movi	r3,1
  810644:	1887c83a 	sub	r3,r3,r2
  810648:	01000e04 	movi	r4,56
  81064c:	20c1210e 	bge	r4,r3,810ad4 <__divdf3+0x78c>
  810650:	98c0004c 	andi	r3,r19,1
  810654:	0005883a 	mov	r2,zero
  810658:	000b883a 	mov	r5,zero
  81065c:	0025883a 	mov	r18,zero
  810660:	003f9806 	br	8104c4 <__alt_mem_onchip_mem+0xff8084c4>
  810664:	8c00fd36 	bltu	r17,r16,810a5c <__divdf3+0x714>
  810668:	8440fb26 	beq	r16,r17,810a58 <__divdf3+0x710>
  81066c:	8007883a 	mov	r3,r16
  810670:	ad7fffc4 	addi	r21,r21,-1
  810674:	0021883a 	mov	r16,zero
  810678:	4004d63a 	srli	r2,r8,24
  81067c:	8822923a 	slli	r17,r17,8
  810680:	1809883a 	mov	r4,r3
  810684:	402c923a 	slli	r22,r8,8
  810688:	88b8b03a 	or	fp,r17,r2
  81068c:	e028d43a 	srli	r20,fp,16
  810690:	d8c00015 	stw	r3,0(sp)
  810694:	e5ffffcc 	andi	r23,fp,65535
  810698:	a00b883a 	mov	r5,r20
  81069c:	081028c0 	call	81028c <__udivsi3>
  8106a0:	d8c00017 	ldw	r3,0(sp)
  8106a4:	a00b883a 	mov	r5,r20
  8106a8:	d8800315 	stw	r2,12(sp)
  8106ac:	1809883a 	mov	r4,r3
  8106b0:	08102f00 	call	8102f0 <__umodsi3>
  8106b4:	d9800317 	ldw	r6,12(sp)
  8106b8:	1006943a 	slli	r3,r2,16
  8106bc:	9004d43a 	srli	r2,r18,16
  8106c0:	b9a3383a 	mul	r17,r23,r6
  8106c4:	10c4b03a 	or	r2,r2,r3
  8106c8:	1440062e 	bgeu	r2,r17,8106e4 <__divdf3+0x39c>
  8106cc:	1705883a 	add	r2,r2,fp
  8106d0:	30ffffc4 	addi	r3,r6,-1
  8106d4:	1700ee36 	bltu	r2,fp,810a90 <__divdf3+0x748>
  8106d8:	1440ed2e 	bgeu	r2,r17,810a90 <__divdf3+0x748>
  8106dc:	31bfff84 	addi	r6,r6,-2
  8106e0:	1705883a 	add	r2,r2,fp
  8106e4:	1463c83a 	sub	r17,r2,r17
  8106e8:	a00b883a 	mov	r5,r20
  8106ec:	8809883a 	mov	r4,r17
  8106f0:	d9800315 	stw	r6,12(sp)
  8106f4:	081028c0 	call	81028c <__udivsi3>
  8106f8:	a00b883a 	mov	r5,r20
  8106fc:	8809883a 	mov	r4,r17
  810700:	d8800215 	stw	r2,8(sp)
  810704:	08102f00 	call	8102f0 <__umodsi3>
  810708:	d9c00217 	ldw	r7,8(sp)
  81070c:	1004943a 	slli	r2,r2,16
  810710:	94bfffcc 	andi	r18,r18,65535
  810714:	b9d1383a 	mul	r8,r23,r7
  810718:	90a4b03a 	or	r18,r18,r2
  81071c:	d9800317 	ldw	r6,12(sp)
  810720:	9200062e 	bgeu	r18,r8,81073c <__divdf3+0x3f4>
  810724:	9725883a 	add	r18,r18,fp
  810728:	38bfffc4 	addi	r2,r7,-1
  81072c:	9700d636 	bltu	r18,fp,810a88 <__divdf3+0x740>
  810730:	9200d52e 	bgeu	r18,r8,810a88 <__divdf3+0x740>
  810734:	39ffff84 	addi	r7,r7,-2
  810738:	9725883a 	add	r18,r18,fp
  81073c:	3004943a 	slli	r2,r6,16
  810740:	b012d43a 	srli	r9,r22,16
  810744:	b1bfffcc 	andi	r6,r22,65535
  810748:	11e2b03a 	or	r17,r2,r7
  81074c:	8806d43a 	srli	r3,r17,16
  810750:	893fffcc 	andi	r4,r17,65535
  810754:	218b383a 	mul	r5,r4,r6
  810758:	30c5383a 	mul	r2,r6,r3
  81075c:	2249383a 	mul	r4,r4,r9
  810760:	280ed43a 	srli	r7,r5,16
  810764:	9225c83a 	sub	r18,r18,r8
  810768:	2089883a 	add	r4,r4,r2
  81076c:	3909883a 	add	r4,r7,r4
  810770:	1a47383a 	mul	r3,r3,r9
  810774:	2080022e 	bgeu	r4,r2,810780 <__divdf3+0x438>
  810778:	00800074 	movhi	r2,1
  81077c:	1887883a 	add	r3,r3,r2
  810780:	2004d43a 	srli	r2,r4,16
  810784:	2008943a 	slli	r4,r4,16
  810788:	297fffcc 	andi	r5,r5,65535
  81078c:	10c7883a 	add	r3,r2,r3
  810790:	2149883a 	add	r4,r4,r5
  810794:	90c0a536 	bltu	r18,r3,810a2c <__divdf3+0x6e4>
  810798:	90c0bf26 	beq	r18,r3,810a98 <__divdf3+0x750>
  81079c:	90c7c83a 	sub	r3,r18,r3
  8107a0:	810fc83a 	sub	r7,r16,r4
  8107a4:	81e5803a 	cmpltu	r18,r16,r7
  8107a8:	1ca5c83a 	sub	r18,r3,r18
  8107ac:	e480c126 	beq	fp,r18,810ab4 <__divdf3+0x76c>
  8107b0:	a00b883a 	mov	r5,r20
  8107b4:	9009883a 	mov	r4,r18
  8107b8:	d9800315 	stw	r6,12(sp)
  8107bc:	d9c00215 	stw	r7,8(sp)
  8107c0:	da400115 	stw	r9,4(sp)
  8107c4:	081028c0 	call	81028c <__udivsi3>
  8107c8:	a00b883a 	mov	r5,r20
  8107cc:	9009883a 	mov	r4,r18
  8107d0:	d8800015 	stw	r2,0(sp)
  8107d4:	08102f00 	call	8102f0 <__umodsi3>
  8107d8:	d9c00217 	ldw	r7,8(sp)
  8107dc:	da000017 	ldw	r8,0(sp)
  8107e0:	1006943a 	slli	r3,r2,16
  8107e4:	3804d43a 	srli	r2,r7,16
  8107e8:	ba21383a 	mul	r16,r23,r8
  8107ec:	d9800317 	ldw	r6,12(sp)
  8107f0:	10c4b03a 	or	r2,r2,r3
  8107f4:	da400117 	ldw	r9,4(sp)
  8107f8:	1400062e 	bgeu	r2,r16,810814 <__divdf3+0x4cc>
  8107fc:	1705883a 	add	r2,r2,fp
  810800:	40ffffc4 	addi	r3,r8,-1
  810804:	1700ad36 	bltu	r2,fp,810abc <__divdf3+0x774>
  810808:	1400ac2e 	bgeu	r2,r16,810abc <__divdf3+0x774>
  81080c:	423fff84 	addi	r8,r8,-2
  810810:	1705883a 	add	r2,r2,fp
  810814:	1421c83a 	sub	r16,r2,r16
  810818:	a00b883a 	mov	r5,r20
  81081c:	8009883a 	mov	r4,r16
  810820:	d9800315 	stw	r6,12(sp)
  810824:	d9c00215 	stw	r7,8(sp)
  810828:	da000015 	stw	r8,0(sp)
  81082c:	da400115 	stw	r9,4(sp)
  810830:	081028c0 	call	81028c <__udivsi3>
  810834:	8009883a 	mov	r4,r16
  810838:	a00b883a 	mov	r5,r20
  81083c:	1025883a 	mov	r18,r2
  810840:	08102f00 	call	8102f0 <__umodsi3>
  810844:	d9c00217 	ldw	r7,8(sp)
  810848:	1004943a 	slli	r2,r2,16
  81084c:	bcaf383a 	mul	r23,r23,r18
  810850:	393fffcc 	andi	r4,r7,65535
  810854:	2088b03a 	or	r4,r4,r2
  810858:	d9800317 	ldw	r6,12(sp)
  81085c:	da000017 	ldw	r8,0(sp)
  810860:	da400117 	ldw	r9,4(sp)
  810864:	25c0062e 	bgeu	r4,r23,810880 <__divdf3+0x538>
  810868:	2709883a 	add	r4,r4,fp
  81086c:	90bfffc4 	addi	r2,r18,-1
  810870:	27009436 	bltu	r4,fp,810ac4 <__divdf3+0x77c>
  810874:	25c0932e 	bgeu	r4,r23,810ac4 <__divdf3+0x77c>
  810878:	94bfff84 	addi	r18,r18,-2
  81087c:	2709883a 	add	r4,r4,fp
  810880:	4004943a 	slli	r2,r8,16
  810884:	25efc83a 	sub	r23,r4,r23
  810888:	1490b03a 	or	r8,r2,r18
  81088c:	4008d43a 	srli	r4,r8,16
  810890:	40ffffcc 	andi	r3,r8,65535
  810894:	30c5383a 	mul	r2,r6,r3
  810898:	1a47383a 	mul	r3,r3,r9
  81089c:	310d383a 	mul	r6,r6,r4
  8108a0:	100ad43a 	srli	r5,r2,16
  8108a4:	4913383a 	mul	r9,r9,r4
  8108a8:	1987883a 	add	r3,r3,r6
  8108ac:	28c7883a 	add	r3,r5,r3
  8108b0:	1980022e 	bgeu	r3,r6,8108bc <__divdf3+0x574>
  8108b4:	01000074 	movhi	r4,1
  8108b8:	4913883a 	add	r9,r9,r4
  8108bc:	1808d43a 	srli	r4,r3,16
  8108c0:	1806943a 	slli	r3,r3,16
  8108c4:	10bfffcc 	andi	r2,r2,65535
  8108c8:	2253883a 	add	r9,r4,r9
  8108cc:	1887883a 	add	r3,r3,r2
  8108d0:	ba403836 	bltu	r23,r9,8109b4 <__divdf3+0x66c>
  8108d4:	ba403626 	beq	r23,r9,8109b0 <__divdf3+0x668>
  8108d8:	42000054 	ori	r8,r8,1
  8108dc:	a880ffc4 	addi	r2,r21,1023
  8108e0:	00bf570e 	bge	zero,r2,810640 <__alt_mem_onchip_mem+0xff808640>
  8108e4:	40c001cc 	andi	r3,r8,7
  8108e8:	18000726 	beq	r3,zero,810908 <__divdf3+0x5c0>
  8108ec:	40c003cc 	andi	r3,r8,15
  8108f0:	01000104 	movi	r4,4
  8108f4:	19000426 	beq	r3,r4,810908 <__divdf3+0x5c0>
  8108f8:	4107883a 	add	r3,r8,r4
  8108fc:	1a11803a 	cmpltu	r8,r3,r8
  810900:	8a23883a 	add	r17,r17,r8
  810904:	1811883a 	mov	r8,r3
  810908:	88c0402c 	andhi	r3,r17,256
  81090c:	18000426 	beq	r3,zero,810920 <__divdf3+0x5d8>
  810910:	00ffc034 	movhi	r3,65280
  810914:	18ffffc4 	addi	r3,r3,-1
  810918:	a8810004 	addi	r2,r21,1024
  81091c:	88e2703a 	and	r17,r17,r3
  810920:	00c1ff84 	movi	r3,2046
  810924:	18bee316 	blt	r3,r2,8104b4 <__alt_mem_onchip_mem+0xff8084b4>
  810928:	8824977a 	slli	r18,r17,29
  81092c:	4010d0fa 	srli	r8,r8,3
  810930:	8822927a 	slli	r17,r17,9
  810934:	1081ffcc 	andi	r2,r2,2047
  810938:	9224b03a 	or	r18,r18,r8
  81093c:	880ad33a 	srli	r5,r17,12
  810940:	98c0004c 	andi	r3,r19,1
  810944:	003edf06 	br	8104c4 <__alt_mem_onchip_mem+0xff8084c4>
  810948:	8080022c 	andhi	r2,r16,8
  81094c:	10001226 	beq	r2,zero,810998 <__divdf3+0x650>
  810950:	8880022c 	andhi	r2,r17,8
  810954:	1000101e 	bne	r2,zero,810998 <__divdf3+0x650>
  810958:	00800434 	movhi	r2,16
  81095c:	89400234 	orhi	r5,r17,8
  810960:	10bfffc4 	addi	r2,r2,-1
  810964:	b007883a 	mov	r3,r22
  810968:	288a703a 	and	r5,r5,r2
  81096c:	4025883a 	mov	r18,r8
  810970:	003f3106 	br	810638 <__alt_mem_onchip_mem+0xff808638>
  810974:	008000c4 	movi	r2,3
  810978:	3880a626 	beq	r7,r2,810c14 <__divdf3+0x8cc>
  81097c:	00800044 	movi	r2,1
  810980:	3880521e 	bne	r7,r2,810acc <__divdf3+0x784>
  810984:	b807883a 	mov	r3,r23
  810988:	0005883a 	mov	r2,zero
  81098c:	000b883a 	mov	r5,zero
  810990:	0025883a 	mov	r18,zero
  810994:	003ecb06 	br	8104c4 <__alt_mem_onchip_mem+0xff8084c4>
  810998:	00800434 	movhi	r2,16
  81099c:	81400234 	orhi	r5,r16,8
  8109a0:	10bfffc4 	addi	r2,r2,-1
  8109a4:	a007883a 	mov	r3,r20
  8109a8:	288a703a 	and	r5,r5,r2
  8109ac:	003f2206 	br	810638 <__alt_mem_onchip_mem+0xff808638>
  8109b0:	183fca26 	beq	r3,zero,8108dc <__alt_mem_onchip_mem+0xff8088dc>
  8109b4:	e5ef883a 	add	r23,fp,r23
  8109b8:	40bfffc4 	addi	r2,r8,-1
  8109bc:	bf00392e 	bgeu	r23,fp,810aa4 <__divdf3+0x75c>
  8109c0:	1011883a 	mov	r8,r2
  8109c4:	ba7fc41e 	bne	r23,r9,8108d8 <__alt_mem_onchip_mem+0xff8088d8>
  8109c8:	b0ffc31e 	bne	r22,r3,8108d8 <__alt_mem_onchip_mem+0xff8088d8>
  8109cc:	003fc306 	br	8108dc <__alt_mem_onchip_mem+0xff8088dc>
  8109d0:	143ff604 	addi	r16,r2,-40
  8109d4:	9c20983a 	sll	r16,r19,r16
  8109d8:	0025883a 	mov	r18,zero
  8109dc:	003ee206 	br	810568 <__alt_mem_onchip_mem+0xff808568>
  8109e0:	d9800315 	stw	r6,12(sp)
  8109e4:	d9c00215 	stw	r7,8(sp)
  8109e8:	080602c0 	call	80602c <__clzsi2>
  8109ec:	10800804 	addi	r2,r2,32
  8109f0:	d9c00217 	ldw	r7,8(sp)
  8109f4:	d9800317 	ldw	r6,12(sp)
  8109f8:	003ed106 	br	810540 <__alt_mem_onchip_mem+0xff808540>
  8109fc:	147ff604 	addi	r17,r2,-40
  810a00:	3462983a 	sll	r17,r6,r17
  810a04:	0011883a 	mov	r8,zero
  810a08:	003ef506 	br	8105e0 <__alt_mem_onchip_mem+0xff8085e0>
  810a0c:	3009883a 	mov	r4,r6
  810a10:	d9800315 	stw	r6,12(sp)
  810a14:	da400115 	stw	r9,4(sp)
  810a18:	080602c0 	call	80602c <__clzsi2>
  810a1c:	10800804 	addi	r2,r2,32
  810a20:	da400117 	ldw	r9,4(sp)
  810a24:	d9800317 	ldw	r6,12(sp)
  810a28:	003ee306 	br	8105b8 <__alt_mem_onchip_mem+0xff8085b8>
  810a2c:	85a1883a 	add	r16,r16,r22
  810a30:	8585803a 	cmpltu	r2,r16,r22
  810a34:	1705883a 	add	r2,r2,fp
  810a38:	14a5883a 	add	r18,r2,r18
  810a3c:	88bfffc4 	addi	r2,r17,-1
  810a40:	e4800c2e 	bgeu	fp,r18,810a74 <__divdf3+0x72c>
  810a44:	90c03e36 	bltu	r18,r3,810b40 <__divdf3+0x7f8>
  810a48:	1c806926 	beq	r3,r18,810bf0 <__divdf3+0x8a8>
  810a4c:	90c7c83a 	sub	r3,r18,r3
  810a50:	1023883a 	mov	r17,r2
  810a54:	003f5206 	br	8107a0 <__alt_mem_onchip_mem+0xff8087a0>
  810a58:	923f0436 	bltu	r18,r8,81066c <__alt_mem_onchip_mem+0xff80866c>
  810a5c:	800897fa 	slli	r4,r16,31
  810a60:	9004d07a 	srli	r2,r18,1
  810a64:	8006d07a 	srli	r3,r16,1
  810a68:	902097fa 	slli	r16,r18,31
  810a6c:	20a4b03a 	or	r18,r4,r2
  810a70:	003f0106 	br	810678 <__alt_mem_onchip_mem+0xff808678>
  810a74:	e4bff51e 	bne	fp,r18,810a4c <__alt_mem_onchip_mem+0xff808a4c>
  810a78:	85bff22e 	bgeu	r16,r22,810a44 <__alt_mem_onchip_mem+0xff808a44>
  810a7c:	e0c7c83a 	sub	r3,fp,r3
  810a80:	1023883a 	mov	r17,r2
  810a84:	003f4606 	br	8107a0 <__alt_mem_onchip_mem+0xff8087a0>
  810a88:	100f883a 	mov	r7,r2
  810a8c:	003f2b06 	br	81073c <__alt_mem_onchip_mem+0xff80873c>
  810a90:	180d883a 	mov	r6,r3
  810a94:	003f1306 	br	8106e4 <__alt_mem_onchip_mem+0xff8086e4>
  810a98:	813fe436 	bltu	r16,r4,810a2c <__alt_mem_onchip_mem+0xff808a2c>
  810a9c:	0007883a 	mov	r3,zero
  810aa0:	003f3f06 	br	8107a0 <__alt_mem_onchip_mem+0xff8087a0>
  810aa4:	ba402c36 	bltu	r23,r9,810b58 <__divdf3+0x810>
  810aa8:	4dc05426 	beq	r9,r23,810bfc <__divdf3+0x8b4>
  810aac:	1011883a 	mov	r8,r2
  810ab0:	003f8906 	br	8108d8 <__alt_mem_onchip_mem+0xff8088d8>
  810ab4:	023fffc4 	movi	r8,-1
  810ab8:	003f8806 	br	8108dc <__alt_mem_onchip_mem+0xff8088dc>
  810abc:	1811883a 	mov	r8,r3
  810ac0:	003f5406 	br	810814 <__alt_mem_onchip_mem+0xff808814>
  810ac4:	1025883a 	mov	r18,r2
  810ac8:	003f6d06 	br	810880 <__alt_mem_onchip_mem+0xff808880>
  810acc:	b827883a 	mov	r19,r23
  810ad0:	003f8206 	br	8108dc <__alt_mem_onchip_mem+0xff8088dc>
  810ad4:	010007c4 	movi	r4,31
  810ad8:	20c02616 	blt	r4,r3,810b74 <__divdf3+0x82c>
  810adc:	00800804 	movi	r2,32
  810ae0:	10c5c83a 	sub	r2,r2,r3
  810ae4:	888a983a 	sll	r5,r17,r2
  810ae8:	40c8d83a 	srl	r4,r8,r3
  810aec:	4084983a 	sll	r2,r8,r2
  810af0:	88e2d83a 	srl	r17,r17,r3
  810af4:	2906b03a 	or	r3,r5,r4
  810af8:	1004c03a 	cmpne	r2,r2,zero
  810afc:	1886b03a 	or	r3,r3,r2
  810b00:	188001cc 	andi	r2,r3,7
  810b04:	10000726 	beq	r2,zero,810b24 <__divdf3+0x7dc>
  810b08:	188003cc 	andi	r2,r3,15
  810b0c:	01000104 	movi	r4,4
  810b10:	11000426 	beq	r2,r4,810b24 <__divdf3+0x7dc>
  810b14:	1805883a 	mov	r2,r3
  810b18:	10c00104 	addi	r3,r2,4
  810b1c:	1885803a 	cmpltu	r2,r3,r2
  810b20:	88a3883a 	add	r17,r17,r2
  810b24:	8880202c 	andhi	r2,r17,128
  810b28:	10002726 	beq	r2,zero,810bc8 <__divdf3+0x880>
  810b2c:	98c0004c 	andi	r3,r19,1
  810b30:	00800044 	movi	r2,1
  810b34:	000b883a 	mov	r5,zero
  810b38:	0025883a 	mov	r18,zero
  810b3c:	003e6106 	br	8104c4 <__alt_mem_onchip_mem+0xff8084c4>
  810b40:	85a1883a 	add	r16,r16,r22
  810b44:	8585803a 	cmpltu	r2,r16,r22
  810b48:	1705883a 	add	r2,r2,fp
  810b4c:	14a5883a 	add	r18,r2,r18
  810b50:	8c7fff84 	addi	r17,r17,-2
  810b54:	003f1106 	br	81079c <__alt_mem_onchip_mem+0xff80879c>
  810b58:	b589883a 	add	r4,r22,r22
  810b5c:	25ad803a 	cmpltu	r22,r4,r22
  810b60:	b739883a 	add	fp,r22,fp
  810b64:	40bfff84 	addi	r2,r8,-2
  810b68:	bf2f883a 	add	r23,r23,fp
  810b6c:	202d883a 	mov	r22,r4
  810b70:	003f9306 	br	8109c0 <__alt_mem_onchip_mem+0xff8089c0>
  810b74:	013ff844 	movi	r4,-31
  810b78:	2085c83a 	sub	r2,r4,r2
  810b7c:	8888d83a 	srl	r4,r17,r2
  810b80:	00800804 	movi	r2,32
  810b84:	18802126 	beq	r3,r2,810c0c <__divdf3+0x8c4>
  810b88:	00801004 	movi	r2,64
  810b8c:	10c5c83a 	sub	r2,r2,r3
  810b90:	8884983a 	sll	r2,r17,r2
  810b94:	1204b03a 	or	r2,r2,r8
  810b98:	1004c03a 	cmpne	r2,r2,zero
  810b9c:	2084b03a 	or	r2,r4,r2
  810ba0:	144001cc 	andi	r17,r2,7
  810ba4:	88000d1e 	bne	r17,zero,810bdc <__divdf3+0x894>
  810ba8:	000b883a 	mov	r5,zero
  810bac:	1024d0fa 	srli	r18,r2,3
  810bb0:	98c0004c 	andi	r3,r19,1
  810bb4:	0005883a 	mov	r2,zero
  810bb8:	9464b03a 	or	r18,r18,r17
  810bbc:	003e4106 	br	8104c4 <__alt_mem_onchip_mem+0xff8084c4>
  810bc0:	1007883a 	mov	r3,r2
  810bc4:	0023883a 	mov	r17,zero
  810bc8:	880a927a 	slli	r5,r17,9
  810bcc:	1805883a 	mov	r2,r3
  810bd0:	8822977a 	slli	r17,r17,29
  810bd4:	280ad33a 	srli	r5,r5,12
  810bd8:	003ff406 	br	810bac <__alt_mem_onchip_mem+0xff808bac>
  810bdc:	10c003cc 	andi	r3,r2,15
  810be0:	01000104 	movi	r4,4
  810be4:	193ff626 	beq	r3,r4,810bc0 <__alt_mem_onchip_mem+0xff808bc0>
  810be8:	0023883a 	mov	r17,zero
  810bec:	003fca06 	br	810b18 <__alt_mem_onchip_mem+0xff808b18>
  810bf0:	813fd336 	bltu	r16,r4,810b40 <__alt_mem_onchip_mem+0xff808b40>
  810bf4:	1023883a 	mov	r17,r2
  810bf8:	003fa806 	br	810a9c <__alt_mem_onchip_mem+0xff808a9c>
  810bfc:	b0ffd636 	bltu	r22,r3,810b58 <__alt_mem_onchip_mem+0xff808b58>
  810c00:	1011883a 	mov	r8,r2
  810c04:	b0ff341e 	bne	r22,r3,8108d8 <__alt_mem_onchip_mem+0xff8088d8>
  810c08:	003f3406 	br	8108dc <__alt_mem_onchip_mem+0xff8088dc>
  810c0c:	0005883a 	mov	r2,zero
  810c10:	003fe006 	br	810b94 <__alt_mem_onchip_mem+0xff808b94>
  810c14:	00800434 	movhi	r2,16
  810c18:	89400234 	orhi	r5,r17,8
  810c1c:	10bfffc4 	addi	r2,r2,-1
  810c20:	b807883a 	mov	r3,r23
  810c24:	288a703a 	and	r5,r5,r2
  810c28:	4025883a 	mov	r18,r8
  810c2c:	003e8206 	br	810638 <__alt_mem_onchip_mem+0xff808638>

00810c30 <__eqdf2>:
  810c30:	2804d53a 	srli	r2,r5,20
  810c34:	3806d53a 	srli	r3,r7,20
  810c38:	02000434 	movhi	r8,16
  810c3c:	423fffc4 	addi	r8,r8,-1
  810c40:	1081ffcc 	andi	r2,r2,2047
  810c44:	0281ffc4 	movi	r10,2047
  810c48:	2a12703a 	and	r9,r5,r8
  810c4c:	18c1ffcc 	andi	r3,r3,2047
  810c50:	3a10703a 	and	r8,r7,r8
  810c54:	280ad7fa 	srli	r5,r5,31
  810c58:	380ed7fa 	srli	r7,r7,31
  810c5c:	12801026 	beq	r2,r10,810ca0 <__eqdf2+0x70>
  810c60:	0281ffc4 	movi	r10,2047
  810c64:	1a800a26 	beq	r3,r10,810c90 <__eqdf2+0x60>
  810c68:	10c00226 	beq	r2,r3,810c74 <__eqdf2+0x44>
  810c6c:	00800044 	movi	r2,1
  810c70:	f800283a 	ret
  810c74:	4a3ffd1e 	bne	r9,r8,810c6c <__alt_mem_onchip_mem+0xff808c6c>
  810c78:	21bffc1e 	bne	r4,r6,810c6c <__alt_mem_onchip_mem+0xff808c6c>
  810c7c:	29c00c26 	beq	r5,r7,810cb0 <__eqdf2+0x80>
  810c80:	103ffa1e 	bne	r2,zero,810c6c <__alt_mem_onchip_mem+0xff808c6c>
  810c84:	2244b03a 	or	r2,r4,r9
  810c88:	1004c03a 	cmpne	r2,r2,zero
  810c8c:	f800283a 	ret
  810c90:	3214b03a 	or	r10,r6,r8
  810c94:	503ff426 	beq	r10,zero,810c68 <__alt_mem_onchip_mem+0xff808c68>
  810c98:	00800044 	movi	r2,1
  810c9c:	f800283a 	ret
  810ca0:	2254b03a 	or	r10,r4,r9
  810ca4:	503fee26 	beq	r10,zero,810c60 <__alt_mem_onchip_mem+0xff808c60>
  810ca8:	00800044 	movi	r2,1
  810cac:	f800283a 	ret
  810cb0:	0005883a 	mov	r2,zero
  810cb4:	f800283a 	ret

00810cb8 <__fixdfsi>:
  810cb8:	280cd53a 	srli	r6,r5,20
  810cbc:	00c00434 	movhi	r3,16
  810cc0:	18ffffc4 	addi	r3,r3,-1
  810cc4:	3181ffcc 	andi	r6,r6,2047
  810cc8:	01c0ff84 	movi	r7,1022
  810ccc:	28c6703a 	and	r3,r5,r3
  810cd0:	280ad7fa 	srli	r5,r5,31
  810cd4:	3980120e 	bge	r7,r6,810d20 <__fixdfsi+0x68>
  810cd8:	00810744 	movi	r2,1053
  810cdc:	11800c16 	blt	r2,r6,810d10 <__fixdfsi+0x58>
  810ce0:	00810cc4 	movi	r2,1075
  810ce4:	1185c83a 	sub	r2,r2,r6
  810ce8:	01c007c4 	movi	r7,31
  810cec:	18c00434 	orhi	r3,r3,16
  810cf0:	38800d16 	blt	r7,r2,810d28 <__fixdfsi+0x70>
  810cf4:	31befb44 	addi	r6,r6,-1043
  810cf8:	2084d83a 	srl	r2,r4,r2
  810cfc:	1986983a 	sll	r3,r3,r6
  810d00:	1884b03a 	or	r2,r3,r2
  810d04:	28000726 	beq	r5,zero,810d24 <__fixdfsi+0x6c>
  810d08:	0085c83a 	sub	r2,zero,r2
  810d0c:	f800283a 	ret
  810d10:	00a00034 	movhi	r2,32768
  810d14:	10bfffc4 	addi	r2,r2,-1
  810d18:	2885883a 	add	r2,r5,r2
  810d1c:	f800283a 	ret
  810d20:	0005883a 	mov	r2,zero
  810d24:	f800283a 	ret
  810d28:	008104c4 	movi	r2,1043
  810d2c:	1185c83a 	sub	r2,r2,r6
  810d30:	1884d83a 	srl	r2,r3,r2
  810d34:	003ff306 	br	810d04 <__alt_mem_onchip_mem+0xff808d04>

00810d38 <__floatsidf>:
  810d38:	defffd04 	addi	sp,sp,-12
  810d3c:	dfc00215 	stw	ra,8(sp)
  810d40:	dc400115 	stw	r17,4(sp)
  810d44:	dc000015 	stw	r16,0(sp)
  810d48:	20002b26 	beq	r4,zero,810df8 <__floatsidf+0xc0>
  810d4c:	2023883a 	mov	r17,r4
  810d50:	2020d7fa 	srli	r16,r4,31
  810d54:	20002d16 	blt	r4,zero,810e0c <__floatsidf+0xd4>
  810d58:	8809883a 	mov	r4,r17
  810d5c:	080602c0 	call	80602c <__clzsi2>
  810d60:	01410784 	movi	r5,1054
  810d64:	288bc83a 	sub	r5,r5,r2
  810d68:	01010cc4 	movi	r4,1075
  810d6c:	2149c83a 	sub	r4,r4,r5
  810d70:	00c007c4 	movi	r3,31
  810d74:	1900160e 	bge	r3,r4,810dd0 <__floatsidf+0x98>
  810d78:	00c104c4 	movi	r3,1043
  810d7c:	1947c83a 	sub	r3,r3,r5
  810d80:	88c6983a 	sll	r3,r17,r3
  810d84:	00800434 	movhi	r2,16
  810d88:	10bfffc4 	addi	r2,r2,-1
  810d8c:	1886703a 	and	r3,r3,r2
  810d90:	2941ffcc 	andi	r5,r5,2047
  810d94:	800d883a 	mov	r6,r16
  810d98:	0005883a 	mov	r2,zero
  810d9c:	280a953a 	slli	r5,r5,20
  810da0:	31803fcc 	andi	r6,r6,255
  810da4:	01000434 	movhi	r4,16
  810da8:	300c97fa 	slli	r6,r6,31
  810dac:	213fffc4 	addi	r4,r4,-1
  810db0:	1906703a 	and	r3,r3,r4
  810db4:	1946b03a 	or	r3,r3,r5
  810db8:	1986b03a 	or	r3,r3,r6
  810dbc:	dfc00217 	ldw	ra,8(sp)
  810dc0:	dc400117 	ldw	r17,4(sp)
  810dc4:	dc000017 	ldw	r16,0(sp)
  810dc8:	dec00304 	addi	sp,sp,12
  810dcc:	f800283a 	ret
  810dd0:	00c002c4 	movi	r3,11
  810dd4:	1887c83a 	sub	r3,r3,r2
  810dd8:	88c6d83a 	srl	r3,r17,r3
  810ddc:	8904983a 	sll	r2,r17,r4
  810de0:	01000434 	movhi	r4,16
  810de4:	213fffc4 	addi	r4,r4,-1
  810de8:	2941ffcc 	andi	r5,r5,2047
  810dec:	1906703a 	and	r3,r3,r4
  810df0:	800d883a 	mov	r6,r16
  810df4:	003fe906 	br	810d9c <__alt_mem_onchip_mem+0xff808d9c>
  810df8:	000d883a 	mov	r6,zero
  810dfc:	000b883a 	mov	r5,zero
  810e00:	0007883a 	mov	r3,zero
  810e04:	0005883a 	mov	r2,zero
  810e08:	003fe406 	br	810d9c <__alt_mem_onchip_mem+0xff808d9c>
  810e0c:	0123c83a 	sub	r17,zero,r4
  810e10:	003fd106 	br	810d58 <__alt_mem_onchip_mem+0xff808d58>

00810e14 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  810e14:	defff504 	addi	sp,sp,-44
  810e18:	df000a15 	stw	fp,40(sp)
  810e1c:	df000a04 	addi	fp,sp,40
  810e20:	e13ffc15 	stw	r4,-16(fp)
  810e24:	e17ffd15 	stw	r5,-12(fp)
  810e28:	e1bffe15 	stw	r6,-8(fp)
  810e2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  810e30:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810e34:	d0a75317 	ldw	r2,-25268(gp)
  
  if (alt_ticks_per_second ())
  810e38:	10003c26 	beq	r2,zero,810f2c <alt_alarm_start+0x118>
  {
    if (alarm)
  810e3c:	e0bffc17 	ldw	r2,-16(fp)
  810e40:	10003826 	beq	r2,zero,810f24 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  810e44:	e0bffc17 	ldw	r2,-16(fp)
  810e48:	e0fffe17 	ldw	r3,-8(fp)
  810e4c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  810e50:	e0bffc17 	ldw	r2,-16(fp)
  810e54:	e0ffff17 	ldw	r3,-4(fp)
  810e58:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e5c:	0005303a 	rdctl	r2,status
  810e60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e64:	e0fff917 	ldw	r3,-28(fp)
  810e68:	00bfff84 	movi	r2,-2
  810e6c:	1884703a 	and	r2,r3,r2
  810e70:	1001703a 	wrctl	status,r2
  
  return context;
  810e74:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  810e78:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  810e7c:	d0a75417 	ldw	r2,-25264(gp)
      
      current_nticks = alt_nticks();
  810e80:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810e84:	e0fffd17 	ldw	r3,-12(fp)
  810e88:	e0bff617 	ldw	r2,-40(fp)
  810e8c:	1885883a 	add	r2,r3,r2
  810e90:	10c00044 	addi	r3,r2,1
  810e94:	e0bffc17 	ldw	r2,-16(fp)
  810e98:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  810e9c:	e0bffc17 	ldw	r2,-16(fp)
  810ea0:	10c00217 	ldw	r3,8(r2)
  810ea4:	e0bff617 	ldw	r2,-40(fp)
  810ea8:	1880042e 	bgeu	r3,r2,810ebc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  810eac:	e0bffc17 	ldw	r2,-16(fp)
  810eb0:	00c00044 	movi	r3,1
  810eb4:	10c00405 	stb	r3,16(r2)
  810eb8:	00000206 	br	810ec4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  810ebc:	e0bffc17 	ldw	r2,-16(fp)
  810ec0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  810ec4:	e0bffc17 	ldw	r2,-16(fp)
  810ec8:	d0e00e04 	addi	r3,gp,-32712
  810ecc:	e0fffa15 	stw	r3,-24(fp)
  810ed0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810ed4:	e0bffb17 	ldw	r2,-20(fp)
  810ed8:	e0fffa17 	ldw	r3,-24(fp)
  810edc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  810ee0:	e0bffa17 	ldw	r2,-24(fp)
  810ee4:	10c00017 	ldw	r3,0(r2)
  810ee8:	e0bffb17 	ldw	r2,-20(fp)
  810eec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810ef0:	e0bffa17 	ldw	r2,-24(fp)
  810ef4:	10800017 	ldw	r2,0(r2)
  810ef8:	e0fffb17 	ldw	r3,-20(fp)
  810efc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  810f00:	e0bffa17 	ldw	r2,-24(fp)
  810f04:	e0fffb17 	ldw	r3,-20(fp)
  810f08:	10c00015 	stw	r3,0(r2)
  810f0c:	e0bff817 	ldw	r2,-32(fp)
  810f10:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810f14:	e0bff717 	ldw	r2,-36(fp)
  810f18:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  810f1c:	0005883a 	mov	r2,zero
  810f20:	00000306 	br	810f30 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  810f24:	00bffa84 	movi	r2,-22
  810f28:	00000106 	br	810f30 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  810f2c:	00bfde84 	movi	r2,-134
  }
}
  810f30:	e037883a 	mov	sp,fp
  810f34:	df000017 	ldw	fp,0(sp)
  810f38:	dec00104 	addi	sp,sp,4
  810f3c:	f800283a 	ret

00810f40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810f40:	defffe04 	addi	sp,sp,-8
  810f44:	dfc00115 	stw	ra,4(sp)
  810f48:	df000015 	stw	fp,0(sp)
  810f4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810f50:	d0a00b17 	ldw	r2,-32724(gp)
  810f54:	10000326 	beq	r2,zero,810f64 <alt_get_errno+0x24>
  810f58:	d0a00b17 	ldw	r2,-32724(gp)
  810f5c:	103ee83a 	callr	r2
  810f60:	00000106 	br	810f68 <alt_get_errno+0x28>
  810f64:	d0a74e04 	addi	r2,gp,-25288
}
  810f68:	e037883a 	mov	sp,fp
  810f6c:	dfc00117 	ldw	ra,4(sp)
  810f70:	df000017 	ldw	fp,0(sp)
  810f74:	dec00204 	addi	sp,sp,8
  810f78:	f800283a 	ret

00810f7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  810f7c:	defffb04 	addi	sp,sp,-20
  810f80:	dfc00415 	stw	ra,16(sp)
  810f84:	df000315 	stw	fp,12(sp)
  810f88:	df000304 	addi	fp,sp,12
  810f8c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  810f90:	e0bfff17 	ldw	r2,-4(fp)
  810f94:	10000616 	blt	r2,zero,810fb0 <close+0x34>
  810f98:	e0bfff17 	ldw	r2,-4(fp)
  810f9c:	10c00324 	muli	r3,r2,12
  810fa0:	00802074 	movhi	r2,129
  810fa4:	1097ca04 	addi	r2,r2,24360
  810fa8:	1885883a 	add	r2,r3,r2
  810fac:	00000106 	br	810fb4 <close+0x38>
  810fb0:	0005883a 	mov	r2,zero
  810fb4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  810fb8:	e0bffd17 	ldw	r2,-12(fp)
  810fbc:	10001926 	beq	r2,zero,811024 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  810fc0:	e0bffd17 	ldw	r2,-12(fp)
  810fc4:	10800017 	ldw	r2,0(r2)
  810fc8:	10800417 	ldw	r2,16(r2)
  810fcc:	10000626 	beq	r2,zero,810fe8 <close+0x6c>
  810fd0:	e0bffd17 	ldw	r2,-12(fp)
  810fd4:	10800017 	ldw	r2,0(r2)
  810fd8:	10800417 	ldw	r2,16(r2)
  810fdc:	e13ffd17 	ldw	r4,-12(fp)
  810fe0:	103ee83a 	callr	r2
  810fe4:	00000106 	br	810fec <close+0x70>
  810fe8:	0005883a 	mov	r2,zero
  810fec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  810ff0:	e13fff17 	ldw	r4,-4(fp)
  810ff4:	08117bc0 	call	8117bc <alt_release_fd>
    if (rval < 0)
  810ff8:	e0bffe17 	ldw	r2,-8(fp)
  810ffc:	1000070e 	bge	r2,zero,81101c <close+0xa0>
    {
      ALT_ERRNO = -rval;
  811000:	0810f400 	call	810f40 <alt_get_errno>
  811004:	1007883a 	mov	r3,r2
  811008:	e0bffe17 	ldw	r2,-8(fp)
  81100c:	0085c83a 	sub	r2,zero,r2
  811010:	18800015 	stw	r2,0(r3)
      return -1;
  811014:	00bfffc4 	movi	r2,-1
  811018:	00000706 	br	811038 <close+0xbc>
    }
    return 0;
  81101c:	0005883a 	mov	r2,zero
  811020:	00000506 	br	811038 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811024:	0810f400 	call	810f40 <alt_get_errno>
  811028:	1007883a 	mov	r3,r2
  81102c:	00801444 	movi	r2,81
  811030:	18800015 	stw	r2,0(r3)
    return -1;
  811034:	00bfffc4 	movi	r2,-1
  }
}
  811038:	e037883a 	mov	sp,fp
  81103c:	dfc00117 	ldw	ra,4(sp)
  811040:	df000017 	ldw	fp,0(sp)
  811044:	dec00204 	addi	sp,sp,8
  811048:	f800283a 	ret

0081104c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  81104c:	defffc04 	addi	sp,sp,-16
  811050:	df000315 	stw	fp,12(sp)
  811054:	df000304 	addi	fp,sp,12
  811058:	e13ffd15 	stw	r4,-12(fp)
  81105c:	e17ffe15 	stw	r5,-8(fp)
  811060:	e1bfff15 	stw	r6,-4(fp)
  return len;
  811064:	e0bfff17 	ldw	r2,-4(fp)
}
  811068:	e037883a 	mov	sp,fp
  81106c:	df000017 	ldw	fp,0(sp)
  811070:	dec00104 	addi	sp,sp,4
  811074:	f800283a 	ret

00811078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811078:	defffe04 	addi	sp,sp,-8
  81107c:	dfc00115 	stw	ra,4(sp)
  811080:	df000015 	stw	fp,0(sp)
  811084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811088:	d0a00b17 	ldw	r2,-32724(gp)
  81108c:	10000326 	beq	r2,zero,81109c <alt_get_errno+0x24>
  811090:	d0a00b17 	ldw	r2,-32724(gp)
  811094:	103ee83a 	callr	r2
  811098:	00000106 	br	8110a0 <alt_get_errno+0x28>
  81109c:	d0a74e04 	addi	r2,gp,-25288
}
  8110a0:	e037883a 	mov	sp,fp
  8110a4:	dfc00117 	ldw	ra,4(sp)
  8110a8:	df000017 	ldw	fp,0(sp)
  8110ac:	dec00204 	addi	sp,sp,8
  8110b0:	f800283a 	ret

008110b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8110b4:	defffb04 	addi	sp,sp,-20
  8110b8:	dfc00415 	stw	ra,16(sp)
  8110bc:	df000315 	stw	fp,12(sp)
  8110c0:	df000304 	addi	fp,sp,12
  8110c4:	e13ffe15 	stw	r4,-8(fp)
  8110c8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8110cc:	e0bffe17 	ldw	r2,-8(fp)
  8110d0:	10000616 	blt	r2,zero,8110ec <fstat+0x38>
  8110d4:	e0bffe17 	ldw	r2,-8(fp)
  8110d8:	10c00324 	muli	r3,r2,12
  8110dc:	00802074 	movhi	r2,129
  8110e0:	1097ca04 	addi	r2,r2,24360
  8110e4:	1885883a 	add	r2,r3,r2
  8110e8:	00000106 	br	8110f0 <fstat+0x3c>
  8110ec:	0005883a 	mov	r2,zero
  8110f0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  8110f4:	e0bffd17 	ldw	r2,-12(fp)
  8110f8:	10001026 	beq	r2,zero,81113c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8110fc:	e0bffd17 	ldw	r2,-12(fp)
  811100:	10800017 	ldw	r2,0(r2)
  811104:	10800817 	ldw	r2,32(r2)
  811108:	10000726 	beq	r2,zero,811128 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  81110c:	e0bffd17 	ldw	r2,-12(fp)
  811110:	10800017 	ldw	r2,0(r2)
  811114:	10800817 	ldw	r2,32(r2)
  811118:	e17fff17 	ldw	r5,-4(fp)
  81111c:	e13ffd17 	ldw	r4,-12(fp)
  811120:	103ee83a 	callr	r2
  811124:	00000a06 	br	811150 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  811128:	e0bfff17 	ldw	r2,-4(fp)
  81112c:	00c80004 	movi	r3,8192
  811130:	10c00115 	stw	r3,4(r2)
      return 0;
  811134:	0005883a 	mov	r2,zero
  811138:	00000506 	br	811150 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81113c:	08110780 	call	811078 <alt_get_errno>
  811140:	1007883a 	mov	r3,r2
  811144:	00801444 	movi	r2,81
  811148:	18800015 	stw	r2,0(r3)
    return -1;
  81114c:	00bfffc4 	movi	r2,-1
  }
}
  811150:	e037883a 	mov	sp,fp
  811154:	dfc00117 	ldw	ra,4(sp)
  811158:	df000017 	ldw	fp,0(sp)
  81115c:	dec00204 	addi	sp,sp,8
  811160:	f800283a 	ret

00811164 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  811164:	defff004 	addi	sp,sp,-64
  811168:	df000f15 	stw	fp,60(sp)
  81116c:	df000f04 	addi	fp,sp,60
  811170:	e13ffd15 	stw	r4,-12(fp)
  811174:	e17ffe15 	stw	r5,-8(fp)
  811178:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  81117c:	00bffa84 	movi	r2,-22
  811180:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811184:	e0bffd17 	ldw	r2,-12(fp)
  811188:	10800828 	cmpgeui	r2,r2,32
  81118c:	1000501e 	bne	r2,zero,8112d0 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811190:	0005303a 	rdctl	r2,status
  811194:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811198:	e0fff617 	ldw	r3,-40(fp)
  81119c:	00bfff84 	movi	r2,-2
  8111a0:	1884703a 	and	r2,r3,r2
  8111a4:	1001703a 	wrctl	status,r2
  
  return context;
  8111a8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  8111ac:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  8111b0:	008020b4 	movhi	r2,130
  8111b4:	10a41b04 	addi	r2,r2,-28564
  8111b8:	e0fffd17 	ldw	r3,-12(fp)
  8111bc:	180690fa 	slli	r3,r3,3
  8111c0:	10c5883a 	add	r2,r2,r3
  8111c4:	e0ffff17 	ldw	r3,-4(fp)
  8111c8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  8111cc:	008020b4 	movhi	r2,130
  8111d0:	10a41b04 	addi	r2,r2,-28564
  8111d4:	e0fffd17 	ldw	r3,-12(fp)
  8111d8:	180690fa 	slli	r3,r3,3
  8111dc:	10c5883a 	add	r2,r2,r3
  8111e0:	10800104 	addi	r2,r2,4
  8111e4:	e0fffe17 	ldw	r3,-8(fp)
  8111e8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  8111ec:	e0bfff17 	ldw	r2,-4(fp)
  8111f0:	10001926 	beq	r2,zero,811258 <alt_irq_register+0xf4>
  8111f4:	e0bffd17 	ldw	r2,-12(fp)
  8111f8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8111fc:	0005303a 	rdctl	r2,status
  811200:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811204:	e0fff717 	ldw	r3,-36(fp)
  811208:	00bfff84 	movi	r2,-2
  81120c:	1884703a 	and	r2,r3,r2
  811210:	1001703a 	wrctl	status,r2
  
  return context;
  811214:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811218:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  81121c:	00c00044 	movi	r3,1
  811220:	e0bff217 	ldw	r2,-56(fp)
  811224:	1884983a 	sll	r2,r3,r2
  811228:	1007883a 	mov	r3,r2
  81122c:	d0a74f17 	ldw	r2,-25284(gp)
  811230:	1884b03a 	or	r2,r3,r2
  811234:	d0a74f15 	stw	r2,-25284(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811238:	d0a74f17 	ldw	r2,-25284(gp)
  81123c:	100170fa 	wrctl	ienable,r2
  811240:	e0bff817 	ldw	r2,-32(fp)
  811244:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811248:	e0bff917 	ldw	r2,-28(fp)
  81124c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811250:	0005883a 	mov	r2,zero
  811254:	00001906 	br	8112bc <alt_irq_register+0x158>
  811258:	e0bffd17 	ldw	r2,-12(fp)
  81125c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811260:	0005303a 	rdctl	r2,status
  811264:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811268:	e0fffa17 	ldw	r3,-24(fp)
  81126c:	00bfff84 	movi	r2,-2
  811270:	1884703a 	and	r2,r3,r2
  811274:	1001703a 	wrctl	status,r2
  
  return context;
  811278:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81127c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  811280:	00c00044 	movi	r3,1
  811284:	e0bff417 	ldw	r2,-48(fp)
  811288:	1884983a 	sll	r2,r3,r2
  81128c:	0084303a 	nor	r2,zero,r2
  811290:	1007883a 	mov	r3,r2
  811294:	d0a74f17 	ldw	r2,-25284(gp)
  811298:	1884703a 	and	r2,r3,r2
  81129c:	d0a74f15 	stw	r2,-25284(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8112a0:	d0a74f17 	ldw	r2,-25284(gp)
  8112a4:	100170fa 	wrctl	ienable,r2
  8112a8:	e0bffb17 	ldw	r2,-20(fp)
  8112ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8112b0:	e0bffc17 	ldw	r2,-16(fp)
  8112b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8112b8:	0005883a 	mov	r2,zero
  8112bc:	e0bff115 	stw	r2,-60(fp)
  8112c0:	e0bff317 	ldw	r2,-52(fp)
  8112c4:	e0bff515 	stw	r2,-44(fp)
  8112c8:	e0bff517 	ldw	r2,-44(fp)
  8112cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  8112d0:	e0bff117 	ldw	r2,-60(fp)
}
  8112d4:	e037883a 	mov	sp,fp
  8112d8:	df000017 	ldw	fp,0(sp)
  8112dc:	dec00104 	addi	sp,sp,4
  8112e0:	f800283a 	ret

008112e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8112e4:	defffe04 	addi	sp,sp,-8
  8112e8:	dfc00115 	stw	ra,4(sp)
  8112ec:	df000015 	stw	fp,0(sp)
  8112f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8112f4:	d0a00b17 	ldw	r2,-32724(gp)
  8112f8:	10000326 	beq	r2,zero,811308 <alt_get_errno+0x24>
  8112fc:	d0a00b17 	ldw	r2,-32724(gp)
  811300:	103ee83a 	callr	r2
  811304:	00000106 	br	81130c <alt_get_errno+0x28>
  811308:	d0a74e04 	addi	r2,gp,-25288
}
  81130c:	e037883a 	mov	sp,fp
  811310:	dfc00117 	ldw	ra,4(sp)
  811314:	df000017 	ldw	fp,0(sp)
  811318:	dec00204 	addi	sp,sp,8
  81131c:	f800283a 	ret

00811320 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  811320:	deffed04 	addi	sp,sp,-76
  811324:	dfc01215 	stw	ra,72(sp)
  811328:	df001115 	stw	fp,68(sp)
  81132c:	df001104 	addi	fp,sp,68
  811330:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811334:	e0bfff17 	ldw	r2,-4(fp)
  811338:	10000616 	blt	r2,zero,811354 <isatty+0x34>
  81133c:	e0bfff17 	ldw	r2,-4(fp)
  811340:	10c00324 	muli	r3,r2,12
  811344:	00802074 	movhi	r2,129
  811348:	1097ca04 	addi	r2,r2,24360
  81134c:	1885883a 	add	r2,r3,r2
  811350:	00000106 	br	811358 <isatty+0x38>
  811354:	0005883a 	mov	r2,zero
  811358:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  81135c:	e0bfef17 	ldw	r2,-68(fp)
  811360:	10000e26 	beq	r2,zero,81139c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  811364:	e0bfef17 	ldw	r2,-68(fp)
  811368:	10800017 	ldw	r2,0(r2)
  81136c:	10800817 	ldw	r2,32(r2)
  811370:	1000021e 	bne	r2,zero,81137c <isatty+0x5c>
    {
      return 1;
  811374:	00800044 	movi	r2,1
  811378:	00000d06 	br	8113b0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  81137c:	e0bff004 	addi	r2,fp,-64
  811380:	100b883a 	mov	r5,r2
  811384:	e13fff17 	ldw	r4,-4(fp)
  811388:	08110b40 	call	8110b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  81138c:	e0bff117 	ldw	r2,-60(fp)
  811390:	10880020 	cmpeqi	r2,r2,8192
  811394:	10803fcc 	andi	r2,r2,255
  811398:	00000506 	br	8113b0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81139c:	08112e40 	call	8112e4 <alt_get_errno>
  8113a0:	1007883a 	mov	r3,r2
  8113a4:	00801444 	movi	r2,81
  8113a8:	18800015 	stw	r2,0(r3)
    return 0;
  8113ac:	0005883a 	mov	r2,zero
  }
}
  8113b0:	e037883a 	mov	sp,fp
  8113b4:	dfc00117 	ldw	ra,4(sp)
  8113b8:	df000017 	ldw	fp,0(sp)
  8113bc:	dec00204 	addi	sp,sp,8
  8113c0:	f800283a 	ret

008113c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8113c4:	defffc04 	addi	sp,sp,-16
  8113c8:	df000315 	stw	fp,12(sp)
  8113cc:	df000304 	addi	fp,sp,12
  8113d0:	e13ffd15 	stw	r4,-12(fp)
  8113d4:	e17ffe15 	stw	r5,-8(fp)
  8113d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8113dc:	e0fffe17 	ldw	r3,-8(fp)
  8113e0:	e0bffd17 	ldw	r2,-12(fp)
  8113e4:	18800c26 	beq	r3,r2,811418 <alt_load_section+0x54>
  {
    while( to != end )
  8113e8:	00000806 	br	81140c <alt_load_section+0x48>
    {
      *to++ = *from++;
  8113ec:	e0bffe17 	ldw	r2,-8(fp)
  8113f0:	10c00104 	addi	r3,r2,4
  8113f4:	e0fffe15 	stw	r3,-8(fp)
  8113f8:	e0fffd17 	ldw	r3,-12(fp)
  8113fc:	19000104 	addi	r4,r3,4
  811400:	e13ffd15 	stw	r4,-12(fp)
  811404:	18c00017 	ldw	r3,0(r3)
  811408:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  81140c:	e0fffe17 	ldw	r3,-8(fp)
  811410:	e0bfff17 	ldw	r2,-4(fp)
  811414:	18bff51e 	bne	r3,r2,8113ec <__alt_mem_onchip_mem+0xff8093ec>
    {
      *to++ = *from++;
    }
  }
}
  811418:	0001883a 	nop
  81141c:	e037883a 	mov	sp,fp
  811420:	df000017 	ldw	fp,0(sp)
  811424:	dec00104 	addi	sp,sp,4
  811428:	f800283a 	ret

0081142c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  81142c:	defffe04 	addi	sp,sp,-8
  811430:	dfc00115 	stw	ra,4(sp)
  811434:	df000015 	stw	fp,0(sp)
  811438:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  81143c:	01802074 	movhi	r6,129
  811440:	319ccd04 	addi	r6,r6,29492
  811444:	01402074 	movhi	r5,129
  811448:	29559704 	addi	r5,r5,22108
  81144c:	01002074 	movhi	r4,129
  811450:	211ccd04 	addi	r4,r4,29492
  811454:	08113c40 	call	8113c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  811458:	01802034 	movhi	r6,128
  81145c:	31809104 	addi	r6,r6,580
  811460:	01402034 	movhi	r5,128
  811464:	29400804 	addi	r5,r5,32
  811468:	01002034 	movhi	r4,128
  81146c:	21000804 	addi	r4,r4,32
  811470:	08113c40 	call	8113c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  811474:	01802074 	movhi	r6,129
  811478:	31959704 	addi	r6,r6,22108
  81147c:	01402074 	movhi	r5,129
  811480:	29542d04 	addi	r5,r5,20660
  811484:	01002074 	movhi	r4,129
  811488:	21142d04 	addi	r4,r4,20660
  81148c:	08113c40 	call	8113c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  811490:	0813fbc0 	call	813fbc <alt_dcache_flush_all>
  alt_icache_flush_all();
  811494:	08141a40 	call	8141a4 <alt_icache_flush_all>
}
  811498:	0001883a 	nop
  81149c:	e037883a 	mov	sp,fp
  8114a0:	dfc00117 	ldw	ra,4(sp)
  8114a4:	df000017 	ldw	fp,0(sp)
  8114a8:	dec00204 	addi	sp,sp,8
  8114ac:	f800283a 	ret

008114b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8114b0:	defffe04 	addi	sp,sp,-8
  8114b4:	dfc00115 	stw	ra,4(sp)
  8114b8:	df000015 	stw	fp,0(sp)
  8114bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8114c0:	d0a00b17 	ldw	r2,-32724(gp)
  8114c4:	10000326 	beq	r2,zero,8114d4 <alt_get_errno+0x24>
  8114c8:	d0a00b17 	ldw	r2,-32724(gp)
  8114cc:	103ee83a 	callr	r2
  8114d0:	00000106 	br	8114d8 <alt_get_errno+0x28>
  8114d4:	d0a74e04 	addi	r2,gp,-25288
}
  8114d8:	e037883a 	mov	sp,fp
  8114dc:	dfc00117 	ldw	ra,4(sp)
  8114e0:	df000017 	ldw	fp,0(sp)
  8114e4:	dec00204 	addi	sp,sp,8
  8114e8:	f800283a 	ret

008114ec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8114ec:	defff904 	addi	sp,sp,-28
  8114f0:	dfc00615 	stw	ra,24(sp)
  8114f4:	df000515 	stw	fp,20(sp)
  8114f8:	df000504 	addi	fp,sp,20
  8114fc:	e13ffd15 	stw	r4,-12(fp)
  811500:	e17ffe15 	stw	r5,-8(fp)
  811504:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  811508:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81150c:	e0bffd17 	ldw	r2,-12(fp)
  811510:	10000616 	blt	r2,zero,81152c <lseek+0x40>
  811514:	e0bffd17 	ldw	r2,-12(fp)
  811518:	10c00324 	muli	r3,r2,12
  81151c:	00802074 	movhi	r2,129
  811520:	1097ca04 	addi	r2,r2,24360
  811524:	1885883a 	add	r2,r3,r2
  811528:	00000106 	br	811530 <lseek+0x44>
  81152c:	0005883a 	mov	r2,zero
  811530:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  811534:	e0bffc17 	ldw	r2,-16(fp)
  811538:	10001026 	beq	r2,zero,81157c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  81153c:	e0bffc17 	ldw	r2,-16(fp)
  811540:	10800017 	ldw	r2,0(r2)
  811544:	10800717 	ldw	r2,28(r2)
  811548:	10000926 	beq	r2,zero,811570 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  81154c:	e0bffc17 	ldw	r2,-16(fp)
  811550:	10800017 	ldw	r2,0(r2)
  811554:	10800717 	ldw	r2,28(r2)
  811558:	e1bfff17 	ldw	r6,-4(fp)
  81155c:	e17ffe17 	ldw	r5,-8(fp)
  811560:	e13ffc17 	ldw	r4,-16(fp)
  811564:	103ee83a 	callr	r2
  811568:	e0bffb15 	stw	r2,-20(fp)
  81156c:	00000506 	br	811584 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  811570:	00bfde84 	movi	r2,-134
  811574:	e0bffb15 	stw	r2,-20(fp)
  811578:	00000206 	br	811584 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  81157c:	00bfebc4 	movi	r2,-81
  811580:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  811584:	e0bffb17 	ldw	r2,-20(fp)
  811588:	1000070e 	bge	r2,zero,8115a8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  81158c:	08114b00 	call	8114b0 <alt_get_errno>
  811590:	1007883a 	mov	r3,r2
  811594:	e0bffb17 	ldw	r2,-20(fp)
  811598:	0085c83a 	sub	r2,zero,r2
  81159c:	18800015 	stw	r2,0(r3)
    rc = -1;
  8115a0:	00bfffc4 	movi	r2,-1
  8115a4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  8115a8:	e0bffb17 	ldw	r2,-20(fp)
}
  8115ac:	e037883a 	mov	sp,fp
  8115b0:	dfc00117 	ldw	ra,4(sp)
  8115b4:	df000017 	ldw	fp,0(sp)
  8115b8:	dec00204 	addi	sp,sp,8
  8115bc:	f800283a 	ret

008115c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8115c0:	defffd04 	addi	sp,sp,-12
  8115c4:	dfc00215 	stw	ra,8(sp)
  8115c8:	df000115 	stw	fp,4(sp)
  8115cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8115d0:	0009883a 	mov	r4,zero
  8115d4:	0811bdc0 	call	811bdc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8115d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8115dc:	0811c140 	call	811c14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8115e0:	01802074 	movhi	r6,129
  8115e4:	3194e904 	addi	r6,r6,21412
  8115e8:	01402074 	movhi	r5,129
  8115ec:	2954e904 	addi	r5,r5,21412
  8115f0:	01002074 	movhi	r4,129
  8115f4:	2114e904 	addi	r4,r4,21412
  8115f8:	081453c0 	call	81453c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8115fc:	08140e40 	call	8140e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  811600:	01002074 	movhi	r4,129
  811604:	21105104 	addi	r4,r4,16708
  811608:	0814d200 	call	814d20 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  81160c:	d0a75017 	ldw	r2,-25280(gp)
  811610:	d0e75117 	ldw	r3,-25276(gp)
  811614:	d1275217 	ldw	r4,-25272(gp)
  811618:	200d883a 	mov	r6,r4
  81161c:	180b883a 	mov	r5,r3
  811620:	1009883a 	mov	r4,r2
  811624:	08043040 	call	804304 <main>
  811628:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  81162c:	01000044 	movi	r4,1
  811630:	0810f7c0 	call	810f7c <close>
  exit (result);
  811634:	e13fff17 	ldw	r4,-4(fp)
  811638:	0814d340 	call	814d34 <exit>

0081163c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  81163c:	defffe04 	addi	sp,sp,-8
  811640:	df000115 	stw	fp,4(sp)
  811644:	df000104 	addi	fp,sp,4
  811648:	e13fff15 	stw	r4,-4(fp)
}
  81164c:	0001883a 	nop
  811650:	e037883a 	mov	sp,fp
  811654:	df000017 	ldw	fp,0(sp)
  811658:	dec00104 	addi	sp,sp,4
  81165c:	f800283a 	ret

00811660 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  811660:	defffe04 	addi	sp,sp,-8
  811664:	df000115 	stw	fp,4(sp)
  811668:	df000104 	addi	fp,sp,4
  81166c:	e13fff15 	stw	r4,-4(fp)
}
  811670:	0001883a 	nop
  811674:	e037883a 	mov	sp,fp
  811678:	df000017 	ldw	fp,0(sp)
  81167c:	dec00104 	addi	sp,sp,4
  811680:	f800283a 	ret

00811684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811684:	defffe04 	addi	sp,sp,-8
  811688:	dfc00115 	stw	ra,4(sp)
  81168c:	df000015 	stw	fp,0(sp)
  811690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811694:	d0a00b17 	ldw	r2,-32724(gp)
  811698:	10000326 	beq	r2,zero,8116a8 <alt_get_errno+0x24>
  81169c:	d0a00b17 	ldw	r2,-32724(gp)
  8116a0:	103ee83a 	callr	r2
  8116a4:	00000106 	br	8116ac <alt_get_errno+0x28>
  8116a8:	d0a74e04 	addi	r2,gp,-25288
}
  8116ac:	e037883a 	mov	sp,fp
  8116b0:	dfc00117 	ldw	ra,4(sp)
  8116b4:	df000017 	ldw	fp,0(sp)
  8116b8:	dec00204 	addi	sp,sp,8
  8116bc:	f800283a 	ret

008116c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8116c0:	defff904 	addi	sp,sp,-28
  8116c4:	dfc00615 	stw	ra,24(sp)
  8116c8:	df000515 	stw	fp,20(sp)
  8116cc:	df000504 	addi	fp,sp,20
  8116d0:	e13ffd15 	stw	r4,-12(fp)
  8116d4:	e17ffe15 	stw	r5,-8(fp)
  8116d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8116dc:	e0bffd17 	ldw	r2,-12(fp)
  8116e0:	10000616 	blt	r2,zero,8116fc <read+0x3c>
  8116e4:	e0bffd17 	ldw	r2,-12(fp)
  8116e8:	10c00324 	muli	r3,r2,12
  8116ec:	00802074 	movhi	r2,129
  8116f0:	1097ca04 	addi	r2,r2,24360
  8116f4:	1885883a 	add	r2,r3,r2
  8116f8:	00000106 	br	811700 <read+0x40>
  8116fc:	0005883a 	mov	r2,zero
  811700:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  811704:	e0bffb17 	ldw	r2,-20(fp)
  811708:	10002226 	beq	r2,zero,811794 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  81170c:	e0bffb17 	ldw	r2,-20(fp)
  811710:	10800217 	ldw	r2,8(r2)
  811714:	108000cc 	andi	r2,r2,3
  811718:	10800060 	cmpeqi	r2,r2,1
  81171c:	1000181e 	bne	r2,zero,811780 <read+0xc0>
        (fd->dev->read))
  811720:	e0bffb17 	ldw	r2,-20(fp)
  811724:	10800017 	ldw	r2,0(r2)
  811728:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  81172c:	10001426 	beq	r2,zero,811780 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  811730:	e0bffb17 	ldw	r2,-20(fp)
  811734:	10800017 	ldw	r2,0(r2)
  811738:	10800517 	ldw	r2,20(r2)
  81173c:	e0ffff17 	ldw	r3,-4(fp)
  811740:	180d883a 	mov	r6,r3
  811744:	e17ffe17 	ldw	r5,-8(fp)
  811748:	e13ffb17 	ldw	r4,-20(fp)
  81174c:	103ee83a 	callr	r2
  811750:	e0bffc15 	stw	r2,-16(fp)
  811754:	e0bffc17 	ldw	r2,-16(fp)
  811758:	1000070e 	bge	r2,zero,811778 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  81175c:	08116840 	call	811684 <alt_get_errno>
  811760:	1007883a 	mov	r3,r2
  811764:	e0bffc17 	ldw	r2,-16(fp)
  811768:	0085c83a 	sub	r2,zero,r2
  81176c:	18800015 	stw	r2,0(r3)
          return -1;
  811770:	00bfffc4 	movi	r2,-1
  811774:	00000c06 	br	8117a8 <read+0xe8>
        }
        return rval;
  811778:	e0bffc17 	ldw	r2,-16(fp)
  81177c:	00000a06 	br	8117a8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  811780:	08116840 	call	811684 <alt_get_errno>
  811784:	1007883a 	mov	r3,r2
  811788:	00800344 	movi	r2,13
  81178c:	18800015 	stw	r2,0(r3)
  811790:	00000406 	br	8117a4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  811794:	08116840 	call	811684 <alt_get_errno>
  811798:	1007883a 	mov	r3,r2
  81179c:	00801444 	movi	r2,81
  8117a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8117a4:	00bfffc4 	movi	r2,-1
}
  8117a8:	e037883a 	mov	sp,fp
  8117ac:	dfc00117 	ldw	ra,4(sp)
  8117b0:	df000017 	ldw	fp,0(sp)
  8117b4:	dec00204 	addi	sp,sp,8
  8117b8:	f800283a 	ret

008117bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8117bc:	defffe04 	addi	sp,sp,-8
  8117c0:	df000115 	stw	fp,4(sp)
  8117c4:	df000104 	addi	fp,sp,4
  8117c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8117cc:	e0bfff17 	ldw	r2,-4(fp)
  8117d0:	108000d0 	cmplti	r2,r2,3
  8117d4:	10000d1e 	bne	r2,zero,81180c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8117d8:	00802074 	movhi	r2,129
  8117dc:	1097ca04 	addi	r2,r2,24360
  8117e0:	e0ffff17 	ldw	r3,-4(fp)
  8117e4:	18c00324 	muli	r3,r3,12
  8117e8:	10c5883a 	add	r2,r2,r3
  8117ec:	10800204 	addi	r2,r2,8
  8117f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8117f4:	00802074 	movhi	r2,129
  8117f8:	1097ca04 	addi	r2,r2,24360
  8117fc:	e0ffff17 	ldw	r3,-4(fp)
  811800:	18c00324 	muli	r3,r3,12
  811804:	10c5883a 	add	r2,r2,r3
  811808:	10000015 	stw	zero,0(r2)
  }
}
  81180c:	0001883a 	nop
  811810:	e037883a 	mov	sp,fp
  811814:	df000017 	ldw	fp,0(sp)
  811818:	dec00104 	addi	sp,sp,4
  81181c:	f800283a 	ret

00811820 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  811820:	defff904 	addi	sp,sp,-28
  811824:	df000615 	stw	fp,24(sp)
  811828:	df000604 	addi	fp,sp,24
  81182c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811830:	0005303a 	rdctl	r2,status
  811834:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811838:	e0fffe17 	ldw	r3,-8(fp)
  81183c:	00bfff84 	movi	r2,-2
  811840:	1884703a 	and	r2,r3,r2
  811844:	1001703a 	wrctl	status,r2
  
  return context;
  811848:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  81184c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  811850:	d0a00d17 	ldw	r2,-32716(gp)
  811854:	10c000c4 	addi	r3,r2,3
  811858:	00bfff04 	movi	r2,-4
  81185c:	1884703a 	and	r2,r3,r2
  811860:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  811864:	d0e00d17 	ldw	r3,-32716(gp)
  811868:	e0bfff17 	ldw	r2,-4(fp)
  81186c:	1887883a 	add	r3,r3,r2
  811870:	00804034 	movhi	r2,256
  811874:	10800004 	addi	r2,r2,0
  811878:	10c0062e 	bgeu	r2,r3,811894 <sbrk+0x74>
  81187c:	e0bffb17 	ldw	r2,-20(fp)
  811880:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811884:	e0bffa17 	ldw	r2,-24(fp)
  811888:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  81188c:	00bfffc4 	movi	r2,-1
  811890:	00000b06 	br	8118c0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  811894:	d0a00d17 	ldw	r2,-32716(gp)
  811898:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  81189c:	d0e00d17 	ldw	r3,-32716(gp)
  8118a0:	e0bfff17 	ldw	r2,-4(fp)
  8118a4:	1885883a 	add	r2,r3,r2
  8118a8:	d0a00d15 	stw	r2,-32716(gp)
  8118ac:	e0bffb17 	ldw	r2,-20(fp)
  8118b0:	e0bffc15 	stw	r2,-16(fp)
  8118b4:	e0bffc17 	ldw	r2,-16(fp)
  8118b8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8118bc:	e0bffd17 	ldw	r2,-12(fp)
} 
  8118c0:	e037883a 	mov	sp,fp
  8118c4:	df000017 	ldw	fp,0(sp)
  8118c8:	dec00104 	addi	sp,sp,4
  8118cc:	f800283a 	ret

008118d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8118d0:	defffa04 	addi	sp,sp,-24
  8118d4:	df000515 	stw	fp,20(sp)
  8118d8:	df000504 	addi	fp,sp,20
  8118dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8118e0:	0005303a 	rdctl	r2,status
  8118e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8118e8:	e0fffc17 	ldw	r3,-16(fp)
  8118ec:	00bfff84 	movi	r2,-2
  8118f0:	1884703a 	and	r2,r3,r2
  8118f4:	1001703a 	wrctl	status,r2
  
  return context;
  8118f8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8118fc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  811900:	e0bfff17 	ldw	r2,-4(fp)
  811904:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  811908:	e0bffd17 	ldw	r2,-12(fp)
  81190c:	10800017 	ldw	r2,0(r2)
  811910:	e0fffd17 	ldw	r3,-12(fp)
  811914:	18c00117 	ldw	r3,4(r3)
  811918:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  81191c:	e0bffd17 	ldw	r2,-12(fp)
  811920:	10800117 	ldw	r2,4(r2)
  811924:	e0fffd17 	ldw	r3,-12(fp)
  811928:	18c00017 	ldw	r3,0(r3)
  81192c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  811930:	e0bffd17 	ldw	r2,-12(fp)
  811934:	e0fffd17 	ldw	r3,-12(fp)
  811938:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  81193c:	e0bffd17 	ldw	r2,-12(fp)
  811940:	e0fffd17 	ldw	r3,-12(fp)
  811944:	10c00015 	stw	r3,0(r2)
  811948:	e0bffb17 	ldw	r2,-20(fp)
  81194c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811950:	e0bffe17 	ldw	r2,-8(fp)
  811954:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  811958:	0001883a 	nop
  81195c:	e037883a 	mov	sp,fp
  811960:	df000017 	ldw	fp,0(sp)
  811964:	dec00104 	addi	sp,sp,4
  811968:	f800283a 	ret

0081196c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81196c:	defffb04 	addi	sp,sp,-20
  811970:	dfc00415 	stw	ra,16(sp)
  811974:	df000315 	stw	fp,12(sp)
  811978:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81197c:	d0a00e17 	ldw	r2,-32712(gp)
  811980:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  811984:	d0a75417 	ldw	r2,-25264(gp)
  811988:	10800044 	addi	r2,r2,1
  81198c:	d0a75415 	stw	r2,-25264(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811990:	00002e06 	br	811a4c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  811994:	e0bffd17 	ldw	r2,-12(fp)
  811998:	10800017 	ldw	r2,0(r2)
  81199c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8119a0:	e0bffd17 	ldw	r2,-12(fp)
  8119a4:	10800403 	ldbu	r2,16(r2)
  8119a8:	10803fcc 	andi	r2,r2,255
  8119ac:	10000426 	beq	r2,zero,8119c0 <alt_tick+0x54>
  8119b0:	d0a75417 	ldw	r2,-25264(gp)
  8119b4:	1000021e 	bne	r2,zero,8119c0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8119b8:	e0bffd17 	ldw	r2,-12(fp)
  8119bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8119c0:	e0bffd17 	ldw	r2,-12(fp)
  8119c4:	10800217 	ldw	r2,8(r2)
  8119c8:	d0e75417 	ldw	r3,-25264(gp)
  8119cc:	18801d36 	bltu	r3,r2,811a44 <alt_tick+0xd8>
  8119d0:	e0bffd17 	ldw	r2,-12(fp)
  8119d4:	10800403 	ldbu	r2,16(r2)
  8119d8:	10803fcc 	andi	r2,r2,255
  8119dc:	1000191e 	bne	r2,zero,811a44 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8119e0:	e0bffd17 	ldw	r2,-12(fp)
  8119e4:	10800317 	ldw	r2,12(r2)
  8119e8:	e0fffd17 	ldw	r3,-12(fp)
  8119ec:	18c00517 	ldw	r3,20(r3)
  8119f0:	1809883a 	mov	r4,r3
  8119f4:	103ee83a 	callr	r2
  8119f8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8119fc:	e0bfff17 	ldw	r2,-4(fp)
  811a00:	1000031e 	bne	r2,zero,811a10 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  811a04:	e13ffd17 	ldw	r4,-12(fp)
  811a08:	08118d00 	call	8118d0 <alt_alarm_stop>
  811a0c:	00000d06 	br	811a44 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  811a10:	e0bffd17 	ldw	r2,-12(fp)
  811a14:	10c00217 	ldw	r3,8(r2)
  811a18:	e0bfff17 	ldw	r2,-4(fp)
  811a1c:	1887883a 	add	r3,r3,r2
  811a20:	e0bffd17 	ldw	r2,-12(fp)
  811a24:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  811a28:	e0bffd17 	ldw	r2,-12(fp)
  811a2c:	10c00217 	ldw	r3,8(r2)
  811a30:	d0a75417 	ldw	r2,-25264(gp)
  811a34:	1880032e 	bgeu	r3,r2,811a44 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  811a38:	e0bffd17 	ldw	r2,-12(fp)
  811a3c:	00c00044 	movi	r3,1
  811a40:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  811a44:	e0bffe17 	ldw	r2,-8(fp)
  811a48:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811a4c:	e0fffd17 	ldw	r3,-12(fp)
  811a50:	d0a00e04 	addi	r2,gp,-32712
  811a54:	18bfcf1e 	bne	r3,r2,811994 <__alt_mem_onchip_mem+0xff809994>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  811a58:	0001883a 	nop
}
  811a5c:	0001883a 	nop
  811a60:	e037883a 	mov	sp,fp
  811a64:	dfc00117 	ldw	ra,4(sp)
  811a68:	df000017 	ldw	fp,0(sp)
  811a6c:	dec00204 	addi	sp,sp,8
  811a70:	f800283a 	ret

00811a74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811a74:	defffe04 	addi	sp,sp,-8
  811a78:	dfc00115 	stw	ra,4(sp)
  811a7c:	df000015 	stw	fp,0(sp)
  811a80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811a84:	d0a00b17 	ldw	r2,-32724(gp)
  811a88:	10000326 	beq	r2,zero,811a98 <alt_get_errno+0x24>
  811a8c:	d0a00b17 	ldw	r2,-32724(gp)
  811a90:	103ee83a 	callr	r2
  811a94:	00000106 	br	811a9c <alt_get_errno+0x28>
  811a98:	d0a74e04 	addi	r2,gp,-25288
}
  811a9c:	e037883a 	mov	sp,fp
  811aa0:	dfc00117 	ldw	ra,4(sp)
  811aa4:	df000017 	ldw	fp,0(sp)
  811aa8:	dec00204 	addi	sp,sp,8
  811aac:	f800283a 	ret

00811ab0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  811ab0:	defff904 	addi	sp,sp,-28
  811ab4:	dfc00615 	stw	ra,24(sp)
  811ab8:	df000515 	stw	fp,20(sp)
  811abc:	df000504 	addi	fp,sp,20
  811ac0:	e13ffd15 	stw	r4,-12(fp)
  811ac4:	e17ffe15 	stw	r5,-8(fp)
  811ac8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811acc:	e0bffd17 	ldw	r2,-12(fp)
  811ad0:	10000616 	blt	r2,zero,811aec <write+0x3c>
  811ad4:	e0bffd17 	ldw	r2,-12(fp)
  811ad8:	10c00324 	muli	r3,r2,12
  811adc:	00802074 	movhi	r2,129
  811ae0:	1097ca04 	addi	r2,r2,24360
  811ae4:	1885883a 	add	r2,r3,r2
  811ae8:	00000106 	br	811af0 <write+0x40>
  811aec:	0005883a 	mov	r2,zero
  811af0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  811af4:	e0bffb17 	ldw	r2,-20(fp)
  811af8:	10002126 	beq	r2,zero,811b80 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  811afc:	e0bffb17 	ldw	r2,-20(fp)
  811b00:	10800217 	ldw	r2,8(r2)
  811b04:	108000cc 	andi	r2,r2,3
  811b08:	10001826 	beq	r2,zero,811b6c <write+0xbc>
  811b0c:	e0bffb17 	ldw	r2,-20(fp)
  811b10:	10800017 	ldw	r2,0(r2)
  811b14:	10800617 	ldw	r2,24(r2)
  811b18:	10001426 	beq	r2,zero,811b6c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  811b1c:	e0bffb17 	ldw	r2,-20(fp)
  811b20:	10800017 	ldw	r2,0(r2)
  811b24:	10800617 	ldw	r2,24(r2)
  811b28:	e0ffff17 	ldw	r3,-4(fp)
  811b2c:	180d883a 	mov	r6,r3
  811b30:	e17ffe17 	ldw	r5,-8(fp)
  811b34:	e13ffb17 	ldw	r4,-20(fp)
  811b38:	103ee83a 	callr	r2
  811b3c:	e0bffc15 	stw	r2,-16(fp)
  811b40:	e0bffc17 	ldw	r2,-16(fp)
  811b44:	1000070e 	bge	r2,zero,811b64 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  811b48:	0811a740 	call	811a74 <alt_get_errno>
  811b4c:	1007883a 	mov	r3,r2
  811b50:	e0bffc17 	ldw	r2,-16(fp)
  811b54:	0085c83a 	sub	r2,zero,r2
  811b58:	18800015 	stw	r2,0(r3)
        return -1;
  811b5c:	00bfffc4 	movi	r2,-1
  811b60:	00000c06 	br	811b94 <write+0xe4>
      }
      return rval;
  811b64:	e0bffc17 	ldw	r2,-16(fp)
  811b68:	00000a06 	br	811b94 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  811b6c:	0811a740 	call	811a74 <alt_get_errno>
  811b70:	1007883a 	mov	r3,r2
  811b74:	00800344 	movi	r2,13
  811b78:	18800015 	stw	r2,0(r3)
  811b7c:	00000406 	br	811b90 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  811b80:	0811a740 	call	811a74 <alt_get_errno>
  811b84:	1007883a 	mov	r3,r2
  811b88:	00801444 	movi	r2,81
  811b8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811b90:	00bfffc4 	movi	r2,-1
}
  811b94:	e037883a 	mov	sp,fp
  811b98:	dfc00117 	ldw	ra,4(sp)
  811b9c:	df000017 	ldw	fp,0(sp)
  811ba0:	dec00204 	addi	sp,sp,8
  811ba4:	f800283a 	ret

00811ba8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  811ba8:	defffd04 	addi	sp,sp,-12
  811bac:	dfc00215 	stw	ra,8(sp)
  811bb0:	df000115 	stw	fp,4(sp)
  811bb4:	df000104 	addi	fp,sp,4
  811bb8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  811bbc:	d1600804 	addi	r5,gp,-32736
  811bc0:	e13fff17 	ldw	r4,-4(fp)
  811bc4:	08140400 	call	814040 <alt_dev_llist_insert>
}
  811bc8:	e037883a 	mov	sp,fp
  811bcc:	dfc00117 	ldw	ra,4(sp)
  811bd0:	df000017 	ldw	fp,0(sp)
  811bd4:	dec00204 	addi	sp,sp,8
  811bd8:	f800283a 	ret

00811bdc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  811bdc:	defffd04 	addi	sp,sp,-12
  811be0:	dfc00215 	stw	ra,8(sp)
  811be4:	df000115 	stw	fp,4(sp)
  811be8:	df000104 	addi	fp,sp,4
  811bec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  811bf0:	081483c0 	call	81483c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  811bf4:	00800044 	movi	r2,1
  811bf8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  811bfc:	0001883a 	nop
  811c00:	e037883a 	mov	sp,fp
  811c04:	dfc00117 	ldw	ra,4(sp)
  811c08:	df000017 	ldw	fp,0(sp)
  811c0c:	dec00204 	addi	sp,sp,8
  811c10:	f800283a 	ret

00811c14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  811c14:	defffe04 	addi	sp,sp,-8
  811c18:	dfc00115 	stw	ra,4(sp)
  811c1c:	df000015 	stw	fp,0(sp)
  811c20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  811c24:	01c0fa04 	movi	r7,1000
  811c28:	01800084 	movi	r6,2
  811c2c:	000b883a 	mov	r5,zero
  811c30:	01004074 	movhi	r4,257
  811c34:	21040804 	addi	r4,r4,4128
  811c38:	08136680 	call	813668 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  811c3c:	01800044 	movi	r6,1
  811c40:	000b883a 	mov	r5,zero
  811c44:	01002074 	movhi	r4,129
  811c48:	21183404 	addi	r4,r4,24784
  811c4c:	0811e100 	call	811e10 <altera_avalon_jtag_uart_init>
  811c50:	01002074 	movhi	r4,129
  811c54:	21182a04 	addi	r4,r4,24744
  811c58:	0811ba80 	call	811ba8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  811c5c:	01002074 	movhi	r4,129
  811c60:	211c4c04 	addi	r4,r4,28976
  811c64:	081345c0 	call	81345c <altera_avalon_lcd_16207_init>
  811c68:	01002074 	movhi	r4,129
  811c6c:	211c4204 	addi	r4,r4,28936
  811c70:	0811ba80 	call	811ba8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  811c74:	000d883a 	mov	r6,zero
  811c78:	000b883a 	mov	r5,zero
  811c7c:	01002074 	movhi	r4,129
  811c80:	211c9404 	addi	r4,r4,29264
  811c84:	08137f40 	call	8137f4 <altera_avalon_uart_init>
  811c88:	01002074 	movhi	r4,129
  811c8c:	211c8a04 	addi	r4,r4,29224
  811c90:	0811ba80 	call	811ba8 <alt_dev_reg>
}
  811c94:	0001883a 	nop
  811c98:	e037883a 	mov	sp,fp
  811c9c:	dfc00117 	ldw	ra,4(sp)
  811ca0:	df000017 	ldw	fp,0(sp)
  811ca4:	dec00204 	addi	sp,sp,8
  811ca8:	f800283a 	ret

00811cac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811cac:	defffa04 	addi	sp,sp,-24
  811cb0:	dfc00515 	stw	ra,20(sp)
  811cb4:	df000415 	stw	fp,16(sp)
  811cb8:	df000404 	addi	fp,sp,16
  811cbc:	e13ffd15 	stw	r4,-12(fp)
  811cc0:	e17ffe15 	stw	r5,-8(fp)
  811cc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811cc8:	e0bffd17 	ldw	r2,-12(fp)
  811ccc:	10800017 	ldw	r2,0(r2)
  811cd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  811cd4:	e0bffc17 	ldw	r2,-16(fp)
  811cd8:	10c00a04 	addi	r3,r2,40
  811cdc:	e0bffd17 	ldw	r2,-12(fp)
  811ce0:	10800217 	ldw	r2,8(r2)
  811ce4:	100f883a 	mov	r7,r2
  811ce8:	e1bfff17 	ldw	r6,-4(fp)
  811cec:	e17ffe17 	ldw	r5,-8(fp)
  811cf0:	1809883a 	mov	r4,r3
  811cf4:	08122d40 	call	8122d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  811cf8:	e037883a 	mov	sp,fp
  811cfc:	dfc00117 	ldw	ra,4(sp)
  811d00:	df000017 	ldw	fp,0(sp)
  811d04:	dec00204 	addi	sp,sp,8
  811d08:	f800283a 	ret

00811d0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811d0c:	defffa04 	addi	sp,sp,-24
  811d10:	dfc00515 	stw	ra,20(sp)
  811d14:	df000415 	stw	fp,16(sp)
  811d18:	df000404 	addi	fp,sp,16
  811d1c:	e13ffd15 	stw	r4,-12(fp)
  811d20:	e17ffe15 	stw	r5,-8(fp)
  811d24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811d28:	e0bffd17 	ldw	r2,-12(fp)
  811d2c:	10800017 	ldw	r2,0(r2)
  811d30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  811d34:	e0bffc17 	ldw	r2,-16(fp)
  811d38:	10c00a04 	addi	r3,r2,40
  811d3c:	e0bffd17 	ldw	r2,-12(fp)
  811d40:	10800217 	ldw	r2,8(r2)
  811d44:	100f883a 	mov	r7,r2
  811d48:	e1bfff17 	ldw	r6,-4(fp)
  811d4c:	e17ffe17 	ldw	r5,-8(fp)
  811d50:	1809883a 	mov	r4,r3
  811d54:	08124f00 	call	8124f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  811d58:	e037883a 	mov	sp,fp
  811d5c:	dfc00117 	ldw	ra,4(sp)
  811d60:	df000017 	ldw	fp,0(sp)
  811d64:	dec00204 	addi	sp,sp,8
  811d68:	f800283a 	ret

00811d6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  811d6c:	defffc04 	addi	sp,sp,-16
  811d70:	dfc00315 	stw	ra,12(sp)
  811d74:	df000215 	stw	fp,8(sp)
  811d78:	df000204 	addi	fp,sp,8
  811d7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811d80:	e0bfff17 	ldw	r2,-4(fp)
  811d84:	10800017 	ldw	r2,0(r2)
  811d88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  811d8c:	e0bffe17 	ldw	r2,-8(fp)
  811d90:	10c00a04 	addi	r3,r2,40
  811d94:	e0bfff17 	ldw	r2,-4(fp)
  811d98:	10800217 	ldw	r2,8(r2)
  811d9c:	100b883a 	mov	r5,r2
  811da0:	1809883a 	mov	r4,r3
  811da4:	081217c0 	call	81217c <altera_avalon_jtag_uart_close>
}
  811da8:	e037883a 	mov	sp,fp
  811dac:	dfc00117 	ldw	ra,4(sp)
  811db0:	df000017 	ldw	fp,0(sp)
  811db4:	dec00204 	addi	sp,sp,8
  811db8:	f800283a 	ret

00811dbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  811dbc:	defffa04 	addi	sp,sp,-24
  811dc0:	dfc00515 	stw	ra,20(sp)
  811dc4:	df000415 	stw	fp,16(sp)
  811dc8:	df000404 	addi	fp,sp,16
  811dcc:	e13ffd15 	stw	r4,-12(fp)
  811dd0:	e17ffe15 	stw	r5,-8(fp)
  811dd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  811dd8:	e0bffd17 	ldw	r2,-12(fp)
  811ddc:	10800017 	ldw	r2,0(r2)
  811de0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  811de4:	e0bffc17 	ldw	r2,-16(fp)
  811de8:	10800a04 	addi	r2,r2,40
  811dec:	e1bfff17 	ldw	r6,-4(fp)
  811df0:	e17ffe17 	ldw	r5,-8(fp)
  811df4:	1009883a 	mov	r4,r2
  811df8:	08121e40 	call	8121e4 <altera_avalon_jtag_uart_ioctl>
}
  811dfc:	e037883a 	mov	sp,fp
  811e00:	dfc00117 	ldw	ra,4(sp)
  811e04:	df000017 	ldw	fp,0(sp)
  811e08:	dec00204 	addi	sp,sp,8
  811e0c:	f800283a 	ret

00811e10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  811e10:	defffa04 	addi	sp,sp,-24
  811e14:	dfc00515 	stw	ra,20(sp)
  811e18:	df000415 	stw	fp,16(sp)
  811e1c:	df000404 	addi	fp,sp,16
  811e20:	e13ffd15 	stw	r4,-12(fp)
  811e24:	e17ffe15 	stw	r5,-8(fp)
  811e28:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811e2c:	e0bffd17 	ldw	r2,-12(fp)
  811e30:	00c00044 	movi	r3,1
  811e34:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  811e38:	e0bffd17 	ldw	r2,-12(fp)
  811e3c:	10800017 	ldw	r2,0(r2)
  811e40:	10800104 	addi	r2,r2,4
  811e44:	1007883a 	mov	r3,r2
  811e48:	e0bffd17 	ldw	r2,-12(fp)
  811e4c:	10800817 	ldw	r2,32(r2)
  811e50:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  811e54:	e0bffe17 	ldw	r2,-8(fp)
  811e58:	e0ffff17 	ldw	r3,-4(fp)
  811e5c:	d8000015 	stw	zero,0(sp)
  811e60:	e1fffd17 	ldw	r7,-12(fp)
  811e64:	01802074 	movhi	r6,129
  811e68:	3187b404 	addi	r6,r6,7888
  811e6c:	180b883a 	mov	r5,r3
  811e70:	1009883a 	mov	r4,r2
  811e74:	08141d80 	call	8141d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  811e78:	e0bffd17 	ldw	r2,-12(fp)
  811e7c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  811e80:	e0bffd17 	ldw	r2,-12(fp)
  811e84:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  811e88:	d0e75317 	ldw	r3,-25268(gp)
  811e8c:	e1fffd17 	ldw	r7,-12(fp)
  811e90:	01802074 	movhi	r6,129
  811e94:	31883704 	addi	r6,r6,8412
  811e98:	180b883a 	mov	r5,r3
  811e9c:	1009883a 	mov	r4,r2
  811ea0:	0810e140 	call	810e14 <alt_alarm_start>
  811ea4:	1000040e 	bge	r2,zero,811eb8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  811ea8:	e0fffd17 	ldw	r3,-12(fp)
  811eac:	00a00034 	movhi	r2,32768
  811eb0:	10bfffc4 	addi	r2,r2,-1
  811eb4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  811eb8:	0001883a 	nop
  811ebc:	e037883a 	mov	sp,fp
  811ec0:	dfc00117 	ldw	ra,4(sp)
  811ec4:	df000017 	ldw	fp,0(sp)
  811ec8:	dec00204 	addi	sp,sp,8
  811ecc:	f800283a 	ret

00811ed0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  811ed0:	defff804 	addi	sp,sp,-32
  811ed4:	df000715 	stw	fp,28(sp)
  811ed8:	df000704 	addi	fp,sp,28
  811edc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  811ee0:	e0bfff17 	ldw	r2,-4(fp)
  811ee4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  811ee8:	e0bffb17 	ldw	r2,-20(fp)
  811eec:	10800017 	ldw	r2,0(r2)
  811ef0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811ef4:	e0bffc17 	ldw	r2,-16(fp)
  811ef8:	10800104 	addi	r2,r2,4
  811efc:	10800037 	ldwio	r2,0(r2)
  811f00:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811f04:	e0bffd17 	ldw	r2,-12(fp)
  811f08:	1080c00c 	andi	r2,r2,768
  811f0c:	10006d26 	beq	r2,zero,8120c4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  811f10:	e0bffd17 	ldw	r2,-12(fp)
  811f14:	1080400c 	andi	r2,r2,256
  811f18:	10003526 	beq	r2,zero,811ff0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  811f1c:	00800074 	movhi	r2,1
  811f20:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811f24:	e0bffb17 	ldw	r2,-20(fp)
  811f28:	10800a17 	ldw	r2,40(r2)
  811f2c:	10800044 	addi	r2,r2,1
  811f30:	1081ffcc 	andi	r2,r2,2047
  811f34:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  811f38:	e0bffb17 	ldw	r2,-20(fp)
  811f3c:	10c00b17 	ldw	r3,44(r2)
  811f40:	e0bffe17 	ldw	r2,-8(fp)
  811f44:	18801526 	beq	r3,r2,811f9c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  811f48:	e0bffc17 	ldw	r2,-16(fp)
  811f4c:	10800037 	ldwio	r2,0(r2)
  811f50:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  811f54:	e0bff917 	ldw	r2,-28(fp)
  811f58:	10a0000c 	andi	r2,r2,32768
  811f5c:	10001126 	beq	r2,zero,811fa4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  811f60:	e0bffb17 	ldw	r2,-20(fp)
  811f64:	10800a17 	ldw	r2,40(r2)
  811f68:	e0fff917 	ldw	r3,-28(fp)
  811f6c:	1809883a 	mov	r4,r3
  811f70:	e0fffb17 	ldw	r3,-20(fp)
  811f74:	1885883a 	add	r2,r3,r2
  811f78:	10800e04 	addi	r2,r2,56
  811f7c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811f80:	e0bffb17 	ldw	r2,-20(fp)
  811f84:	10800a17 	ldw	r2,40(r2)
  811f88:	10800044 	addi	r2,r2,1
  811f8c:	10c1ffcc 	andi	r3,r2,2047
  811f90:	e0bffb17 	ldw	r2,-20(fp)
  811f94:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  811f98:	003fe206 	br	811f24 <__alt_mem_onchip_mem+0xff809f24>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  811f9c:	0001883a 	nop
  811fa0:	00000106 	br	811fa8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  811fa4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  811fa8:	e0bff917 	ldw	r2,-28(fp)
  811fac:	10bfffec 	andhi	r2,r2,65535
  811fb0:	10000f26 	beq	r2,zero,811ff0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811fb4:	e0bffb17 	ldw	r2,-20(fp)
  811fb8:	10c00817 	ldw	r3,32(r2)
  811fbc:	00bfff84 	movi	r2,-2
  811fc0:	1886703a 	and	r3,r3,r2
  811fc4:	e0bffb17 	ldw	r2,-20(fp)
  811fc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  811fcc:	e0bffc17 	ldw	r2,-16(fp)
  811fd0:	10800104 	addi	r2,r2,4
  811fd4:	1007883a 	mov	r3,r2
  811fd8:	e0bffb17 	ldw	r2,-20(fp)
  811fdc:	10800817 	ldw	r2,32(r2)
  811fe0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811fe4:	e0bffc17 	ldw	r2,-16(fp)
  811fe8:	10800104 	addi	r2,r2,4
  811fec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  811ff0:	e0bffd17 	ldw	r2,-12(fp)
  811ff4:	1080800c 	andi	r2,r2,512
  811ff8:	103fbe26 	beq	r2,zero,811ef4 <__alt_mem_onchip_mem+0xff809ef4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  811ffc:	e0bffd17 	ldw	r2,-12(fp)
  812000:	1004d43a 	srli	r2,r2,16
  812004:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  812008:	00001406 	br	81205c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  81200c:	e0bffc17 	ldw	r2,-16(fp)
  812010:	e0fffb17 	ldw	r3,-20(fp)
  812014:	18c00d17 	ldw	r3,52(r3)
  812018:	e13ffb17 	ldw	r4,-20(fp)
  81201c:	20c7883a 	add	r3,r4,r3
  812020:	18c20e04 	addi	r3,r3,2104
  812024:	18c00003 	ldbu	r3,0(r3)
  812028:	18c03fcc 	andi	r3,r3,255
  81202c:	18c0201c 	xori	r3,r3,128
  812030:	18ffe004 	addi	r3,r3,-128
  812034:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812038:	e0bffb17 	ldw	r2,-20(fp)
  81203c:	10800d17 	ldw	r2,52(r2)
  812040:	10800044 	addi	r2,r2,1
  812044:	10c1ffcc 	andi	r3,r2,2047
  812048:	e0bffb17 	ldw	r2,-20(fp)
  81204c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  812050:	e0bffa17 	ldw	r2,-24(fp)
  812054:	10bfffc4 	addi	r2,r2,-1
  812058:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  81205c:	e0bffa17 	ldw	r2,-24(fp)
  812060:	10000526 	beq	r2,zero,812078 <altera_avalon_jtag_uart_irq+0x1a8>
  812064:	e0bffb17 	ldw	r2,-20(fp)
  812068:	10c00d17 	ldw	r3,52(r2)
  81206c:	e0bffb17 	ldw	r2,-20(fp)
  812070:	10800c17 	ldw	r2,48(r2)
  812074:	18bfe51e 	bne	r3,r2,81200c <__alt_mem_onchip_mem+0xff80a00c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  812078:	e0bffa17 	ldw	r2,-24(fp)
  81207c:	103f9d26 	beq	r2,zero,811ef4 <__alt_mem_onchip_mem+0xff809ef4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812080:	e0bffb17 	ldw	r2,-20(fp)
  812084:	10c00817 	ldw	r3,32(r2)
  812088:	00bfff44 	movi	r2,-3
  81208c:	1886703a 	and	r3,r3,r2
  812090:	e0bffb17 	ldw	r2,-20(fp)
  812094:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812098:	e0bffb17 	ldw	r2,-20(fp)
  81209c:	10800017 	ldw	r2,0(r2)
  8120a0:	10800104 	addi	r2,r2,4
  8120a4:	1007883a 	mov	r3,r2
  8120a8:	e0bffb17 	ldw	r2,-20(fp)
  8120ac:	10800817 	ldw	r2,32(r2)
  8120b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8120b4:	e0bffc17 	ldw	r2,-16(fp)
  8120b8:	10800104 	addi	r2,r2,4
  8120bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8120c0:	003f8c06 	br	811ef4 <__alt_mem_onchip_mem+0xff809ef4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  8120c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  8120c8:	0001883a 	nop
  8120cc:	e037883a 	mov	sp,fp
  8120d0:	df000017 	ldw	fp,0(sp)
  8120d4:	dec00104 	addi	sp,sp,4
  8120d8:	f800283a 	ret

008120dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8120dc:	defff804 	addi	sp,sp,-32
  8120e0:	df000715 	stw	fp,28(sp)
  8120e4:	df000704 	addi	fp,sp,28
  8120e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8120ec:	e0bffb17 	ldw	r2,-20(fp)
  8120f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8120f4:	e0bff917 	ldw	r2,-28(fp)
  8120f8:	10800017 	ldw	r2,0(r2)
  8120fc:	10800104 	addi	r2,r2,4
  812100:	10800037 	ldwio	r2,0(r2)
  812104:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  812108:	e0bffa17 	ldw	r2,-24(fp)
  81210c:	1081000c 	andi	r2,r2,1024
  812110:	10000b26 	beq	r2,zero,812140 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  812114:	e0bff917 	ldw	r2,-28(fp)
  812118:	10800017 	ldw	r2,0(r2)
  81211c:	10800104 	addi	r2,r2,4
  812120:	1007883a 	mov	r3,r2
  812124:	e0bff917 	ldw	r2,-28(fp)
  812128:	10800817 	ldw	r2,32(r2)
  81212c:	10810014 	ori	r2,r2,1024
  812130:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  812134:	e0bff917 	ldw	r2,-28(fp)
  812138:	10000915 	stw	zero,36(r2)
  81213c:	00000a06 	br	812168 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  812140:	e0bff917 	ldw	r2,-28(fp)
  812144:	10c00917 	ldw	r3,36(r2)
  812148:	00a00034 	movhi	r2,32768
  81214c:	10bfff04 	addi	r2,r2,-4
  812150:	10c00536 	bltu	r2,r3,812168 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  812154:	e0bff917 	ldw	r2,-28(fp)
  812158:	10800917 	ldw	r2,36(r2)
  81215c:	10c00044 	addi	r3,r2,1
  812160:	e0bff917 	ldw	r2,-28(fp)
  812164:	10c00915 	stw	r3,36(r2)
  812168:	d0a75317 	ldw	r2,-25268(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  81216c:	e037883a 	mov	sp,fp
  812170:	df000017 	ldw	fp,0(sp)
  812174:	dec00104 	addi	sp,sp,4
  812178:	f800283a 	ret

0081217c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  81217c:	defffd04 	addi	sp,sp,-12
  812180:	df000215 	stw	fp,8(sp)
  812184:	df000204 	addi	fp,sp,8
  812188:	e13ffe15 	stw	r4,-8(fp)
  81218c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  812190:	00000506 	br	8121a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  812194:	e0bfff17 	ldw	r2,-4(fp)
  812198:	1090000c 	andi	r2,r2,16384
  81219c:	10000226 	beq	r2,zero,8121a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8121a0:	00bffd44 	movi	r2,-11
  8121a4:	00000b06 	br	8121d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8121a8:	e0bffe17 	ldw	r2,-8(fp)
  8121ac:	10c00d17 	ldw	r3,52(r2)
  8121b0:	e0bffe17 	ldw	r2,-8(fp)
  8121b4:	10800c17 	ldw	r2,48(r2)
  8121b8:	18800526 	beq	r3,r2,8121d0 <altera_avalon_jtag_uart_close+0x54>
  8121bc:	e0bffe17 	ldw	r2,-8(fp)
  8121c0:	10c00917 	ldw	r3,36(r2)
  8121c4:	e0bffe17 	ldw	r2,-8(fp)
  8121c8:	10800117 	ldw	r2,4(r2)
  8121cc:	18bff136 	bltu	r3,r2,812194 <__alt_mem_onchip_mem+0xff80a194>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8121d0:	0005883a 	mov	r2,zero
}
  8121d4:	e037883a 	mov	sp,fp
  8121d8:	df000017 	ldw	fp,0(sp)
  8121dc:	dec00104 	addi	sp,sp,4
  8121e0:	f800283a 	ret

008121e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8121e4:	defffa04 	addi	sp,sp,-24
  8121e8:	df000515 	stw	fp,20(sp)
  8121ec:	df000504 	addi	fp,sp,20
  8121f0:	e13ffd15 	stw	r4,-12(fp)
  8121f4:	e17ffe15 	stw	r5,-8(fp)
  8121f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  8121fc:	00bff9c4 	movi	r2,-25
  812200:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  812204:	e0bffe17 	ldw	r2,-8(fp)
  812208:	10da8060 	cmpeqi	r3,r2,27137
  81220c:	1800031e 	bne	r3,zero,81221c <altera_avalon_jtag_uart_ioctl+0x38>
  812210:	109a80a0 	cmpeqi	r2,r2,27138
  812214:	1000181e 	bne	r2,zero,812278 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  812218:	00002906 	br	8122c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  81221c:	e0bffd17 	ldw	r2,-12(fp)
  812220:	10c00117 	ldw	r3,4(r2)
  812224:	00a00034 	movhi	r2,32768
  812228:	10bfffc4 	addi	r2,r2,-1
  81222c:	18802126 	beq	r3,r2,8122b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  812230:	e0bfff17 	ldw	r2,-4(fp)
  812234:	10800017 	ldw	r2,0(r2)
  812238:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81223c:	e0bffc17 	ldw	r2,-16(fp)
  812240:	10800090 	cmplti	r2,r2,2
  812244:	1000061e 	bne	r2,zero,812260 <altera_avalon_jtag_uart_ioctl+0x7c>
  812248:	e0fffc17 	ldw	r3,-16(fp)
  81224c:	00a00034 	movhi	r2,32768
  812250:	10bfffc4 	addi	r2,r2,-1
  812254:	18800226 	beq	r3,r2,812260 <altera_avalon_jtag_uart_ioctl+0x7c>
  812258:	e0bffc17 	ldw	r2,-16(fp)
  81225c:	00000206 	br	812268 <altera_avalon_jtag_uart_ioctl+0x84>
  812260:	00a00034 	movhi	r2,32768
  812264:	10bfff84 	addi	r2,r2,-2
  812268:	e0fffd17 	ldw	r3,-12(fp)
  81226c:	18800115 	stw	r2,4(r3)
      rc = 0;
  812270:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  812274:	00000f06 	br	8122b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  812278:	e0bffd17 	ldw	r2,-12(fp)
  81227c:	10c00117 	ldw	r3,4(r2)
  812280:	00a00034 	movhi	r2,32768
  812284:	10bfffc4 	addi	r2,r2,-1
  812288:	18800c26 	beq	r3,r2,8122bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81228c:	e0bffd17 	ldw	r2,-12(fp)
  812290:	10c00917 	ldw	r3,36(r2)
  812294:	e0bffd17 	ldw	r2,-12(fp)
  812298:	10800117 	ldw	r2,4(r2)
  81229c:	1885803a 	cmpltu	r2,r3,r2
  8122a0:	10c03fcc 	andi	r3,r2,255
  8122a4:	e0bfff17 	ldw	r2,-4(fp)
  8122a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8122ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8122b0:	00000206 	br	8122bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  8122b4:	0001883a 	nop
  8122b8:	00000106 	br	8122c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  8122bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8122c0:	e0bffb17 	ldw	r2,-20(fp)
}
  8122c4:	e037883a 	mov	sp,fp
  8122c8:	df000017 	ldw	fp,0(sp)
  8122cc:	dec00104 	addi	sp,sp,4
  8122d0:	f800283a 	ret

008122d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8122d4:	defff304 	addi	sp,sp,-52
  8122d8:	dfc00c15 	stw	ra,48(sp)
  8122dc:	df000b15 	stw	fp,44(sp)
  8122e0:	df000b04 	addi	fp,sp,44
  8122e4:	e13ffc15 	stw	r4,-16(fp)
  8122e8:	e17ffd15 	stw	r5,-12(fp)
  8122ec:	e1bffe15 	stw	r6,-8(fp)
  8122f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  8122f4:	e0bffd17 	ldw	r2,-12(fp)
  8122f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8122fc:	00004706 	br	81241c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  812300:	e0bffc17 	ldw	r2,-16(fp)
  812304:	10800a17 	ldw	r2,40(r2)
  812308:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  81230c:	e0bffc17 	ldw	r2,-16(fp)
  812310:	10800b17 	ldw	r2,44(r2)
  812314:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  812318:	e0fff717 	ldw	r3,-36(fp)
  81231c:	e0bff817 	ldw	r2,-32(fp)
  812320:	18800536 	bltu	r3,r2,812338 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  812324:	e0fff717 	ldw	r3,-36(fp)
  812328:	e0bff817 	ldw	r2,-32(fp)
  81232c:	1885c83a 	sub	r2,r3,r2
  812330:	e0bff615 	stw	r2,-40(fp)
  812334:	00000406 	br	812348 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  812338:	00c20004 	movi	r3,2048
  81233c:	e0bff817 	ldw	r2,-32(fp)
  812340:	1885c83a 	sub	r2,r3,r2
  812344:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  812348:	e0bff617 	ldw	r2,-40(fp)
  81234c:	10001e26 	beq	r2,zero,8123c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  812350:	e0fffe17 	ldw	r3,-8(fp)
  812354:	e0bff617 	ldw	r2,-40(fp)
  812358:	1880022e 	bgeu	r3,r2,812364 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  81235c:	e0bffe17 	ldw	r2,-8(fp)
  812360:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  812364:	e0bffc17 	ldw	r2,-16(fp)
  812368:	10c00e04 	addi	r3,r2,56
  81236c:	e0bff817 	ldw	r2,-32(fp)
  812370:	1885883a 	add	r2,r3,r2
  812374:	e1bff617 	ldw	r6,-40(fp)
  812378:	100b883a 	mov	r5,r2
  81237c:	e13ff517 	ldw	r4,-44(fp)
  812380:	080bb5c0 	call	80bb5c <memcpy>
      ptr   += n;
  812384:	e0fff517 	ldw	r3,-44(fp)
  812388:	e0bff617 	ldw	r2,-40(fp)
  81238c:	1885883a 	add	r2,r3,r2
  812390:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  812394:	e0fffe17 	ldw	r3,-8(fp)
  812398:	e0bff617 	ldw	r2,-40(fp)
  81239c:	1885c83a 	sub	r2,r3,r2
  8123a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8123a4:	e0fff817 	ldw	r3,-32(fp)
  8123a8:	e0bff617 	ldw	r2,-40(fp)
  8123ac:	1885883a 	add	r2,r3,r2
  8123b0:	10c1ffcc 	andi	r3,r2,2047
  8123b4:	e0bffc17 	ldw	r2,-16(fp)
  8123b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8123bc:	e0bffe17 	ldw	r2,-8(fp)
  8123c0:	00bfcf16 	blt	zero,r2,812300 <__alt_mem_onchip_mem+0xff80a300>
  8123c4:	00000106 	br	8123cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  8123c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8123cc:	e0fff517 	ldw	r3,-44(fp)
  8123d0:	e0bffd17 	ldw	r2,-12(fp)
  8123d4:	1880141e 	bne	r3,r2,812428 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8123d8:	e0bfff17 	ldw	r2,-4(fp)
  8123dc:	1090000c 	andi	r2,r2,16384
  8123e0:	1000131e 	bne	r2,zero,812430 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8123e4:	0001883a 	nop
  8123e8:	e0bffc17 	ldw	r2,-16(fp)
  8123ec:	10c00a17 	ldw	r3,40(r2)
  8123f0:	e0bff717 	ldw	r2,-36(fp)
  8123f4:	1880051e 	bne	r3,r2,81240c <altera_avalon_jtag_uart_read+0x138>
  8123f8:	e0bffc17 	ldw	r2,-16(fp)
  8123fc:	10c00917 	ldw	r3,36(r2)
  812400:	e0bffc17 	ldw	r2,-16(fp)
  812404:	10800117 	ldw	r2,4(r2)
  812408:	18bff736 	bltu	r3,r2,8123e8 <__alt_mem_onchip_mem+0xff80a3e8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81240c:	e0bffc17 	ldw	r2,-16(fp)
  812410:	10c00a17 	ldw	r3,40(r2)
  812414:	e0bff717 	ldw	r2,-36(fp)
  812418:	18800726 	beq	r3,r2,812438 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81241c:	e0bffe17 	ldw	r2,-8(fp)
  812420:	00bfb716 	blt	zero,r2,812300 <__alt_mem_onchip_mem+0xff80a300>
  812424:	00000506 	br	81243c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  812428:	0001883a 	nop
  81242c:	00000306 	br	81243c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  812430:	0001883a 	nop
  812434:	00000106 	br	81243c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  812438:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  81243c:	e0fff517 	ldw	r3,-44(fp)
  812440:	e0bffd17 	ldw	r2,-12(fp)
  812444:	18801826 	beq	r3,r2,8124a8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812448:	0005303a 	rdctl	r2,status
  81244c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812450:	e0fffb17 	ldw	r3,-20(fp)
  812454:	00bfff84 	movi	r2,-2
  812458:	1884703a 	and	r2,r3,r2
  81245c:	1001703a 	wrctl	status,r2
  
  return context;
  812460:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  812464:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812468:	e0bffc17 	ldw	r2,-16(fp)
  81246c:	10800817 	ldw	r2,32(r2)
  812470:	10c00054 	ori	r3,r2,1
  812474:	e0bffc17 	ldw	r2,-16(fp)
  812478:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81247c:	e0bffc17 	ldw	r2,-16(fp)
  812480:	10800017 	ldw	r2,0(r2)
  812484:	10800104 	addi	r2,r2,4
  812488:	1007883a 	mov	r3,r2
  81248c:	e0bffc17 	ldw	r2,-16(fp)
  812490:	10800817 	ldw	r2,32(r2)
  812494:	18800035 	stwio	r2,0(r3)
  812498:	e0bffa17 	ldw	r2,-24(fp)
  81249c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8124a0:	e0bff917 	ldw	r2,-28(fp)
  8124a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8124a8:	e0fff517 	ldw	r3,-44(fp)
  8124ac:	e0bffd17 	ldw	r2,-12(fp)
  8124b0:	18800426 	beq	r3,r2,8124c4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  8124b4:	e0fff517 	ldw	r3,-44(fp)
  8124b8:	e0bffd17 	ldw	r2,-12(fp)
  8124bc:	1885c83a 	sub	r2,r3,r2
  8124c0:	00000606 	br	8124dc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  8124c4:	e0bfff17 	ldw	r2,-4(fp)
  8124c8:	1090000c 	andi	r2,r2,16384
  8124cc:	10000226 	beq	r2,zero,8124d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8124d0:	00bffd44 	movi	r2,-11
  8124d4:	00000106 	br	8124dc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  8124d8:	00bffec4 	movi	r2,-5
}
  8124dc:	e037883a 	mov	sp,fp
  8124e0:	dfc00117 	ldw	ra,4(sp)
  8124e4:	df000017 	ldw	fp,0(sp)
  8124e8:	dec00204 	addi	sp,sp,8
  8124ec:	f800283a 	ret

008124f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8124f0:	defff304 	addi	sp,sp,-52
  8124f4:	dfc00c15 	stw	ra,48(sp)
  8124f8:	df000b15 	stw	fp,44(sp)
  8124fc:	df000b04 	addi	fp,sp,44
  812500:	e13ffc15 	stw	r4,-16(fp)
  812504:	e17ffd15 	stw	r5,-12(fp)
  812508:	e1bffe15 	stw	r6,-8(fp)
  81250c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  812510:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  812514:	e0bffd17 	ldw	r2,-12(fp)
  812518:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81251c:	00003706 	br	8125fc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  812520:	e0bffc17 	ldw	r2,-16(fp)
  812524:	10800c17 	ldw	r2,48(r2)
  812528:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  81252c:	e0bffc17 	ldw	r2,-16(fp)
  812530:	10800d17 	ldw	r2,52(r2)
  812534:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  812538:	e0fff917 	ldw	r3,-28(fp)
  81253c:	e0bff517 	ldw	r2,-44(fp)
  812540:	1880062e 	bgeu	r3,r2,81255c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  812544:	e0fff517 	ldw	r3,-44(fp)
  812548:	e0bff917 	ldw	r2,-28(fp)
  81254c:	1885c83a 	sub	r2,r3,r2
  812550:	10bfffc4 	addi	r2,r2,-1
  812554:	e0bff615 	stw	r2,-40(fp)
  812558:	00000b06 	br	812588 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  81255c:	e0bff517 	ldw	r2,-44(fp)
  812560:	10000526 	beq	r2,zero,812578 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  812564:	00c20004 	movi	r3,2048
  812568:	e0bff917 	ldw	r2,-28(fp)
  81256c:	1885c83a 	sub	r2,r3,r2
  812570:	e0bff615 	stw	r2,-40(fp)
  812574:	00000406 	br	812588 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  812578:	00c1ffc4 	movi	r3,2047
  81257c:	e0bff917 	ldw	r2,-28(fp)
  812580:	1885c83a 	sub	r2,r3,r2
  812584:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  812588:	e0bff617 	ldw	r2,-40(fp)
  81258c:	10001e26 	beq	r2,zero,812608 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  812590:	e0fffe17 	ldw	r3,-8(fp)
  812594:	e0bff617 	ldw	r2,-40(fp)
  812598:	1880022e 	bgeu	r3,r2,8125a4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  81259c:	e0bffe17 	ldw	r2,-8(fp)
  8125a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8125a4:	e0bffc17 	ldw	r2,-16(fp)
  8125a8:	10c20e04 	addi	r3,r2,2104
  8125ac:	e0bff917 	ldw	r2,-28(fp)
  8125b0:	1885883a 	add	r2,r3,r2
  8125b4:	e1bff617 	ldw	r6,-40(fp)
  8125b8:	e17ffd17 	ldw	r5,-12(fp)
  8125bc:	1009883a 	mov	r4,r2
  8125c0:	080bb5c0 	call	80bb5c <memcpy>
      ptr   += n;
  8125c4:	e0fffd17 	ldw	r3,-12(fp)
  8125c8:	e0bff617 	ldw	r2,-40(fp)
  8125cc:	1885883a 	add	r2,r3,r2
  8125d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8125d4:	e0fffe17 	ldw	r3,-8(fp)
  8125d8:	e0bff617 	ldw	r2,-40(fp)
  8125dc:	1885c83a 	sub	r2,r3,r2
  8125e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8125e4:	e0fff917 	ldw	r3,-28(fp)
  8125e8:	e0bff617 	ldw	r2,-40(fp)
  8125ec:	1885883a 	add	r2,r3,r2
  8125f0:	10c1ffcc 	andi	r3,r2,2047
  8125f4:	e0bffc17 	ldw	r2,-16(fp)
  8125f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8125fc:	e0bffe17 	ldw	r2,-8(fp)
  812600:	00bfc716 	blt	zero,r2,812520 <__alt_mem_onchip_mem+0xff80a520>
  812604:	00000106 	br	81260c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  812608:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81260c:	0005303a 	rdctl	r2,status
  812610:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812614:	e0fffb17 	ldw	r3,-20(fp)
  812618:	00bfff84 	movi	r2,-2
  81261c:	1884703a 	and	r2,r3,r2
  812620:	1001703a 	wrctl	status,r2
  
  return context;
  812624:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  812628:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81262c:	e0bffc17 	ldw	r2,-16(fp)
  812630:	10800817 	ldw	r2,32(r2)
  812634:	10c00094 	ori	r3,r2,2
  812638:	e0bffc17 	ldw	r2,-16(fp)
  81263c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812640:	e0bffc17 	ldw	r2,-16(fp)
  812644:	10800017 	ldw	r2,0(r2)
  812648:	10800104 	addi	r2,r2,4
  81264c:	1007883a 	mov	r3,r2
  812650:	e0bffc17 	ldw	r2,-16(fp)
  812654:	10800817 	ldw	r2,32(r2)
  812658:	18800035 	stwio	r2,0(r3)
  81265c:	e0bffa17 	ldw	r2,-24(fp)
  812660:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812664:	e0bff817 	ldw	r2,-32(fp)
  812668:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81266c:	e0bffe17 	ldw	r2,-8(fp)
  812670:	0080100e 	bge	zero,r2,8126b4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  812674:	e0bfff17 	ldw	r2,-4(fp)
  812678:	1090000c 	andi	r2,r2,16384
  81267c:	1000101e 	bne	r2,zero,8126c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  812680:	0001883a 	nop
  812684:	e0bffc17 	ldw	r2,-16(fp)
  812688:	10c00d17 	ldw	r3,52(r2)
  81268c:	e0bff517 	ldw	r2,-44(fp)
  812690:	1880051e 	bne	r3,r2,8126a8 <altera_avalon_jtag_uart_write+0x1b8>
  812694:	e0bffc17 	ldw	r2,-16(fp)
  812698:	10c00917 	ldw	r3,36(r2)
  81269c:	e0bffc17 	ldw	r2,-16(fp)
  8126a0:	10800117 	ldw	r2,4(r2)
  8126a4:	18bff736 	bltu	r3,r2,812684 <__alt_mem_onchip_mem+0xff80a684>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8126a8:	e0bffc17 	ldw	r2,-16(fp)
  8126ac:	10800917 	ldw	r2,36(r2)
  8126b0:	1000051e 	bne	r2,zero,8126c8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  8126b4:	e0bffe17 	ldw	r2,-8(fp)
  8126b8:	00bfd016 	blt	zero,r2,8125fc <__alt_mem_onchip_mem+0xff80a5fc>
  8126bc:	00000306 	br	8126cc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8126c0:	0001883a 	nop
  8126c4:	00000106 	br	8126cc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8126c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8126cc:	e0fffd17 	ldw	r3,-12(fp)
  8126d0:	e0bff717 	ldw	r2,-36(fp)
  8126d4:	18800426 	beq	r3,r2,8126e8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8126d8:	e0fffd17 	ldw	r3,-12(fp)
  8126dc:	e0bff717 	ldw	r2,-36(fp)
  8126e0:	1885c83a 	sub	r2,r3,r2
  8126e4:	00000606 	br	812700 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  8126e8:	e0bfff17 	ldw	r2,-4(fp)
  8126ec:	1090000c 	andi	r2,r2,16384
  8126f0:	10000226 	beq	r2,zero,8126fc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  8126f4:	00bffd44 	movi	r2,-11
  8126f8:	00000106 	br	812700 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8126fc:	00bffec4 	movi	r2,-5
}
  812700:	e037883a 	mov	sp,fp
  812704:	dfc00117 	ldw	ra,4(sp)
  812708:	df000017 	ldw	fp,0(sp)
  81270c:	dec00204 	addi	sp,sp,8
  812710:	f800283a 	ret

00812714 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  812714:	defffa04 	addi	sp,sp,-24
  812718:	dfc00515 	stw	ra,20(sp)
  81271c:	df000415 	stw	fp,16(sp)
  812720:	df000404 	addi	fp,sp,16
  812724:	e13ffe15 	stw	r4,-8(fp)
  812728:	2805883a 	mov	r2,r5
  81272c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  812730:	e0bffe17 	ldw	r2,-8(fp)
  812734:	10800017 	ldw	r2,0(r2)
  812738:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  81273c:	008003f4 	movhi	r2,15
  812740:	10909004 	addi	r2,r2,16960
  812744:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812748:	e0bffe17 	ldw	r2,-8(fp)
  81274c:	10800803 	ldbu	r2,32(r2)
  812750:	10803fcc 	andi	r2,r2,255
  812754:	1080201c 	xori	r2,r2,128
  812758:	10bfe004 	addi	r2,r2,-128
  81275c:	1000151e 	bne	r2,zero,8127b4 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812760:	00000906 	br	812788 <lcd_write_command+0x74>
    if (--i == 0)
  812764:	e0bffc17 	ldw	r2,-16(fp)
  812768:	10bfffc4 	addi	r2,r2,-1
  81276c:	e0bffc15 	stw	r2,-16(fp)
  812770:	e0bffc17 	ldw	r2,-16(fp)
  812774:	1000041e 	bne	r2,zero,812788 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  812778:	e0bffe17 	ldw	r2,-8(fp)
  81277c:	00c00044 	movi	r3,1
  812780:	10c00805 	stb	r3,32(r2)
      return;
  812784:	00000c06 	br	8127b8 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812788:	e0bffd17 	ldw	r2,-12(fp)
  81278c:	10800104 	addi	r2,r2,4
  812790:	10800037 	ldwio	r2,0(r2)
  812794:	1080200c 	andi	r2,r2,128
  812798:	103ff21e 	bne	r2,zero,812764 <__alt_mem_onchip_mem+0xff80a764>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  81279c:	01001904 	movi	r4,100
  8127a0:	081480c0 	call	81480c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8127a4:	e0bffd17 	ldw	r2,-12(fp)
  8127a8:	e0ffff03 	ldbu	r3,-4(fp)
  8127ac:	10c00035 	stwio	r3,0(r2)
  8127b0:	00000106 	br	8127b8 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8127b4:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8127b8:	e037883a 	mov	sp,fp
  8127bc:	dfc00117 	ldw	ra,4(sp)
  8127c0:	df000017 	ldw	fp,0(sp)
  8127c4:	dec00204 	addi	sp,sp,8
  8127c8:	f800283a 	ret

008127cc <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8127cc:	defffa04 	addi	sp,sp,-24
  8127d0:	dfc00515 	stw	ra,20(sp)
  8127d4:	df000415 	stw	fp,16(sp)
  8127d8:	df000404 	addi	fp,sp,16
  8127dc:	e13ffe15 	stw	r4,-8(fp)
  8127e0:	2805883a 	mov	r2,r5
  8127e4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8127e8:	e0bffe17 	ldw	r2,-8(fp)
  8127ec:	10800017 	ldw	r2,0(r2)
  8127f0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8127f4:	008003f4 	movhi	r2,15
  8127f8:	10909004 	addi	r2,r2,16960
  8127fc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812800:	e0bffe17 	ldw	r2,-8(fp)
  812804:	10800803 	ldbu	r2,32(r2)
  812808:	10803fcc 	andi	r2,r2,255
  81280c:	1080201c 	xori	r2,r2,128
  812810:	10bfe004 	addi	r2,r2,-128
  812814:	10001d1e 	bne	r2,zero,81288c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812818:	00000906 	br	812840 <lcd_write_data+0x74>
    if (--i == 0)
  81281c:	e0bffc17 	ldw	r2,-16(fp)
  812820:	10bfffc4 	addi	r2,r2,-1
  812824:	e0bffc15 	stw	r2,-16(fp)
  812828:	e0bffc17 	ldw	r2,-16(fp)
  81282c:	1000041e 	bne	r2,zero,812840 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  812830:	e0bffe17 	ldw	r2,-8(fp)
  812834:	00c00044 	movi	r3,1
  812838:	10c00805 	stb	r3,32(r2)
      return;
  81283c:	00001406 	br	812890 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812840:	e0bffd17 	ldw	r2,-12(fp)
  812844:	10800104 	addi	r2,r2,4
  812848:	10800037 	ldwio	r2,0(r2)
  81284c:	1080200c 	andi	r2,r2,128
  812850:	103ff21e 	bne	r2,zero,81281c <__alt_mem_onchip_mem+0xff80a81c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812854:	01001904 	movi	r4,100
  812858:	081480c0 	call	81480c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  81285c:	e0bffd17 	ldw	r2,-12(fp)
  812860:	10800204 	addi	r2,r2,8
  812864:	1007883a 	mov	r3,r2
  812868:	e0bfff03 	ldbu	r2,-4(fp)
  81286c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  812870:	e0bffe17 	ldw	r2,-8(fp)
  812874:	108008c3 	ldbu	r2,35(r2)
  812878:	10800044 	addi	r2,r2,1
  81287c:	1007883a 	mov	r3,r2
  812880:	e0bffe17 	ldw	r2,-8(fp)
  812884:	10c008c5 	stb	r3,35(r2)
  812888:	00000106 	br	812890 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  81288c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  812890:	e037883a 	mov	sp,fp
  812894:	dfc00117 	ldw	ra,4(sp)
  812898:	df000017 	ldw	fp,0(sp)
  81289c:	dec00204 	addi	sp,sp,8
  8128a0:	f800283a 	ret

008128a4 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8128a4:	defffc04 	addi	sp,sp,-16
  8128a8:	dfc00315 	stw	ra,12(sp)
  8128ac:	df000215 	stw	fp,8(sp)
  8128b0:	df000204 	addi	fp,sp,8
  8128b4:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8128b8:	01400044 	movi	r5,1
  8128bc:	e13fff17 	ldw	r4,-4(fp)
  8128c0:	08127140 	call	812714 <lcd_write_command>

  sp->x = 0;
  8128c4:	e0bfff17 	ldw	r2,-4(fp)
  8128c8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8128cc:	e0bfff17 	ldw	r2,-4(fp)
  8128d0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8128d4:	e0bfff17 	ldw	r2,-4(fp)
  8128d8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8128dc:	e03ffe15 	stw	zero,-8(fp)
  8128e0:	00001b06 	br	812950 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8128e4:	e0bffe17 	ldw	r2,-8(fp)
  8128e8:	108018e4 	muli	r2,r2,99
  8128ec:	10801004 	addi	r2,r2,64
  8128f0:	e0ffff17 	ldw	r3,-4(fp)
  8128f4:	1885883a 	add	r2,r3,r2
  8128f8:	01801444 	movi	r6,81
  8128fc:	01400804 	movi	r5,32
  812900:	1009883a 	mov	r4,r2
  812904:	080be000 	call	80be00 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  812908:	e0bffe17 	ldw	r2,-8(fp)
  81290c:	108018e4 	muli	r2,r2,99
  812910:	10800c04 	addi	r2,r2,48
  812914:	e0ffff17 	ldw	r3,-4(fp)
  812918:	1885883a 	add	r2,r3,r2
  81291c:	01800404 	movi	r6,16
  812920:	01400804 	movi	r5,32
  812924:	1009883a 	mov	r4,r2
  812928:	080be000 	call	80be00 <memset>
    sp->line[y].width = 0;
  81292c:	e0ffff17 	ldw	r3,-4(fp)
  812930:	e0bffe17 	ldw	r2,-8(fp)
  812934:	108018e4 	muli	r2,r2,99
  812938:	1885883a 	add	r2,r3,r2
  81293c:	10802444 	addi	r2,r2,145
  812940:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812944:	e0bffe17 	ldw	r2,-8(fp)
  812948:	10800044 	addi	r2,r2,1
  81294c:	e0bffe15 	stw	r2,-8(fp)
  812950:	e0bffe17 	ldw	r2,-8(fp)
  812954:	10800090 	cmplti	r2,r2,2
  812958:	103fe21e 	bne	r2,zero,8128e4 <__alt_mem_onchip_mem+0xff80a8e4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  81295c:	0001883a 	nop
  812960:	e037883a 	mov	sp,fp
  812964:	dfc00117 	ldw	ra,4(sp)
  812968:	df000017 	ldw	fp,0(sp)
  81296c:	dec00204 	addi	sp,sp,8
  812970:	f800283a 	ret

00812974 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  812974:	defff704 	addi	sp,sp,-36
  812978:	dfc00815 	stw	ra,32(sp)
  81297c:	df000715 	stw	fp,28(sp)
  812980:	df000704 	addi	fp,sp,28
  812984:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  812988:	e0bfff17 	ldw	r2,-4(fp)
  81298c:	10800943 	ldbu	r2,37(r2)
  812990:	10803fcc 	andi	r2,r2,255
  812994:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812998:	e03ff915 	stw	zero,-28(fp)
  81299c:	00006706 	br	812b3c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8129a0:	e0ffff17 	ldw	r3,-4(fp)
  8129a4:	e0bff917 	ldw	r2,-28(fp)
  8129a8:	108018e4 	muli	r2,r2,99
  8129ac:	1885883a 	add	r2,r3,r2
  8129b0:	10802444 	addi	r2,r2,145
  8129b4:	10800003 	ldbu	r2,0(r2)
  8129b8:	10803fcc 	andi	r2,r2,255
  8129bc:	1080201c 	xori	r2,r2,128
  8129c0:	10bfe004 	addi	r2,r2,-128
  8129c4:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8129c8:	e0ffff17 	ldw	r3,-4(fp)
  8129cc:	e0bff917 	ldw	r2,-28(fp)
  8129d0:	108018e4 	muli	r2,r2,99
  8129d4:	1885883a 	add	r2,r3,r2
  8129d8:	10802484 	addi	r2,r2,146
  8129dc:	10800003 	ldbu	r2,0(r2)
  8129e0:	10c03fcc 	andi	r3,r2,255
  8129e4:	e0bffc17 	ldw	r2,-16(fp)
  8129e8:	1885383a 	mul	r2,r3,r2
  8129ec:	1005d23a 	srai	r2,r2,8
  8129f0:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  8129f4:	e0fffb17 	ldw	r3,-20(fp)
  8129f8:	e0bffd17 	ldw	r2,-12(fp)
  8129fc:	18800116 	blt	r3,r2,812a04 <lcd_repaint_screen+0x90>
      offset = 0;
  812a00:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812a04:	e03ffa15 	stw	zero,-24(fp)
  812a08:	00004606 	br	812b24 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  812a0c:	e0fffa17 	ldw	r3,-24(fp)
  812a10:	e0bffb17 	ldw	r2,-20(fp)
  812a14:	1885883a 	add	r2,r3,r2
  812a18:	e17ffd17 	ldw	r5,-12(fp)
  812a1c:	1009883a 	mov	r4,r2
  812a20:	08102180 	call	810218 <__modsi3>
  812a24:	1009883a 	mov	r4,r2
  812a28:	e0ffff17 	ldw	r3,-4(fp)
  812a2c:	e0bff917 	ldw	r2,-28(fp)
  812a30:	108018e4 	muli	r2,r2,99
  812a34:	1885883a 	add	r2,r3,r2
  812a38:	1105883a 	add	r2,r2,r4
  812a3c:	10801004 	addi	r2,r2,64
  812a40:	10800003 	ldbu	r2,0(r2)
  812a44:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  812a48:	e0ffff17 	ldw	r3,-4(fp)
  812a4c:	e0bff917 	ldw	r2,-28(fp)
  812a50:	108018e4 	muli	r2,r2,99
  812a54:	1887883a 	add	r3,r3,r2
  812a58:	e0bffa17 	ldw	r2,-24(fp)
  812a5c:	1885883a 	add	r2,r3,r2
  812a60:	10800c04 	addi	r2,r2,48
  812a64:	10800003 	ldbu	r2,0(r2)
  812a68:	10c03fcc 	andi	r3,r2,255
  812a6c:	18c0201c 	xori	r3,r3,128
  812a70:	18ffe004 	addi	r3,r3,-128
  812a74:	e0bffe07 	ldb	r2,-8(fp)
  812a78:	18802726 	beq	r3,r2,812b18 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  812a7c:	e0fff917 	ldw	r3,-28(fp)
  812a80:	d0a01004 	addi	r2,gp,-32704
  812a84:	1885883a 	add	r2,r3,r2
  812a88:	10800003 	ldbu	r2,0(r2)
  812a8c:	1007883a 	mov	r3,r2
  812a90:	e0bffa17 	ldw	r2,-24(fp)
  812a94:	1885883a 	add	r2,r3,r2
  812a98:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  812a9c:	e0fffe43 	ldbu	r3,-7(fp)
  812aa0:	e0bfff17 	ldw	r2,-4(fp)
  812aa4:	108008c3 	ldbu	r2,35(r2)
  812aa8:	10803fcc 	andi	r2,r2,255
  812aac:	1080201c 	xori	r2,r2,128
  812ab0:	10bfe004 	addi	r2,r2,-128
  812ab4:	18800a26 	beq	r3,r2,812ae0 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  812ab8:	e0fffe43 	ldbu	r3,-7(fp)
  812abc:	00bfe004 	movi	r2,-128
  812ac0:	1884b03a 	or	r2,r3,r2
  812ac4:	10803fcc 	andi	r2,r2,255
  812ac8:	100b883a 	mov	r5,r2
  812acc:	e13fff17 	ldw	r4,-4(fp)
  812ad0:	08127140 	call	812714 <lcd_write_command>
          sp->address = address;
  812ad4:	e0fffe43 	ldbu	r3,-7(fp)
  812ad8:	e0bfff17 	ldw	r2,-4(fp)
  812adc:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  812ae0:	e0bffe03 	ldbu	r2,-8(fp)
  812ae4:	10803fcc 	andi	r2,r2,255
  812ae8:	100b883a 	mov	r5,r2
  812aec:	e13fff17 	ldw	r4,-4(fp)
  812af0:	08127cc0 	call	8127cc <lcd_write_data>
        sp->line[y].visible[x] = c;
  812af4:	e0ffff17 	ldw	r3,-4(fp)
  812af8:	e0bff917 	ldw	r2,-28(fp)
  812afc:	108018e4 	muli	r2,r2,99
  812b00:	1887883a 	add	r3,r3,r2
  812b04:	e0bffa17 	ldw	r2,-24(fp)
  812b08:	1885883a 	add	r2,r3,r2
  812b0c:	10800c04 	addi	r2,r2,48
  812b10:	e0fffe03 	ldbu	r3,-8(fp)
  812b14:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812b18:	e0bffa17 	ldw	r2,-24(fp)
  812b1c:	10800044 	addi	r2,r2,1
  812b20:	e0bffa15 	stw	r2,-24(fp)
  812b24:	e0bffa17 	ldw	r2,-24(fp)
  812b28:	10800410 	cmplti	r2,r2,16
  812b2c:	103fb71e 	bne	r2,zero,812a0c <__alt_mem_onchip_mem+0xff80aa0c>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812b30:	e0bff917 	ldw	r2,-28(fp)
  812b34:	10800044 	addi	r2,r2,1
  812b38:	e0bff915 	stw	r2,-28(fp)
  812b3c:	e0bff917 	ldw	r2,-28(fp)
  812b40:	10800090 	cmplti	r2,r2,2
  812b44:	103f961e 	bne	r2,zero,8129a0 <__alt_mem_onchip_mem+0xff80a9a0>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  812b48:	0001883a 	nop
  812b4c:	e037883a 	mov	sp,fp
  812b50:	dfc00117 	ldw	ra,4(sp)
  812b54:	df000017 	ldw	fp,0(sp)
  812b58:	dec00204 	addi	sp,sp,8
  812b5c:	f800283a 	ret

00812b60 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  812b60:	defffc04 	addi	sp,sp,-16
  812b64:	dfc00315 	stw	ra,12(sp)
  812b68:	df000215 	stw	fp,8(sp)
  812b6c:	df000204 	addi	fp,sp,8
  812b70:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812b74:	e03ffe15 	stw	zero,-8(fp)
  812b78:	00001d06 	br	812bf0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  812b7c:	e0bffe17 	ldw	r2,-8(fp)
  812b80:	00800f16 	blt	zero,r2,812bc0 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  812b84:	e0bffe17 	ldw	r2,-8(fp)
  812b88:	108018e4 	muli	r2,r2,99
  812b8c:	10801004 	addi	r2,r2,64
  812b90:	e0ffff17 	ldw	r3,-4(fp)
  812b94:	1889883a 	add	r4,r3,r2
  812b98:	e0bffe17 	ldw	r2,-8(fp)
  812b9c:	10800044 	addi	r2,r2,1
  812ba0:	108018e4 	muli	r2,r2,99
  812ba4:	10801004 	addi	r2,r2,64
  812ba8:	e0ffff17 	ldw	r3,-4(fp)
  812bac:	1885883a 	add	r2,r3,r2
  812bb0:	01801404 	movi	r6,80
  812bb4:	100b883a 	mov	r5,r2
  812bb8:	080bb5c0 	call	80bb5c <memcpy>
  812bbc:	00000906 	br	812be4 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  812bc0:	e0bffe17 	ldw	r2,-8(fp)
  812bc4:	108018e4 	muli	r2,r2,99
  812bc8:	10801004 	addi	r2,r2,64
  812bcc:	e0ffff17 	ldw	r3,-4(fp)
  812bd0:	1885883a 	add	r2,r3,r2
  812bd4:	01801404 	movi	r6,80
  812bd8:	01400804 	movi	r5,32
  812bdc:	1009883a 	mov	r4,r2
  812be0:	080be000 	call	80be00 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812be4:	e0bffe17 	ldw	r2,-8(fp)
  812be8:	10800044 	addi	r2,r2,1
  812bec:	e0bffe15 	stw	r2,-8(fp)
  812bf0:	e0bffe17 	ldw	r2,-8(fp)
  812bf4:	10800090 	cmplti	r2,r2,2
  812bf8:	103fe01e 	bne	r2,zero,812b7c <__alt_mem_onchip_mem+0xff80ab7c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  812bfc:	e0bfff17 	ldw	r2,-4(fp)
  812c00:	10800883 	ldbu	r2,34(r2)
  812c04:	10bfffc4 	addi	r2,r2,-1
  812c08:	1007883a 	mov	r3,r2
  812c0c:	e0bfff17 	ldw	r2,-4(fp)
  812c10:	10c00885 	stb	r3,34(r2)
}
  812c14:	0001883a 	nop
  812c18:	e037883a 	mov	sp,fp
  812c1c:	dfc00117 	ldw	ra,4(sp)
  812c20:	df000017 	ldw	fp,0(sp)
  812c24:	dec00204 	addi	sp,sp,8
  812c28:	f800283a 	ret

00812c2c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  812c2c:	defff904 	addi	sp,sp,-28
  812c30:	dfc00615 	stw	ra,24(sp)
  812c34:	df000515 	stw	fp,20(sp)
  812c38:	df000504 	addi	fp,sp,20
  812c3c:	e13ffe15 	stw	r4,-8(fp)
  812c40:	2805883a 	mov	r2,r5
  812c44:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  812c48:	e03ffb15 	stw	zero,-20(fp)
  812c4c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  812c50:	e0bffe17 	ldw	r2,-8(fp)
  812c54:	10800a03 	ldbu	r2,40(r2)
  812c58:	10803fcc 	andi	r2,r2,255
  812c5c:	1080201c 	xori	r2,r2,128
  812c60:	10bfe004 	addi	r2,r2,-128
  812c64:	108016d8 	cmpnei	r2,r2,91
  812c68:	1000411e 	bne	r2,zero,812d70 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  812c6c:	e0bffe17 	ldw	r2,-8(fp)
  812c70:	10800a04 	addi	r2,r2,40
  812c74:	10800044 	addi	r2,r2,1
  812c78:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  812c7c:	00000c06 	br	812cb0 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  812c80:	e0bffb17 	ldw	r2,-20(fp)
  812c84:	10c002a4 	muli	r3,r2,10
  812c88:	e0bffd17 	ldw	r2,-12(fp)
  812c8c:	11000044 	addi	r4,r2,1
  812c90:	e13ffd15 	stw	r4,-12(fp)
  812c94:	10800003 	ldbu	r2,0(r2)
  812c98:	10803fcc 	andi	r2,r2,255
  812c9c:	1080201c 	xori	r2,r2,128
  812ca0:	10bfe004 	addi	r2,r2,-128
  812ca4:	10bff404 	addi	r2,r2,-48
  812ca8:	1885883a 	add	r2,r3,r2
  812cac:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  812cb0:	d0e01117 	ldw	r3,-32700(gp)
  812cb4:	e0bffd17 	ldw	r2,-12(fp)
  812cb8:	10800003 	ldbu	r2,0(r2)
  812cbc:	10803fcc 	andi	r2,r2,255
  812cc0:	1080201c 	xori	r2,r2,128
  812cc4:	10bfe004 	addi	r2,r2,-128
  812cc8:	10800044 	addi	r2,r2,1
  812ccc:	1885883a 	add	r2,r3,r2
  812cd0:	10800003 	ldbu	r2,0(r2)
  812cd4:	10803fcc 	andi	r2,r2,255
  812cd8:	1080010c 	andi	r2,r2,4
  812cdc:	103fe81e 	bne	r2,zero,812c80 <__alt_mem_onchip_mem+0xff80ac80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  812ce0:	e0bffd17 	ldw	r2,-12(fp)
  812ce4:	10800003 	ldbu	r2,0(r2)
  812ce8:	10803fcc 	andi	r2,r2,255
  812cec:	1080201c 	xori	r2,r2,128
  812cf0:	10bfe004 	addi	r2,r2,-128
  812cf4:	10800ed8 	cmpnei	r2,r2,59
  812cf8:	10001f1e 	bne	r2,zero,812d78 <lcd_handle_escape+0x14c>
    {
      ptr++;
  812cfc:	e0bffd17 	ldw	r2,-12(fp)
  812d00:	10800044 	addi	r2,r2,1
  812d04:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  812d08:	00000c06 	br	812d3c <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  812d0c:	e0bffc17 	ldw	r2,-16(fp)
  812d10:	10c002a4 	muli	r3,r2,10
  812d14:	e0bffd17 	ldw	r2,-12(fp)
  812d18:	11000044 	addi	r4,r2,1
  812d1c:	e13ffd15 	stw	r4,-12(fp)
  812d20:	10800003 	ldbu	r2,0(r2)
  812d24:	10803fcc 	andi	r2,r2,255
  812d28:	1080201c 	xori	r2,r2,128
  812d2c:	10bfe004 	addi	r2,r2,-128
  812d30:	10bff404 	addi	r2,r2,-48
  812d34:	1885883a 	add	r2,r3,r2
  812d38:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  812d3c:	d0e01117 	ldw	r3,-32700(gp)
  812d40:	e0bffd17 	ldw	r2,-12(fp)
  812d44:	10800003 	ldbu	r2,0(r2)
  812d48:	10803fcc 	andi	r2,r2,255
  812d4c:	1080201c 	xori	r2,r2,128
  812d50:	10bfe004 	addi	r2,r2,-128
  812d54:	10800044 	addi	r2,r2,1
  812d58:	1885883a 	add	r2,r3,r2
  812d5c:	10800003 	ldbu	r2,0(r2)
  812d60:	10803fcc 	andi	r2,r2,255
  812d64:	1080010c 	andi	r2,r2,4
  812d68:	103fe81e 	bne	r2,zero,812d0c <__alt_mem_onchip_mem+0xff80ad0c>
  812d6c:	00000206 	br	812d78 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  812d70:	00bfffc4 	movi	r2,-1
  812d74:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  812d78:	e0bfff07 	ldb	r2,-4(fp)
  812d7c:	10c012a0 	cmpeqi	r3,r2,74
  812d80:	1800291e 	bne	r3,zero,812e28 <lcd_handle_escape+0x1fc>
  812d84:	10c012c8 	cmpgei	r3,r2,75
  812d88:	1800031e 	bne	r3,zero,812d98 <lcd_handle_escape+0x16c>
  812d8c:	10801220 	cmpeqi	r2,r2,72
  812d90:	1000061e 	bne	r2,zero,812dac <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  812d94:	00004a06 	br	812ec0 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  812d98:	10c012e0 	cmpeqi	r3,r2,75
  812d9c:	1800281e 	bne	r3,zero,812e40 <lcd_handle_escape+0x214>
  812da0:	108019a0 	cmpeqi	r2,r2,102
  812da4:	1000011e 	bne	r2,zero,812dac <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  812da8:	00004506 	br	812ec0 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  812dac:	e0bffc17 	ldw	r2,-16(fp)
  812db0:	0080050e 	bge	zero,r2,812dc8 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  812db4:	e0bffc17 	ldw	r2,-16(fp)
  812db8:	10bfffc4 	addi	r2,r2,-1
  812dbc:	1007883a 	mov	r3,r2
  812dc0:	e0bffe17 	ldw	r2,-8(fp)
  812dc4:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  812dc8:	e0bffb17 	ldw	r2,-20(fp)
  812dcc:	0080370e 	bge	zero,r2,812eac <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  812dd0:	e0bffb17 	ldw	r2,-20(fp)
  812dd4:	10bfffc4 	addi	r2,r2,-1
  812dd8:	1007883a 	mov	r3,r2
  812ddc:	e0bffe17 	ldw	r2,-8(fp)
  812de0:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  812de4:	e0bffe17 	ldw	r2,-8(fp)
  812de8:	10800883 	ldbu	r2,34(r2)
  812dec:	10803fcc 	andi	r2,r2,255
  812df0:	10800170 	cmpltui	r2,r2,5
  812df4:	1000061e 	bne	r2,zero,812e10 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  812df8:	e0bffe17 	ldw	r2,-8(fp)
  812dfc:	00c00104 	movi	r3,4
  812e00:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  812e04:	00000206 	br	812e10 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  812e08:	e13ffe17 	ldw	r4,-8(fp)
  812e0c:	0812b600 	call	812b60 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  812e10:	e0bffe17 	ldw	r2,-8(fp)
  812e14:	10800883 	ldbu	r2,34(r2)
  812e18:	10803fcc 	andi	r2,r2,255
  812e1c:	108000e8 	cmpgeui	r2,r2,3
  812e20:	103ff91e 	bne	r2,zero,812e08 <__alt_mem_onchip_mem+0xff80ae08>
        lcd_scroll_up(sp);
    }
    break;
  812e24:	00002106 	br	812eac <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  812e28:	e0bffb17 	ldw	r2,-20(fp)
  812e2c:	10800098 	cmpnei	r2,r2,2
  812e30:	1000201e 	bne	r2,zero,812eb4 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  812e34:	e13ffe17 	ldw	r4,-8(fp)
  812e38:	08128a40 	call	8128a4 <lcd_clear_screen>
    break;
  812e3c:	00001d06 	br	812eb4 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  812e40:	e0bffb17 	ldw	r2,-20(fp)
  812e44:	00801d16 	blt	zero,r2,812ebc <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812e48:	e0bffe17 	ldw	r2,-8(fp)
  812e4c:	10800843 	ldbu	r2,33(r2)
  812e50:	10803fcc 	andi	r2,r2,255
  812e54:	10801428 	cmpgeui	r2,r2,80
  812e58:	1000181e 	bne	r2,zero,812ebc <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  812e5c:	e0bffe17 	ldw	r2,-8(fp)
  812e60:	10800883 	ldbu	r2,34(r2)
  812e64:	10803fcc 	andi	r2,r2,255
  812e68:	108018e4 	muli	r2,r2,99
  812e6c:	10801004 	addi	r2,r2,64
  812e70:	e0fffe17 	ldw	r3,-8(fp)
  812e74:	1887883a 	add	r3,r3,r2
  812e78:	e0bffe17 	ldw	r2,-8(fp)
  812e7c:	10800843 	ldbu	r2,33(r2)
  812e80:	10803fcc 	andi	r2,r2,255
  812e84:	1889883a 	add	r4,r3,r2
  812e88:	e0bffe17 	ldw	r2,-8(fp)
  812e8c:	10800843 	ldbu	r2,33(r2)
  812e90:	10803fcc 	andi	r2,r2,255
  812e94:	00c01404 	movi	r3,80
  812e98:	1885c83a 	sub	r2,r3,r2
  812e9c:	100d883a 	mov	r6,r2
  812ea0:	01400804 	movi	r5,32
  812ea4:	080be000 	call	80be00 <memset>
    }
    break;
  812ea8:	00000406 	br	812ebc <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  812eac:	0001883a 	nop
  812eb0:	00000306 	br	812ec0 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  812eb4:	0001883a 	nop
  812eb8:	00000106 	br	812ec0 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  812ebc:	0001883a 	nop
  }
}
  812ec0:	0001883a 	nop
  812ec4:	e037883a 	mov	sp,fp
  812ec8:	dfc00117 	ldw	ra,4(sp)
  812ecc:	df000017 	ldw	fp,0(sp)
  812ed0:	dec00204 	addi	sp,sp,8
  812ed4:	f800283a 	ret

00812ed8 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  812ed8:	defff304 	addi	sp,sp,-52
  812edc:	dfc00c15 	stw	ra,48(sp)
  812ee0:	df000b15 	stw	fp,44(sp)
  812ee4:	df000b04 	addi	fp,sp,44
  812ee8:	e13ffc15 	stw	r4,-16(fp)
  812eec:	e17ffd15 	stw	r5,-12(fp)
  812ef0:	e1bffe15 	stw	r6,-8(fp)
  812ef4:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  812ef8:	e0bffe17 	ldw	r2,-8(fp)
  812efc:	e0fffd17 	ldw	r3,-12(fp)
  812f00:	1885883a 	add	r2,r3,r2
  812f04:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  812f08:	e0bffc17 	ldw	r2,-16(fp)
  812f0c:	00c00044 	movi	r3,1
  812f10:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  812f14:	00009906 	br	81317c <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  812f18:	e0bffd17 	ldw	r2,-12(fp)
  812f1c:	10800003 	ldbu	r2,0(r2)
  812f20:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  812f24:	e0bffc17 	ldw	r2,-16(fp)
  812f28:	10800903 	ldbu	r2,36(r2)
  812f2c:	10803fcc 	andi	r2,r2,255
  812f30:	1080201c 	xori	r2,r2,128
  812f34:	10bfe004 	addi	r2,r2,-128
  812f38:	10003716 	blt	r2,zero,813018 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  812f3c:	e0bffc17 	ldw	r2,-16(fp)
  812f40:	10800903 	ldbu	r2,36(r2)
  812f44:	10803fcc 	andi	r2,r2,255
  812f48:	1080201c 	xori	r2,r2,128
  812f4c:	10bfe004 	addi	r2,r2,-128
  812f50:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812f54:	e0bffa17 	ldw	r2,-24(fp)
  812f58:	1000031e 	bne	r2,zero,812f68 <altera_avalon_lcd_16207_write+0x90>
  812f5c:	e0bff907 	ldb	r2,-28(fp)
  812f60:	108016d8 	cmpnei	r2,r2,91
  812f64:	10000d1e 	bne	r2,zero,812f9c <altera_avalon_lcd_16207_write+0xc4>
  812f68:	e0bffa17 	ldw	r2,-24(fp)
  812f6c:	10001826 	beq	r2,zero,812fd0 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  812f70:	d0e01117 	ldw	r3,-32700(gp)
  812f74:	e0bff907 	ldb	r2,-28(fp)
  812f78:	10800044 	addi	r2,r2,1
  812f7c:	1885883a 	add	r2,r3,r2
  812f80:	10800003 	ldbu	r2,0(r2)
  812f84:	10803fcc 	andi	r2,r2,255
  812f88:	1080010c 	andi	r2,r2,4
  812f8c:	1000101e 	bne	r2,zero,812fd0 <altera_avalon_lcd_16207_write+0xf8>
  812f90:	e0bff907 	ldb	r2,-28(fp)
  812f94:	10800ee0 	cmpeqi	r2,r2,59
  812f98:	10000d1e 	bne	r2,zero,812fd0 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  812f9c:	e0fffc17 	ldw	r3,-16(fp)
  812fa0:	e0bffa17 	ldw	r2,-24(fp)
  812fa4:	1885883a 	add	r2,r3,r2
  812fa8:	10800a04 	addi	r2,r2,40
  812fac:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  812fb0:	e0bff907 	ldb	r2,-28(fp)
  812fb4:	100b883a 	mov	r5,r2
  812fb8:	e13ffc17 	ldw	r4,-16(fp)
  812fbc:	0812c2c0 	call	812c2c <lcd_handle_escape>

        sp->esccount = -1;
  812fc0:	e0bffc17 	ldw	r2,-16(fp)
  812fc4:	00ffffc4 	movi	r3,-1
  812fc8:	10c00905 	stb	r3,36(r2)
  812fcc:	00006806 	br	813170 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  812fd0:	e0bffc17 	ldw	r2,-16(fp)
  812fd4:	10800903 	ldbu	r2,36(r2)
  812fd8:	10803fcc 	andi	r2,r2,255
  812fdc:	108001e8 	cmpgeui	r2,r2,7
  812fe0:	1000631e 	bne	r2,zero,813170 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  812fe4:	e0fffc17 	ldw	r3,-16(fp)
  812fe8:	e0bffa17 	ldw	r2,-24(fp)
  812fec:	1885883a 	add	r2,r3,r2
  812ff0:	10800a04 	addi	r2,r2,40
  812ff4:	e0fff903 	ldbu	r3,-28(fp)
  812ff8:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  812ffc:	e0bffc17 	ldw	r2,-16(fp)
  813000:	10800903 	ldbu	r2,36(r2)
  813004:	10800044 	addi	r2,r2,1
  813008:	1007883a 	mov	r3,r2
  81300c:	e0bffc17 	ldw	r2,-16(fp)
  813010:	10c00905 	stb	r3,36(r2)
  813014:	00005606 	br	813170 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  813018:	e0bff907 	ldb	r2,-28(fp)
  81301c:	108006d8 	cmpnei	r2,r2,27
  813020:	1000031e 	bne	r2,zero,813030 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  813024:	e0bffc17 	ldw	r2,-16(fp)
  813028:	10000905 	stb	zero,36(r2)
  81302c:	00005006 	br	813170 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  813030:	e0bff907 	ldb	r2,-28(fp)
  813034:	10800358 	cmpnei	r2,r2,13
  813038:	1000031e 	bne	r2,zero,813048 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  81303c:	e0bffc17 	ldw	r2,-16(fp)
  813040:	10000845 	stb	zero,33(r2)
  813044:	00004a06 	br	813170 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  813048:	e0bff907 	ldb	r2,-28(fp)
  81304c:	10800298 	cmpnei	r2,r2,10
  813050:	1000101e 	bne	r2,zero,813094 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  813054:	e0bffc17 	ldw	r2,-16(fp)
  813058:	10000845 	stb	zero,33(r2)
      sp->y++;
  81305c:	e0bffc17 	ldw	r2,-16(fp)
  813060:	10800883 	ldbu	r2,34(r2)
  813064:	10800044 	addi	r2,r2,1
  813068:	1007883a 	mov	r3,r2
  81306c:	e0bffc17 	ldw	r2,-16(fp)
  813070:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  813074:	e0bffc17 	ldw	r2,-16(fp)
  813078:	10800883 	ldbu	r2,34(r2)
  81307c:	10803fcc 	andi	r2,r2,255
  813080:	108000f0 	cmpltui	r2,r2,3
  813084:	10003a1e 	bne	r2,zero,813170 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  813088:	e13ffc17 	ldw	r4,-16(fp)
  81308c:	0812b600 	call	812b60 <lcd_scroll_up>
  813090:	00003706 	br	813170 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  813094:	e0bff907 	ldb	r2,-28(fp)
  813098:	10800218 	cmpnei	r2,r2,8
  81309c:	10000b1e 	bne	r2,zero,8130cc <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  8130a0:	e0bffc17 	ldw	r2,-16(fp)
  8130a4:	10800843 	ldbu	r2,33(r2)
  8130a8:	10803fcc 	andi	r2,r2,255
  8130ac:	10003026 	beq	r2,zero,813170 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  8130b0:	e0bffc17 	ldw	r2,-16(fp)
  8130b4:	10800843 	ldbu	r2,33(r2)
  8130b8:	10bfffc4 	addi	r2,r2,-1
  8130bc:	1007883a 	mov	r3,r2
  8130c0:	e0bffc17 	ldw	r2,-16(fp)
  8130c4:	10c00845 	stb	r3,33(r2)
  8130c8:	00002906 	br	813170 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  8130cc:	d0e01117 	ldw	r3,-32700(gp)
  8130d0:	e0bff907 	ldb	r2,-28(fp)
  8130d4:	10800044 	addi	r2,r2,1
  8130d8:	1885883a 	add	r2,r3,r2
  8130dc:	10800003 	ldbu	r2,0(r2)
  8130e0:	10803fcc 	andi	r2,r2,255
  8130e4:	1080201c 	xori	r2,r2,128
  8130e8:	10bfe004 	addi	r2,r2,-128
  8130ec:	108025cc 	andi	r2,r2,151
  8130f0:	10001f26 	beq	r2,zero,813170 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  8130f4:	e0bffc17 	ldw	r2,-16(fp)
  8130f8:	10800883 	ldbu	r2,34(r2)
  8130fc:	10803fcc 	andi	r2,r2,255
  813100:	108000b0 	cmpltui	r2,r2,2
  813104:	1000021e 	bne	r2,zero,813110 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  813108:	e13ffc17 	ldw	r4,-16(fp)
  81310c:	0812b600 	call	812b60 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  813110:	e0bffc17 	ldw	r2,-16(fp)
  813114:	10800843 	ldbu	r2,33(r2)
  813118:	10803fcc 	andi	r2,r2,255
  81311c:	10801428 	cmpgeui	r2,r2,80
  813120:	10000d1e 	bne	r2,zero,813158 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  813124:	e0bffc17 	ldw	r2,-16(fp)
  813128:	10800883 	ldbu	r2,34(r2)
  81312c:	10c03fcc 	andi	r3,r2,255
  813130:	e0bffc17 	ldw	r2,-16(fp)
  813134:	10800843 	ldbu	r2,33(r2)
  813138:	10803fcc 	andi	r2,r2,255
  81313c:	e13ffc17 	ldw	r4,-16(fp)
  813140:	18c018e4 	muli	r3,r3,99
  813144:	20c7883a 	add	r3,r4,r3
  813148:	1885883a 	add	r2,r3,r2
  81314c:	10801004 	addi	r2,r2,64
  813150:	e0fff903 	ldbu	r3,-28(fp)
  813154:	10c00005 	stb	r3,0(r2)

      sp->x++;
  813158:	e0bffc17 	ldw	r2,-16(fp)
  81315c:	10800843 	ldbu	r2,33(r2)
  813160:	10800044 	addi	r2,r2,1
  813164:	1007883a 	mov	r3,r2
  813168:	e0bffc17 	ldw	r2,-16(fp)
  81316c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  813170:	e0bffd17 	ldw	r2,-12(fp)
  813174:	10800044 	addi	r2,r2,1
  813178:	e0bffd15 	stw	r2,-12(fp)
  81317c:	e0fffd17 	ldw	r3,-12(fp)
  813180:	e0bff817 	ldw	r2,-32(fp)
  813184:	18bf6436 	bltu	r3,r2,812f18 <__alt_mem_onchip_mem+0xff80af18>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  813188:	00800404 	movi	r2,16
  81318c:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  813190:	e03ff515 	stw	zero,-44(fp)
  813194:	00003706 	br	813274 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  813198:	00801404 	movi	r2,80
  81319c:	e0bff715 	stw	r2,-36(fp)
  8131a0:	00001106 	br	8131e8 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  8131a4:	e0bff717 	ldw	r2,-36(fp)
  8131a8:	10bfffc4 	addi	r2,r2,-1
  8131ac:	e13ffc17 	ldw	r4,-16(fp)
  8131b0:	e0fff517 	ldw	r3,-44(fp)
  8131b4:	18c018e4 	muli	r3,r3,99
  8131b8:	20c7883a 	add	r3,r4,r3
  8131bc:	1885883a 	add	r2,r3,r2
  8131c0:	10801004 	addi	r2,r2,64
  8131c4:	10800003 	ldbu	r2,0(r2)
  8131c8:	10803fcc 	andi	r2,r2,255
  8131cc:	1080201c 	xori	r2,r2,128
  8131d0:	10bfe004 	addi	r2,r2,-128
  8131d4:	10800820 	cmpeqi	r2,r2,32
  8131d8:	10000626 	beq	r2,zero,8131f4 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8131dc:	e0bff717 	ldw	r2,-36(fp)
  8131e0:	10bfffc4 	addi	r2,r2,-1
  8131e4:	e0bff715 	stw	r2,-36(fp)
  8131e8:	e0bff717 	ldw	r2,-36(fp)
  8131ec:	00bfed16 	blt	zero,r2,8131a4 <__alt_mem_onchip_mem+0xff80b1a4>
  8131f0:	00000106 	br	8131f8 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  8131f4:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  8131f8:	e0bff717 	ldw	r2,-36(fp)
  8131fc:	10800448 	cmpgei	r2,r2,17
  813200:	1000031e 	bne	r2,zero,813210 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  813204:	00800404 	movi	r2,16
  813208:	e0bff715 	stw	r2,-36(fp)
  81320c:	00000306 	br	81321c <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  813210:	e0bff717 	ldw	r2,-36(fp)
  813214:	10800044 	addi	r2,r2,1
  813218:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  81321c:	e0bff717 	ldw	r2,-36(fp)
  813220:	1009883a 	mov	r4,r2
  813224:	e0fffc17 	ldw	r3,-16(fp)
  813228:	e0bff517 	ldw	r2,-44(fp)
  81322c:	108018e4 	muli	r2,r2,99
  813230:	1885883a 	add	r2,r3,r2
  813234:	10802444 	addi	r2,r2,145
  813238:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  81323c:	e0fff617 	ldw	r3,-40(fp)
  813240:	e0bff717 	ldw	r2,-36(fp)
  813244:	1880020e 	bge	r3,r2,813250 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  813248:	e0bff717 	ldw	r2,-36(fp)
  81324c:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  813250:	e0fffc17 	ldw	r3,-16(fp)
  813254:	e0bff517 	ldw	r2,-44(fp)
  813258:	108018e4 	muli	r2,r2,99
  81325c:	1885883a 	add	r2,r3,r2
  813260:	10802484 	addi	r2,r2,146
  813264:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  813268:	e0bff517 	ldw	r2,-44(fp)
  81326c:	10800044 	addi	r2,r2,1
  813270:	e0bff515 	stw	r2,-44(fp)
  813274:	e0bff517 	ldw	r2,-44(fp)
  813278:	10800090 	cmplti	r2,r2,2
  81327c:	103fc61e 	bne	r2,zero,813198 <__alt_mem_onchip_mem+0xff80b198>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  813280:	e0bff617 	ldw	r2,-40(fp)
  813284:	10800448 	cmpgei	r2,r2,17
  813288:	1000031e 	bne	r2,zero,813298 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  81328c:	e0bffc17 	ldw	r2,-16(fp)
  813290:	10000985 	stb	zero,38(r2)
  813294:	00002e06 	br	813350 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  813298:	e0bff617 	ldw	r2,-40(fp)
  81329c:	1085883a 	add	r2,r2,r2
  8132a0:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  8132a4:	e0bff617 	ldw	r2,-40(fp)
  8132a8:	1007883a 	mov	r3,r2
  8132ac:	e0bffc17 	ldw	r2,-16(fp)
  8132b0:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8132b4:	e03ff515 	stw	zero,-44(fp)
  8132b8:	00002206 	br	813344 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  8132bc:	e0fffc17 	ldw	r3,-16(fp)
  8132c0:	e0bff517 	ldw	r2,-44(fp)
  8132c4:	108018e4 	muli	r2,r2,99
  8132c8:	1885883a 	add	r2,r3,r2
  8132cc:	10802444 	addi	r2,r2,145
  8132d0:	10800003 	ldbu	r2,0(r2)
  8132d4:	10803fcc 	andi	r2,r2,255
  8132d8:	1080201c 	xori	r2,r2,128
  8132dc:	10bfe004 	addi	r2,r2,-128
  8132e0:	10800450 	cmplti	r2,r2,17
  8132e4:	1000141e 	bne	r2,zero,813338 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  8132e8:	e0fffc17 	ldw	r3,-16(fp)
  8132ec:	e0bff517 	ldw	r2,-44(fp)
  8132f0:	108018e4 	muli	r2,r2,99
  8132f4:	1885883a 	add	r2,r3,r2
  8132f8:	10802444 	addi	r2,r2,145
  8132fc:	10800003 	ldbu	r2,0(r2)
  813300:	10803fcc 	andi	r2,r2,255
  813304:	1080201c 	xori	r2,r2,128
  813308:	10bfe004 	addi	r2,r2,-128
  81330c:	1004923a 	slli	r2,r2,8
  813310:	e17ff617 	ldw	r5,-40(fp)
  813314:	1009883a 	mov	r4,r2
  813318:	08101940 	call	810194 <__divsi3>
  81331c:	1009883a 	mov	r4,r2
  813320:	e0fffc17 	ldw	r3,-16(fp)
  813324:	e0bff517 	ldw	r2,-44(fp)
  813328:	108018e4 	muli	r2,r2,99
  81332c:	1885883a 	add	r2,r3,r2
  813330:	10802484 	addi	r2,r2,146
  813334:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  813338:	e0bff517 	ldw	r2,-44(fp)
  81333c:	10800044 	addi	r2,r2,1
  813340:	e0bff515 	stw	r2,-44(fp)
  813344:	e0bff517 	ldw	r2,-44(fp)
  813348:	10800090 	cmplti	r2,r2,2
  81334c:	103fdb1e 	bne	r2,zero,8132bc <__alt_mem_onchip_mem+0xff80b2bc>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  813350:	e0bffc17 	ldw	r2,-16(fp)
  813354:	10800943 	ldbu	r2,37(r2)
  813358:	10803fcc 	andi	r2,r2,255
  81335c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  813360:	e13ffc17 	ldw	r4,-16(fp)
  813364:	08129740 	call	812974 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  813368:	e0bffc17 	ldw	r2,-16(fp)
  81336c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  813370:	e0bffc17 	ldw	r2,-16(fp)
  813374:	10800943 	ldbu	r2,37(r2)
  813378:	10c03fcc 	andi	r3,r2,255
  81337c:	e0bffb17 	ldw	r2,-20(fp)
  813380:	18800426 	beq	r3,r2,813394 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  813384:	e0bffc17 	ldw	r2,-16(fp)
  813388:	00c00044 	movi	r3,1
  81338c:	10c009c5 	stb	r3,39(r2)
  }
  813390:	003fef06 	br	813350 <__alt_mem_onchip_mem+0xff80b350>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  813394:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  813398:	e0bffe17 	ldw	r2,-8(fp)
}
  81339c:	e037883a 	mov	sp,fp
  8133a0:	dfc00117 	ldw	ra,4(sp)
  8133a4:	df000017 	ldw	fp,0(sp)
  8133a8:	dec00204 	addi	sp,sp,8
  8133ac:	f800283a 	ret

008133b0 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8133b0:	defffc04 	addi	sp,sp,-16
  8133b4:	dfc00315 	stw	ra,12(sp)
  8133b8:	df000215 	stw	fp,8(sp)
  8133bc:	df000204 	addi	fp,sp,8
  8133c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8133c4:	e0bfff17 	ldw	r2,-4(fp)
  8133c8:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8133cc:	e0bffe17 	ldw	r2,-8(fp)
  8133d0:	10800943 	ldbu	r2,37(r2)
  8133d4:	10803fcc 	andi	r2,r2,255
  8133d8:	10c00044 	addi	r3,r2,1
  8133dc:	e0bffe17 	ldw	r2,-8(fp)
  8133e0:	10800983 	ldbu	r2,38(r2)
  8133e4:	10803fcc 	andi	r2,r2,255
  8133e8:	18800316 	blt	r3,r2,8133f8 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  8133ec:	e0bffe17 	ldw	r2,-8(fp)
  8133f0:	10000945 	stb	zero,37(r2)
  8133f4:	00000606 	br	813410 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8133f8:	e0bffe17 	ldw	r2,-8(fp)
  8133fc:	10800943 	ldbu	r2,37(r2)
  813400:	10800044 	addi	r2,r2,1
  813404:	1007883a 	mov	r3,r2
  813408:	e0bffe17 	ldw	r2,-8(fp)
  81340c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  813410:	e0bffe17 	ldw	r2,-8(fp)
  813414:	10800983 	ldbu	r2,38(r2)
  813418:	10803fcc 	andi	r2,r2,255
  81341c:	10000826 	beq	r2,zero,813440 <alt_lcd_16207_timeout+0x90>
  813420:	e0bffe17 	ldw	r2,-8(fp)
  813424:	108009c3 	ldbu	r2,39(r2)
  813428:	10803fcc 	andi	r2,r2,255
  81342c:	1080201c 	xori	r2,r2,128
  813430:	10bfe004 	addi	r2,r2,-128
  813434:	1000021e 	bne	r2,zero,813440 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  813438:	e13ffe17 	ldw	r4,-8(fp)
  81343c:	08129740 	call	812974 <lcd_repaint_screen>

  return sp->period;
  813440:	e0bffe17 	ldw	r2,-8(fp)
  813444:	10800717 	ldw	r2,28(r2)
}
  813448:	e037883a 	mov	sp,fp
  81344c:	dfc00117 	ldw	ra,4(sp)
  813450:	df000017 	ldw	fp,0(sp)
  813454:	dec00204 	addi	sp,sp,8
  813458:	f800283a 	ret

0081345c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  81345c:	defffc04 	addi	sp,sp,-16
  813460:	dfc00315 	stw	ra,12(sp)
  813464:	df000215 	stw	fp,8(sp)
  813468:	df000204 	addi	fp,sp,8
  81346c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  813470:	e0bfff17 	ldw	r2,-4(fp)
  813474:	10800017 	ldw	r2,0(r2)
  813478:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  81347c:	e0bfff17 	ldw	r2,-4(fp)
  813480:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  813484:	010ea604 	movi	r4,15000
  813488:	081480c0 	call	81480c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81348c:	e0bffe17 	ldw	r2,-8(fp)
  813490:	00c00c04 	movi	r3,48
  813494:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  813498:	01040104 	movi	r4,4100
  81349c:	081480c0 	call	81480c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8134a0:	e0bffe17 	ldw	r2,-8(fp)
  8134a4:	00c00c04 	movi	r3,48
  8134a8:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8134ac:	0100fa04 	movi	r4,1000
  8134b0:	081480c0 	call	81480c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8134b4:	e0bffe17 	ldw	r2,-8(fp)
  8134b8:	00c00c04 	movi	r3,48
  8134bc:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8134c0:	01400e04 	movi	r5,56
  8134c4:	e13fff17 	ldw	r4,-4(fp)
  8134c8:	08127140 	call	812714 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8134cc:	01400204 	movi	r5,8
  8134d0:	e13fff17 	ldw	r4,-4(fp)
  8134d4:	08127140 	call	812714 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8134d8:	e13fff17 	ldw	r4,-4(fp)
  8134dc:	08128a40 	call	8128a4 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8134e0:	01400184 	movi	r5,6
  8134e4:	e13fff17 	ldw	r4,-4(fp)
  8134e8:	08127140 	call	812714 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8134ec:	01400304 	movi	r5,12
  8134f0:	e13fff17 	ldw	r4,-4(fp)
  8134f4:	08127140 	call	812714 <lcd_write_command>

  sp->esccount = -1;
  8134f8:	e0bfff17 	ldw	r2,-4(fp)
  8134fc:	00ffffc4 	movi	r3,-1
  813500:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  813504:	e0bfff17 	ldw	r2,-4(fp)
  813508:	10800a04 	addi	r2,r2,40
  81350c:	01800204 	movi	r6,8
  813510:	000b883a 	mov	r5,zero
  813514:	1009883a 	mov	r4,r2
  813518:	080be000 	call	80be00 <memset>

  sp->scrollpos = 0;
  81351c:	e0bfff17 	ldw	r2,-4(fp)
  813520:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  813524:	e0bfff17 	ldw	r2,-4(fp)
  813528:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  81352c:	e0bfff17 	ldw	r2,-4(fp)
  813530:	100009c5 	stb	zero,39(r2)
  813534:	d0a75317 	ldw	r2,-25268(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  813538:	01400284 	movi	r5,10
  81353c:	1009883a 	mov	r4,r2
  813540:	081028c0 	call	81028c <__udivsi3>
  813544:	1007883a 	mov	r3,r2
  813548:	e0bfff17 	ldw	r2,-4(fp)
  81354c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  813550:	e0bfff17 	ldw	r2,-4(fp)
  813554:	10c00104 	addi	r3,r2,4
  813558:	e0bfff17 	ldw	r2,-4(fp)
  81355c:	10800717 	ldw	r2,28(r2)
  813560:	e1ffff17 	ldw	r7,-4(fp)
  813564:	01802074 	movhi	r6,129
  813568:	318cec04 	addi	r6,r6,13232
  81356c:	100b883a 	mov	r5,r2
  813570:	1809883a 	mov	r4,r3
  813574:	0810e140 	call	810e14 <alt_alarm_start>
}
  813578:	0001883a 	nop
  81357c:	e037883a 	mov	sp,fp
  813580:	dfc00117 	ldw	ra,4(sp)
  813584:	df000017 	ldw	fp,0(sp)
  813588:	dec00204 	addi	sp,sp,8
  81358c:	f800283a 	ret

00813590 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813590:	defffa04 	addi	sp,sp,-24
  813594:	dfc00515 	stw	ra,20(sp)
  813598:	df000415 	stw	fp,16(sp)
  81359c:	df000404 	addi	fp,sp,16
  8135a0:	e13ffd15 	stw	r4,-12(fp)
  8135a4:	e17ffe15 	stw	r5,-8(fp)
  8135a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8135ac:	e0bffd17 	ldw	r2,-12(fp)
  8135b0:	10800017 	ldw	r2,0(r2)
  8135b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8135b8:	e0bffc17 	ldw	r2,-16(fp)
  8135bc:	10c00a04 	addi	r3,r2,40
  8135c0:	e0bffd17 	ldw	r2,-12(fp)
  8135c4:	10800217 	ldw	r2,8(r2)
  8135c8:	100f883a 	mov	r7,r2
  8135cc:	e1bfff17 	ldw	r6,-4(fp)
  8135d0:	e17ffe17 	ldw	r5,-8(fp)
  8135d4:	1809883a 	mov	r4,r3
  8135d8:	0812ed80 	call	812ed8 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8135dc:	e037883a 	mov	sp,fp
  8135e0:	dfc00117 	ldw	ra,4(sp)
  8135e4:	df000017 	ldw	fp,0(sp)
  8135e8:	dec00204 	addi	sp,sp,8
  8135ec:	f800283a 	ret

008135f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8135f0:	defffa04 	addi	sp,sp,-24
  8135f4:	dfc00515 	stw	ra,20(sp)
  8135f8:	df000415 	stw	fp,16(sp)
  8135fc:	df000404 	addi	fp,sp,16
  813600:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  813604:	0007883a 	mov	r3,zero
  813608:	e0bfff17 	ldw	r2,-4(fp)
  81360c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  813610:	e0bfff17 	ldw	r2,-4(fp)
  813614:	10800104 	addi	r2,r2,4
  813618:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81361c:	0005303a 	rdctl	r2,status
  813620:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813624:	e0fffd17 	ldw	r3,-12(fp)
  813628:	00bfff84 	movi	r2,-2
  81362c:	1884703a 	and	r2,r3,r2
  813630:	1001703a 	wrctl	status,r2
  
  return context;
  813634:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813638:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  81363c:	081196c0 	call	81196c <alt_tick>
  813640:	e0bffc17 	ldw	r2,-16(fp)
  813644:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813648:	e0bffe17 	ldw	r2,-8(fp)
  81364c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813650:	0001883a 	nop
  813654:	e037883a 	mov	sp,fp
  813658:	dfc00117 	ldw	ra,4(sp)
  81365c:	df000017 	ldw	fp,0(sp)
  813660:	dec00204 	addi	sp,sp,8
  813664:	f800283a 	ret

00813668 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813668:	defff804 	addi	sp,sp,-32
  81366c:	dfc00715 	stw	ra,28(sp)
  813670:	df000615 	stw	fp,24(sp)
  813674:	df000604 	addi	fp,sp,24
  813678:	e13ffc15 	stw	r4,-16(fp)
  81367c:	e17ffd15 	stw	r5,-12(fp)
  813680:	e1bffe15 	stw	r6,-8(fp)
  813684:	e1ffff15 	stw	r7,-4(fp)
  813688:	e0bfff17 	ldw	r2,-4(fp)
  81368c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813690:	d0a75317 	ldw	r2,-25268(gp)
  813694:	1000021e 	bne	r2,zero,8136a0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  813698:	e0bffb17 	ldw	r2,-20(fp)
  81369c:	d0a75315 	stw	r2,-25268(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8136a0:	e0bffc17 	ldw	r2,-16(fp)
  8136a4:	10800104 	addi	r2,r2,4
  8136a8:	00c001c4 	movi	r3,7
  8136ac:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8136b0:	d8000015 	stw	zero,0(sp)
  8136b4:	e1fffc17 	ldw	r7,-16(fp)
  8136b8:	01802074 	movhi	r6,129
  8136bc:	318d7c04 	addi	r6,r6,13808
  8136c0:	e17ffe17 	ldw	r5,-8(fp)
  8136c4:	e13ffd17 	ldw	r4,-12(fp)
  8136c8:	08141d80 	call	8141d8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8136cc:	0001883a 	nop
  8136d0:	e037883a 	mov	sp,fp
  8136d4:	dfc00117 	ldw	ra,4(sp)
  8136d8:	df000017 	ldw	fp,0(sp)
  8136dc:	dec00204 	addi	sp,sp,8
  8136e0:	f800283a 	ret

008136e4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8136e4:	defffa04 	addi	sp,sp,-24
  8136e8:	dfc00515 	stw	ra,20(sp)
  8136ec:	df000415 	stw	fp,16(sp)
  8136f0:	df000404 	addi	fp,sp,16
  8136f4:	e13ffd15 	stw	r4,-12(fp)
  8136f8:	e17ffe15 	stw	r5,-8(fp)
  8136fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813700:	e0bffd17 	ldw	r2,-12(fp)
  813704:	10800017 	ldw	r2,0(r2)
  813708:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  81370c:	e0bffc17 	ldw	r2,-16(fp)
  813710:	10c00a04 	addi	r3,r2,40
  813714:	e0bffd17 	ldw	r2,-12(fp)
  813718:	10800217 	ldw	r2,8(r2)
  81371c:	100f883a 	mov	r7,r2
  813720:	e1bfff17 	ldw	r6,-4(fp)
  813724:	e17ffe17 	ldw	r5,-8(fp)
  813728:	1809883a 	mov	r4,r3
  81372c:	0813bf80 	call	813bf8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  813730:	e037883a 	mov	sp,fp
  813734:	dfc00117 	ldw	ra,4(sp)
  813738:	df000017 	ldw	fp,0(sp)
  81373c:	dec00204 	addi	sp,sp,8
  813740:	f800283a 	ret

00813744 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813744:	defffa04 	addi	sp,sp,-24
  813748:	dfc00515 	stw	ra,20(sp)
  81374c:	df000415 	stw	fp,16(sp)
  813750:	df000404 	addi	fp,sp,16
  813754:	e13ffd15 	stw	r4,-12(fp)
  813758:	e17ffe15 	stw	r5,-8(fp)
  81375c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813760:	e0bffd17 	ldw	r2,-12(fp)
  813764:	10800017 	ldw	r2,0(r2)
  813768:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  81376c:	e0bffc17 	ldw	r2,-16(fp)
  813770:	10c00a04 	addi	r3,r2,40
  813774:	e0bffd17 	ldw	r2,-12(fp)
  813778:	10800217 	ldw	r2,8(r2)
  81377c:	100f883a 	mov	r7,r2
  813780:	e1bfff17 	ldw	r6,-4(fp)
  813784:	e17ffe17 	ldw	r5,-8(fp)
  813788:	1809883a 	mov	r4,r3
  81378c:	0813e100 	call	813e10 <altera_avalon_uart_write>
      fd->fd_flags);
}
  813790:	e037883a 	mov	sp,fp
  813794:	dfc00117 	ldw	ra,4(sp)
  813798:	df000017 	ldw	fp,0(sp)
  81379c:	dec00204 	addi	sp,sp,8
  8137a0:	f800283a 	ret

008137a4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8137a4:	defffc04 	addi	sp,sp,-16
  8137a8:	dfc00315 	stw	ra,12(sp)
  8137ac:	df000215 	stw	fp,8(sp)
  8137b0:	df000204 	addi	fp,sp,8
  8137b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8137b8:	e0bfff17 	ldw	r2,-4(fp)
  8137bc:	10800017 	ldw	r2,0(r2)
  8137c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8137c4:	e0bffe17 	ldw	r2,-8(fp)
  8137c8:	10c00a04 	addi	r3,r2,40
  8137cc:	e0bfff17 	ldw	r2,-4(fp)
  8137d0:	10800217 	ldw	r2,8(r2)
  8137d4:	100b883a 	mov	r5,r2
  8137d8:	1809883a 	mov	r4,r3
  8137dc:	0813b680 	call	813b68 <altera_avalon_uart_close>
}
  8137e0:	e037883a 	mov	sp,fp
  8137e4:	dfc00117 	ldw	ra,4(sp)
  8137e8:	df000017 	ldw	fp,0(sp)
  8137ec:	dec00204 	addi	sp,sp,8
  8137f0:	f800283a 	ret

008137f4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8137f4:	defff804 	addi	sp,sp,-32
  8137f8:	dfc00715 	stw	ra,28(sp)
  8137fc:	df000615 	stw	fp,24(sp)
  813800:	df000604 	addi	fp,sp,24
  813804:	e13ffd15 	stw	r4,-12(fp)
  813808:	e17ffe15 	stw	r5,-8(fp)
  81380c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  813810:	e0bffd17 	ldw	r2,-12(fp)
  813814:	10800017 	ldw	r2,0(r2)
  813818:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  81381c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  813820:	1000041e 	bne	r2,zero,813834 <altera_avalon_uart_init+0x40>
  813824:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  813828:	1000021e 	bne	r2,zero,813834 <altera_avalon_uart_init+0x40>
  81382c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  813830:	10000226 	beq	r2,zero,81383c <altera_avalon_uart_init+0x48>
  813834:	00800044 	movi	r2,1
  813838:	00000106 	br	813840 <altera_avalon_uart_init+0x4c>
  81383c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  813840:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  813844:	e0bffc17 	ldw	r2,-16(fp)
  813848:	10000f1e 	bne	r2,zero,813888 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  81384c:	e0bffd17 	ldw	r2,-12(fp)
  813850:	00c32004 	movi	r3,3200
  813854:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  813858:	e0bffb17 	ldw	r2,-20(fp)
  81385c:	10800304 	addi	r2,r2,12
  813860:	e0fffd17 	ldw	r3,-12(fp)
  813864:	18c00117 	ldw	r3,4(r3)
  813868:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  81386c:	d8000015 	stw	zero,0(sp)
  813870:	e1fffd17 	ldw	r7,-12(fp)
  813874:	01802074 	movhi	r6,129
  813878:	318e2804 	addi	r6,r6,14496
  81387c:	e17fff17 	ldw	r5,-4(fp)
  813880:	e13ffe17 	ldw	r4,-8(fp)
  813884:	08141d80 	call	8141d8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  813888:	0001883a 	nop
  81388c:	e037883a 	mov	sp,fp
  813890:	dfc00117 	ldw	ra,4(sp)
  813894:	df000017 	ldw	fp,0(sp)
  813898:	dec00204 	addi	sp,sp,8
  81389c:	f800283a 	ret

008138a0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8138a0:	defffa04 	addi	sp,sp,-24
  8138a4:	dfc00515 	stw	ra,20(sp)
  8138a8:	df000415 	stw	fp,16(sp)
  8138ac:	df000404 	addi	fp,sp,16
  8138b0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8138b4:	e0bfff17 	ldw	r2,-4(fp)
  8138b8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8138bc:	e0bffc17 	ldw	r2,-16(fp)
  8138c0:	10800017 	ldw	r2,0(r2)
  8138c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8138c8:	e0bffd17 	ldw	r2,-12(fp)
  8138cc:	10800204 	addi	r2,r2,8
  8138d0:	10800037 	ldwio	r2,0(r2)
  8138d4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8138d8:	e0bffd17 	ldw	r2,-12(fp)
  8138dc:	10800204 	addi	r2,r2,8
  8138e0:	0007883a 	mov	r3,zero
  8138e4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8138e8:	e0bffd17 	ldw	r2,-12(fp)
  8138ec:	10800204 	addi	r2,r2,8
  8138f0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8138f4:	e0bffe17 	ldw	r2,-8(fp)
  8138f8:	1080200c 	andi	r2,r2,128
  8138fc:	10000326 	beq	r2,zero,81390c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  813900:	e17ffe17 	ldw	r5,-8(fp)
  813904:	e13ffc17 	ldw	r4,-16(fp)
  813908:	081393c0 	call	81393c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  81390c:	e0bffe17 	ldw	r2,-8(fp)
  813910:	1081100c 	andi	r2,r2,1088
  813914:	10000326 	beq	r2,zero,813924 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  813918:	e17ffe17 	ldw	r5,-8(fp)
  81391c:	e13ffc17 	ldw	r4,-16(fp)
  813920:	0813a200 	call	813a20 <altera_avalon_uart_txirq>
  }
  

}
  813924:	0001883a 	nop
  813928:	e037883a 	mov	sp,fp
  81392c:	dfc00117 	ldw	ra,4(sp)
  813930:	df000017 	ldw	fp,0(sp)
  813934:	dec00204 	addi	sp,sp,8
  813938:	f800283a 	ret

0081393c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81393c:	defffc04 	addi	sp,sp,-16
  813940:	df000315 	stw	fp,12(sp)
  813944:	df000304 	addi	fp,sp,12
  813948:	e13ffe15 	stw	r4,-8(fp)
  81394c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  813950:	e0bfff17 	ldw	r2,-4(fp)
  813954:	108000cc 	andi	r2,r2,3
  813958:	10002c1e 	bne	r2,zero,813a0c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  81395c:	e0bffe17 	ldw	r2,-8(fp)
  813960:	10800317 	ldw	r2,12(r2)
  813964:	e0bffe17 	ldw	r2,-8(fp)
  813968:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81396c:	e0bffe17 	ldw	r2,-8(fp)
  813970:	10800317 	ldw	r2,12(r2)
  813974:	10800044 	addi	r2,r2,1
  813978:	10800fcc 	andi	r2,r2,63
  81397c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  813980:	e0bffe17 	ldw	r2,-8(fp)
  813984:	10800317 	ldw	r2,12(r2)
  813988:	e0fffe17 	ldw	r3,-8(fp)
  81398c:	18c00017 	ldw	r3,0(r3)
  813990:	18c00037 	ldwio	r3,0(r3)
  813994:	1809883a 	mov	r4,r3
  813998:	e0fffe17 	ldw	r3,-8(fp)
  81399c:	1885883a 	add	r2,r3,r2
  8139a0:	10800704 	addi	r2,r2,28
  8139a4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  8139a8:	e0bffe17 	ldw	r2,-8(fp)
  8139ac:	e0fffd17 	ldw	r3,-12(fp)
  8139b0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8139b4:	e0bffe17 	ldw	r2,-8(fp)
  8139b8:	10800317 	ldw	r2,12(r2)
  8139bc:	10800044 	addi	r2,r2,1
  8139c0:	10800fcc 	andi	r2,r2,63
  8139c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8139c8:	e0bffe17 	ldw	r2,-8(fp)
  8139cc:	10c00217 	ldw	r3,8(r2)
  8139d0:	e0bffd17 	ldw	r2,-12(fp)
  8139d4:	18800e1e 	bne	r3,r2,813a10 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8139d8:	e0bffe17 	ldw	r2,-8(fp)
  8139dc:	10c00117 	ldw	r3,4(r2)
  8139e0:	00bfdfc4 	movi	r2,-129
  8139e4:	1886703a 	and	r3,r3,r2
  8139e8:	e0bffe17 	ldw	r2,-8(fp)
  8139ec:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8139f0:	e0bffe17 	ldw	r2,-8(fp)
  8139f4:	10800017 	ldw	r2,0(r2)
  8139f8:	10800304 	addi	r2,r2,12
  8139fc:	e0fffe17 	ldw	r3,-8(fp)
  813a00:	18c00117 	ldw	r3,4(r3)
  813a04:	10c00035 	stwio	r3,0(r2)
  813a08:	00000106 	br	813a10 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  813a0c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  813a10:	e037883a 	mov	sp,fp
  813a14:	df000017 	ldw	fp,0(sp)
  813a18:	dec00104 	addi	sp,sp,4
  813a1c:	f800283a 	ret

00813a20 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  813a20:	defffb04 	addi	sp,sp,-20
  813a24:	df000415 	stw	fp,16(sp)
  813a28:	df000404 	addi	fp,sp,16
  813a2c:	e13ffc15 	stw	r4,-16(fp)
  813a30:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  813a34:	e0bffc17 	ldw	r2,-16(fp)
  813a38:	10c00417 	ldw	r3,16(r2)
  813a3c:	e0bffc17 	ldw	r2,-16(fp)
  813a40:	10800517 	ldw	r2,20(r2)
  813a44:	18803226 	beq	r3,r2,813b10 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  813a48:	e0bffc17 	ldw	r2,-16(fp)
  813a4c:	10800617 	ldw	r2,24(r2)
  813a50:	1080008c 	andi	r2,r2,2
  813a54:	10000326 	beq	r2,zero,813a64 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  813a58:	e0bffd17 	ldw	r2,-12(fp)
  813a5c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  813a60:	10001d26 	beq	r2,zero,813ad8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  813a64:	e0bffc17 	ldw	r2,-16(fp)
  813a68:	10800417 	ldw	r2,16(r2)
  813a6c:	e0bffc17 	ldw	r2,-16(fp)
  813a70:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  813a74:	e0bffc17 	ldw	r2,-16(fp)
  813a78:	10800017 	ldw	r2,0(r2)
  813a7c:	10800104 	addi	r2,r2,4
  813a80:	e0fffc17 	ldw	r3,-16(fp)
  813a84:	18c00417 	ldw	r3,16(r3)
  813a88:	e13ffc17 	ldw	r4,-16(fp)
  813a8c:	20c7883a 	add	r3,r4,r3
  813a90:	18c01704 	addi	r3,r3,92
  813a94:	18c00003 	ldbu	r3,0(r3)
  813a98:	18c03fcc 	andi	r3,r3,255
  813a9c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  813aa0:	e0bffc17 	ldw	r2,-16(fp)
  813aa4:	10800417 	ldw	r2,16(r2)
  813aa8:	10800044 	addi	r2,r2,1
  813aac:	e0fffc17 	ldw	r3,-16(fp)
  813ab0:	18800415 	stw	r2,16(r3)
  813ab4:	10c00fcc 	andi	r3,r2,63
  813ab8:	e0bffc17 	ldw	r2,-16(fp)
  813abc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  813ac0:	e0bffc17 	ldw	r2,-16(fp)
  813ac4:	10800117 	ldw	r2,4(r2)
  813ac8:	10c01014 	ori	r3,r2,64
  813acc:	e0bffc17 	ldw	r2,-16(fp)
  813ad0:	10c00115 	stw	r3,4(r2)
  813ad4:	00000e06 	br	813b10 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  813ad8:	e0bffc17 	ldw	r2,-16(fp)
  813adc:	10800017 	ldw	r2,0(r2)
  813ae0:	10800204 	addi	r2,r2,8
  813ae4:	10800037 	ldwio	r2,0(r2)
  813ae8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  813aec:	e0bffd17 	ldw	r2,-12(fp)
  813af0:	1082000c 	andi	r2,r2,2048
  813af4:	1000061e 	bne	r2,zero,813b10 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  813af8:	e0bffc17 	ldw	r2,-16(fp)
  813afc:	10c00117 	ldw	r3,4(r2)
  813b00:	00bfefc4 	movi	r2,-65
  813b04:	1886703a 	and	r3,r3,r2
  813b08:	e0bffc17 	ldw	r2,-16(fp)
  813b0c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  813b10:	e0bffc17 	ldw	r2,-16(fp)
  813b14:	10c00417 	ldw	r3,16(r2)
  813b18:	e0bffc17 	ldw	r2,-16(fp)
  813b1c:	10800517 	ldw	r2,20(r2)
  813b20:	1880061e 	bne	r3,r2,813b3c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813b24:	e0bffc17 	ldw	r2,-16(fp)
  813b28:	10c00117 	ldw	r3,4(r2)
  813b2c:	00beefc4 	movi	r2,-1089
  813b30:	1886703a 	and	r3,r3,r2
  813b34:	e0bffc17 	ldw	r2,-16(fp)
  813b38:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813b3c:	e0bffc17 	ldw	r2,-16(fp)
  813b40:	10800017 	ldw	r2,0(r2)
  813b44:	10800304 	addi	r2,r2,12
  813b48:	e0fffc17 	ldw	r3,-16(fp)
  813b4c:	18c00117 	ldw	r3,4(r3)
  813b50:	10c00035 	stwio	r3,0(r2)
}
  813b54:	0001883a 	nop
  813b58:	e037883a 	mov	sp,fp
  813b5c:	df000017 	ldw	fp,0(sp)
  813b60:	dec00104 	addi	sp,sp,4
  813b64:	f800283a 	ret

00813b68 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  813b68:	defffd04 	addi	sp,sp,-12
  813b6c:	df000215 	stw	fp,8(sp)
  813b70:	df000204 	addi	fp,sp,8
  813b74:	e13ffe15 	stw	r4,-8(fp)
  813b78:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  813b7c:	00000506 	br	813b94 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  813b80:	e0bfff17 	ldw	r2,-4(fp)
  813b84:	1090000c 	andi	r2,r2,16384
  813b88:	10000226 	beq	r2,zero,813b94 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  813b8c:	00bffd44 	movi	r2,-11
  813b90:	00000606 	br	813bac <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  813b94:	e0bffe17 	ldw	r2,-8(fp)
  813b98:	10c00417 	ldw	r3,16(r2)
  813b9c:	e0bffe17 	ldw	r2,-8(fp)
  813ba0:	10800517 	ldw	r2,20(r2)
  813ba4:	18bff61e 	bne	r3,r2,813b80 <__alt_mem_onchip_mem+0xff80bb80>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  813ba8:	0005883a 	mov	r2,zero
}
  813bac:	e037883a 	mov	sp,fp
  813bb0:	df000017 	ldw	fp,0(sp)
  813bb4:	dec00104 	addi	sp,sp,4
  813bb8:	f800283a 	ret

00813bbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813bbc:	defffe04 	addi	sp,sp,-8
  813bc0:	dfc00115 	stw	ra,4(sp)
  813bc4:	df000015 	stw	fp,0(sp)
  813bc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813bcc:	d0a00b17 	ldw	r2,-32724(gp)
  813bd0:	10000326 	beq	r2,zero,813be0 <alt_get_errno+0x24>
  813bd4:	d0a00b17 	ldw	r2,-32724(gp)
  813bd8:	103ee83a 	callr	r2
  813bdc:	00000106 	br	813be4 <alt_get_errno+0x28>
  813be0:	d0a74e04 	addi	r2,gp,-25288
}
  813be4:	e037883a 	mov	sp,fp
  813be8:	dfc00117 	ldw	ra,4(sp)
  813bec:	df000017 	ldw	fp,0(sp)
  813bf0:	dec00204 	addi	sp,sp,8
  813bf4:	f800283a 	ret

00813bf8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  813bf8:	defff204 	addi	sp,sp,-56
  813bfc:	dfc00d15 	stw	ra,52(sp)
  813c00:	df000c15 	stw	fp,48(sp)
  813c04:	df000c04 	addi	fp,sp,48
  813c08:	e13ffc15 	stw	r4,-16(fp)
  813c0c:	e17ffd15 	stw	r5,-12(fp)
  813c10:	e1bffe15 	stw	r6,-8(fp)
  813c14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  813c18:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  813c1c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  813c20:	e0bfff17 	ldw	r2,-4(fp)
  813c24:	1090000c 	andi	r2,r2,16384
  813c28:	1005003a 	cmpeq	r2,r2,zero
  813c2c:	10803fcc 	andi	r2,r2,255
  813c30:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  813c34:	00001306 	br	813c84 <altera_avalon_uart_read+0x8c>
    {
      count++;
  813c38:	e0bff517 	ldw	r2,-44(fp)
  813c3c:	10800044 	addi	r2,r2,1
  813c40:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  813c44:	e0bffd17 	ldw	r2,-12(fp)
  813c48:	10c00044 	addi	r3,r2,1
  813c4c:	e0fffd15 	stw	r3,-12(fp)
  813c50:	e0fffc17 	ldw	r3,-16(fp)
  813c54:	18c00217 	ldw	r3,8(r3)
  813c58:	e13ffc17 	ldw	r4,-16(fp)
  813c5c:	20c7883a 	add	r3,r4,r3
  813c60:	18c00704 	addi	r3,r3,28
  813c64:	18c00003 	ldbu	r3,0(r3)
  813c68:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  813c6c:	e0bffc17 	ldw	r2,-16(fp)
  813c70:	10800217 	ldw	r2,8(r2)
  813c74:	10800044 	addi	r2,r2,1
  813c78:	10c00fcc 	andi	r3,r2,63
  813c7c:	e0bffc17 	ldw	r2,-16(fp)
  813c80:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  813c84:	e0fff517 	ldw	r3,-44(fp)
  813c88:	e0bffe17 	ldw	r2,-8(fp)
  813c8c:	1880050e 	bge	r3,r2,813ca4 <altera_avalon_uart_read+0xac>
  813c90:	e0bffc17 	ldw	r2,-16(fp)
  813c94:	10c00217 	ldw	r3,8(r2)
  813c98:	e0bffc17 	ldw	r2,-16(fp)
  813c9c:	10800317 	ldw	r2,12(r2)
  813ca0:	18bfe51e 	bne	r3,r2,813c38 <__alt_mem_onchip_mem+0xff80bc38>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  813ca4:	e0bff517 	ldw	r2,-44(fp)
  813ca8:	1000251e 	bne	r2,zero,813d40 <altera_avalon_uart_read+0x148>
  813cac:	e0bffc17 	ldw	r2,-16(fp)
  813cb0:	10c00217 	ldw	r3,8(r2)
  813cb4:	e0bffc17 	ldw	r2,-16(fp)
  813cb8:	10800317 	ldw	r2,12(r2)
  813cbc:	1880201e 	bne	r3,r2,813d40 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  813cc0:	e0bff617 	ldw	r2,-40(fp)
  813cc4:	1000071e 	bne	r2,zero,813ce4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  813cc8:	0813bbc0 	call	813bbc <alt_get_errno>
  813ccc:	1007883a 	mov	r3,r2
  813cd0:	008002c4 	movi	r2,11
  813cd4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  813cd8:	00800044 	movi	r2,1
  813cdc:	e0bff405 	stb	r2,-48(fp)
        break;
  813ce0:	00001b06 	br	813d50 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813ce4:	0005303a 	rdctl	r2,status
  813ce8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813cec:	e0fff917 	ldw	r3,-28(fp)
  813cf0:	00bfff84 	movi	r2,-2
  813cf4:	1884703a 	and	r2,r3,r2
  813cf8:	1001703a 	wrctl	status,r2
  
  return context;
  813cfc:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  813d00:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813d04:	e0bffc17 	ldw	r2,-16(fp)
  813d08:	10800117 	ldw	r2,4(r2)
  813d0c:	10c02014 	ori	r3,r2,128
  813d10:	e0bffc17 	ldw	r2,-16(fp)
  813d14:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813d18:	e0bffc17 	ldw	r2,-16(fp)
  813d1c:	10800017 	ldw	r2,0(r2)
  813d20:	10800304 	addi	r2,r2,12
  813d24:	e0fffc17 	ldw	r3,-16(fp)
  813d28:	18c00117 	ldw	r3,4(r3)
  813d2c:	10c00035 	stwio	r3,0(r2)
  813d30:	e0bff817 	ldw	r2,-32(fp)
  813d34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813d38:	e0bffa17 	ldw	r2,-24(fp)
  813d3c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  813d40:	e0bff517 	ldw	r2,-44(fp)
  813d44:	1000021e 	bne	r2,zero,813d50 <altera_avalon_uart_read+0x158>
  813d48:	e0bffe17 	ldw	r2,-8(fp)
  813d4c:	103fcd1e 	bne	r2,zero,813c84 <__alt_mem_onchip_mem+0xff80bc84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d50:	0005303a 	rdctl	r2,status
  813d54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d58:	e0fffb17 	ldw	r3,-20(fp)
  813d5c:	00bfff84 	movi	r2,-2
  813d60:	1884703a 	and	r2,r3,r2
  813d64:	1001703a 	wrctl	status,r2
  
  return context;
  813d68:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  813d6c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813d70:	e0bffc17 	ldw	r2,-16(fp)
  813d74:	10800117 	ldw	r2,4(r2)
  813d78:	10c02014 	ori	r3,r2,128
  813d7c:	e0bffc17 	ldw	r2,-16(fp)
  813d80:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813d84:	e0bffc17 	ldw	r2,-16(fp)
  813d88:	10800017 	ldw	r2,0(r2)
  813d8c:	10800304 	addi	r2,r2,12
  813d90:	e0fffc17 	ldw	r3,-16(fp)
  813d94:	18c00117 	ldw	r3,4(r3)
  813d98:	10c00035 	stwio	r3,0(r2)
  813d9c:	e0bff817 	ldw	r2,-32(fp)
  813da0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813da4:	e0bff717 	ldw	r2,-36(fp)
  813da8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  813dac:	e0bff403 	ldbu	r2,-48(fp)
  813db0:	10000226 	beq	r2,zero,813dbc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  813db4:	00bffd44 	movi	r2,-11
  813db8:	00000106 	br	813dc0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  813dbc:	e0bff517 	ldw	r2,-44(fp)
  }
}
  813dc0:	e037883a 	mov	sp,fp
  813dc4:	dfc00117 	ldw	ra,4(sp)
  813dc8:	df000017 	ldw	fp,0(sp)
  813dcc:	dec00204 	addi	sp,sp,8
  813dd0:	f800283a 	ret

00813dd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813dd4:	defffe04 	addi	sp,sp,-8
  813dd8:	dfc00115 	stw	ra,4(sp)
  813ddc:	df000015 	stw	fp,0(sp)
  813de0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813de4:	d0a00b17 	ldw	r2,-32724(gp)
  813de8:	10000326 	beq	r2,zero,813df8 <alt_get_errno+0x24>
  813dec:	d0a00b17 	ldw	r2,-32724(gp)
  813df0:	103ee83a 	callr	r2
  813df4:	00000106 	br	813dfc <alt_get_errno+0x28>
  813df8:	d0a74e04 	addi	r2,gp,-25288
}
  813dfc:	e037883a 	mov	sp,fp
  813e00:	dfc00117 	ldw	ra,4(sp)
  813e04:	df000017 	ldw	fp,0(sp)
  813e08:	dec00204 	addi	sp,sp,8
  813e0c:	f800283a 	ret

00813e10 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  813e10:	defff204 	addi	sp,sp,-56
  813e14:	dfc00d15 	stw	ra,52(sp)
  813e18:	df000c15 	stw	fp,48(sp)
  813e1c:	df000c04 	addi	fp,sp,48
  813e20:	e13ffc15 	stw	r4,-16(fp)
  813e24:	e17ffd15 	stw	r5,-12(fp)
  813e28:	e1bffe15 	stw	r6,-8(fp)
  813e2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  813e30:	e0bffe17 	ldw	r2,-8(fp)
  813e34:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  813e38:	e0bfff17 	ldw	r2,-4(fp)
  813e3c:	1090000c 	andi	r2,r2,16384
  813e40:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813e44:	00003c06 	br	813f38 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813e48:	e0bffc17 	ldw	r2,-16(fp)
  813e4c:	10800517 	ldw	r2,20(r2)
  813e50:	10800044 	addi	r2,r2,1
  813e54:	10800fcc 	andi	r2,r2,63
  813e58:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  813e5c:	e0bffc17 	ldw	r2,-16(fp)
  813e60:	10c00417 	ldw	r3,16(r2)
  813e64:	e0bff717 	ldw	r2,-36(fp)
  813e68:	1880221e 	bne	r3,r2,813ef4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  813e6c:	e0bff517 	ldw	r2,-44(fp)
  813e70:	10000526 	beq	r2,zero,813e88 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  813e74:	0813dd40 	call	813dd4 <alt_get_errno>
  813e78:	1007883a 	mov	r3,r2
  813e7c:	008002c4 	movi	r2,11
  813e80:	18800015 	stw	r2,0(r3)
        break;
  813e84:	00002e06 	br	813f40 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813e88:	0005303a 	rdctl	r2,status
  813e8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813e90:	e0fff917 	ldw	r3,-28(fp)
  813e94:	00bfff84 	movi	r2,-2
  813e98:	1884703a 	and	r2,r3,r2
  813e9c:	1001703a 	wrctl	status,r2
  
  return context;
  813ea0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  813ea4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813ea8:	e0bffc17 	ldw	r2,-16(fp)
  813eac:	10800117 	ldw	r2,4(r2)
  813eb0:	10c11014 	ori	r3,r2,1088
  813eb4:	e0bffc17 	ldw	r2,-16(fp)
  813eb8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813ebc:	e0bffc17 	ldw	r2,-16(fp)
  813ec0:	10800017 	ldw	r2,0(r2)
  813ec4:	10800304 	addi	r2,r2,12
  813ec8:	e0fffc17 	ldw	r3,-16(fp)
  813ecc:	18c00117 	ldw	r3,4(r3)
  813ed0:	10c00035 	stwio	r3,0(r2)
  813ed4:	e0bff817 	ldw	r2,-32(fp)
  813ed8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813edc:	e0bff617 	ldw	r2,-40(fp)
  813ee0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  813ee4:	e0bffc17 	ldw	r2,-16(fp)
  813ee8:	10c00417 	ldw	r3,16(r2)
  813eec:	e0bff717 	ldw	r2,-36(fp)
  813ef0:	18bffc26 	beq	r3,r2,813ee4 <__alt_mem_onchip_mem+0xff80bee4>
      }
    }

    count--;
  813ef4:	e0bff417 	ldw	r2,-48(fp)
  813ef8:	10bfffc4 	addi	r2,r2,-1
  813efc:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  813f00:	e0bffc17 	ldw	r2,-16(fp)
  813f04:	10c00517 	ldw	r3,20(r2)
  813f08:	e0bffd17 	ldw	r2,-12(fp)
  813f0c:	11000044 	addi	r4,r2,1
  813f10:	e13ffd15 	stw	r4,-12(fp)
  813f14:	10800003 	ldbu	r2,0(r2)
  813f18:	1009883a 	mov	r4,r2
  813f1c:	e0bffc17 	ldw	r2,-16(fp)
  813f20:	10c5883a 	add	r2,r2,r3
  813f24:	10801704 	addi	r2,r2,92
  813f28:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  813f2c:	e0bffc17 	ldw	r2,-16(fp)
  813f30:	e0fff717 	ldw	r3,-36(fp)
  813f34:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813f38:	e0bff417 	ldw	r2,-48(fp)
  813f3c:	103fc21e 	bne	r2,zero,813e48 <__alt_mem_onchip_mem+0xff80be48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813f40:	0005303a 	rdctl	r2,status
  813f44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813f48:	e0fffb17 	ldw	r3,-20(fp)
  813f4c:	00bfff84 	movi	r2,-2
  813f50:	1884703a 	and	r2,r3,r2
  813f54:	1001703a 	wrctl	status,r2
  
  return context;
  813f58:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  813f5c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813f60:	e0bffc17 	ldw	r2,-16(fp)
  813f64:	10800117 	ldw	r2,4(r2)
  813f68:	10c11014 	ori	r3,r2,1088
  813f6c:	e0bffc17 	ldw	r2,-16(fp)
  813f70:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813f74:	e0bffc17 	ldw	r2,-16(fp)
  813f78:	10800017 	ldw	r2,0(r2)
  813f7c:	10800304 	addi	r2,r2,12
  813f80:	e0fffc17 	ldw	r3,-16(fp)
  813f84:	18c00117 	ldw	r3,4(r3)
  813f88:	10c00035 	stwio	r3,0(r2)
  813f8c:	e0bff817 	ldw	r2,-32(fp)
  813f90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813f94:	e0bffa17 	ldw	r2,-24(fp)
  813f98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  813f9c:	e0fffe17 	ldw	r3,-8(fp)
  813fa0:	e0bff417 	ldw	r2,-48(fp)
  813fa4:	1885c83a 	sub	r2,r3,r2
}
  813fa8:	e037883a 	mov	sp,fp
  813fac:	dfc00117 	ldw	ra,4(sp)
  813fb0:	df000017 	ldw	fp,0(sp)
  813fb4:	dec00204 	addi	sp,sp,8
  813fb8:	f800283a 	ret

00813fbc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813fbc:	defffe04 	addi	sp,sp,-8
  813fc0:	df000115 	stw	fp,4(sp)
  813fc4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813fc8:	e03fff15 	stw	zero,-4(fp)
  813fcc:	00000506 	br	813fe4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  813fd0:	e0bfff17 	ldw	r2,-4(fp)
  813fd4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813fd8:	e0bfff17 	ldw	r2,-4(fp)
  813fdc:	10800804 	addi	r2,r2,32
  813fe0:	e0bfff15 	stw	r2,-4(fp)
  813fe4:	e0bfff17 	ldw	r2,-4(fp)
  813fe8:	10820030 	cmpltui	r2,r2,2048
  813fec:	103ff81e 	bne	r2,zero,813fd0 <__alt_mem_onchip_mem+0xff80bfd0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813ff0:	0001883a 	nop
  813ff4:	e037883a 	mov	sp,fp
  813ff8:	df000017 	ldw	fp,0(sp)
  813ffc:	dec00104 	addi	sp,sp,4
  814000:	f800283a 	ret

00814004 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814004:	defffe04 	addi	sp,sp,-8
  814008:	dfc00115 	stw	ra,4(sp)
  81400c:	df000015 	stw	fp,0(sp)
  814010:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  814014:	d0a00b17 	ldw	r2,-32724(gp)
  814018:	10000326 	beq	r2,zero,814028 <alt_get_errno+0x24>
  81401c:	d0a00b17 	ldw	r2,-32724(gp)
  814020:	103ee83a 	callr	r2
  814024:	00000106 	br	81402c <alt_get_errno+0x28>
  814028:	d0a74e04 	addi	r2,gp,-25288
}
  81402c:	e037883a 	mov	sp,fp
  814030:	dfc00117 	ldw	ra,4(sp)
  814034:	df000017 	ldw	fp,0(sp)
  814038:	dec00204 	addi	sp,sp,8
  81403c:	f800283a 	ret

00814040 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  814040:	defffa04 	addi	sp,sp,-24
  814044:	dfc00515 	stw	ra,20(sp)
  814048:	df000415 	stw	fp,16(sp)
  81404c:	df000404 	addi	fp,sp,16
  814050:	e13ffe15 	stw	r4,-8(fp)
  814054:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  814058:	e0bffe17 	ldw	r2,-8(fp)
  81405c:	10000326 	beq	r2,zero,81406c <alt_dev_llist_insert+0x2c>
  814060:	e0bffe17 	ldw	r2,-8(fp)
  814064:	10800217 	ldw	r2,8(r2)
  814068:	1000061e 	bne	r2,zero,814084 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  81406c:	08140040 	call	814004 <alt_get_errno>
  814070:	1007883a 	mov	r3,r2
  814074:	00800584 	movi	r2,22
  814078:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  81407c:	00bffa84 	movi	r2,-22
  814080:	00001306 	br	8140d0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  814084:	e0bffe17 	ldw	r2,-8(fp)
  814088:	e0ffff17 	ldw	r3,-4(fp)
  81408c:	e0fffc15 	stw	r3,-16(fp)
  814090:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  814094:	e0bffd17 	ldw	r2,-12(fp)
  814098:	e0fffc17 	ldw	r3,-16(fp)
  81409c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8140a0:	e0bffc17 	ldw	r2,-16(fp)
  8140a4:	10c00017 	ldw	r3,0(r2)
  8140a8:	e0bffd17 	ldw	r2,-12(fp)
  8140ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8140b0:	e0bffc17 	ldw	r2,-16(fp)
  8140b4:	10800017 	ldw	r2,0(r2)
  8140b8:	e0fffd17 	ldw	r3,-12(fp)
  8140bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8140c0:	e0bffc17 	ldw	r2,-16(fp)
  8140c4:	e0fffd17 	ldw	r3,-12(fp)
  8140c8:	10c00015 	stw	r3,0(r2)

  return 0;  
  8140cc:	0005883a 	mov	r2,zero
}
  8140d0:	e037883a 	mov	sp,fp
  8140d4:	dfc00117 	ldw	ra,4(sp)
  8140d8:	df000017 	ldw	fp,0(sp)
  8140dc:	dec00204 	addi	sp,sp,8
  8140e0:	f800283a 	ret

008140e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8140e4:	defffd04 	addi	sp,sp,-12
  8140e8:	dfc00215 	stw	ra,8(sp)
  8140ec:	df000115 	stw	fp,4(sp)
  8140f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8140f4:	00802074 	movhi	r2,129
  8140f8:	10942c04 	addi	r2,r2,20656
  8140fc:	e0bfff15 	stw	r2,-4(fp)
  814100:	00000606 	br	81411c <_do_ctors+0x38>
        (*ctor) (); 
  814104:	e0bfff17 	ldw	r2,-4(fp)
  814108:	10800017 	ldw	r2,0(r2)
  81410c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  814110:	e0bfff17 	ldw	r2,-4(fp)
  814114:	10bfff04 	addi	r2,r2,-4
  814118:	e0bfff15 	stw	r2,-4(fp)
  81411c:	e0ffff17 	ldw	r3,-4(fp)
  814120:	00802074 	movhi	r2,129
  814124:	10942d04 	addi	r2,r2,20660
  814128:	18bff62e 	bgeu	r3,r2,814104 <__alt_mem_onchip_mem+0xff80c104>
        (*ctor) (); 
}
  81412c:	0001883a 	nop
  814130:	e037883a 	mov	sp,fp
  814134:	dfc00117 	ldw	ra,4(sp)
  814138:	df000017 	ldw	fp,0(sp)
  81413c:	dec00204 	addi	sp,sp,8
  814140:	f800283a 	ret

00814144 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  814144:	defffd04 	addi	sp,sp,-12
  814148:	dfc00215 	stw	ra,8(sp)
  81414c:	df000115 	stw	fp,4(sp)
  814150:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  814154:	00802074 	movhi	r2,129
  814158:	10942c04 	addi	r2,r2,20656
  81415c:	e0bfff15 	stw	r2,-4(fp)
  814160:	00000606 	br	81417c <_do_dtors+0x38>
        (*dtor) (); 
  814164:	e0bfff17 	ldw	r2,-4(fp)
  814168:	10800017 	ldw	r2,0(r2)
  81416c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  814170:	e0bfff17 	ldw	r2,-4(fp)
  814174:	10bfff04 	addi	r2,r2,-4
  814178:	e0bfff15 	stw	r2,-4(fp)
  81417c:	e0ffff17 	ldw	r3,-4(fp)
  814180:	00802074 	movhi	r2,129
  814184:	10942d04 	addi	r2,r2,20660
  814188:	18bff62e 	bgeu	r3,r2,814164 <__alt_mem_onchip_mem+0xff80c164>
        (*dtor) (); 
}
  81418c:	0001883a 	nop
  814190:	e037883a 	mov	sp,fp
  814194:	dfc00117 	ldw	ra,4(sp)
  814198:	df000017 	ldw	fp,0(sp)
  81419c:	dec00204 	addi	sp,sp,8
  8141a0:	f800283a 	ret

008141a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8141a4:	defffe04 	addi	sp,sp,-8
  8141a8:	dfc00115 	stw	ra,4(sp)
  8141ac:	df000015 	stw	fp,0(sp)
  8141b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8141b4:	01440004 	movi	r5,4096
  8141b8:	0009883a 	mov	r4,zero
  8141bc:	0814bf40 	call	814bf4 <alt_icache_flush>
#endif
}
  8141c0:	0001883a 	nop
  8141c4:	e037883a 	mov	sp,fp
  8141c8:	dfc00117 	ldw	ra,4(sp)
  8141cc:	df000017 	ldw	fp,0(sp)
  8141d0:	dec00204 	addi	sp,sp,8
  8141d4:	f800283a 	ret

008141d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8141d8:	defff904 	addi	sp,sp,-28
  8141dc:	dfc00615 	stw	ra,24(sp)
  8141e0:	df000515 	stw	fp,20(sp)
  8141e4:	df000504 	addi	fp,sp,20
  8141e8:	e13ffc15 	stw	r4,-16(fp)
  8141ec:	e17ffd15 	stw	r5,-12(fp)
  8141f0:	e1bffe15 	stw	r6,-8(fp)
  8141f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8141f8:	e0800217 	ldw	r2,8(fp)
  8141fc:	d8800015 	stw	r2,0(sp)
  814200:	e1ffff17 	ldw	r7,-4(fp)
  814204:	e1bffe17 	ldw	r6,-8(fp)
  814208:	e17ffd17 	ldw	r5,-12(fp)
  81420c:	e13ffc17 	ldw	r4,-16(fp)
  814210:	08143880 	call	814388 <alt_iic_isr_register>
}  
  814214:	e037883a 	mov	sp,fp
  814218:	dfc00117 	ldw	ra,4(sp)
  81421c:	df000017 	ldw	fp,0(sp)
  814220:	dec00204 	addi	sp,sp,8
  814224:	f800283a 	ret

00814228 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  814228:	defff904 	addi	sp,sp,-28
  81422c:	df000615 	stw	fp,24(sp)
  814230:	df000604 	addi	fp,sp,24
  814234:	e13ffe15 	stw	r4,-8(fp)
  814238:	e17fff15 	stw	r5,-4(fp)
  81423c:	e0bfff17 	ldw	r2,-4(fp)
  814240:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814244:	0005303a 	rdctl	r2,status
  814248:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81424c:	e0fffb17 	ldw	r3,-20(fp)
  814250:	00bfff84 	movi	r2,-2
  814254:	1884703a 	and	r2,r3,r2
  814258:	1001703a 	wrctl	status,r2
  
  return context;
  81425c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814260:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  814264:	00c00044 	movi	r3,1
  814268:	e0bffa17 	ldw	r2,-24(fp)
  81426c:	1884983a 	sll	r2,r3,r2
  814270:	1007883a 	mov	r3,r2
  814274:	d0a74f17 	ldw	r2,-25284(gp)
  814278:	1884b03a 	or	r2,r3,r2
  81427c:	d0a74f15 	stw	r2,-25284(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814280:	d0a74f17 	ldw	r2,-25284(gp)
  814284:	100170fa 	wrctl	ienable,r2
  814288:	e0bffc17 	ldw	r2,-16(fp)
  81428c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814290:	e0bffd17 	ldw	r2,-12(fp)
  814294:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814298:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  81429c:	0001883a 	nop
}
  8142a0:	e037883a 	mov	sp,fp
  8142a4:	df000017 	ldw	fp,0(sp)
  8142a8:	dec00104 	addi	sp,sp,4
  8142ac:	f800283a 	ret

008142b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8142b0:	defff904 	addi	sp,sp,-28
  8142b4:	df000615 	stw	fp,24(sp)
  8142b8:	df000604 	addi	fp,sp,24
  8142bc:	e13ffe15 	stw	r4,-8(fp)
  8142c0:	e17fff15 	stw	r5,-4(fp)
  8142c4:	e0bfff17 	ldw	r2,-4(fp)
  8142c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8142cc:	0005303a 	rdctl	r2,status
  8142d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8142d4:	e0fffb17 	ldw	r3,-20(fp)
  8142d8:	00bfff84 	movi	r2,-2
  8142dc:	1884703a 	and	r2,r3,r2
  8142e0:	1001703a 	wrctl	status,r2
  
  return context;
  8142e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8142e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  8142ec:	00c00044 	movi	r3,1
  8142f0:	e0bffa17 	ldw	r2,-24(fp)
  8142f4:	1884983a 	sll	r2,r3,r2
  8142f8:	0084303a 	nor	r2,zero,r2
  8142fc:	1007883a 	mov	r3,r2
  814300:	d0a74f17 	ldw	r2,-25284(gp)
  814304:	1884703a 	and	r2,r3,r2
  814308:	d0a74f15 	stw	r2,-25284(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81430c:	d0a74f17 	ldw	r2,-25284(gp)
  814310:	100170fa 	wrctl	ienable,r2
  814314:	e0bffc17 	ldw	r2,-16(fp)
  814318:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81431c:	e0bffd17 	ldw	r2,-12(fp)
  814320:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814324:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  814328:	0001883a 	nop
}
  81432c:	e037883a 	mov	sp,fp
  814330:	df000017 	ldw	fp,0(sp)
  814334:	dec00104 	addi	sp,sp,4
  814338:	f800283a 	ret

0081433c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81433c:	defffc04 	addi	sp,sp,-16
  814340:	df000315 	stw	fp,12(sp)
  814344:	df000304 	addi	fp,sp,12
  814348:	e13ffe15 	stw	r4,-8(fp)
  81434c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  814350:	000530fa 	rdctl	r2,ienable
  814354:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  814358:	00c00044 	movi	r3,1
  81435c:	e0bfff17 	ldw	r2,-4(fp)
  814360:	1884983a 	sll	r2,r3,r2
  814364:	1007883a 	mov	r3,r2
  814368:	e0bffd17 	ldw	r2,-12(fp)
  81436c:	1884703a 	and	r2,r3,r2
  814370:	1004c03a 	cmpne	r2,r2,zero
  814374:	10803fcc 	andi	r2,r2,255
}
  814378:	e037883a 	mov	sp,fp
  81437c:	df000017 	ldw	fp,0(sp)
  814380:	dec00104 	addi	sp,sp,4
  814384:	f800283a 	ret

00814388 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814388:	defff504 	addi	sp,sp,-44
  81438c:	dfc00a15 	stw	ra,40(sp)
  814390:	df000915 	stw	fp,36(sp)
  814394:	df000904 	addi	fp,sp,36
  814398:	e13ffc15 	stw	r4,-16(fp)
  81439c:	e17ffd15 	stw	r5,-12(fp)
  8143a0:	e1bffe15 	stw	r6,-8(fp)
  8143a4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8143a8:	00bffa84 	movi	r2,-22
  8143ac:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8143b0:	e0bffd17 	ldw	r2,-12(fp)
  8143b4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8143b8:	e0bff817 	ldw	r2,-32(fp)
  8143bc:	10800808 	cmpgei	r2,r2,32
  8143c0:	1000271e 	bne	r2,zero,814460 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8143c4:	0005303a 	rdctl	r2,status
  8143c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8143cc:	e0fffb17 	ldw	r3,-20(fp)
  8143d0:	00bfff84 	movi	r2,-2
  8143d4:	1884703a 	and	r2,r3,r2
  8143d8:	1001703a 	wrctl	status,r2
  
  return context;
  8143dc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8143e0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  8143e4:	008020b4 	movhi	r2,130
  8143e8:	10a41b04 	addi	r2,r2,-28564
  8143ec:	e0fff817 	ldw	r3,-32(fp)
  8143f0:	180690fa 	slli	r3,r3,3
  8143f4:	10c5883a 	add	r2,r2,r3
  8143f8:	e0fffe17 	ldw	r3,-8(fp)
  8143fc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  814400:	008020b4 	movhi	r2,130
  814404:	10a41b04 	addi	r2,r2,-28564
  814408:	e0fff817 	ldw	r3,-32(fp)
  81440c:	180690fa 	slli	r3,r3,3
  814410:	10c5883a 	add	r2,r2,r3
  814414:	10800104 	addi	r2,r2,4
  814418:	e0ffff17 	ldw	r3,-4(fp)
  81441c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  814420:	e0bffe17 	ldw	r2,-8(fp)
  814424:	10000526 	beq	r2,zero,81443c <alt_iic_isr_register+0xb4>
  814428:	e0bff817 	ldw	r2,-32(fp)
  81442c:	100b883a 	mov	r5,r2
  814430:	e13ffc17 	ldw	r4,-16(fp)
  814434:	08142280 	call	814228 <alt_ic_irq_enable>
  814438:	00000406 	br	81444c <alt_iic_isr_register+0xc4>
  81443c:	e0bff817 	ldw	r2,-32(fp)
  814440:	100b883a 	mov	r5,r2
  814444:	e13ffc17 	ldw	r4,-16(fp)
  814448:	08142b00 	call	8142b0 <alt_ic_irq_disable>
  81444c:	e0bff715 	stw	r2,-36(fp)
  814450:	e0bffa17 	ldw	r2,-24(fp)
  814454:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814458:	e0bff917 	ldw	r2,-28(fp)
  81445c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  814460:	e0bff717 	ldw	r2,-36(fp)
}
  814464:	e037883a 	mov	sp,fp
  814468:	dfc00117 	ldw	ra,4(sp)
  81446c:	df000017 	ldw	fp,0(sp)
  814470:	dec00204 	addi	sp,sp,8
  814474:	f800283a 	ret

00814478 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  814478:	defff904 	addi	sp,sp,-28
  81447c:	dfc00615 	stw	ra,24(sp)
  814480:	df000515 	stw	fp,20(sp)
  814484:	df000504 	addi	fp,sp,20
  814488:	e13ffc15 	stw	r4,-16(fp)
  81448c:	e17ffd15 	stw	r5,-12(fp)
  814490:	e1bffe15 	stw	r6,-8(fp)
  814494:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  814498:	e1bfff17 	ldw	r6,-4(fp)
  81449c:	e17ffe17 	ldw	r5,-8(fp)
  8144a0:	e13ffd17 	ldw	r4,-12(fp)
  8144a4:	08146b80 	call	8146b8 <open>
  8144a8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8144ac:	e0bffb17 	ldw	r2,-20(fp)
  8144b0:	10001c16 	blt	r2,zero,814524 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  8144b4:	00802074 	movhi	r2,129
  8144b8:	1097ca04 	addi	r2,r2,24360
  8144bc:	e0fffb17 	ldw	r3,-20(fp)
  8144c0:	18c00324 	muli	r3,r3,12
  8144c4:	10c5883a 	add	r2,r2,r3
  8144c8:	10c00017 	ldw	r3,0(r2)
  8144cc:	e0bffc17 	ldw	r2,-16(fp)
  8144d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8144d4:	00802074 	movhi	r2,129
  8144d8:	1097ca04 	addi	r2,r2,24360
  8144dc:	e0fffb17 	ldw	r3,-20(fp)
  8144e0:	18c00324 	muli	r3,r3,12
  8144e4:	10c5883a 	add	r2,r2,r3
  8144e8:	10800104 	addi	r2,r2,4
  8144ec:	10c00017 	ldw	r3,0(r2)
  8144f0:	e0bffc17 	ldw	r2,-16(fp)
  8144f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8144f8:	00802074 	movhi	r2,129
  8144fc:	1097ca04 	addi	r2,r2,24360
  814500:	e0fffb17 	ldw	r3,-20(fp)
  814504:	18c00324 	muli	r3,r3,12
  814508:	10c5883a 	add	r2,r2,r3
  81450c:	10800204 	addi	r2,r2,8
  814510:	10c00017 	ldw	r3,0(r2)
  814514:	e0bffc17 	ldw	r2,-16(fp)
  814518:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81451c:	e13ffb17 	ldw	r4,-20(fp)
  814520:	08117bc0 	call	8117bc <alt_release_fd>
  }
} 
  814524:	0001883a 	nop
  814528:	e037883a 	mov	sp,fp
  81452c:	dfc00117 	ldw	ra,4(sp)
  814530:	df000017 	ldw	fp,0(sp)
  814534:	dec00204 	addi	sp,sp,8
  814538:	f800283a 	ret

0081453c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81453c:	defffb04 	addi	sp,sp,-20
  814540:	dfc00415 	stw	ra,16(sp)
  814544:	df000315 	stw	fp,12(sp)
  814548:	df000304 	addi	fp,sp,12
  81454c:	e13ffd15 	stw	r4,-12(fp)
  814550:	e17ffe15 	stw	r5,-8(fp)
  814554:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  814558:	01c07fc4 	movi	r7,511
  81455c:	01800044 	movi	r6,1
  814560:	e17ffd17 	ldw	r5,-12(fp)
  814564:	01002074 	movhi	r4,129
  814568:	2117cd04 	addi	r4,r4,24372
  81456c:	08144780 	call	814478 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  814570:	01c07fc4 	movi	r7,511
  814574:	000d883a 	mov	r6,zero
  814578:	e17ffe17 	ldw	r5,-8(fp)
  81457c:	01002074 	movhi	r4,129
  814580:	2117ca04 	addi	r4,r4,24360
  814584:	08144780 	call	814478 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  814588:	01c07fc4 	movi	r7,511
  81458c:	01800044 	movi	r6,1
  814590:	e17fff17 	ldw	r5,-4(fp)
  814594:	01002074 	movhi	r4,129
  814598:	2117d004 	addi	r4,r4,24384
  81459c:	08144780 	call	814478 <alt_open_fd>
}  
  8145a0:	0001883a 	nop
  8145a4:	e037883a 	mov	sp,fp
  8145a8:	dfc00117 	ldw	ra,4(sp)
  8145ac:	df000017 	ldw	fp,0(sp)
  8145b0:	dec00204 	addi	sp,sp,8
  8145b4:	f800283a 	ret

008145b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8145b8:	defffe04 	addi	sp,sp,-8
  8145bc:	dfc00115 	stw	ra,4(sp)
  8145c0:	df000015 	stw	fp,0(sp)
  8145c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8145c8:	d0a00b17 	ldw	r2,-32724(gp)
  8145cc:	10000326 	beq	r2,zero,8145dc <alt_get_errno+0x24>
  8145d0:	d0a00b17 	ldw	r2,-32724(gp)
  8145d4:	103ee83a 	callr	r2
  8145d8:	00000106 	br	8145e0 <alt_get_errno+0x28>
  8145dc:	d0a74e04 	addi	r2,gp,-25288
}
  8145e0:	e037883a 	mov	sp,fp
  8145e4:	dfc00117 	ldw	ra,4(sp)
  8145e8:	df000017 	ldw	fp,0(sp)
  8145ec:	dec00204 	addi	sp,sp,8
  8145f0:	f800283a 	ret

008145f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8145f4:	defffd04 	addi	sp,sp,-12
  8145f8:	df000215 	stw	fp,8(sp)
  8145fc:	df000204 	addi	fp,sp,8
  814600:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  814604:	e0bfff17 	ldw	r2,-4(fp)
  814608:	10800217 	ldw	r2,8(r2)
  81460c:	10d00034 	orhi	r3,r2,16384
  814610:	e0bfff17 	ldw	r2,-4(fp)
  814614:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  814618:	e03ffe15 	stw	zero,-8(fp)
  81461c:	00001d06 	br	814694 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  814620:	00802074 	movhi	r2,129
  814624:	1097ca04 	addi	r2,r2,24360
  814628:	e0fffe17 	ldw	r3,-8(fp)
  81462c:	18c00324 	muli	r3,r3,12
  814630:	10c5883a 	add	r2,r2,r3
  814634:	10c00017 	ldw	r3,0(r2)
  814638:	e0bfff17 	ldw	r2,-4(fp)
  81463c:	10800017 	ldw	r2,0(r2)
  814640:	1880111e 	bne	r3,r2,814688 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  814644:	00802074 	movhi	r2,129
  814648:	1097ca04 	addi	r2,r2,24360
  81464c:	e0fffe17 	ldw	r3,-8(fp)
  814650:	18c00324 	muli	r3,r3,12
  814654:	10c5883a 	add	r2,r2,r3
  814658:	10800204 	addi	r2,r2,8
  81465c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  814660:	1000090e 	bge	r2,zero,814688 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  814664:	e0bffe17 	ldw	r2,-8(fp)
  814668:	10c00324 	muli	r3,r2,12
  81466c:	00802074 	movhi	r2,129
  814670:	1097ca04 	addi	r2,r2,24360
  814674:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  814678:	e0bfff17 	ldw	r2,-4(fp)
  81467c:	18800226 	beq	r3,r2,814688 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  814680:	00bffcc4 	movi	r2,-13
  814684:	00000806 	br	8146a8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  814688:	e0bffe17 	ldw	r2,-8(fp)
  81468c:	10800044 	addi	r2,r2,1
  814690:	e0bffe15 	stw	r2,-8(fp)
  814694:	d0a00a17 	ldw	r2,-32728(gp)
  814698:	1007883a 	mov	r3,r2
  81469c:	e0bffe17 	ldw	r2,-8(fp)
  8146a0:	18bfdf2e 	bgeu	r3,r2,814620 <__alt_mem_onchip_mem+0xff80c620>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8146a4:	0005883a 	mov	r2,zero
}
  8146a8:	e037883a 	mov	sp,fp
  8146ac:	df000017 	ldw	fp,0(sp)
  8146b0:	dec00104 	addi	sp,sp,4
  8146b4:	f800283a 	ret

008146b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8146b8:	defff604 	addi	sp,sp,-40
  8146bc:	dfc00915 	stw	ra,36(sp)
  8146c0:	df000815 	stw	fp,32(sp)
  8146c4:	df000804 	addi	fp,sp,32
  8146c8:	e13ffd15 	stw	r4,-12(fp)
  8146cc:	e17ffe15 	stw	r5,-8(fp)
  8146d0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8146d4:	00bfffc4 	movi	r2,-1
  8146d8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  8146dc:	00bffb44 	movi	r2,-19
  8146e0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8146e4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8146e8:	d1600804 	addi	r5,gp,-32736
  8146ec:	e13ffd17 	ldw	r4,-12(fp)
  8146f0:	08149b80 	call	8149b8 <alt_find_dev>
  8146f4:	e0bff815 	stw	r2,-32(fp)
  8146f8:	e0bff817 	ldw	r2,-32(fp)
  8146fc:	1000051e 	bne	r2,zero,814714 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  814700:	e13ffd17 	ldw	r4,-12(fp)
  814704:	0814a480 	call	814a48 <alt_find_file>
  814708:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  81470c:	00800044 	movi	r2,1
  814710:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  814714:	e0bff817 	ldw	r2,-32(fp)
  814718:	10002926 	beq	r2,zero,8147c0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81471c:	e13ff817 	ldw	r4,-32(fp)
  814720:	0814b500 	call	814b50 <alt_get_fd>
  814724:	e0bff915 	stw	r2,-28(fp)
  814728:	e0bff917 	ldw	r2,-28(fp)
  81472c:	1000030e 	bge	r2,zero,81473c <open+0x84>
    {
      status = index;
  814730:	e0bff917 	ldw	r2,-28(fp)
  814734:	e0bffa15 	stw	r2,-24(fp)
  814738:	00002306 	br	8147c8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  81473c:	e0bff917 	ldw	r2,-28(fp)
  814740:	10c00324 	muli	r3,r2,12
  814744:	00802074 	movhi	r2,129
  814748:	1097ca04 	addi	r2,r2,24360
  81474c:	1885883a 	add	r2,r3,r2
  814750:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  814754:	e0fffe17 	ldw	r3,-8(fp)
  814758:	00900034 	movhi	r2,16384
  81475c:	10bfffc4 	addi	r2,r2,-1
  814760:	1886703a 	and	r3,r3,r2
  814764:	e0bffc17 	ldw	r2,-16(fp)
  814768:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81476c:	e0bffb17 	ldw	r2,-20(fp)
  814770:	1000051e 	bne	r2,zero,814788 <open+0xd0>
  814774:	e13ffc17 	ldw	r4,-16(fp)
  814778:	08145f40 	call	8145f4 <alt_file_locked>
  81477c:	e0bffa15 	stw	r2,-24(fp)
  814780:	e0bffa17 	ldw	r2,-24(fp)
  814784:	10001016 	blt	r2,zero,8147c8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  814788:	e0bff817 	ldw	r2,-32(fp)
  81478c:	10800317 	ldw	r2,12(r2)
  814790:	10000826 	beq	r2,zero,8147b4 <open+0xfc>
  814794:	e0bff817 	ldw	r2,-32(fp)
  814798:	10800317 	ldw	r2,12(r2)
  81479c:	e1ffff17 	ldw	r7,-4(fp)
  8147a0:	e1bffe17 	ldw	r6,-8(fp)
  8147a4:	e17ffd17 	ldw	r5,-12(fp)
  8147a8:	e13ffc17 	ldw	r4,-16(fp)
  8147ac:	103ee83a 	callr	r2
  8147b0:	00000106 	br	8147b8 <open+0x100>
  8147b4:	0005883a 	mov	r2,zero
  8147b8:	e0bffa15 	stw	r2,-24(fp)
  8147bc:	00000206 	br	8147c8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8147c0:	00bffb44 	movi	r2,-19
  8147c4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8147c8:	e0bffa17 	ldw	r2,-24(fp)
  8147cc:	1000090e 	bge	r2,zero,8147f4 <open+0x13c>
  {
    alt_release_fd (index);  
  8147d0:	e13ff917 	ldw	r4,-28(fp)
  8147d4:	08117bc0 	call	8117bc <alt_release_fd>
    ALT_ERRNO = -status;
  8147d8:	08145b80 	call	8145b8 <alt_get_errno>
  8147dc:	1007883a 	mov	r3,r2
  8147e0:	e0bffa17 	ldw	r2,-24(fp)
  8147e4:	0085c83a 	sub	r2,zero,r2
  8147e8:	18800015 	stw	r2,0(r3)
    return -1;
  8147ec:	00bfffc4 	movi	r2,-1
  8147f0:	00000106 	br	8147f8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  8147f4:	e0bff917 	ldw	r2,-28(fp)
}
  8147f8:	e037883a 	mov	sp,fp
  8147fc:	dfc00117 	ldw	ra,4(sp)
  814800:	df000017 	ldw	fp,0(sp)
  814804:	dec00204 	addi	sp,sp,8
  814808:	f800283a 	ret

0081480c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  81480c:	defffd04 	addi	sp,sp,-12
  814810:	dfc00215 	stw	ra,8(sp)
  814814:	df000115 	stw	fp,4(sp)
  814818:	df000104 	addi	fp,sp,4
  81481c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  814820:	e13fff17 	ldw	r4,-4(fp)
  814824:	08148600 	call	814860 <alt_busy_sleep>
}
  814828:	e037883a 	mov	sp,fp
  81482c:	dfc00117 	ldw	ra,4(sp)
  814830:	df000017 	ldw	fp,0(sp)
  814834:	dec00204 	addi	sp,sp,8
  814838:	f800283a 	ret

0081483c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  81483c:	deffff04 	addi	sp,sp,-4
  814840:	df000015 	stw	fp,0(sp)
  814844:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  814848:	000170fa 	wrctl	ienable,zero
}
  81484c:	0001883a 	nop
  814850:	e037883a 	mov	sp,fp
  814854:	df000017 	ldw	fp,0(sp)
  814858:	dec00104 	addi	sp,sp,4
  81485c:	f800283a 	ret

00814860 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  814860:	defffa04 	addi	sp,sp,-24
  814864:	dfc00515 	stw	ra,20(sp)
  814868:	df000415 	stw	fp,16(sp)
  81486c:	df000404 	addi	fp,sp,16
  814870:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  814874:	008000c4 	movi	r2,3
  814878:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  81487c:	e0fffd17 	ldw	r3,-12(fp)
  814880:	008003f4 	movhi	r2,15
  814884:	10909004 	addi	r2,r2,16960
  814888:	1885383a 	mul	r2,r3,r2
  81488c:	100b883a 	mov	r5,r2
  814890:	0100bef4 	movhi	r4,763
  814894:	213c2004 	addi	r4,r4,-3968
  814898:	081028c0 	call	81028c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  81489c:	100b883a 	mov	r5,r2
  8148a0:	01200034 	movhi	r4,32768
  8148a4:	213fffc4 	addi	r4,r4,-1
  8148a8:	081028c0 	call	81028c <__udivsi3>
  8148ac:	100b883a 	mov	r5,r2
  8148b0:	e13fff17 	ldw	r4,-4(fp)
  8148b4:	081028c0 	call	81028c <__udivsi3>
  8148b8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8148bc:	e0bffe17 	ldw	r2,-8(fp)
  8148c0:	10002a26 	beq	r2,zero,81496c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8148c4:	e03ffc15 	stw	zero,-16(fp)
  8148c8:	00001706 	br	814928 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8148cc:	00a00034 	movhi	r2,32768
  8148d0:	10bfffc4 	addi	r2,r2,-1
  8148d4:	10bfffc4 	addi	r2,r2,-1
  8148d8:	103ffe1e 	bne	r2,zero,8148d4 <__alt_mem_onchip_mem+0xff80c8d4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8148dc:	e0fffd17 	ldw	r3,-12(fp)
  8148e0:	008003f4 	movhi	r2,15
  8148e4:	10909004 	addi	r2,r2,16960
  8148e8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8148ec:	100b883a 	mov	r5,r2
  8148f0:	0100bef4 	movhi	r4,763
  8148f4:	213c2004 	addi	r4,r4,-3968
  8148f8:	081028c0 	call	81028c <__udivsi3>
  8148fc:	100b883a 	mov	r5,r2
  814900:	01200034 	movhi	r4,32768
  814904:	213fffc4 	addi	r4,r4,-1
  814908:	081028c0 	call	81028c <__udivsi3>
  81490c:	1007883a 	mov	r3,r2
  814910:	e0bfff17 	ldw	r2,-4(fp)
  814914:	10c5c83a 	sub	r2,r2,r3
  814918:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  81491c:	e0bffc17 	ldw	r2,-16(fp)
  814920:	10800044 	addi	r2,r2,1
  814924:	e0bffc15 	stw	r2,-16(fp)
  814928:	e0fffc17 	ldw	r3,-16(fp)
  81492c:	e0bffe17 	ldw	r2,-8(fp)
  814930:	18bfe616 	blt	r3,r2,8148cc <__alt_mem_onchip_mem+0xff80c8cc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  814934:	e0fffd17 	ldw	r3,-12(fp)
  814938:	008003f4 	movhi	r2,15
  81493c:	10909004 	addi	r2,r2,16960
  814940:	1885383a 	mul	r2,r3,r2
  814944:	100b883a 	mov	r5,r2
  814948:	0100bef4 	movhi	r4,763
  81494c:	213c2004 	addi	r4,r4,-3968
  814950:	081028c0 	call	81028c <__udivsi3>
  814954:	1007883a 	mov	r3,r2
  814958:	e0bfff17 	ldw	r2,-4(fp)
  81495c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  814960:	10bfffc4 	addi	r2,r2,-1
  814964:	103ffe1e 	bne	r2,zero,814960 <__alt_mem_onchip_mem+0xff80c960>
  814968:	00000d06 	br	8149a0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  81496c:	e0fffd17 	ldw	r3,-12(fp)
  814970:	008003f4 	movhi	r2,15
  814974:	10909004 	addi	r2,r2,16960
  814978:	1885383a 	mul	r2,r3,r2
  81497c:	100b883a 	mov	r5,r2
  814980:	0100bef4 	movhi	r4,763
  814984:	213c2004 	addi	r4,r4,-3968
  814988:	081028c0 	call	81028c <__udivsi3>
  81498c:	1007883a 	mov	r3,r2
  814990:	e0bfff17 	ldw	r2,-4(fp)
  814994:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  814998:	10bfffc4 	addi	r2,r2,-1
  81499c:	00bffe16 	blt	zero,r2,814998 <__alt_mem_onchip_mem+0xff80c998>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8149a0:	0005883a 	mov	r2,zero
}
  8149a4:	e037883a 	mov	sp,fp
  8149a8:	dfc00117 	ldw	ra,4(sp)
  8149ac:	df000017 	ldw	fp,0(sp)
  8149b0:	dec00204 	addi	sp,sp,8
  8149b4:	f800283a 	ret

008149b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8149b8:	defffa04 	addi	sp,sp,-24
  8149bc:	dfc00515 	stw	ra,20(sp)
  8149c0:	df000415 	stw	fp,16(sp)
  8149c4:	df000404 	addi	fp,sp,16
  8149c8:	e13ffe15 	stw	r4,-8(fp)
  8149cc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8149d0:	e0bfff17 	ldw	r2,-4(fp)
  8149d4:	10800017 	ldw	r2,0(r2)
  8149d8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8149dc:	e13ffe17 	ldw	r4,-8(fp)
  8149e0:	08061d00 	call	8061d0 <strlen>
  8149e4:	10800044 	addi	r2,r2,1
  8149e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8149ec:	00000d06 	br	814a24 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8149f0:	e0bffc17 	ldw	r2,-16(fp)
  8149f4:	10800217 	ldw	r2,8(r2)
  8149f8:	e0fffd17 	ldw	r3,-12(fp)
  8149fc:	180d883a 	mov	r6,r3
  814a00:	e17ffe17 	ldw	r5,-8(fp)
  814a04:	1009883a 	mov	r4,r2
  814a08:	0814d6c0 	call	814d6c <memcmp>
  814a0c:	1000021e 	bne	r2,zero,814a18 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  814a10:	e0bffc17 	ldw	r2,-16(fp)
  814a14:	00000706 	br	814a34 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  814a18:	e0bffc17 	ldw	r2,-16(fp)
  814a1c:	10800017 	ldw	r2,0(r2)
  814a20:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  814a24:	e0fffc17 	ldw	r3,-16(fp)
  814a28:	e0bfff17 	ldw	r2,-4(fp)
  814a2c:	18bff01e 	bne	r3,r2,8149f0 <__alt_mem_onchip_mem+0xff80c9f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  814a30:	0005883a 	mov	r2,zero
}
  814a34:	e037883a 	mov	sp,fp
  814a38:	dfc00117 	ldw	ra,4(sp)
  814a3c:	df000017 	ldw	fp,0(sp)
  814a40:	dec00204 	addi	sp,sp,8
  814a44:	f800283a 	ret

00814a48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  814a48:	defffb04 	addi	sp,sp,-20
  814a4c:	dfc00415 	stw	ra,16(sp)
  814a50:	df000315 	stw	fp,12(sp)
  814a54:	df000304 	addi	fp,sp,12
  814a58:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  814a5c:	d0a00617 	ldw	r2,-32744(gp)
  814a60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  814a64:	00003106 	br	814b2c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  814a68:	e0bffd17 	ldw	r2,-12(fp)
  814a6c:	10800217 	ldw	r2,8(r2)
  814a70:	1009883a 	mov	r4,r2
  814a74:	08061d00 	call	8061d0 <strlen>
  814a78:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  814a7c:	e0bffd17 	ldw	r2,-12(fp)
  814a80:	10c00217 	ldw	r3,8(r2)
  814a84:	e0bffe17 	ldw	r2,-8(fp)
  814a88:	10bfffc4 	addi	r2,r2,-1
  814a8c:	1885883a 	add	r2,r3,r2
  814a90:	10800003 	ldbu	r2,0(r2)
  814a94:	10803fcc 	andi	r2,r2,255
  814a98:	1080201c 	xori	r2,r2,128
  814a9c:	10bfe004 	addi	r2,r2,-128
  814aa0:	10800bd8 	cmpnei	r2,r2,47
  814aa4:	1000031e 	bne	r2,zero,814ab4 <alt_find_file+0x6c>
    {
      len -= 1;
  814aa8:	e0bffe17 	ldw	r2,-8(fp)
  814aac:	10bfffc4 	addi	r2,r2,-1
  814ab0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  814ab4:	e0bffe17 	ldw	r2,-8(fp)
  814ab8:	e0ffff17 	ldw	r3,-4(fp)
  814abc:	1885883a 	add	r2,r3,r2
  814ac0:	10800003 	ldbu	r2,0(r2)
  814ac4:	10803fcc 	andi	r2,r2,255
  814ac8:	1080201c 	xori	r2,r2,128
  814acc:	10bfe004 	addi	r2,r2,-128
  814ad0:	10800be0 	cmpeqi	r2,r2,47
  814ad4:	1000081e 	bne	r2,zero,814af8 <alt_find_file+0xb0>
  814ad8:	e0bffe17 	ldw	r2,-8(fp)
  814adc:	e0ffff17 	ldw	r3,-4(fp)
  814ae0:	1885883a 	add	r2,r3,r2
  814ae4:	10800003 	ldbu	r2,0(r2)
  814ae8:	10803fcc 	andi	r2,r2,255
  814aec:	1080201c 	xori	r2,r2,128
  814af0:	10bfe004 	addi	r2,r2,-128
  814af4:	10000a1e 	bne	r2,zero,814b20 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  814af8:	e0bffd17 	ldw	r2,-12(fp)
  814afc:	10800217 	ldw	r2,8(r2)
  814b00:	e0fffe17 	ldw	r3,-8(fp)
  814b04:	180d883a 	mov	r6,r3
  814b08:	e17fff17 	ldw	r5,-4(fp)
  814b0c:	1009883a 	mov	r4,r2
  814b10:	0814d6c0 	call	814d6c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  814b14:	1000021e 	bne	r2,zero,814b20 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  814b18:	e0bffd17 	ldw	r2,-12(fp)
  814b1c:	00000706 	br	814b3c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  814b20:	e0bffd17 	ldw	r2,-12(fp)
  814b24:	10800017 	ldw	r2,0(r2)
  814b28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  814b2c:	e0fffd17 	ldw	r3,-12(fp)
  814b30:	d0a00604 	addi	r2,gp,-32744
  814b34:	18bfcc1e 	bne	r3,r2,814a68 <__alt_mem_onchip_mem+0xff80ca68>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  814b38:	0005883a 	mov	r2,zero
}
  814b3c:	e037883a 	mov	sp,fp
  814b40:	dfc00117 	ldw	ra,4(sp)
  814b44:	df000017 	ldw	fp,0(sp)
  814b48:	dec00204 	addi	sp,sp,8
  814b4c:	f800283a 	ret

00814b50 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  814b50:	defffc04 	addi	sp,sp,-16
  814b54:	df000315 	stw	fp,12(sp)
  814b58:	df000304 	addi	fp,sp,12
  814b5c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  814b60:	00bffa04 	movi	r2,-24
  814b64:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814b68:	e03ffd15 	stw	zero,-12(fp)
  814b6c:	00001906 	br	814bd4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  814b70:	00802074 	movhi	r2,129
  814b74:	1097ca04 	addi	r2,r2,24360
  814b78:	e0fffd17 	ldw	r3,-12(fp)
  814b7c:	18c00324 	muli	r3,r3,12
  814b80:	10c5883a 	add	r2,r2,r3
  814b84:	10800017 	ldw	r2,0(r2)
  814b88:	10000f1e 	bne	r2,zero,814bc8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  814b8c:	00802074 	movhi	r2,129
  814b90:	1097ca04 	addi	r2,r2,24360
  814b94:	e0fffd17 	ldw	r3,-12(fp)
  814b98:	18c00324 	muli	r3,r3,12
  814b9c:	10c5883a 	add	r2,r2,r3
  814ba0:	e0ffff17 	ldw	r3,-4(fp)
  814ba4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  814ba8:	d0e00a17 	ldw	r3,-32728(gp)
  814bac:	e0bffd17 	ldw	r2,-12(fp)
  814bb0:	1880020e 	bge	r3,r2,814bbc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  814bb4:	e0bffd17 	ldw	r2,-12(fp)
  814bb8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  814bbc:	e0bffd17 	ldw	r2,-12(fp)
  814bc0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  814bc4:	00000606 	br	814be0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814bc8:	e0bffd17 	ldw	r2,-12(fp)
  814bcc:	10800044 	addi	r2,r2,1
  814bd0:	e0bffd15 	stw	r2,-12(fp)
  814bd4:	e0bffd17 	ldw	r2,-12(fp)
  814bd8:	10800810 	cmplti	r2,r2,32
  814bdc:	103fe41e 	bne	r2,zero,814b70 <__alt_mem_onchip_mem+0xff80cb70>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  814be0:	e0bffe17 	ldw	r2,-8(fp)
}
  814be4:	e037883a 	mov	sp,fp
  814be8:	df000017 	ldw	fp,0(sp)
  814bec:	dec00104 	addi	sp,sp,4
  814bf0:	f800283a 	ret

00814bf4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  814bf4:	defffb04 	addi	sp,sp,-20
  814bf8:	df000415 	stw	fp,16(sp)
  814bfc:	df000404 	addi	fp,sp,16
  814c00:	e13ffe15 	stw	r4,-8(fp)
  814c04:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  814c08:	e0bfff17 	ldw	r2,-4(fp)
  814c0c:	10840070 	cmpltui	r2,r2,4097
  814c10:	1000021e 	bne	r2,zero,814c1c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  814c14:	00840004 	movi	r2,4096
  814c18:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  814c1c:	e0fffe17 	ldw	r3,-8(fp)
  814c20:	e0bfff17 	ldw	r2,-4(fp)
  814c24:	1885883a 	add	r2,r3,r2
  814c28:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814c2c:	e0bffe17 	ldw	r2,-8(fp)
  814c30:	e0bffc15 	stw	r2,-16(fp)
  814c34:	00000506 	br	814c4c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  814c38:	e0bffc17 	ldw	r2,-16(fp)
  814c3c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814c40:	e0bffc17 	ldw	r2,-16(fp)
  814c44:	10800804 	addi	r2,r2,32
  814c48:	e0bffc15 	stw	r2,-16(fp)
  814c4c:	e0fffc17 	ldw	r3,-16(fp)
  814c50:	e0bffd17 	ldw	r2,-12(fp)
  814c54:	18bff836 	bltu	r3,r2,814c38 <__alt_mem_onchip_mem+0xff80cc38>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  814c58:	e0bffe17 	ldw	r2,-8(fp)
  814c5c:	108007cc 	andi	r2,r2,31
  814c60:	10000226 	beq	r2,zero,814c6c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  814c64:	e0bffc17 	ldw	r2,-16(fp)
  814c68:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  814c6c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  814c70:	0001883a 	nop
  814c74:	e037883a 	mov	sp,fp
  814c78:	df000017 	ldw	fp,0(sp)
  814c7c:	dec00104 	addi	sp,sp,4
  814c80:	f800283a 	ret

00814c84 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  814c84:	defffe04 	addi	sp,sp,-8
  814c88:	df000115 	stw	fp,4(sp)
  814c8c:	df000104 	addi	fp,sp,4
  814c90:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  814c94:	e0bfff17 	ldw	r2,-4(fp)
  814c98:	10bffe84 	addi	r2,r2,-6
  814c9c:	10c00428 	cmpgeui	r3,r2,16
  814ca0:	18001a1e 	bne	r3,zero,814d0c <alt_exception_cause_generated_bad_addr+0x88>
  814ca4:	100690ba 	slli	r3,r2,2
  814ca8:	00802074 	movhi	r2,129
  814cac:	10932f04 	addi	r2,r2,19644
  814cb0:	1885883a 	add	r2,r3,r2
  814cb4:	10800017 	ldw	r2,0(r2)
  814cb8:	1000683a 	jmp	r2
  814cbc:	00814cfc 	xorhi	r2,zero,1331
  814cc0:	00814cfc 	xorhi	r2,zero,1331
  814cc4:	00814d0c 	andi	r2,zero,1332
  814cc8:	00814d0c 	andi	r2,zero,1332
  814ccc:	00814d0c 	andi	r2,zero,1332
  814cd0:	00814cfc 	xorhi	r2,zero,1331
  814cd4:	00814d04 	movi	r2,1332
  814cd8:	00814d0c 	andi	r2,zero,1332
  814cdc:	00814cfc 	xorhi	r2,zero,1331
  814ce0:	00814cfc 	xorhi	r2,zero,1331
  814ce4:	00814d0c 	andi	r2,zero,1332
  814ce8:	00814cfc 	xorhi	r2,zero,1331
  814cec:	00814d04 	movi	r2,1332
  814cf0:	00814d0c 	andi	r2,zero,1332
  814cf4:	00814d0c 	andi	r2,zero,1332
  814cf8:	00814cfc 	xorhi	r2,zero,1331
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  814cfc:	00800044 	movi	r2,1
  814d00:	00000306 	br	814d10 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  814d04:	0005883a 	mov	r2,zero
  814d08:	00000106 	br	814d10 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  814d0c:	0005883a 	mov	r2,zero
  }
}
  814d10:	e037883a 	mov	sp,fp
  814d14:	df000017 	ldw	fp,0(sp)
  814d18:	dec00104 	addi	sp,sp,4
  814d1c:	f800283a 	ret

00814d20 <atexit>:
  814d20:	200b883a 	mov	r5,r4
  814d24:	000f883a 	mov	r7,zero
  814d28:	000d883a 	mov	r6,zero
  814d2c:	0009883a 	mov	r4,zero
  814d30:	0814de81 	jmpi	814de8 <__register_exitproc>

00814d34 <exit>:
  814d34:	defffe04 	addi	sp,sp,-8
  814d38:	000b883a 	mov	r5,zero
  814d3c:	dc000015 	stw	r16,0(sp)
  814d40:	dfc00115 	stw	ra,4(sp)
  814d44:	2021883a 	mov	r16,r4
  814d48:	0814f000 	call	814f00 <__call_exitprocs>
  814d4c:	00802074 	movhi	r2,129
  814d50:	109cbb04 	addi	r2,r2,29420
  814d54:	11000017 	ldw	r4,0(r2)
  814d58:	20800f17 	ldw	r2,60(r4)
  814d5c:	10000126 	beq	r2,zero,814d64 <exit+0x30>
  814d60:	103ee83a 	callr	r2
  814d64:	8009883a 	mov	r4,r16
  814d68:	08150800 	call	815080 <_exit>

00814d6c <memcmp>:
  814d6c:	01c000c4 	movi	r7,3
  814d70:	3980192e 	bgeu	r7,r6,814dd8 <memcmp+0x6c>
  814d74:	2144b03a 	or	r2,r4,r5
  814d78:	11c4703a 	and	r2,r2,r7
  814d7c:	10000f26 	beq	r2,zero,814dbc <memcmp+0x50>
  814d80:	20800003 	ldbu	r2,0(r4)
  814d84:	28c00003 	ldbu	r3,0(r5)
  814d88:	10c0151e 	bne	r2,r3,814de0 <memcmp+0x74>
  814d8c:	31bfff84 	addi	r6,r6,-2
  814d90:	01ffffc4 	movi	r7,-1
  814d94:	00000406 	br	814da8 <memcmp+0x3c>
  814d98:	20800003 	ldbu	r2,0(r4)
  814d9c:	28c00003 	ldbu	r3,0(r5)
  814da0:	31bfffc4 	addi	r6,r6,-1
  814da4:	10c00e1e 	bne	r2,r3,814de0 <memcmp+0x74>
  814da8:	21000044 	addi	r4,r4,1
  814dac:	29400044 	addi	r5,r5,1
  814db0:	31fff91e 	bne	r6,r7,814d98 <__alt_mem_onchip_mem+0xff80cd98>
  814db4:	0005883a 	mov	r2,zero
  814db8:	f800283a 	ret
  814dbc:	20c00017 	ldw	r3,0(r4)
  814dc0:	28800017 	ldw	r2,0(r5)
  814dc4:	18bfee1e 	bne	r3,r2,814d80 <__alt_mem_onchip_mem+0xff80cd80>
  814dc8:	31bfff04 	addi	r6,r6,-4
  814dcc:	21000104 	addi	r4,r4,4
  814dd0:	29400104 	addi	r5,r5,4
  814dd4:	39bff936 	bltu	r7,r6,814dbc <__alt_mem_onchip_mem+0xff80cdbc>
  814dd8:	303fe91e 	bne	r6,zero,814d80 <__alt_mem_onchip_mem+0xff80cd80>
  814ddc:	003ff506 	br	814db4 <__alt_mem_onchip_mem+0xff80cdb4>
  814de0:	10c5c83a 	sub	r2,r2,r3
  814de4:	f800283a 	ret

00814de8 <__register_exitproc>:
  814de8:	defffa04 	addi	sp,sp,-24
  814dec:	dc000315 	stw	r16,12(sp)
  814df0:	04002074 	movhi	r16,129
  814df4:	841cbb04 	addi	r16,r16,29420
  814df8:	80c00017 	ldw	r3,0(r16)
  814dfc:	dc400415 	stw	r17,16(sp)
  814e00:	dfc00515 	stw	ra,20(sp)
  814e04:	18805217 	ldw	r2,328(r3)
  814e08:	2023883a 	mov	r17,r4
  814e0c:	10003726 	beq	r2,zero,814eec <__register_exitproc+0x104>
  814e10:	10c00117 	ldw	r3,4(r2)
  814e14:	010007c4 	movi	r4,31
  814e18:	20c00e16 	blt	r4,r3,814e54 <__register_exitproc+0x6c>
  814e1c:	1a000044 	addi	r8,r3,1
  814e20:	8800221e 	bne	r17,zero,814eac <__register_exitproc+0xc4>
  814e24:	18c00084 	addi	r3,r3,2
  814e28:	18c7883a 	add	r3,r3,r3
  814e2c:	18c7883a 	add	r3,r3,r3
  814e30:	12000115 	stw	r8,4(r2)
  814e34:	10c7883a 	add	r3,r2,r3
  814e38:	19400015 	stw	r5,0(r3)
  814e3c:	0005883a 	mov	r2,zero
  814e40:	dfc00517 	ldw	ra,20(sp)
  814e44:	dc400417 	ldw	r17,16(sp)
  814e48:	dc000317 	ldw	r16,12(sp)
  814e4c:	dec00604 	addi	sp,sp,24
  814e50:	f800283a 	ret
  814e54:	00800034 	movhi	r2,0
  814e58:	10800004 	addi	r2,r2,0
  814e5c:	10002626 	beq	r2,zero,814ef8 <__register_exitproc+0x110>
  814e60:	01006404 	movi	r4,400
  814e64:	d9400015 	stw	r5,0(sp)
  814e68:	d9800115 	stw	r6,4(sp)
  814e6c:	d9c00215 	stw	r7,8(sp)
  814e70:	00000000 	call	0 <__reset-0x800000>
  814e74:	d9400017 	ldw	r5,0(sp)
  814e78:	d9800117 	ldw	r6,4(sp)
  814e7c:	d9c00217 	ldw	r7,8(sp)
  814e80:	10001d26 	beq	r2,zero,814ef8 <__register_exitproc+0x110>
  814e84:	81000017 	ldw	r4,0(r16)
  814e88:	10000115 	stw	zero,4(r2)
  814e8c:	02000044 	movi	r8,1
  814e90:	22405217 	ldw	r9,328(r4)
  814e94:	0007883a 	mov	r3,zero
  814e98:	12400015 	stw	r9,0(r2)
  814e9c:	20805215 	stw	r2,328(r4)
  814ea0:	10006215 	stw	zero,392(r2)
  814ea4:	10006315 	stw	zero,396(r2)
  814ea8:	883fde26 	beq	r17,zero,814e24 <__alt_mem_onchip_mem+0xff80ce24>
  814eac:	18c9883a 	add	r4,r3,r3
  814eb0:	2109883a 	add	r4,r4,r4
  814eb4:	1109883a 	add	r4,r2,r4
  814eb8:	21802215 	stw	r6,136(r4)
  814ebc:	01800044 	movi	r6,1
  814ec0:	12406217 	ldw	r9,392(r2)
  814ec4:	30cc983a 	sll	r6,r6,r3
  814ec8:	4992b03a 	or	r9,r9,r6
  814ecc:	12406215 	stw	r9,392(r2)
  814ed0:	21c04215 	stw	r7,264(r4)
  814ed4:	01000084 	movi	r4,2
  814ed8:	893fd21e 	bne	r17,r4,814e24 <__alt_mem_onchip_mem+0xff80ce24>
  814edc:	11006317 	ldw	r4,396(r2)
  814ee0:	218cb03a 	or	r6,r4,r6
  814ee4:	11806315 	stw	r6,396(r2)
  814ee8:	003fce06 	br	814e24 <__alt_mem_onchip_mem+0xff80ce24>
  814eec:	18805304 	addi	r2,r3,332
  814ef0:	18805215 	stw	r2,328(r3)
  814ef4:	003fc606 	br	814e10 <__alt_mem_onchip_mem+0xff80ce10>
  814ef8:	00bfffc4 	movi	r2,-1
  814efc:	003fd006 	br	814e40 <__alt_mem_onchip_mem+0xff80ce40>

00814f00 <__call_exitprocs>:
  814f00:	defff504 	addi	sp,sp,-44
  814f04:	df000915 	stw	fp,36(sp)
  814f08:	dd400615 	stw	r21,24(sp)
  814f0c:	dc800315 	stw	r18,12(sp)
  814f10:	dfc00a15 	stw	ra,40(sp)
  814f14:	ddc00815 	stw	r23,32(sp)
  814f18:	dd800715 	stw	r22,28(sp)
  814f1c:	dd000515 	stw	r20,20(sp)
  814f20:	dcc00415 	stw	r19,16(sp)
  814f24:	dc400215 	stw	r17,8(sp)
  814f28:	dc000115 	stw	r16,4(sp)
  814f2c:	d9000015 	stw	r4,0(sp)
  814f30:	2839883a 	mov	fp,r5
  814f34:	04800044 	movi	r18,1
  814f38:	057fffc4 	movi	r21,-1
  814f3c:	00802074 	movhi	r2,129
  814f40:	109cbb04 	addi	r2,r2,29420
  814f44:	12000017 	ldw	r8,0(r2)
  814f48:	45005217 	ldw	r20,328(r8)
  814f4c:	44c05204 	addi	r19,r8,328
  814f50:	a0001c26 	beq	r20,zero,814fc4 <__call_exitprocs+0xc4>
  814f54:	a0800117 	ldw	r2,4(r20)
  814f58:	15ffffc4 	addi	r23,r2,-1
  814f5c:	b8000d16 	blt	r23,zero,814f94 <__call_exitprocs+0x94>
  814f60:	14000044 	addi	r16,r2,1
  814f64:	8421883a 	add	r16,r16,r16
  814f68:	8421883a 	add	r16,r16,r16
  814f6c:	84402004 	addi	r17,r16,128
  814f70:	a463883a 	add	r17,r20,r17
  814f74:	a421883a 	add	r16,r20,r16
  814f78:	e0001e26 	beq	fp,zero,814ff4 <__call_exitprocs+0xf4>
  814f7c:	80804017 	ldw	r2,256(r16)
  814f80:	e0801c26 	beq	fp,r2,814ff4 <__call_exitprocs+0xf4>
  814f84:	bdffffc4 	addi	r23,r23,-1
  814f88:	843fff04 	addi	r16,r16,-4
  814f8c:	8c7fff04 	addi	r17,r17,-4
  814f90:	bd7ff91e 	bne	r23,r21,814f78 <__alt_mem_onchip_mem+0xff80cf78>
  814f94:	00800034 	movhi	r2,0
  814f98:	10800004 	addi	r2,r2,0
  814f9c:	10000926 	beq	r2,zero,814fc4 <__call_exitprocs+0xc4>
  814fa0:	a0800117 	ldw	r2,4(r20)
  814fa4:	1000301e 	bne	r2,zero,815068 <__call_exitprocs+0x168>
  814fa8:	a0800017 	ldw	r2,0(r20)
  814fac:	10003226 	beq	r2,zero,815078 <__call_exitprocs+0x178>
  814fb0:	a009883a 	mov	r4,r20
  814fb4:	98800015 	stw	r2,0(r19)
  814fb8:	00000000 	call	0 <__reset-0x800000>
  814fbc:	9d000017 	ldw	r20,0(r19)
  814fc0:	a03fe41e 	bne	r20,zero,814f54 <__alt_mem_onchip_mem+0xff80cf54>
  814fc4:	dfc00a17 	ldw	ra,40(sp)
  814fc8:	df000917 	ldw	fp,36(sp)
  814fcc:	ddc00817 	ldw	r23,32(sp)
  814fd0:	dd800717 	ldw	r22,28(sp)
  814fd4:	dd400617 	ldw	r21,24(sp)
  814fd8:	dd000517 	ldw	r20,20(sp)
  814fdc:	dcc00417 	ldw	r19,16(sp)
  814fe0:	dc800317 	ldw	r18,12(sp)
  814fe4:	dc400217 	ldw	r17,8(sp)
  814fe8:	dc000117 	ldw	r16,4(sp)
  814fec:	dec00b04 	addi	sp,sp,44
  814ff0:	f800283a 	ret
  814ff4:	a0800117 	ldw	r2,4(r20)
  814ff8:	80c00017 	ldw	r3,0(r16)
  814ffc:	10bfffc4 	addi	r2,r2,-1
  815000:	15c01426 	beq	r2,r23,815054 <__call_exitprocs+0x154>
  815004:	80000015 	stw	zero,0(r16)
  815008:	183fde26 	beq	r3,zero,814f84 <__alt_mem_onchip_mem+0xff80cf84>
  81500c:	95c8983a 	sll	r4,r18,r23
  815010:	a0806217 	ldw	r2,392(r20)
  815014:	a5800117 	ldw	r22,4(r20)
  815018:	2084703a 	and	r2,r4,r2
  81501c:	10000b26 	beq	r2,zero,81504c <__call_exitprocs+0x14c>
  815020:	a0806317 	ldw	r2,396(r20)
  815024:	2088703a 	and	r4,r4,r2
  815028:	20000c1e 	bne	r4,zero,81505c <__call_exitprocs+0x15c>
  81502c:	89400017 	ldw	r5,0(r17)
  815030:	d9000017 	ldw	r4,0(sp)
  815034:	183ee83a 	callr	r3
  815038:	a0800117 	ldw	r2,4(r20)
  81503c:	15bfbf1e 	bne	r2,r22,814f3c <__alt_mem_onchip_mem+0xff80cf3c>
  815040:	98800017 	ldw	r2,0(r19)
  815044:	153fcf26 	beq	r2,r20,814f84 <__alt_mem_onchip_mem+0xff80cf84>
  815048:	003fbc06 	br	814f3c <__alt_mem_onchip_mem+0xff80cf3c>
  81504c:	183ee83a 	callr	r3
  815050:	003ff906 	br	815038 <__alt_mem_onchip_mem+0xff80d038>
  815054:	a5c00115 	stw	r23,4(r20)
  815058:	003feb06 	br	815008 <__alt_mem_onchip_mem+0xff80d008>
  81505c:	89000017 	ldw	r4,0(r17)
  815060:	183ee83a 	callr	r3
  815064:	003ff406 	br	815038 <__alt_mem_onchip_mem+0xff80d038>
  815068:	a0800017 	ldw	r2,0(r20)
  81506c:	a027883a 	mov	r19,r20
  815070:	1029883a 	mov	r20,r2
  815074:	003fb606 	br	814f50 <__alt_mem_onchip_mem+0xff80cf50>
  815078:	0005883a 	mov	r2,zero
  81507c:	003ffb06 	br	81506c <__alt_mem_onchip_mem+0xff80d06c>

00815080 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  815080:	defffd04 	addi	sp,sp,-12
  815084:	df000215 	stw	fp,8(sp)
  815088:	df000204 	addi	fp,sp,8
  81508c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  815090:	0001883a 	nop
  815094:	e0bfff17 	ldw	r2,-4(fp)
  815098:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  81509c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8150a0:	10000226 	beq	r2,zero,8150ac <_exit+0x2c>
    ALT_SIM_FAIL();
  8150a4:	002af070 	cmpltui	zero,zero,43969
  8150a8:	00000106 	br	8150b0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8150ac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8150b0:	003fff06 	br	8150b0 <__alt_mem_onchip_mem+0xff80d0b0>
